
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	@ 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	@ 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	@ 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	@ 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	@ 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	@ 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	@ 0x228000
    8060:	ea003329 	b	14d0c <sysinit>

Disassembly of section .text:

00008068 <min>:
    8068:	e1510000 	cmp	r1, r0
    806c:	b1a00001 	movlt	r0, r1
    8070:	e12fff1e 	bx	lr

00008074 <max>:
    8074:	e1510000 	cmp	r1, r0
    8078:	a1a00001 	movge	r0, r1
    807c:	e12fff1e 	bx	lr

00008080 <declare(UIGlue*, float*, char const*, char const*)>:
    8080:	e12fff1e 	bx	lr

00008084 <openVerticalBox(UIGlue*, char*)>:
    8084:	e12fff1e 	bx	lr

00008088 <addVerticalBargraph(UIGlue*, char const*, float*, float, float)>:
    8088:	e12fff1e 	bx	lr

0000808c <addButton(UIGlue*, char const*, float*)>:
    808c:	e12fff1e 	bx	lr

00008090 <addVerticalSlider(UIGlue*, char const*, float*, float, float, float, float)>:
    8090:	e12fff1e 	bx	lr

00008094 <CAudio::~CAudio()>:
    8094:	e92d4070 	push	{r4, r5, r6, lr}
    8098:	e1a04000 	mov	r4, r0
    809c:	e59f5028 	ldr	r5, [pc, #40]	@ 80cc <CAudio::~CAudio()+0x38>
    80a0:	e2853008 	add	r3, r5, #8
    80a4:	e5803000 	str	r3, [r0]
    80a8:	eb00229d 	bl	10b24 <CLogger::Get()>
    80ac:	e3a02004 	mov	r2, #4
    80b0:	e2853050 	add	r3, r5, #80	@ 0x50
    80b4:	e2851064 	add	r1, r5, #100	@ 0x64
    80b8:	eb002465 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    80bc:	e1a00004 	mov	r0, r4
    80c0:	eb001740 	bl	ddc8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>
    80c4:	e1a00004 	mov	r0, r4
    80c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    80cc:	0001afe0 	.word	0x0001afe0

000080d0 <CAudio::PutChunk(unsigned int const*, unsigned int)>:
    80d0:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    80d4:	e59fe060 	ldr	lr, [pc, #96]	@ 813c <CAudio::PutChunk(unsigned int const*, unsigned int)+0x6c>
    80d8:	e5de3000 	ldrb	r3, [lr]
    80dc:	e3530000 	cmp	r3, #0
    80e0:	1a00000a 	bne	8110 <CAudio::PutChunk(unsigned int const*, unsigned int)+0x40>
    80e4:	e1a0300e 	mov	r3, lr
    80e8:	e28ecb01 	add	ip, lr, #1024	@ 0x400
    80ec:	e8910005 	ldm	r1, {r0, r2}
    80f0:	e5a30008 	str	r0, [r3, #8]!
    80f4:	e153000c 	cmp	r3, ip
    80f8:	e5832004 	str	r2, [r3, #4]
    80fc:	e2811008 	add	r1, r1, #8
    8100:	1afffff9 	bne	80ec <CAudio::PutChunk(unsigned int const*, unsigned int)+0x1c>
    8104:	e3a03001 	mov	r3, #1
    8108:	e5ce3000 	strb	r3, [lr]
    810c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    8110:	e28e3b01 	add	r3, lr, #1024	@ 0x400
    8114:	e28ecb02 	add	ip, lr, #2048	@ 0x800
    8118:	e8910005 	ldm	r1, {r0, r2}
    811c:	e5a30008 	str	r0, [r3, #8]!
    8120:	e153000c 	cmp	r3, ip
    8124:	e5832004 	str	r2, [r3, #4]
    8128:	e2811008 	add	r1, r1, #8
    812c:	1afffff9 	bne	8118 <CAudio::PutChunk(unsigned int const*, unsigned int)+0x48>
    8130:	e3a03000 	mov	r3, #0
    8134:	e5ce3000 	strb	r3, [lr]
    8138:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    813c:	0001eee0 	.word	0x0001eee0

00008140 <addNumEntry(UIGlue*, char const*, float*, float, float, float, float)>:
    8140:	e12fff1e 	bx	lr

00008144 <addHorizontalSlider(UIGlue*, char const*, float*, float, float, float, float)>:
    8144:	e12fff1e 	bx	lr

00008148 <openHorizontalBox(UIGlue*, char*)>:
    8148:	e12fff1e 	bx	lr

0000814c <closeBox(UIGlue*)>:
    814c:	e12fff1e 	bx	lr

00008150 <CAudio::~CAudio()>:
    8150:	e92d4070 	push	{r4, r5, r6, lr}
    8154:	e1a04000 	mov	r4, r0
    8158:	e59f5034 	ldr	r5, [pc, #52]	@ 8194 <CAudio::~CAudio()+0x44>
    815c:	e2853008 	add	r3, r5, #8
    8160:	e5803000 	str	r3, [r0]
    8164:	eb00226e 	bl	10b24 <CLogger::Get()>
    8168:	e3a02004 	mov	r2, #4
    816c:	e2853050 	add	r3, r5, #80	@ 0x50
    8170:	e2851064 	add	r1, r5, #100	@ 0x64
    8174:	eb002436 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8178:	e1a00004 	mov	r0, r4
    817c:	eb001711 	bl	ddc8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>
    8180:	e1a00004 	mov	r0, r4
    8184:	e3a01f95 	mov	r1, #596	@ 0x254
    8188:	eb003a0e 	bl	169c8 <operator delete(void*, unsigned int)>
    818c:	e1a00004 	mov	r0, r4
    8190:	e8bd8070 	pop	{r4, r5, r6, pc}
    8194:	0001afe0 	.word	0x0001afe0

00008198 <getNumInputsmydspSIG0>:
    8198:	e3a00000 	mov	r0, #0
    819c:	e12fff1e 	bx	lr

000081a0 <getNumOutputsmydspSIG0>:
    81a0:	e3a00001 	mov	r0, #1
    81a4:	e12fff1e 	bx	lr

000081a8 <newmydsp>:
    81a8:	e3a00001 	mov	r0, #1
    81ac:	e59f1000 	ldr	r1, [pc]	@ 81b4 <newmydsp+0xc>
    81b0:	ea001d30 	b	f678 <calloc>
    81b4:	0028242c 	.word	0x0028242c

000081b8 <deletemydsp>:
    81b8:	ea001d28 	b	f660 <free>

000081bc <metadatamydsp>:
    81bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    81c0:	e1a04000 	mov	r4, r0
    81c4:	e8900009 	ldm	r0, {r0, r3}
    81c8:	e59f52c4 	ldr	r5, [pc, #708]	@ 8494 <metadatamydsp+0x2d8>
    81cc:	e2852074 	add	r2, r5, #116	@ 0x74
    81d0:	e2851090 	add	r1, r5, #144	@ 0x90
    81d4:	e12fff33 	blx	r3
    81d8:	e5943004 	ldr	r3, [r4, #4]
    81dc:	e5940000 	ldr	r0, [r4]
    81e0:	e28520a0 	add	r2, r5, #160	@ 0xa0
    81e4:	e28510d8 	add	r1, r5, #216	@ 0xd8
    81e8:	e12fff33 	blx	r3
    81ec:	e5943004 	ldr	r3, [r4, #4]
    81f0:	e5940000 	ldr	r0, [r4]
    81f4:	e28520f0 	add	r2, r5, #240	@ 0xf0
    81f8:	e28510f8 	add	r1, r5, #248	@ 0xf8
    81fc:	e12fff33 	blx	r3
    8200:	e2856f52 	add	r6, r5, #328	@ 0x148
    8204:	e5943004 	ldr	r3, [r4, #4]
    8208:	e5940000 	ldr	r0, [r4]
    820c:	e2852f43 	add	r2, r5, #268	@ 0x10c
    8210:	e2851f4e 	add	r1, r5, #312	@ 0x138
    8214:	e12fff33 	blx	r3
    8218:	e8940009 	ldm	r4, {r0, r3}
    821c:	e1a02006 	mov	r2, r6
    8220:	e2851f57 	add	r1, r5, #348	@ 0x15c
    8224:	e12fff33 	blx	r3
    8228:	e8940009 	ldm	r4, {r0, r3}
    822c:	e1a02006 	mov	r2, r6
    8230:	e2851f5e 	add	r1, r5, #376	@ 0x178
    8234:	e12fff33 	blx	r3
    8238:	e8940009 	ldm	r4, {r0, r3}
    823c:	e1a02006 	mov	r2, r6
    8240:	e2851f65 	add	r1, r5, #404	@ 0x194
    8244:	e12fff33 	blx	r3
    8248:	e5943004 	ldr	r3, [r4, #4]
    824c:	e5940000 	ldr	r0, [r4]
    8250:	e2852e1b 	add	r2, r5, #432	@ 0x1b0
    8254:	e2851f71 	add	r1, r5, #452	@ 0x1c4
    8258:	e12fff33 	blx	r3
    825c:	e5943004 	ldr	r3, [r4, #4]
    8260:	e5940000 	ldr	r0, [r4]
    8264:	e2852f75 	add	r2, r5, #468	@ 0x1d4
    8268:	e2851f77 	add	r1, r5, #476	@ 0x1dc
    826c:	e12fff33 	blx	r3
    8270:	e2857f83 	add	r7, r5, #524	@ 0x20c
    8274:	e5943004 	ldr	r3, [r4, #4]
    8278:	e5940000 	ldr	r0, [r4]
    827c:	e2852e1f 	add	r2, r5, #496	@ 0x1f0
    8280:	e2851c02 	add	r1, r5, #512	@ 0x200
    8284:	e12fff33 	blx	r3
    8288:	e1a02007 	mov	r2, r7
    828c:	e5943004 	ldr	r3, [r4, #4]
    8290:	e5940000 	ldr	r0, [r4]
    8294:	e2851f8a 	add	r1, r5, #552	@ 0x228
    8298:	e12fff33 	blx	r3
    829c:	e8940009 	ldm	r4, {r0, r3}
    82a0:	e2852f92 	add	r2, r5, #584	@ 0x248
    82a4:	e2851e26 	add	r1, r5, #608	@ 0x260
    82a8:	e12fff33 	blx	r3
    82ac:	e2858fa3 	add	r8, r5, #652	@ 0x28c
    82b0:	e1a02006 	mov	r2, r6
    82b4:	e5943004 	ldr	r3, [r4, #4]
    82b8:	e5940000 	ldr	r0, [r4]
    82bc:	e2851f9d 	add	r1, r5, #628	@ 0x274
    82c0:	e12fff33 	blx	r3
    82c4:	e8940009 	ldm	r4, {r0, r3}
    82c8:	e1a02008 	mov	r2, r8
    82cc:	e2851fb5 	add	r1, r5, #724	@ 0x2d4
    82d0:	e12fff33 	blx	r3
    82d4:	e8940009 	ldm	r4, {r0, r3}
    82d8:	e1a02007 	mov	r2, r7
    82dc:	e2851e2f 	add	r1, r5, #752	@ 0x2f0
    82e0:	e12fff33 	blx	r3
    82e4:	e8940009 	ldm	r4, {r0, r3}
    82e8:	e1a02006 	mov	r2, r6
    82ec:	e2851fc3 	add	r1, r5, #780	@ 0x30c
    82f0:	e12fff33 	blx	r3
    82f4:	e8940009 	ldm	r4, {r0, r3}
    82f8:	e1a02008 	mov	r2, r8
    82fc:	e2851fc9 	add	r1, r5, #804	@ 0x324
    8300:	e12fff33 	blx	r3
    8304:	e2856fd6 	add	r6, r5, #856	@ 0x358
    8308:	e1a02007 	mov	r2, r7
    830c:	e5943004 	ldr	r3, [r4, #4]
    8310:	e5940000 	ldr	r0, [r4]
    8314:	e2851d0d 	add	r1, r5, #832	@ 0x340
    8318:	e12fff33 	blx	r3
    831c:	e8940009 	ldm	r4, {r0, r3}
    8320:	e1a02006 	mov	r2, r6
    8324:	e2851e36 	add	r1, r5, #864	@ 0x360
    8328:	e2857fdd 	add	r7, r5, #884	@ 0x374
    832c:	e12fff33 	blx	r3
    8330:	e1a02007 	mov	r2, r7
    8334:	e5943004 	ldr	r3, [r4, #4]
    8338:	e5940000 	ldr	r0, [r4]
    833c:	e2851fdf 	add	r1, r5, #892	@ 0x37c
    8340:	e12fff33 	blx	r3
    8344:	e8940009 	ldm	r4, {r0, r3}
    8348:	e1a02007 	mov	r2, r7
    834c:	e2851e39 	add	r1, r5, #912	@ 0x390
    8350:	e12fff33 	blx	r3
    8354:	e5943004 	ldr	r3, [r4, #4]
    8358:	e5940000 	ldr	r0, [r4]
    835c:	e2852fe9 	add	r2, r5, #932	@ 0x3a4
    8360:	e2851fee 	add	r1, r5, #952	@ 0x3b8
    8364:	e12fff33 	blx	r3
    8368:	e5943004 	ldr	r3, [r4, #4]
    836c:	e5940000 	ldr	r0, [r4]
    8370:	e2852ff3 	add	r2, r5, #972	@ 0x3cc
    8374:	e2851e3e 	add	r1, r5, #992	@ 0x3e0
    8378:	e12fff33 	blx	r3
    837c:	e5943004 	ldr	r3, [r4, #4]
    8380:	e5940000 	ldr	r0, [r4]
    8384:	e2852e3f 	add	r2, r5, #1008	@ 0x3f0
    8388:	e2851ffe 	add	r1, r5, #1016	@ 0x3f8
    838c:	e12fff33 	blx	r3
    8390:	e2852b01 	add	r2, r5, #1024	@ 0x400
    8394:	e2851e41 	add	r1, r5, #1040	@ 0x410
    8398:	e5943004 	ldr	r3, [r4, #4]
    839c:	e5940000 	ldr	r0, [r4]
    83a0:	e282200c 	add	r2, r2, #12
    83a4:	e2811008 	add	r1, r1, #8
    83a8:	e12fff33 	blx	r3
    83ac:	e2851e43 	add	r1, r5, #1072	@ 0x430
    83b0:	e5943004 	ldr	r3, [r4, #4]
    83b4:	e5940000 	ldr	r0, [r4]
    83b8:	e2852e42 	add	r2, r5, #1056	@ 0x420
    83bc:	e281100c 	add	r1, r1, #12
    83c0:	e12fff33 	blx	r3
    83c4:	e8940009 	ldm	r4, {r0, r3}
    83c8:	e2851e45 	add	r1, r5, #1104	@ 0x450
    83cc:	e2812004 	add	r2, r1, #4
    83d0:	e281100c 	add	r1, r1, #12
    83d4:	e12fff33 	blx	r3
    83d8:	e2852e47 	add	r2, r5, #1136	@ 0x470
    83dc:	e5943004 	ldr	r3, [r4, #4]
    83e0:	e5940000 	ldr	r0, [r4]
    83e4:	e2851e49 	add	r1, r5, #1168	@ 0x490
    83e8:	e2822004 	add	r2, r2, #4
    83ec:	e12fff33 	blx	r3
    83f0:	e2851e4a 	add	r1, r5, #1184	@ 0x4a0
    83f4:	e1a02006 	mov	r2, r6
    83f8:	e5943004 	ldr	r3, [r4, #4]
    83fc:	e5940000 	ldr	r0, [r4]
    8400:	e2811004 	add	r1, r1, #4
    8404:	e12fff33 	blx	r3
    8408:	e2852e4b 	add	r2, r5, #1200	@ 0x4b0
    840c:	e2851c05 	add	r1, r5, #1280	@ 0x500
    8410:	e5943004 	ldr	r3, [r4, #4]
    8414:	e5940000 	ldr	r0, [r4]
    8418:	e282200c 	add	r2, r2, #12
    841c:	e2811004 	add	r1, r1, #4
    8420:	e12fff33 	blx	r3
    8424:	e2852e52 	add	r2, r5, #1312	@ 0x520
    8428:	e5943004 	ldr	r3, [r4, #4]
    842c:	e5940000 	ldr	r0, [r4]
    8430:	e2821008 	add	r1, r2, #8
    8434:	e12fff33 	blx	r3
    8438:	e2852d15 	add	r2, r5, #1344	@ 0x540
    843c:	e5943004 	ldr	r3, [r4, #4]
    8440:	e5940000 	ldr	r0, [r4]
    8444:	e2851e56 	add	r1, r5, #1376	@ 0x560
    8448:	e2822008 	add	r2, r2, #8
    844c:	e12fff33 	blx	r3
    8450:	e2851e57 	add	r1, r5, #1392	@ 0x570
    8454:	e5943004 	ldr	r3, [r4, #4]
    8458:	e5940000 	ldr	r0, [r4]
    845c:	e2812004 	add	r2, r1, #4
    8460:	e281100c 	add	r1, r1, #12
    8464:	e12fff33 	blx	r3
    8468:	e5943004 	ldr	r3, [r4, #4]
    846c:	e5940000 	ldr	r0, [r4]
    8470:	e2852e59 	add	r2, r5, #1424	@ 0x590
    8474:	e2851e5b 	add	r1, r5, #1456	@ 0x5b0
    8478:	e12fff33 	blx	r3
    847c:	e8940009 	ldm	r4, {r0, r3}
    8480:	e2851d17 	add	r1, r5, #1472	@ 0x5c0
    8484:	e2812004 	add	r2, r1, #4
    8488:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    848c:	e281100c 	add	r1, r1, #12
    8490:	e12fff13 	bx	r3
    8494:	0001afe0 	.word	0x0001afe0

00008498 <getSampleRatemydsp>:
    8498:	e59000a8 	ldr	r0, [r0, #168]	@ 0xa8
    849c:	e12fff1e 	bx	lr

000084a0 <getNumInputsmydsp>:
    84a0:	e3a00002 	mov	r0, #2
    84a4:	e12fff1e 	bx	lr

000084a8 <getNumOutputsmydsp>:
    84a8:	e3a00002 	mov	r0, #2
    84ac:	e12fff1e 	bx	lr

000084b0 <classInitmydsp>:
    84b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84b4:	e3a01004 	mov	r1, #4
    84b8:	e3a00001 	mov	r0, #1
    84bc:	eb001c6d 	bl	f678 <calloc>
    84c0:	e59f2058 	ldr	r2, [pc, #88]	@ 8520 <classInitmydsp+0x70>
    84c4:	e3a0c002 	mov	ip, #2
    84c8:	e1a01002 	mov	r1, r2
    84cc:	e3a03001 	mov	r3, #1
    84d0:	e2825d51 	add	r5, r2, #5184	@ 0x1440
    84d4:	e59f7048 	ldr	r7, [pc, #72]	@ 8524 <classInitmydsp+0x74>
    84d8:	e59f6048 	ldr	r6, [pc, #72]	@ 8528 <classInitmydsp+0x78>
    84dc:	e582c000 	str	ip, [r2]
    84e0:	e2855014 	add	r5, r5, #20
    84e4:	e2832001 	add	r2, r3, #1
    84e8:	e0c4c296 	smull	ip, r4, r6, r2
    84ec:	e1a0efc2 	asr	lr, r2, #31
    84f0:	e797c103 	ldr	ip, [r7, r3, lsl #2]
    84f4:	e06e3444 	rsb	r3, lr, r4, asr #8
    84f8:	e0833083 	add	r3, r3, r3, lsl #1
    84fc:	e5a1c004 	str	ip, [r1, #4]!
    8500:	e0633183 	rsb	r3, r3, r3, lsl #3
    8504:	e0633283 	rsb	r3, r3, r3, lsl #5
    8508:	e1510005 	cmp	r1, r5
    850c:	e0423083 	sub	r3, r2, r3, lsl #1
    8510:	1afffff3 	bne	84e4 <classInitmydsp+0x34>
    8514:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8518:	e5803000 	str	r3, [r0]
    851c:	ea001c4f 	b	f660 <free>
    8520:	0001f6f4 	.word	0x0001f6f4
    8524:	0001b740 	.word	0x0001b740
    8528:	3255ba01 	.word	0x3255ba01

0000852c <instanceResetUserInterfacemydsp>:
    852c:	e12fff1e 	bx	lr

00008530 <instanceClearmydsp>:
    8530:	e3a01000 	mov	r1, #0
    8534:	e3a0c000 	mov	ip, #0
    8538:	e2802702 	add	r2, r0, #524288	@ 0x80000
    853c:	e580c000 	str	ip, [r0]
    8540:	e580c004 	str	ip, [r0, #4]
    8544:	e580c0bc 	str	ip, [r0, #188]	@ 0xbc
    8548:	e580c0c0 	str	ip, [r0, #192]	@ 0xc0
    854c:	e5801010 	str	r1, [r0, #16]
    8550:	e5801014 	str	r1, [r0, #20]
    8554:	e5801018 	str	r1, [r0, #24]
    8558:	e580101c 	str	r1, [r0, #28]
    855c:	e5801028 	str	r1, [r0, #40]	@ 0x28
    8560:	e580102c 	str	r1, [r0, #44]	@ 0x2c
    8564:	e5801038 	str	r1, [r0, #56]	@ 0x38
    8568:	e580103c 	str	r1, [r0, #60]	@ 0x3c
    856c:	e5801048 	str	r1, [r0, #72]	@ 0x48
    8570:	e580104c 	str	r1, [r0, #76]	@ 0x4c
    8574:	e5801058 	str	r1, [r0, #88]	@ 0x58
    8578:	e580105c 	str	r1, [r0, #92]	@ 0x5c
    857c:	e5801068 	str	r1, [r0, #104]	@ 0x68
    8580:	e580106c 	str	r1, [r0, #108]	@ 0x6c
    8584:	e5801078 	str	r1, [r0, #120]	@ 0x78
    8588:	e580107c 	str	r1, [r0, #124]	@ 0x7c
    858c:	e5801088 	str	r1, [r0, #136]	@ 0x88
    8590:	e580108c 	str	r1, [r0, #140]	@ 0x8c
    8594:	e5801098 	str	r1, [r0, #152]	@ 0x98
    8598:	e580109c 	str	r1, [r0, #156]	@ 0x9c
    859c:	e58010a0 	str	r1, [r0, #160]	@ 0xa0
    85a0:	e58010a4 	str	r1, [r0, #164]	@ 0xa4
    85a4:	e58010b0 	str	r1, [r0, #176]	@ 0xb0
    85a8:	e58010b4 	str	r1, [r0, #180]	@ 0xb4
    85ac:	e58010c4 	str	r1, [r0, #196]	@ 0xc4
    85b0:	e58010c8 	str	r1, [r0, #200]	@ 0xc8
    85b4:	e58010cc 	str	r1, [r0, #204]	@ 0xcc
    85b8:	e58010d0 	str	r1, [r0, #208]	@ 0xd0
    85bc:	e28030d8 	add	r3, r0, #216	@ 0xd8
    85c0:	e580c0d4 	str	ip, [r0, #212]	@ 0xd4
    85c4:	e282c0d8 	add	ip, r2, #216	@ 0xd8
    85c8:	e4831004 	str	r1, [r3], #4
    85cc:	e153000c 	cmp	r3, ip
    85d0:	1afffffc 	bne	85c8 <instanceClearmydsp+0x98>
    85d4:	e58210dc 	str	r1, [r2, #220]	@ 0xdc
    85d8:	e58210e0 	str	r1, [r2, #224]	@ 0xe0
    85dc:	e58210e4 	str	r1, [r2, #228]	@ 0xe4
    85e0:	e58210e8 	str	r1, [r2, #232]	@ 0xe8
    85e4:	e58210ec 	str	r1, [r2, #236]	@ 0xec
    85e8:	e58210f0 	str	r1, [r2, #240]	@ 0xf0
    85ec:	e58210f4 	str	r1, [r2, #244]	@ 0xf4
    85f0:	e58210f8 	str	r1, [r2, #248]	@ 0xf8
    85f4:	e3a01000 	mov	r1, #0
    85f8:	e2803809 	add	r3, r0, #589824	@ 0x90000
    85fc:	e28220fc 	add	r2, r2, #252	@ 0xfc
    8600:	e283c0fc 	add	ip, r3, #252	@ 0xfc
    8604:	e4821004 	str	r1, [r2], #4
    8608:	e152000c 	cmp	r2, ip
    860c:	1afffffc 	bne	8604 <instanceClearmydsp+0xd4>
    8610:	e3a0c000 	mov	ip, #0
    8614:	e2802811 	add	r2, r0, #1114112	@ 0x110000
    8618:	e5831104 	str	r1, [r3, #260]	@ 0x104
    861c:	e5831108 	str	r1, [r3, #264]	@ 0x108
    8620:	e583110c 	str	r1, [r3, #268]	@ 0x10c
    8624:	e5831110 	str	r1, [r3, #272]	@ 0x110
    8628:	e5831114 	str	r1, [r3, #276]	@ 0x114
    862c:	e5831118 	str	r1, [r3, #280]	@ 0x118
    8630:	e583111c 	str	r1, [r3, #284]	@ 0x11c
    8634:	e5831120 	str	r1, [r3, #288]	@ 0x120
    8638:	e2833f49 	add	r3, r3, #292	@ 0x124
    863c:	e2821f49 	add	r1, r2, #292	@ 0x124
    8640:	e483c004 	str	ip, [r3], #4
    8644:	e1510003 	cmp	r1, r3
    8648:	1afffffc 	bne	8640 <instanceClearmydsp+0x110>
    864c:	e3a01000 	mov	r1, #0
    8650:	e2803812 	add	r3, r0, #1179648	@ 0x120000
    8654:	e2822f49 	add	r2, r2, #292	@ 0x124
    8658:	e283cf49 	add	ip, r3, #292	@ 0x124
    865c:	e4821004 	str	r1, [r2], #4
    8660:	e15c0002 	cmp	ip, r2
    8664:	1afffffc 	bne	865c <instanceClearmydsp+0x12c>
    8668:	e583112c 	str	r1, [r3, #300]	@ 0x12c
    866c:	e5831130 	str	r1, [r3, #304]	@ 0x130
    8670:	e5831134 	str	r1, [r3, #308]	@ 0x134
    8674:	e5831138 	str	r1, [r3, #312]	@ 0x138
    8678:	e583113c 	str	r1, [r3, #316]	@ 0x13c
    867c:	e5831140 	str	r1, [r3, #320]	@ 0x140
    8680:	e5831144 	str	r1, [r3, #324]	@ 0x144
    8684:	e5831148 	str	r1, [r3, #328]	@ 0x148
    8688:	e3a01000 	mov	r1, #0
    868c:	e2802813 	add	r2, r0, #1245184	@ 0x130000
    8690:	e2833f53 	add	r3, r3, #332	@ 0x14c
    8694:	e282cf53 	add	ip, r2, #332	@ 0x14c
    8698:	e4831004 	str	r1, [r3], #4
    869c:	e15c0003 	cmp	ip, r3
    86a0:	1afffffc 	bne	8698 <instanceClearmydsp+0x168>
    86a4:	e582114c 	str	r1, [r2, #332]	@ 0x14c
    86a8:	e5821150 	str	r1, [r2, #336]	@ 0x150
    86ac:	e5821154 	str	r1, [r2, #340]	@ 0x154
    86b0:	e5821158 	str	r1, [r2, #344]	@ 0x158
    86b4:	e582115c 	str	r1, [r2, #348]	@ 0x15c
    86b8:	e5821160 	str	r1, [r2, #352]	@ 0x160
    86bc:	e3a01000 	mov	r1, #0
    86c0:	e2803705 	add	r3, r0, #1310720	@ 0x140000
    86c4:	e2822f59 	add	r2, r2, #356	@ 0x164
    86c8:	e283cf59 	add	ip, r3, #356	@ 0x164
    86cc:	e4821004 	str	r1, [r2], #4
    86d0:	e15c0002 	cmp	ip, r2
    86d4:	1afffffc 	bne	86cc <instanceClearmydsp+0x19c>
    86d8:	e583116c 	str	r1, [r3, #364]	@ 0x16c
    86dc:	e5831170 	str	r1, [r3, #368]	@ 0x170
    86e0:	e5831174 	str	r1, [r3, #372]	@ 0x174
    86e4:	e5831178 	str	r1, [r3, #376]	@ 0x178
    86e8:	e583117c 	str	r1, [r3, #380]	@ 0x17c
    86ec:	e5831180 	str	r1, [r3, #384]	@ 0x180
    86f0:	e5831184 	str	r1, [r3, #388]	@ 0x184
    86f4:	e5831188 	str	r1, [r3, #392]	@ 0x188
    86f8:	e3a01000 	mov	r1, #0
    86fc:	e2802815 	add	r2, r0, #1376256	@ 0x150000
    8700:	e2833f63 	add	r3, r3, #396	@ 0x18c
    8704:	e282cf63 	add	ip, r2, #396	@ 0x18c
    8708:	e4831004 	str	r1, [r3], #4
    870c:	e15c0003 	cmp	ip, r3
    8710:	1afffffc 	bne	8708 <instanceClearmydsp+0x1d8>
    8714:	e582118c 	str	r1, [r2, #396]	@ 0x18c
    8718:	e5821190 	str	r1, [r2, #400]	@ 0x190
    871c:	e5821194 	str	r1, [r2, #404]	@ 0x194
    8720:	e5821198 	str	r1, [r2, #408]	@ 0x198
    8724:	e582119c 	str	r1, [r2, #412]	@ 0x19c
    8728:	e58211a0 	str	r1, [r2, #416]	@ 0x1a0
    872c:	e3a01000 	mov	r1, #0
    8730:	e2803816 	add	r3, r0, #1441792	@ 0x160000
    8734:	e2822f69 	add	r2, r2, #420	@ 0x1a4
    8738:	e283cf69 	add	ip, r3, #420	@ 0x1a4
    873c:	e4821004 	str	r1, [r2], #4
    8740:	e15c0002 	cmp	ip, r2
    8744:	1afffffc 	bne	873c <instanceClearmydsp+0x20c>
    8748:	e58311ac 	str	r1, [r3, #428]	@ 0x1ac
    874c:	e58311b0 	str	r1, [r3, #432]	@ 0x1b0
    8750:	e58311b4 	str	r1, [r3, #436]	@ 0x1b4
    8754:	e58311b8 	str	r1, [r3, #440]	@ 0x1b8
    8758:	e58311bc 	str	r1, [r3, #444]	@ 0x1bc
    875c:	e58311c0 	str	r1, [r3, #448]	@ 0x1c0
    8760:	e58311c4 	str	r1, [r3, #452]	@ 0x1c4
    8764:	e58311c8 	str	r1, [r3, #456]	@ 0x1c8
    8768:	e3a01000 	mov	r1, #0
    876c:	e2802817 	add	r2, r0, #1507328	@ 0x170000
    8770:	e2833f73 	add	r3, r3, #460	@ 0x1cc
    8774:	e282cf73 	add	ip, r2, #460	@ 0x1cc
    8778:	e4831004 	str	r1, [r3], #4
    877c:	e15c0003 	cmp	ip, r3
    8780:	1afffffc 	bne	8778 <instanceClearmydsp+0x248>
    8784:	e58211cc 	str	r1, [r2, #460]	@ 0x1cc
    8788:	e58211d0 	str	r1, [r2, #464]	@ 0x1d0
    878c:	e58211d4 	str	r1, [r2, #468]	@ 0x1d4
    8790:	e58211d8 	str	r1, [r2, #472]	@ 0x1d8
    8794:	e58211dc 	str	r1, [r2, #476]	@ 0x1dc
    8798:	e58211e0 	str	r1, [r2, #480]	@ 0x1e0
    879c:	e3a01000 	mov	r1, #0
    87a0:	e2803706 	add	r3, r0, #1572864	@ 0x180000
    87a4:	e2822f79 	add	r2, r2, #484	@ 0x1e4
    87a8:	e283cf79 	add	ip, r3, #484	@ 0x1e4
    87ac:	e4821004 	str	r1, [r2], #4
    87b0:	e15c0002 	cmp	ip, r2
    87b4:	1afffffc 	bne	87ac <instanceClearmydsp+0x27c>
    87b8:	e58311ec 	str	r1, [r3, #492]	@ 0x1ec
    87bc:	e58311f0 	str	r1, [r3, #496]	@ 0x1f0
    87c0:	e58311f4 	str	r1, [r3, #500]	@ 0x1f4
    87c4:	e58311f8 	str	r1, [r3, #504]	@ 0x1f8
    87c8:	e58311fc 	str	r1, [r3, #508]	@ 0x1fc
    87cc:	e5831200 	str	r1, [r3, #512]	@ 0x200
    87d0:	e5831204 	str	r1, [r3, #516]	@ 0x204
    87d4:	e5831208 	str	r1, [r3, #520]	@ 0x208
    87d8:	e3a01000 	mov	r1, #0
    87dc:	e2802819 	add	r2, r0, #1638400	@ 0x190000
    87e0:	e2833f83 	add	r3, r3, #524	@ 0x20c
    87e4:	e282cf83 	add	ip, r2, #524	@ 0x20c
    87e8:	e4831004 	str	r1, [r3], #4
    87ec:	e15c0003 	cmp	ip, r3
    87f0:	1afffffc 	bne	87e8 <instanceClearmydsp+0x2b8>
    87f4:	e5821214 	str	r1, [r2, #532]	@ 0x214
    87f8:	e5821218 	str	r1, [r2, #536]	@ 0x218
    87fc:	e582121c 	str	r1, [r2, #540]	@ 0x21c
    8800:	e5821220 	str	r1, [r2, #544]	@ 0x220
    8804:	e5821224 	str	r1, [r2, #548]	@ 0x224
    8808:	e5821228 	str	r1, [r2, #552]	@ 0x228
    880c:	e582122c 	str	r1, [r2, #556]	@ 0x22c
    8810:	e5821230 	str	r1, [r2, #560]	@ 0x230
    8814:	e3a01000 	mov	r1, #0
    8818:	e280381a 	add	r3, r0, #1703936	@ 0x1a0000
    881c:	e2822f8d 	add	r2, r2, #564	@ 0x234
    8820:	e283cf8d 	add	ip, r3, #564	@ 0x234
    8824:	e4821004 	str	r1, [r2], #4
    8828:	e15c0002 	cmp	ip, r2
    882c:	1afffffc 	bne	8824 <instanceClearmydsp+0x2f4>
    8830:	e583123c 	str	r1, [r3, #572]	@ 0x23c
    8834:	e5831240 	str	r1, [r3, #576]	@ 0x240
    8838:	e5831244 	str	r1, [r3, #580]	@ 0x244
    883c:	e5831248 	str	r1, [r3, #584]	@ 0x248
    8840:	e583124c 	str	r1, [r3, #588]	@ 0x24c
    8844:	e5831250 	str	r1, [r3, #592]	@ 0x250
    8848:	e5831254 	str	r1, [r3, #596]	@ 0x254
    884c:	e5831258 	str	r1, [r3, #600]	@ 0x258
    8850:	e3a01000 	mov	r1, #0
    8854:	e280281b 	add	r2, r0, #1769472	@ 0x1b0000
    8858:	e2833f97 	add	r3, r3, #604	@ 0x25c
    885c:	e282cf97 	add	ip, r2, #604	@ 0x25c
    8860:	e4831004 	str	r1, [r3], #4
    8864:	e15c0003 	cmp	ip, r3
    8868:	1afffffc 	bne	8860 <instanceClearmydsp+0x330>
    886c:	e582125c 	str	r1, [r2, #604]	@ 0x25c
    8870:	e5821260 	str	r1, [r2, #608]	@ 0x260
    8874:	e5821264 	str	r1, [r2, #612]	@ 0x264
    8878:	e5821268 	str	r1, [r2, #616]	@ 0x268
    887c:	e582126c 	str	r1, [r2, #620]	@ 0x26c
    8880:	e5821270 	str	r1, [r2, #624]	@ 0x270
    8884:	e3a01000 	mov	r1, #0
    8888:	e2803707 	add	r3, r0, #1835008	@ 0x1c0000
    888c:	e2822f9d 	add	r2, r2, #628	@ 0x274
    8890:	e283cf9d 	add	ip, r3, #628	@ 0x274
    8894:	e4821004 	str	r1, [r2], #4
    8898:	e15c0002 	cmp	ip, r2
    889c:	1afffffc 	bne	8894 <instanceClearmydsp+0x364>
    88a0:	e583127c 	str	r1, [r3, #636]	@ 0x27c
    88a4:	e5831280 	str	r1, [r3, #640]	@ 0x280
    88a8:	e5831284 	str	r1, [r3, #644]	@ 0x284
    88ac:	e5831288 	str	r1, [r3, #648]	@ 0x288
    88b0:	e583128c 	str	r1, [r3, #652]	@ 0x28c
    88b4:	e5831290 	str	r1, [r3, #656]	@ 0x290
    88b8:	e5831294 	str	r1, [r3, #660]	@ 0x294
    88bc:	e5831298 	str	r1, [r3, #664]	@ 0x298
    88c0:	e3a01000 	mov	r1, #0
    88c4:	e280281d 	add	r2, r0, #1900544	@ 0x1d0000
    88c8:	e2833fa7 	add	r3, r3, #668	@ 0x29c
    88cc:	e282cfa7 	add	ip, r2, #668	@ 0x29c
    88d0:	e4831004 	str	r1, [r3], #4
    88d4:	e15c0003 	cmp	ip, r3
    88d8:	1afffffc 	bne	88d0 <instanceClearmydsp+0x3a0>
    88dc:	e582129c 	str	r1, [r2, #668]	@ 0x29c
    88e0:	e58212a0 	str	r1, [r2, #672]	@ 0x2a0
    88e4:	e58212a4 	str	r1, [r2, #676]	@ 0x2a4
    88e8:	e58212a8 	str	r1, [r2, #680]	@ 0x2a8
    88ec:	e58212ac 	str	r1, [r2, #684]	@ 0x2ac
    88f0:	e58212b0 	str	r1, [r2, #688]	@ 0x2b0
    88f4:	e3a01000 	mov	r1, #0
    88f8:	e280381e 	add	r3, r0, #1966080	@ 0x1e0000
    88fc:	e2822fad 	add	r2, r2, #692	@ 0x2b4
    8900:	e283cfad 	add	ip, r3, #692	@ 0x2b4
    8904:	e4821004 	str	r1, [r2], #4
    8908:	e15c0002 	cmp	ip, r2
    890c:	1afffffc 	bne	8904 <instanceClearmydsp+0x3d4>
    8910:	e58312bc 	str	r1, [r3, #700]	@ 0x2bc
    8914:	e58312c0 	str	r1, [r3, #704]	@ 0x2c0
    8918:	e58312c4 	str	r1, [r3, #708]	@ 0x2c4
    891c:	e58312c8 	str	r1, [r3, #712]	@ 0x2c8
    8920:	e58312cc 	str	r1, [r3, #716]	@ 0x2cc
    8924:	e58312d0 	str	r1, [r3, #720]	@ 0x2d0
    8928:	e58312d4 	str	r1, [r3, #724]	@ 0x2d4
    892c:	e58312d8 	str	r1, [r3, #728]	@ 0x2d8
    8930:	e3a01000 	mov	r1, #0
    8934:	e280281f 	add	r2, r0, #2031616	@ 0x1f0000
    8938:	e2833fb7 	add	r3, r3, #732	@ 0x2dc
    893c:	e282cfb7 	add	ip, r2, #732	@ 0x2dc
    8940:	e4831004 	str	r1, [r3], #4
    8944:	e15c0003 	cmp	ip, r3
    8948:	1afffffc 	bne	8940 <instanceClearmydsp+0x410>
    894c:	e58212dc 	str	r1, [r2, #732]	@ 0x2dc
    8950:	e58212e0 	str	r1, [r2, #736]	@ 0x2e0
    8954:	e58212e4 	str	r1, [r2, #740]	@ 0x2e4
    8958:	e58212e8 	str	r1, [r2, #744]	@ 0x2e8
    895c:	e58212ec 	str	r1, [r2, #748]	@ 0x2ec
    8960:	e58212f0 	str	r1, [r2, #752]	@ 0x2f0
    8964:	e3a01000 	mov	r1, #0
    8968:	e2803602 	add	r3, r0, #2097152	@ 0x200000
    896c:	e2822fbd 	add	r2, r2, #756	@ 0x2f4
    8970:	e283cfbd 	add	ip, r3, #756	@ 0x2f4
    8974:	e4821004 	str	r1, [r2], #4
    8978:	e15c0002 	cmp	ip, r2
    897c:	1afffffc 	bne	8974 <instanceClearmydsp+0x444>
    8980:	e58312fc 	str	r1, [r3, #764]	@ 0x2fc
    8984:	e5831300 	str	r1, [r3, #768]	@ 0x300
    8988:	e5831304 	str	r1, [r3, #772]	@ 0x304
    898c:	e5831308 	str	r1, [r3, #776]	@ 0x308
    8990:	e583130c 	str	r1, [r3, #780]	@ 0x30c
    8994:	e5831310 	str	r1, [r3, #784]	@ 0x310
    8998:	e5831314 	str	r1, [r3, #788]	@ 0x314
    899c:	e5831318 	str	r1, [r3, #792]	@ 0x318
    89a0:	e3a01000 	mov	r1, #0
    89a4:	e2802821 	add	r2, r0, #2162688	@ 0x210000
    89a8:	e2833fc7 	add	r3, r3, #796	@ 0x31c
    89ac:	e282cfc7 	add	ip, r2, #796	@ 0x31c
    89b0:	e4831004 	str	r1, [r3], #4
    89b4:	e15c0003 	cmp	ip, r3
    89b8:	1afffffc 	bne	89b0 <instanceClearmydsp+0x480>
    89bc:	e5821324 	str	r1, [r2, #804]	@ 0x324
    89c0:	e5821328 	str	r1, [r2, #808]	@ 0x328
    89c4:	e582132c 	str	r1, [r2, #812]	@ 0x32c
    89c8:	e5821330 	str	r1, [r2, #816]	@ 0x330
    89cc:	e5821334 	str	r1, [r2, #820]	@ 0x334
    89d0:	e5821338 	str	r1, [r2, #824]	@ 0x338
    89d4:	e582133c 	str	r1, [r2, #828]	@ 0x33c
    89d8:	e5821340 	str	r1, [r2, #832]	@ 0x340
    89dc:	e3a01000 	mov	r1, #0
    89e0:	e2803822 	add	r3, r0, #2228224	@ 0x220000
    89e4:	e2822fd1 	add	r2, r2, #836	@ 0x344
    89e8:	e283cfd1 	add	ip, r3, #836	@ 0x344
    89ec:	e4821004 	str	r1, [r2], #4
    89f0:	e15c0002 	cmp	ip, r2
    89f4:	1afffffc 	bne	89ec <instanceClearmydsp+0x4bc>
    89f8:	e583134c 	str	r1, [r3, #844]	@ 0x34c
    89fc:	e5831350 	str	r1, [r3, #848]	@ 0x350
    8a00:	e5831354 	str	r1, [r3, #852]	@ 0x354
    8a04:	e5831358 	str	r1, [r3, #856]	@ 0x358
    8a08:	e583135c 	str	r1, [r3, #860]	@ 0x35c
    8a0c:	e5831360 	str	r1, [r3, #864]	@ 0x360
    8a10:	e5831364 	str	r1, [r3, #868]	@ 0x364
    8a14:	e5831368 	str	r1, [r3, #872]	@ 0x368
    8a18:	e3a01000 	mov	r1, #0
    8a1c:	e2802823 	add	r2, r0, #2293760	@ 0x230000
    8a20:	e2833fdb 	add	r3, r3, #876	@ 0x36c
    8a24:	e282cfdb 	add	ip, r2, #876	@ 0x36c
    8a28:	e4831004 	str	r1, [r3], #4
    8a2c:	e153000c 	cmp	r3, ip
    8a30:	1afffffc 	bne	8a28 <instanceClearmydsp+0x4f8>
    8a34:	e582136c 	str	r1, [r2, #876]	@ 0x36c
    8a38:	e5821370 	str	r1, [r2, #880]	@ 0x370
    8a3c:	e5821374 	str	r1, [r2, #884]	@ 0x374
    8a40:	e5821378 	str	r1, [r2, #888]	@ 0x378
    8a44:	e582137c 	str	r1, [r2, #892]	@ 0x37c
    8a48:	e5821380 	str	r1, [r2, #896]	@ 0x380
    8a4c:	e3a01000 	mov	r1, #0
    8a50:	e2803709 	add	r3, r0, #2359296	@ 0x240000
    8a54:	e2822fe1 	add	r2, r2, #900	@ 0x384
    8a58:	e283cfe1 	add	ip, r3, #900	@ 0x384
    8a5c:	e4821004 	str	r1, [r2], #4
    8a60:	e152000c 	cmp	r2, ip
    8a64:	1afffffc 	bne	8a5c <instanceClearmydsp+0x52c>
    8a68:	e583138c 	str	r1, [r3, #908]	@ 0x38c
    8a6c:	e5831390 	str	r1, [r3, #912]	@ 0x390
    8a70:	e5831394 	str	r1, [r3, #916]	@ 0x394
    8a74:	e5831398 	str	r1, [r3, #920]	@ 0x398
    8a78:	e583139c 	str	r1, [r3, #924]	@ 0x39c
    8a7c:	e58313a0 	str	r1, [r3, #928]	@ 0x3a0
    8a80:	e58313a4 	str	r1, [r3, #932]	@ 0x3a4
    8a84:	e58313a8 	str	r1, [r3, #936]	@ 0x3a8
    8a88:	e3a01000 	mov	r1, #0
    8a8c:	e2802825 	add	r2, r0, #2424832	@ 0x250000
    8a90:	e2833feb 	add	r3, r3, #940	@ 0x3ac
    8a94:	e282cfeb 	add	ip, r2, #940	@ 0x3ac
    8a98:	e4831004 	str	r1, [r3], #4
    8a9c:	e153000c 	cmp	r3, ip
    8aa0:	1afffffc 	bne	8a98 <instanceClearmydsp+0x568>
    8aa4:	e58213ac 	str	r1, [r2, #940]	@ 0x3ac
    8aa8:	e58213b0 	str	r1, [r2, #944]	@ 0x3b0
    8aac:	e58213b4 	str	r1, [r2, #948]	@ 0x3b4
    8ab0:	e58213b8 	str	r1, [r2, #952]	@ 0x3b8
    8ab4:	e58213bc 	str	r1, [r2, #956]	@ 0x3bc
    8ab8:	e58213c0 	str	r1, [r2, #960]	@ 0x3c0
    8abc:	e3a01000 	mov	r1, #0
    8ac0:	e2803826 	add	r3, r0, #2490368	@ 0x260000
    8ac4:	e2822ff1 	add	r2, r2, #964	@ 0x3c4
    8ac8:	e283cff1 	add	ip, r3, #964	@ 0x3c4
    8acc:	e4821004 	str	r1, [r2], #4
    8ad0:	e152000c 	cmp	r2, ip
    8ad4:	1afffffc 	bne	8acc <instanceClearmydsp+0x59c>
    8ad8:	e3a02000 	mov	r2, #0
    8adc:	e280c827 	add	ip, r0, #2555904	@ 0x270000
    8ae0:	e58313cc 	str	r1, [r3, #972]	@ 0x3cc
    8ae4:	e58313d0 	str	r1, [r3, #976]	@ 0x3d0
    8ae8:	e58313d4 	str	r1, [r3, #980]	@ 0x3d4
    8aec:	e58313d8 	str	r1, [r3, #984]	@ 0x3d8
    8af0:	e58313dc 	str	r1, [r3, #988]	@ 0x3dc
    8af4:	e58313e0 	str	r1, [r3, #992]	@ 0x3e0
    8af8:	e58313e4 	str	r1, [r3, #996]	@ 0x3e4
    8afc:	e58313e8 	str	r1, [r3, #1000]	@ 0x3e8
    8b00:	e2833ffb 	add	r3, r3, #1004	@ 0x3ec
    8b04:	e28c1ffb 	add	r1, ip, #1004	@ 0x3ec
    8b08:	e4832004 	str	r2, [r3], #4
    8b0c:	e1530001 	cmp	r3, r1
    8b10:	1afffffc 	bne	8b08 <instanceClearmydsp+0x5d8>
    8b14:	e28c3b01 	add	r3, ip, #1024	@ 0x400
    8b18:	e58c23ec 	str	r2, [ip, #1004]	@ 0x3ec
    8b1c:	e58c23f0 	str	r2, [ip, #1008]	@ 0x3f0
    8b20:	e58c23f4 	str	r2, [ip, #1012]	@ 0x3f4
    8b24:	e58c23f8 	str	r2, [ip, #1016]	@ 0x3f8
    8b28:	e58c23fc 	str	r2, [ip, #1020]	@ 0x3fc
    8b2c:	e5832000 	str	r2, [r3]
    8b30:	e3a02000 	mov	r2, #0
    8b34:	e59f3080 	ldr	r3, [pc, #128]	@ 8bbc <instanceClearmydsp+0x68c>
    8b38:	e59f1080 	ldr	r1, [pc, #128]	@ 8bc0 <instanceClearmydsp+0x690>
    8b3c:	e0803003 	add	r3, r0, r3
    8b40:	e0801001 	add	r1, r0, r1
    8b44:	e4832004 	str	r2, [r3], #4
    8b48:	e1510003 	cmp	r1, r3
    8b4c:	1afffffc 	bne	8b44 <instanceClearmydsp+0x614>
    8b50:	e280370a 	add	r3, r0, #2621440	@ 0x280000
    8b54:	e2831e41 	add	r1, r3, #1040	@ 0x410
    8b58:	e283ce42 	add	ip, r3, #1056	@ 0x420
    8b5c:	e2833b01 	add	r3, r3, #1024	@ 0x400
    8b60:	e583200c 	str	r2, [r3, #12]
    8b64:	e5812000 	str	r2, [r1]
    8b68:	e5812004 	str	r2, [r1, #4]
    8b6c:	e5812008 	str	r2, [r1, #8]
    8b70:	e581200c 	str	r2, [r1, #12]
    8b74:	e3a01000 	mov	r1, #0
    8b78:	e59f3044 	ldr	r3, [pc, #68]	@ 8bc4 <instanceClearmydsp+0x694>
    8b7c:	e58c2000 	str	r2, [ip]
    8b80:	e58c2004 	str	r2, [ip, #4]
    8b84:	e58c2008 	str	r2, [ip, #8]
    8b88:	e59f2038 	ldr	r2, [pc, #56]	@ 8bc8 <instanceClearmydsp+0x698>
    8b8c:	e0803003 	add	r3, r0, r3
    8b90:	e0802002 	add	r2, r0, r2
    8b94:	e4831004 	str	r1, [r3], #4
    8b98:	e1530002 	cmp	r3, r2
    8b9c:	1afffffc 	bne	8b94 <instanceClearmydsp+0x664>
    8ba0:	e3a01000 	mov	r1, #0
    8ba4:	e59f2020 	ldr	r2, [pc, #32]	@ 8bcc <instanceClearmydsp+0x69c>
    8ba8:	e0802002 	add	r2, r0, r2
    8bac:	e4831004 	str	r1, [r3], #4
    8bb0:	e1520003 	cmp	r2, r3
    8bb4:	1afffffc 	bne	8bac <instanceClearmydsp+0x67c>
    8bb8:	e12fff1e 	bx	lr
    8bbc:	00270404 	.word	0x00270404
    8bc0:	00280404 	.word	0x00280404
    8bc4:	0028042c 	.word	0x0028042c
    8bc8:	0028142c 	.word	0x0028142c
    8bcc:	0028242c 	.word	0x0028242c

00008bd0 <instanceConstantsmydsp>:
    8bd0:	e92d4070 	push	{r4, r5, r6, lr}
    8bd4:	e59f52f4 	ldr	r5, [pc, #756]	@ 8ed0 <instanceConstantsmydsp+0x300>
    8bd8:	ed2d8b02 	vpush	{d8}
    8bdc:	e59520c0 	ldr	r2, [r5, #192]	@ 0xc0
    8be0:	e59530f4 	ldr	r3, [r5, #244]	@ 0xf4
    8be4:	ee072a90 	vmov	s15, r2
    8be8:	eeb86ae7 	vcvt.f32.s32	s12, s15
    8bec:	ee073a90 	vmov	s15, r3
    8bf0:	eef86ae7 	vcvt.f32.s32	s13, s15
    8bf4:	edd57a4a 	vldr	s15, [r5, #296]	@ 0x128
    8bf8:	e595c0a8 	ldr	ip, [r5, #168]	@ 0xa8
    8bfc:	eeb87ae7 	vcvt.f32.s32	s14, s15
    8c00:	ee07ca90 	vmov	s15, ip
    8c04:	ed9f8aab 	vldr	s16, [pc, #684]	@ 8eb8 <instanceConstantsmydsp+0x2e8>
    8c08:	eef87ae7 	vcvt.f32.s32	s15, s15
    8c0c:	e1a04000 	mov	r4, r0
    8c10:	ee666a88 	vmul.f32	s13, s13, s16
    8c14:	ee677a88 	vmul.f32	s15, s15, s16
    8c18:	e5950128 	ldr	r0, [r5, #296]	@ 0x128
    8c1c:	e595e074 	ldr	lr, [r5, #116]	@ 0x74
    8c20:	e58410a8 	str	r1, [r4, #168]	@ 0xa8
    8c24:	edc46a09 	vstr	s13, [r4, #36]	@ 0x24
    8c28:	ee061a90 	vmov	s13, r1
    8c2c:	e59510dc 	ldr	r1, [r5, #220]	@ 0xdc
    8c30:	ee266a08 	vmul.f32	s12, s12, s16
    8c34:	edc47a15 	vstr	s15, [r4, #84]	@ 0x54
    8c38:	ee071a90 	vmov	s15, r1
    8c3c:	ed846a03 	vstr	s12, [r4, #12]
    8c40:	eeb86ae7 	vcvt.f32.s32	s12, s15
    8c44:	edd57a0a 	vldr	s15, [r5, #40]	@ 0x28
    8c48:	ee277a08 	vmul.f32	s14, s14, s16
    8c4c:	eef80ae6 	vcvt.f32.s32	s1, s13
    8c50:	eef86ae7 	vcvt.f32.s32	s13, s15
    8c54:	edd57a17 	vldr	s15, [r5, #92]	@ 0x5c
    8c58:	e5843020 	str	r3, [r4, #32]
    8c5c:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
    8c60:	ee05ea90 	vmov	s11, lr
    8c64:	ed847a0d 	vstr	s14, [r4, #52]	@ 0x34
    8c68:	eeb87ae7 	vcvt.f32.s32	s14, s15
    8c6c:	ee073a90 	vmov	s15, r3
    8c70:	eef85ae5 	vcvt.f32.s32	s11, s11
    8c74:	eef87ae7 	vcvt.f32.s32	s15, s15
    8c78:	ee655a88 	vmul.f32	s11, s11, s16
    8c7c:	ee266a08 	vmul.f32	s12, s12, s16
    8c80:	ee666a88 	vmul.f32	s13, s13, s16
    8c84:	ee277a08 	vmul.f32	s14, s14, s16
    8c88:	ee677a88 	vmul.f32	s15, s15, s16
    8c8c:	e5842008 	str	r2, [r4, #8]
    8c90:	e5952028 	ldr	r2, [r5, #40]	@ 0x28
    8c94:	ed846a19 	vstr	s12, [r4, #100]	@ 0x64
    8c98:	e5842070 	str	r2, [r4, #112]	@ 0x70
    8c9c:	e595205c 	ldr	r2, [r5, #92]	@ 0x5c
    8ca0:	e5840030 	str	r0, [r4, #48]	@ 0x30
    8ca4:	edc45a11 	vstr	s11, [r4, #68]	@ 0x44
    8ca8:	e5841060 	str	r1, [r4, #96]	@ 0x60
    8cac:	e5842080 	str	r2, [r4, #128]	@ 0x80
    8cb0:	e5843090 	str	r3, [r4, #144]	@ 0x90
    8cb4:	e584e040 	str	lr, [r4, #64]	@ 0x40
    8cb8:	e584c050 	str	ip, [r4, #80]	@ 0x50
    8cbc:	ed9f0a7e 	vldr	s0, [pc, #504]	@ 8ebc <instanceConstantsmydsp+0x2ec>
    8cc0:	edc46a1d 	vstr	s13, [r4, #116]	@ 0x74
    8cc4:	ed847a21 	vstr	s14, [r4, #132]	@ 0x84
    8cc8:	edc47a25 	vstr	s15, [r4, #148]	@ 0x94
    8ccc:	eb004763 	bl	1aa60 <fmaxf>
    8cd0:	eef00a40 	vmov.f32	s1, s0
    8cd4:	ed9f0a79 	vldr	s0, [pc, #484]	@ 8ec0 <instanceConstantsmydsp+0x2f0>
    8cd8:	eb004774 	bl	1aab0 <fminf>
    8cdc:	eddf6a78 	vldr	s13, [pc, #480]	@ 8ec4 <instanceConstantsmydsp+0x2f4>
    8ce0:	eef00a40 	vmov.f32	s1, s0
    8ce4:	ed9f7a77 	vldr	s14, [pc, #476]	@ 8ec8 <instanceConstantsmydsp+0x2f8>
    8ce8:	eec67aa0 	vdiv.f32	s15, s13, s1
    8cec:	edc40a2b 	vstr	s1, [r4, #172]	@ 0xac
    8cf0:	edc47a2e 	vstr	s15, [r4, #184]	@ 0xb8
    8cf4:	ee600a87 	vmul.f32	s1, s1, s14
    8cf8:	ed9f0a73 	vldr	s0, [pc, #460]	@ 8ecc <instanceConstantsmydsp+0x2fc>
    8cfc:	eb00476b 	bl	1aab0 <fminf>
    8d00:	eb004795 	bl	1ab5c <floorf>
    8d04:	edd57a31 	vldr	s15, [r5, #196]	@ 0xc4
    8d08:	eef86ae7 	vcvt.f32.s32	s13, s15
    8d0c:	edd57a3b 	vldr	s15, [r5, #236]	@ 0xec
    8d10:	eeb87ae7 	vcvt.f32.s32	s14, s15
    8d14:	edd57a2e 	vldr	s15, [r5, #184]	@ 0xb8
    8d18:	eef87ae7 	vcvt.f32.s32	s15, s15
    8d1c:	ee673a88 	vmul.f32	s7, s15, s16
    8d20:	edd57a44 	vldr	s15, [r5, #272]	@ 0x110
    8d24:	ed956a21 	vldr	s12, [r5, #132]	@ 0x84
    8d28:	eeb85ae7 	vcvt.f32.s32	s10, s15
    8d2c:	edd57a4e 	vldr	s15, [r5, #312]	@ 0x138
    8d30:	eeb84ac6 	vcvt.f32.s32	s8, s12
    8d34:	eef85ae7 	vcvt.f32.s32	s11, s15
    8d38:	ed956a14 	vldr	s12, [r5, #80]	@ 0x50
    8d3c:	edd57a41 	vldr	s15, [r5, #260]	@ 0x104
    8d40:	ee666a88 	vmul.f32	s13, s13, s16
    8d44:	eef84ac6 	vcvt.f32.s32	s9, s12
    8d48:	eeb86ae7 	vcvt.f32.s32	s12, s15
    8d4c:	edd57a34 	vldr	s15, [r5, #208]	@ 0xd0
    8d50:	e2843809 	add	r3, r4, #589824	@ 0x90000
    8d54:	e2842702 	add	r2, r4, #524288	@ 0x80000
    8d58:	ed820a36 	vstr	s0, [r2, #216]	@ 0xd8
    8d5c:	edc36a40 	vstr	s13, [r3, #256]	@ 0x100
    8d60:	eef86ae7 	vcvt.f32.s32	s13, s15
    8d64:	edd57a27 	vldr	s15, [r5, #156]	@ 0x9c
    8d68:	eef87ae7 	vcvt.f32.s32	s15, s15
    8d6c:	ee273a08 	vmul.f32	s6, s14, s16
    8d70:	ee244a08 	vmul.f32	s8, s8, s16
    8d74:	ee644a88 	vmul.f32	s9, s9, s16
    8d78:	ee255a08 	vmul.f32	s10, s10, s16
    8d7c:	ee655a88 	vmul.f32	s11, s11, s16
    8d80:	ee266a08 	vmul.f32	s12, s12, s16
    8d84:	ee666a88 	vmul.f32	s13, s13, s16
    8d88:	ee677a88 	vmul.f32	s15, s15, s16
    8d8c:	e59520c4 	ldr	r2, [r5, #196]	@ 0xc4
    8d90:	ed957a57 	vldr	s14, [r5, #348]	@ 0x15c
    8d94:	e58320fc 	str	r2, [r3, #252]	@ 0xfc
    8d98:	e59520ec 	ldr	r2, [r5, #236]	@ 0xec
    8d9c:	e2843812 	add	r3, r4, #1179648	@ 0x120000
    8da0:	e5832124 	str	r2, [r3, #292]	@ 0x124
    8da4:	e59520b8 	ldr	r2, [r5, #184]	@ 0xb8
    8da8:	ed833a4a 	vstr	s6, [r3, #296]	@ 0x128
    8dac:	e2843705 	add	r3, r4, #1310720	@ 0x140000
    8db0:	e5832164 	str	r2, [r3, #356]	@ 0x164
    8db4:	e5952084 	ldr	r2, [r5, #132]	@ 0x84
    8db8:	edc33a5a 	vstr	s7, [r3, #360]	@ 0x168
    8dbc:	e2843816 	add	r3, r4, #1441792	@ 0x160000
    8dc0:	e58321a4 	str	r2, [r3, #420]	@ 0x1a4
    8dc4:	e5952050 	ldr	r2, [r5, #80]	@ 0x50
    8dc8:	ed834a6a 	vstr	s8, [r3, #424]	@ 0x1a8
    8dcc:	e2843706 	add	r3, r4, #1572864	@ 0x180000
    8dd0:	e58321e4 	str	r2, [r3, #484]	@ 0x1e4
    8dd4:	e5952110 	ldr	r2, [r5, #272]	@ 0x110
    8dd8:	edc34a7a 	vstr	s9, [r3, #488]	@ 0x1e8
    8ddc:	e2843819 	add	r3, r4, #1638400	@ 0x190000
    8de0:	e583220c 	str	r2, [r3, #524]	@ 0x20c
    8de4:	e5952138 	ldr	r2, [r5, #312]	@ 0x138
    8de8:	ed835a84 	vstr	s10, [r3, #528]	@ 0x210
    8dec:	e284381a 	add	r3, r4, #1703936	@ 0x1a0000
    8df0:	e5832234 	str	r2, [r3, #564]	@ 0x234
    8df4:	edc35a8e 	vstr	s11, [r3, #568]	@ 0x238
    8df8:	e5952104 	ldr	r2, [r5, #260]	@ 0x104
    8dfc:	e2843707 	add	r3, r4, #1835008	@ 0x1c0000
    8e00:	e5832274 	str	r2, [r3, #628]	@ 0x274
    8e04:	e59520d0 	ldr	r2, [r5, #208]	@ 0xd0
    8e08:	ed836a9e 	vstr	s12, [r3, #632]	@ 0x278
    8e0c:	e284381e 	add	r3, r4, #1966080	@ 0x1e0000
    8e10:	edc36aae 	vstr	s13, [r3, #696]	@ 0x2b8
    8e14:	e58322b4 	str	r2, [r3, #692]	@ 0x2b4
    8e18:	e2843602 	add	r3, r4, #2097152	@ 0x200000
    8e1c:	edc37abe 	vstr	s15, [r3, #760]	@ 0x2f8
    8e20:	edd57a61 	vldr	s15, [r5, #388]	@ 0x184
    8e24:	eeb87ac7 	vcvt.f32.s32	s14, s14
    8e28:	eef87ae7 	vcvt.f32.s32	s15, s15
    8e2c:	ee277a08 	vmul.f32	s14, s14, s16
    8e30:	ee677a88 	vmul.f32	s15, s15, s16
    8e34:	e595209c 	ldr	r2, [r5, #156]	@ 0x9c
    8e38:	e595111c 	ldr	r1, [r5, #284]	@ 0x11c
    8e3c:	e58322f4 	str	r2, [r3, #756]	@ 0x2f4
    8e40:	e595315c 	ldr	r3, [r5, #348]	@ 0x15c
    8e44:	e2842821 	add	r2, r4, #2162688	@ 0x210000
    8e48:	e582331c 	str	r3, [r2, #796]	@ 0x31c
    8e4c:	e2843822 	add	r3, r4, #2228224	@ 0x220000
    8e50:	ed827ac8 	vstr	s14, [r2, #800]	@ 0x320
    8e54:	edc37ad2 	vstr	s15, [r3, #840]	@ 0x348
    8e58:	ed957a54 	vldr	s14, [r5, #336]	@ 0x150
    8e5c:	ee071a90 	vmov	s15, r1
    8e60:	e5952184 	ldr	r2, [r5, #388]	@ 0x184
    8e64:	e2840709 	add	r0, r4, #2359296	@ 0x240000
    8e68:	e5832344 	str	r2, [r3, #836]	@ 0x344
    8e6c:	e59520e8 	ldr	r2, [r5, #232]	@ 0xe8
    8e70:	ed807ae1 	vstr	s14, [r0, #900]	@ 0x384
    8e74:	eef86ac7 	vcvt.f32.s32	s13, s14
    8e78:	eeb87ae7 	vcvt.f32.s32	s14, s15
    8e7c:	ee072a90 	vmov	s15, r2
    8e80:	eef87ae7 	vcvt.f32.s32	s15, s15
    8e84:	ee666a88 	vmul.f32	s13, s13, s16
    8e88:	ee277a08 	vmul.f32	s14, s14, s16
    8e8c:	ee677a88 	vmul.f32	s15, s15, s16
    8e90:	ecbd8b02 	vpop	{d8}
    8e94:	e284370a 	add	r3, r4, #2621440	@ 0x280000
    8e98:	e2844826 	add	r4, r4, #2490368	@ 0x260000
    8e9c:	edc06ae2 	vstr	s13, [r0, #904]	@ 0x388
    8ea0:	e58413c4 	str	r1, [r4, #964]	@ 0x3c4
    8ea4:	e2831b01 	add	r1, r3, #1024	@ 0x400
    8ea8:	ed847af2 	vstr	s14, [r4, #968]	@ 0x3c8
    8eac:	e5832404 	str	r2, [r3, #1028]	@ 0x404
    8eb0:	edc17a02 	vstr	s15, [r1, #8]
    8eb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8eb8:	38d1b717 	.word	0x38d1b717
    8ebc:	3f800000 	.word	0x3f800000
    8ec0:	483b8000 	.word	0x483b8000
    8ec4:	40490fdb 	.word	0x40490fdb
    8ec8:	3e4ccccd 	.word	0x3e4ccccd
    8ecc:	477ffd00 	.word	0x477ffd00
    8ed0:	0001f6f4 	.word	0x0001f6f4

00008ed4 <instanceInitmydsp>:
    8ed4:	e92d4010 	push	{r4, lr}
    8ed8:	e1a04000 	mov	r4, r0
    8edc:	ebffff3b 	bl	8bd0 <instanceConstantsmydsp>
    8ee0:	e1a00004 	mov	r0, r4
    8ee4:	e8bd4010 	pop	{r4, lr}
    8ee8:	eafffd90 	b	8530 <instanceClearmydsp>

00008eec <initmydsp>:
    8eec:	e92d4070 	push	{r4, r5, r6, lr}
    8ef0:	e1a04000 	mov	r4, r0
    8ef4:	e1a05001 	mov	r5, r1
    8ef8:	e1a00001 	mov	r0, r1
    8efc:	ebfffd6b 	bl	84b0 <classInitmydsp>
    8f00:	e1a00004 	mov	r0, r4
    8f04:	e1a01005 	mov	r1, r5
    8f08:	ebffff30 	bl	8bd0 <instanceConstantsmydsp>
    8f0c:	e1a00004 	mov	r0, r4
    8f10:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f14:	eafffd85 	b	8530 <instanceClearmydsp>

00008f18 <buildUserInterfacemydsp>:
    8f18:	e92d4010 	push	{r4, lr}
    8f1c:	e1a04001 	mov	r4, r1
    8f20:	e59f1014 	ldr	r1, [pc, #20]	@ 8f3c <buildUserInterfacemydsp+0x24>
    8f24:	e8940009 	ldm	r4, {r0, r3}
    8f28:	e12fff33 	blx	r3
    8f2c:	e594300c 	ldr	r3, [r4, #12]
    8f30:	e5940000 	ldr	r0, [r4]
    8f34:	e8bd4010 	pop	{r4, lr}
    8f38:	e12fff13 	bx	r3
    8f3c:	0001b3ec 	.word	0x0001b3ec

00008f40 <computemydsp>:
    8f40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f44:	ed2d8b10 	vpush	{d8-d15}
    8f48:	e251c000 	subs	ip, r1, #0
    8f4c:	e1a04000 	mov	r4, r0
    8f50:	e5921000 	ldr	r1, [r2]
    8f54:	e5920004 	ldr	r0, [r2, #4]
    8f58:	e24ddf41 	sub	sp, sp, #260	@ 0x104
    8f5c:	e1c320d0 	ldrd	r2, [r3]
    8f60:	da0008c9 	ble	b28c <computemydsp+0x234c>
    8f64:	e58d3064 	str	r3, [sp, #100]	@ 0x64
    8f68:	e3a03000 	mov	r3, #0
    8f6c:	edd46a05 	vldr	s13, [r4, #20]
    8f70:	e58d3060 	str	r3, [sp, #96]	@ 0x60
    8f74:	e2843702 	add	r3, r4, #524288	@ 0x80000
    8f78:	e58d3000 	str	r3, [sp]
    8f7c:	e2843706 	add	r3, r4, #1572864	@ 0x180000
    8f80:	e58d3050 	str	r3, [sp, #80]	@ 0x50
    8f84:	e2843816 	add	r3, r4, #1441792	@ 0x160000
    8f88:	e58d3048 	str	r3, [sp, #72]	@ 0x48
    8f8c:	e2843705 	add	r3, r4, #1310720	@ 0x140000
    8f90:	e58d3038 	str	r3, [sp, #56]	@ 0x38
    8f94:	e2843812 	add	r3, r4, #1179648	@ 0x120000
    8f98:	e58d3008 	str	r3, [sp, #8]
    8f9c:	e2843809 	add	r3, r4, #589824	@ 0x90000
    8fa0:	e58d3004 	str	r3, [sp, #4]
    8fa4:	e2843817 	add	r3, r4, #1507328	@ 0x170000
    8fa8:	e58d3034 	str	r3, [sp, #52]	@ 0x34
    8fac:	e2843815 	add	r3, r4, #1376256	@ 0x150000
    8fb0:	e58d302c 	str	r3, [sp, #44]	@ 0x2c
    8fb4:	e2843813 	add	r3, r4, #1245184	@ 0x130000
    8fb8:	e58d3024 	str	r3, [sp, #36]	@ 0x24
    8fbc:	e2843602 	add	r3, r4, #2097152	@ 0x200000
    8fc0:	e58d304c 	str	r3, [sp, #76]	@ 0x4c
    8fc4:	e284381e 	add	r3, r4, #1966080	@ 0x1e0000
    8fc8:	e58d3040 	str	r3, [sp, #64]	@ 0x40
    8fcc:	e284381f 	add	r3, r4, #2031616	@ 0x1f0000
    8fd0:	e58d3030 	str	r3, [sp, #48]	@ 0x30
    8fd4:	e284381d 	add	r3, r4, #1900544	@ 0x1d0000
    8fd8:	e58d303c 	str	r3, [sp, #60]	@ 0x3c
    8fdc:	e284381b 	add	r3, r4, #1769472	@ 0x1b0000
    8fe0:	e58d3020 	str	r3, [sp, #32]
    8fe4:	e284370a 	add	r3, r4, #2621440	@ 0x280000
    8fe8:	e58d3070 	str	r3, [sp, #112]	@ 0x70
    8fec:	e2843826 	add	r3, r4, #2490368	@ 0x260000
    8ff0:	e58d3010 	str	r3, [sp, #16]
    8ff4:	e2843709 	add	r3, r4, #2359296	@ 0x240000
    8ff8:	e58d300c 	str	r3, [sp, #12]
    8ffc:	e2843822 	add	r3, r4, #2228224	@ 0x220000
    9000:	e58d3018 	str	r3, [sp, #24]
    9004:	e2843821 	add	r3, r4, #2162688	@ 0x210000
    9008:	e58d3014 	str	r3, [sp, #20]
    900c:	e2843827 	add	r3, r4, #2555904	@ 0x270000
    9010:	e58d3044 	str	r3, [sp, #68]	@ 0x44
    9014:	e2843825 	add	r3, r4, #2424832	@ 0x250000
    9018:	e58d3028 	str	r3, [sp, #40]	@ 0x28
    901c:	e2843823 	add	r3, r4, #2293760	@ 0x230000
    9020:	ed9fea0a 	vldr	s28, [pc, #40]	@ 9050 <computemydsp+0x110>
    9024:	eeb07a66 	vmov.f32	s14, s13
    9028:	e5946004 	ldr	r6, [r4, #4]
    902c:	e58d005c 	str	r0, [sp, #92]	@ 0x5c
    9030:	e58d106c 	str	r1, [sp, #108]	@ 0x6c
    9034:	e58d2068 	str	r2, [sp, #104]	@ 0x68
    9038:	e2848707 	add	r8, r4, #1835008	@ 0x1c0000
    903c:	e284b81a 	add	fp, r4, #1703936	@ 0x1a0000
    9040:	e284a819 	add	sl, r4, #1638400	@ 0x190000
    9044:	e58d301c 	str	r3, [sp, #28]
    9048:	e58dc0fc 	str	ip, [sp, #252]	@ 0xfc
    904c:	ea0006e9 	b	abf8 <computemydsp+0x1cb8>
    9050:	3f7ff972 	.word	0x3f7ff972
    9054:	00003fff 	.word	0x00003fff
    9058:	000a010a 	.word	0x000a010a
    905c:	0001ffff 	.word	0x0001ffff
    9060:	00000000 	.word	0x00000000
    9064:	47800000 	.word	0x47800000
    9068:	3f000000 	.word	0x3f000000
    906c:	3fbfffac 	.word	0x3fbfffac
    9070:	40000000 	.word	0x40000000
    9074:	3f800000 	.word	0x3f800000
    9078:	41080005 	.word	0x41080005
    907c:	41100000 	.word	0x41100000
    9080:	41200000 	.word	0x41200000
    9084:	41000000 	.word	0x41000000
    9088:	40c00000 	.word	0x40c00000
    908c:	40e00000 	.word	0x40e00000
    9090:	3d2aaaab 	.word	0x3d2aaaab
    9094:	3e2aaaab 	.word	0x3e2aaaab
    9098:	3e800000 	.word	0x3e800000
    909c:	edd20a3a 	vldr	s1, [r2, #232]	@ 0xe8
    90a0:	ed5f7a0d 	vldr	s15, [pc, #-52]	@ 9074 <computemydsp+0x134>
    90a4:	eef50ac0 	vcmpe.f32	s1, #0.0
    90a8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    90ac:	eef40ae7 	vcmpe.f32	s1, s15
    90b0:	c3a03001 	movgt	r3, #1
    90b4:	d3a03000 	movle	r3, #0
    90b8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    90bc:	53a03000 	movpl	r3, #0
    90c0:	42033001 	andmi	r3, r3, #1
    90c4:	e3530000 	cmp	r3, #0
    90c8:	1a000000 	bne	90d0 <computemydsp+0x190>
    90cc:	ed1f7a1d 	vldr	s14, [pc, #-116]	@ 9060 <computemydsp+0x120>
    90d0:	e59d5000 	ldr	r5, [sp]
    90d4:	ee770a20 	vadd.f32	s1, s14, s1
    90d8:	ed857a37 	vstr	s14, [r5, #220]	@ 0xdc
    90dc:	ed1f0a1c 	vldr	s0, [pc, #-112]	@ 9074 <computemydsp+0x134>
    90e0:	eb004672 	bl	1aab0 <fminf>
    90e4:	eef00a40 	vmov.f32	s1, s0
    90e8:	ed1f0a24 	vldr	s0, [pc, #-144]	@ 9060 <computemydsp+0x120>
    90ec:	eb00465b 	bl	1aa60 <fmaxf>
    90f0:	ed957a3a 	vldr	s14, [r5, #232]	@ 0xe8
    90f4:	ed5f6a22 	vldr	s13, [pc, #-136]	@ 9074 <computemydsp+0x134>
    90f8:	edd57a3e 	vldr	s15, [r5, #248]	@ 0xf8
    90fc:	eeb47ae6 	vcmpe.f32	s14, s13
    9100:	edd50a36 	vldr	s1, [r5, #216]	@ 0xd8
    9104:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9108:	eef47a60 	vcmp.f32	s15, s1
    910c:	a3a03001 	movge	r3, #1
    9110:	b3a03000 	movlt	r3, #0
    9114:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9118:	03a03000 	moveq	r3, #0
    911c:	12033001 	andne	r3, r3, #1
    9120:	e3530000 	cmp	r3, #0
    9124:	ed850a39 	vstr	s0, [r5, #228]	@ 0xe4
    9128:	1a00000b 	bne	915c <computemydsp+0x21c>
    912c:	eeb57ac0 	vcmpe.f32	s14, #0.0
    9130:	ed957a3c 	vldr	s14, [r5, #240]	@ 0xf0
    9134:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9138:	eef40a47 	vcmp.f32	s1, s14
    913c:	93a03001 	movls	r3, #1
    9140:	83a03000 	movhi	r3, #0
    9144:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9148:	03a03000 	moveq	r3, #0
    914c:	12033001 	andne	r3, r3, #1
    9150:	e3530000 	cmp	r3, #0
    9154:	1ef07a60 	vmovne.f32	s15, s1
    9158:	eef00a47 	vmov.f32	s1, s14
    915c:	e59d7000 	ldr	r7, [sp]
    9160:	ed1f0a42 	vldr	s0, [pc, #-264]	@ 9060 <computemydsp+0x120>
    9164:	edc77a3d 	vstr	s15, [r7, #244]	@ 0xf4
    9168:	edc70a3b 	vstr	s1, [r7, #236]	@ 0xec
    916c:	eb00463b 	bl	1aa60 <fmaxf>
    9170:	eef00a40 	vmov.f32	s1, s0
    9174:	ed1f0a46 	vldr	s0, [pc, #-280]	@ 9064 <computemydsp+0x124>
    9178:	eb00464c 	bl	1aab0 <fminf>
    917c:	eefd7ac0 	vcvt.s32.f32	s15, s0
    9180:	ee171a90 	vmov	r1, s15
    9184:	e59420d4 	ldr	r2, [r4, #212]	@ 0xd4
    9188:	e51f3134 	ldr	r3, [pc, #-308]	@ 905c <computemydsp+0x11c>
    918c:	e0422001 	sub	r2, r2, r1
    9190:	e0022003 	and	r2, r2, r3
    9194:	e0842102 	add	r2, r4, r2, lsl #2
    9198:	edd70a3d 	vldr	s1, [r7, #244]	@ 0xf4
    919c:	ed1f0a51 	vldr	s0, [pc, #-324]	@ 9060 <computemydsp+0x120>
    91a0:	edd29a36 	vldr	s19, [r2, #216]	@ 0xd8
    91a4:	edcd7a30 	vstr	s15, [sp, #192]	@ 0xc0
    91a8:	eb00462c 	bl	1aa60 <fmaxf>
    91ac:	eef00a40 	vmov.f32	s1, s0
    91b0:	ed1f0a55 	vldr	s0, [pc, #-340]	@ 9064 <computemydsp+0x124>
    91b4:	eb00463d 	bl	1aab0 <fminf>
    91b8:	e59d205c 	ldr	r2, [sp, #92]	@ 0x5c
    91bc:	ed973a39 	vldr	s6, [r7, #228]	@ 0xe4
    91c0:	ecf27a01 	vldmia	r2!, {s15}
    91c4:	e58d7000 	str	r7, [sp]
    91c8:	e58d205c 	str	r2, [sp, #92]	@ 0x5c
    91cc:	e59d7004 	ldr	r7, [sp, #4]
    91d0:	e59d2050 	ldr	r2, [sp, #80]	@ 0x50
    91d4:	eebd4ac0 	vcvt.s32.f32	s8, s0
    91d8:	ed927a82 	vldr	s14, [r2, #520]	@ 0x208
    91dc:	e59720fc 	ldr	r2, [r7, #252]	@ 0xfc
    91e0:	edd74a42 	vldr	s9, [r7, #264]	@ 0x108
    91e4:	e0030692 	mul	r3, r2, r6
    91e8:	ee053a90 	vmov	s11, r3
    91ec:	ee143a10 	vmov	r3, s8
    91f0:	eef85ae5 	vcvt.f32.s32	s11, s11
    91f4:	e59490d4 	ldr	r9, [r4, #212]	@ 0xd4
    91f8:	ee755aa4 	vadd.f32	s11, s11, s9
    91fc:	e0492003 	sub	r2, r9, r3
    9200:	e51f31ac 	ldr	r3, [pc, #-428]	@ 905c <computemydsp+0x11c>
    9204:	ed8d4a31 	vstr	s8, [sp, #196]	@ 0xc4
    9208:	e0022003 	and	r2, r2, r3
    920c:	e0842102 	add	r2, r4, r2, lsl #2
    9210:	edd24a36 	vldr	s9, [r2, #216]	@ 0xd8
    9214:	ed974a40 	vldr	s8, [r7, #256]	@ 0x100
    9218:	ed1f5a6e 	vldr	s10, [pc, #-440]	@ 9068 <computemydsp+0x128>
    921c:	ee054a8e 	vmla.f32	s8, s11, s28
    9220:	ee744ae9 	vsub.f32	s9, s9, s19
    9224:	eef05a69 	vmov.f32	s11, s19
    9228:	ee6f3a85 	vmul.f32	s7, s31, s10
    922c:	ee445a83 	vmla.f32	s11, s9, s6
    9230:	e59d1048 	ldr	r1, [sp, #72]	@ 0x48
    9234:	ee457aa3 	vmla.f32	s15, s11, s7
    9238:	edd16a72 	vldr	s13, [r1, #456]	@ 0x1c8
    923c:	ee287a07 	vmul.f32	s14, s16, s14
    9240:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
    9244:	ee187aa7 	vnmls.f32	s14, s17, s15
    9248:	ed9c6a62 	vldr	s12, [ip, #392]	@ 0x188
    924c:	ee686a26 	vmul.f32	s13, s16, s13
    9250:	ee286a06 	vmul.f32	s12, s16, s12
    9254:	ee586a87 	vnmls.f32	s13, s17, s14
    9258:	ed1faa7d 	vldr	s20, [pc, #-500]	@ 906c <computemydsp+0x12c>
    925c:	ee186aa6 	vnmls.f32	s12, s17, s13
    9260:	e59de008 	ldr	lr, [sp, #8]
    9264:	ee685a86 	vmul.f32	s11, s17, s12
    9268:	edde4a52 	vldr	s9, [lr, #328]	@ 0x148
    926c:	ee749a4a 	vsub.f32	s19, s8, s20
    9270:	ee585a24 	vnmls.f32	s11, s16, s9
    9274:	edcd7a3d 	vstr	s15, [sp, #244]	@ 0xf4
    9278:	eefd7ae9 	vcvt.s32.f32	s15, s19
    927c:	e51f5230 	ldr	r5, [pc, #-560]	@ 9054 <computemydsp+0x114>
    9280:	ee171a90 	vmov	r1, s15
    9284:	e0092005 	and	r2, r9, r5
    9288:	e2822802 	add	r2, r2, #131072	@ 0x20000
    928c:	e282203e 	add	r2, r2, #62	@ 0x3e
    9290:	e0842102 	add	r2, r4, r2, lsl #2
    9294:	edc25a01 	vstr	s11, [r2, #4]
    9298:	e3a00000 	mov	r0, #0
    929c:	ed874a41 	vstr	s8, [r7, #260]	@ 0x104
    92a0:	ed8d7a3c 	vstr	s14, [sp, #240]	@ 0xf0
    92a4:	edcd6a3b 	vstr	s13, [sp, #236]	@ 0xec
    92a8:	ed8d6a3a 	vstr	s12, [sp, #232]	@ 0xe8
    92ac:	ed8d5a3e 	vstr	s10, [sp, #248]	@ 0xf8
    92b0:	ebfffb6f 	bl	8074 <max>
    92b4:	e1a01000 	mov	r1, r0
    92b8:	e3a00a02 	mov	r0, #8192	@ 0x2000
    92bc:	ebfffb69 	bl	8068 <min>
    92c0:	e0499000 	sub	r9, r9, r0
    92c4:	e0099005 	and	r9, r9, r5
    92c8:	e2899802 	add	r9, r9, #131072	@ 0x20000
    92cc:	e289903e 	add	r9, r9, #62	@ 0x3e
    92d0:	e0849109 	add	r9, r4, r9, lsl #2
    92d4:	edd9da01 	vldr	s27, [r9, #4]
    92d8:	eeb00a69 	vmov.f32	s0, s19
    92dc:	edc7da43 	vstr	s27, [r7, #268]	@ 0x10c
    92e0:	eb00461d 	bl	1ab5c <floorf>
    92e4:	ed5f9a9f 	vldr	s19, [pc, #-636]	@ 9070 <computemydsp+0x130>
    92e8:	ed974a41 	vldr	s8, [r7, #260]	@ 0x104
    92ec:	edd73a46 	vldr	s7, [r7, #280]	@ 0x118
    92f0:	ee795ac4 	vsub.f32	s11, s19, s8
    92f4:	ee733aed 	vsub.f32	s7, s7, s27
    92f8:	ee344a40 	vsub.f32	s8, s8, s0
    92fc:	ee350a80 	vadd.f32	s0, s11, s0
    9300:	ee200a23 	vmul.f32	s0, s0, s7
    9304:	ed5f7aa6 	vldr	s15, [pc, #-664]	@ 9074 <computemydsp+0x134>
    9308:	eec03a04 	vdiv.f32	s7, s0, s8
    930c:	ed944a33 	vldr	s8, [r4, #204]	@ 0xcc
    9310:	ee344a27 	vadd.f32	s8, s8, s15
    9314:	ed5f4aa9 	vldr	s9, [pc, #-676]	@ 9078 <computemydsp+0x138>
    9318:	ee244a0d 	vmul.f32	s8, s8, s26
    931c:	edd75a44 	vldr	s11, [r7, #272]	@ 0x110
    9320:	ee34da24 	vadd.f32	s26, s8, s9
    9324:	ee755ae3 	vsub.f32	s11, s11, s7
    9328:	eeb00a4d 	vmov.f32	s0, s26
    932c:	edc75a45 	vstr	s11, [r7, #276]	@ 0x114
    9330:	edc75a47 	vstr	s11, [r7, #284]	@ 0x11c
    9334:	ed8d4a32 	vstr	s8, [sp, #200]	@ 0xc8
    9338:	e58d7004 	str	r7, [sp, #4]
    933c:	eb004606 	bl	1ab5c <floorf>
    9340:	ed1f2ab3 	vldr	s4, [pc, #-716]	@ 907c <computemydsp+0x13c>
    9344:	ed5f4ab3 	vldr	s9, [pc, #-716]	@ 9080 <computemydsp+0x140>
    9348:	ed9d4a32 	vldr	s8, [sp, #200]	@ 0xc8
    934c:	ee322a40 	vsub.f32	s4, s4, s0
    9350:	ee744ac0 	vsub.f32	s9, s9, s0
    9354:	ed5f2ab6 	vldr	s5, [pc, #-728]	@ 9084 <computemydsp+0x144>
    9358:	ed5f5ab6 	vldr	s11, [pc, #-728]	@ 9088 <computemydsp+0x148>
    935c:	eefd7acd 	vcvt.s32.f32	s15, s26
    9360:	ee322a04 	vadd.f32	s4, s4, s8
    9364:	ee744a84 	vadd.f32	s9, s9, s8
    9368:	ee722ac0 	vsub.f32	s5, s5, s0
    936c:	ee755ac0 	vsub.f32	s11, s11, s0
    9370:	ed5fdabb 	vldr	s27, [pc, #-748]	@ 908c <computemydsp+0x14c>
    9374:	ee179a90 	vmov	r9, s15
    9378:	ee755a84 	vadd.f32	s11, s11, s8
    937c:	ee223a24 	vmul.f32	s6, s4, s9
    9380:	ee722a84 	vadd.f32	s5, s5, s8
    9384:	ee7ddac0 	vsub.f32	s27, s27, s0
    9388:	e59420d4 	ldr	r2, [r4, #212]	@ 0xd4
    938c:	e1a01009 	mov	r1, r9
    9390:	e3a00000 	mov	r0, #0
    9394:	edcd5a39 	vstr	s11, [sp, #228]	@ 0xe4
    9398:	ee22da83 	vmul.f32	s26, s5, s6
    939c:	ee7dda84 	vadd.f32	s27, s27, s8
    93a0:	ed8d3a35 	vstr	s6, [sp, #212]	@ 0xd4
    93a4:	edcd2a38 	vstr	s5, [sp, #224]	@ 0xe0
    93a8:	edcd4a33 	vstr	s9, [sp, #204]	@ 0xcc
    93ac:	ed8d2a32 	vstr	s4, [sp, #200]	@ 0xc8
    93b0:	e58d20d0 	str	r2, [sp, #208]	@ 0xd0
    93b4:	ebfffb2e 	bl	8074 <max>
    93b8:	e1a01000 	mov	r1, r0
    93bc:	e3a00c02 	mov	r0, #512	@ 0x200
    93c0:	ebfffb28 	bl	8068 <min>
    93c4:	e1a01000 	mov	r1, r0
    93c8:	e59d20d0 	ldr	r2, [sp, #208]	@ 0xd0
    93cc:	e2811001 	add	r1, r1, #1
    93d0:	e0422001 	sub	r2, r2, r1
    93d4:	e51f7384 	ldr	r7, [pc, #-900]	@ 9058 <computemydsp+0x118>
    93d8:	e1a02b02 	lsl	r2, r2, #22
    93dc:	e1a02b22 	lsr	r2, r2, #22
    93e0:	e0822007 	add	r2, r2, r7
    93e4:	e0842102 	add	r2, r4, r2, lsl #2
    93e8:	ed1f4ad8 	vldr	s8, [pc, #-864]	@ 9090 <computemydsp+0x150>
    93ec:	ed920a01 	vldr	s0, [r2, #4]
    93f0:	ed5f3ad9 	vldr	s7, [pc, #-868]	@ 9094 <computemydsp+0x154>
    93f4:	ee200a04 	vmul.f32	s0, s0, s8
    93f8:	ed9d2a32 	vldr	s4, [sp, #200]	@ 0xc8
    93fc:	eddd4a33 	vldr	s9, [sp, #204]	@ 0xcc
    9400:	ee200a02 	vmul.f32	s0, s0, s4
    9404:	ee644aa3 	vmul.f32	s9, s9, s7
    9408:	e59420d4 	ldr	r2, [r4, #212]	@ 0xd4
    940c:	e2891001 	add	r1, r9, #1
    9410:	e3a00000 	mov	r0, #0
    9414:	ed8d4a36 	vstr	s8, [sp, #216]	@ 0xd8
    9418:	edcd3a37 	vstr	s7, [sp, #220]	@ 0xdc
    941c:	edcd4a34 	vstr	s9, [sp, #208]	@ 0xd0
    9420:	ed8d0a32 	vstr	s0, [sp, #200]	@ 0xc8
    9424:	e58d20cc 	str	r2, [sp, #204]	@ 0xcc
    9428:	ebfffb11 	bl	8074 <max>
    942c:	e1a01000 	mov	r1, r0
    9430:	e3a00c02 	mov	r0, #512	@ 0x200
    9434:	ebfffb0b 	bl	8068 <min>
    9438:	ed9d3a35 	vldr	s6, [sp, #212]	@ 0xd4
    943c:	ed1f2aeb 	vldr	s4, [pc, #-940]	@ 9098 <computemydsp+0x158>
    9440:	e59d20cc 	ldr	r2, [sp, #204]	@ 0xcc
    9444:	e2800001 	add	r0, r0, #1
    9448:	e0422000 	sub	r2, r2, r0
    944c:	e1a02b02 	lsl	r2, r2, #22
    9450:	e1a02b22 	lsr	r2, r2, #22
    9454:	e0822007 	add	r2, r2, r7
    9458:	e0842102 	add	r2, r4, r2, lsl #2
    945c:	ee233a02 	vmul.f32	s6, s6, s4
    9460:	eddd4a34 	vldr	s9, [sp, #208]	@ 0xd0
    9464:	ed922a01 	vldr	s4, [r2, #4]
    9468:	ed9d0a32 	vldr	s0, [sp, #200]	@ 0xc8
    946c:	eddd2a38 	vldr	s5, [sp, #224]	@ 0xe0
    9470:	ee040ac2 	vmls.f32	s0, s9, s4
    9474:	ee200a22 	vmul.f32	s0, s0, s5
    9478:	e59420d4 	ldr	r2, [r4, #212]	@ 0xd4
    947c:	e2891002 	add	r1, r9, #2
    9480:	e3a00000 	mov	r0, #0
    9484:	ed8d3a35 	vstr	s6, [sp, #212]	@ 0xd4
    9488:	ed8d0a33 	vstr	s0, [sp, #204]	@ 0xcc
    948c:	e58d20c8 	str	r2, [sp, #200]	@ 0xc8
    9490:	ebfffaf7 	bl	8074 <max>
    9494:	e1a01000 	mov	r1, r0
    9498:	e3a00c02 	mov	r0, #512	@ 0x200
    949c:	ebfffaf1 	bl	8068 <min>
    94a0:	e1a01000 	mov	r1, r0
    94a4:	e59d20c8 	ldr	r2, [sp, #200]	@ 0xc8
    94a8:	e2811001 	add	r1, r1, #1
    94ac:	e0422001 	sub	r2, r2, r1
    94b0:	e1a02b02 	lsl	r2, r2, #22
    94b4:	e1a02b22 	lsr	r2, r2, #22
    94b8:	e0822007 	add	r2, r2, r7
    94bc:	e0842102 	add	r2, r4, r2, lsl #2
    94c0:	ed9d3a35 	vldr	s6, [sp, #212]	@ 0xd4
    94c4:	edd24a01 	vldr	s9, [r2, #4]
    94c8:	ed9d0a33 	vldr	s0, [sp, #204]	@ 0xcc
    94cc:	eddd3a37 	vldr	s7, [sp, #220]	@ 0xdc
    94d0:	ee030a24 	vmla.f32	s0, s6, s9
    94d4:	ee6d3a23 	vmul.f32	s7, s26, s7
    94d8:	ee200a2d 	vmul.f32	s0, s0, s27
    94dc:	e59420d4 	ldr	r2, [r4, #212]	@ 0xd4
    94e0:	e2891003 	add	r1, r9, #3
    94e4:	e3a00000 	mov	r0, #0
    94e8:	edcd3a34 	vstr	s7, [sp, #208]	@ 0xd0
    94ec:	ed8d0a32 	vstr	s0, [sp, #200]	@ 0xc8
    94f0:	e58d20cc 	str	r2, [sp, #204]	@ 0xcc
    94f4:	ebfffade 	bl	8074 <max>
    94f8:	e1a01000 	mov	r1, r0
    94fc:	e3a00c02 	mov	r0, #512	@ 0x200
    9500:	ebfffad8 	bl	8068 <min>
    9504:	e59d20cc 	ldr	r2, [sp, #204]	@ 0xcc
    9508:	e2800001 	add	r0, r0, #1
    950c:	e0422000 	sub	r2, r2, r0
    9510:	e1a02b02 	lsl	r2, r2, #22
    9514:	e1a02b22 	lsr	r2, r2, #22
    9518:	e0822007 	add	r2, r2, r7
    951c:	e0842102 	add	r2, r4, r2, lsl #2
    9520:	edd24a01 	vldr	s9, [r2, #4]
    9524:	ed9d4a36 	vldr	s8, [sp, #216]	@ 0xd8
    9528:	eddd3a34 	vldr	s7, [sp, #208]	@ 0xd0
    952c:	ed9d0a32 	vldr	s0, [sp, #200]	@ 0xc8
    9530:	ee2dda04 	vmul.f32	s26, s26, s8
    9534:	ee030ae4 	vmls.f32	s0, s7, s9
    9538:	eddd5a39 	vldr	s11, [sp, #228]	@ 0xe4
    953c:	e2891004 	add	r1, r9, #4
    9540:	e3a00000 	mov	r0, #0
    9544:	ee2dda2d 	vmul.f32	s26, s26, s27
    9548:	e59490d4 	ldr	r9, [r4, #212]	@ 0xd4
    954c:	ee60da25 	vmul.f32	s27, s0, s11
    9550:	ebfffac7 	bl	8074 <max>
    9554:	e1a01000 	mov	r1, r0
    9558:	e3a00c02 	mov	r0, #512	@ 0x200
    955c:	ebfffac1 	bl	8068 <min>
    9560:	e1a02000 	mov	r2, r0
    9564:	e2822001 	add	r2, r2, #1
    9568:	e0499002 	sub	r9, r9, r2
    956c:	e1a09b09 	lsl	r9, r9, #22
    9570:	e1a09b29 	lsr	r9, r9, #22
    9574:	e0899007 	add	r9, r9, r7
    9578:	e0849109 	add	r9, r4, r9, lsl #2
    957c:	edd95a01 	vldr	s11, [r9, #4]
    9580:	eeb00a6d 	vmov.f32	s0, s27
    9584:	ee0d0a25 	vmla.f32	s0, s26, s11
    9588:	e59490d4 	ldr	r9, [r4, #212]	@ 0xd4
    958c:	e59d30c0 	ldr	r3, [sp, #192]	@ 0xc0
    9590:	ed9d5a3e 	vldr	s10, [sp, #248]	@ 0xf8
    9594:	e0492003 	sub	r2, r9, r3
    9598:	e59d30c4 	ldr	r3, [sp, #196]	@ 0xc4
    959c:	e59de008 	ldr	lr, [sp, #8]
    95a0:	e0497003 	sub	r7, r9, r3
    95a4:	e51f3550 	ldr	r3, [pc, #-1360]	@ 905c <computemydsp+0x11c>
    95a8:	ed9e2a4c 	vldr	s4, [lr, #304]	@ 0x130
    95ac:	e0022003 	and	r2, r2, r3
    95b0:	e0077003 	and	r7, r7, r3
    95b4:	e0033009 	and	r3, r3, r9
    95b8:	e2833909 	add	r3, r3, #147456	@ 0x24000
    95bc:	e2833048 	add	r3, r3, #72	@ 0x48
    95c0:	e0843103 	add	r3, r4, r3, lsl #2
    95c4:	ed830a01 	vstr	s0, [r3, #4]
    95c8:	e2877909 	add	r7, r7, #147456	@ 0x24000
    95cc:	e2823909 	add	r3, r2, #147456	@ 0x24000
    95d0:	e2833048 	add	r3, r3, #72	@ 0x48
    95d4:	e2877048 	add	r7, r7, #72	@ 0x48
    95d8:	e0842103 	add	r2, r4, r3, lsl #2
    95dc:	e0847107 	add	r7, r4, r7, lsl #2
    95e0:	edd24a01 	vldr	s9, [r2, #4]
    95e4:	edd73a01 	vldr	s7, [r7, #4]
    95e8:	e59d3000 	ldr	r3, [sp]
    95ec:	ee733ae4 	vsub.f32	s7, s7, s9
    95f0:	ed933a39 	vldr	s6, [r3, #228]	@ 0xe4
    95f4:	ee434a83 	vmla.f32	s9, s7, s6
    95f8:	e59d3034 	ldr	r3, [sp, #52]	@ 0x34
    95fc:	ee245a85 	vmul.f32	s10, s9, s10
    9600:	ed93da78 	vldr	s26, [r3, #480]	@ 0x1e0
    9604:	e59d302c 	ldr	r3, [sp, #44]	@ 0x2c
    9608:	ee28da0d 	vmul.f32	s26, s16, s26
    960c:	edd3da68 	vldr	s27, [r3, #416]	@ 0x1a0
    9610:	e59e3124 	ldr	r3, [lr, #292]	@ 0x124
    9614:	edde4a4a 	vldr	s9, [lr, #296]	@ 0x128
    9618:	e0030693 	mul	r3, r3, r6
    961c:	ee073a90 	vmov	s15, r3
    9620:	e59d306c 	ldr	r3, [sp, #108]	@ 0x6c
    9624:	eeb84ae7 	vcvt.f32.s32	s8, s15
    9628:	ecf35a01 	vldmia	r3!, {s11}
    962c:	ee455a2f 	vmla.f32	s11, s10, s31
    9630:	e58d306c 	str	r3, [sp, #108]	@ 0x6c
    9634:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
    9638:	ee344a02 	vadd.f32	s8, s8, s4
    963c:	edd32a58 	vldr	s5, [r3, #352]	@ 0x160
    9640:	ee18daa5 	vnmls.f32	s26, s17, s11
    9644:	ee68da2d 	vmul.f32	s27, s16, s27
    9648:	e59d7004 	ldr	r7, [sp, #4]
    964c:	ee683a22 	vmul.f32	s7, s16, s5
    9650:	ee444a0e 	vmla.f32	s9, s8, s28
    9654:	ed975a48 	vldr	s10, [r7, #288]	@ 0x120
    9658:	ee58da8d 	vnmls.f32	s27, s17, s26
    965c:	ee340aca 	vsub.f32	s0, s9, s20
    9660:	ee583aad 	vnmls.f32	s7, s17, s27
    9664:	ee285a05 	vmul.f32	s10, s16, s10
    9668:	eefd7ac0 	vcvt.s32.f32	s15, s0
    966c:	ee185aa3 	vnmls.f32	s10, s17, s7
    9670:	e0093005 	and	r3, r9, r5
    9674:	e2833911 	add	r3, r3, #278528	@ 0x44000
    9678:	e2833048 	add	r3, r3, #72	@ 0x48
    967c:	e0843103 	add	r3, r4, r3, lsl #2
    9680:	ed835a01 	vstr	s10, [r3, #4]
    9684:	ee171a90 	vmov	r1, s15
    9688:	edce4a4b 	vstr	s9, [lr, #300]	@ 0x12c
    968c:	e3a00000 	mov	r0, #0
    9690:	eef0fa63 	vmov.f32	s31, s7
    9694:	e1a0700e 	mov	r7, lr
    9698:	edcd5a30 	vstr	s11, [sp, #192]	@ 0xc0
    969c:	ed8d0a02 	vstr	s0, [sp, #8]
    96a0:	ebfffa73 	bl	8074 <max>
    96a4:	e1a01000 	mov	r1, r0
    96a8:	e3a00a02 	mov	r0, #8192	@ 0x2000
    96ac:	ebfffa6d 	bl	8068 <min>
    96b0:	e0499000 	sub	r9, r9, r0
    96b4:	e0099005 	and	r9, r9, r5
    96b8:	e2899911 	add	r9, r9, #278528	@ 0x44000
    96bc:	e2899048 	add	r9, r9, #72	@ 0x48
    96c0:	e0849109 	add	r9, r4, r9, lsl #2
    96c4:	ed995a01 	vldr	s10, [r9, #4]
    96c8:	ed9d0a02 	vldr	s0, [sp, #8]
    96cc:	ed875a4d 	vstr	s10, [r7, #308]	@ 0x134
    96d0:	ed8d5a02 	vstr	s10, [sp, #8]
    96d4:	eb004520 	bl	1ab5c <floorf>
    96d8:	edd74a4b 	vldr	s9, [r7, #300]	@ 0x12c
    96dc:	ed974a50 	vldr	s8, [r7, #320]	@ 0x140
    96e0:	ed9d5a02 	vldr	s10, [sp, #8]
    96e4:	ee344a45 	vsub.f32	s8, s8, s10
    96e8:	ee395ae4 	vsub.f32	s10, s19, s9
    96ec:	ee744ac0 	vsub.f32	s9, s9, s0
    96f0:	ee350a00 	vadd.f32	s0, s10, s0
    96f4:	ee200a04 	vmul.f32	s0, s0, s8
    96f8:	ed9d6a3a 	vldr	s12, [sp, #232]	@ 0xe8
    96fc:	ee804a24 	vdiv.f32	s8, s0, s9
    9700:	ed975a4e 	vldr	s10, [r7, #312]	@ 0x138
    9704:	edd74a52 	vldr	s9, [r7, #328]	@ 0x148
    9708:	ee286a06 	vmul.f32	s12, s16, s12
    970c:	ee355a44 	vsub.f32	s10, s10, s8
    9710:	eefd7aeb 	vcvt.s32.f32	s15, s23
    9714:	ee086aa4 	vmla.f32	s12, s17, s9
    9718:	ed875a4f 	vstr	s10, [r7, #316]	@ 0x13c
    971c:	ed875a51 	vstr	s10, [r7, #324]	@ 0x144
    9720:	e58d7008 	str	r7, [sp, #8]
    9724:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9728:	ee171a90 	vmov	r1, s15
    972c:	e0073005 	and	r3, r7, r5
    9730:	e2833912 	add	r3, r3, #294912	@ 0x48000
    9734:	e2833052 	add	r3, r3, #82	@ 0x52
    9738:	e0843103 	add	r3, r4, r3, lsl #2
    973c:	ed836a01 	vstr	s12, [r3, #4]
    9740:	e3a00000 	mov	r0, #0
    9744:	ebfffa4a 	bl	8074 <max>
    9748:	e1a01000 	mov	r1, r0
    974c:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9750:	ebfffa44 	bl	8068 <min>
    9754:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
    9758:	e0477000 	sub	r7, r7, r0
    975c:	e59c3164 	ldr	r3, [ip, #356]	@ 0x164
    9760:	e0077005 	and	r7, r7, r5
    9764:	e0000693 	mul	r0, r3, r6
    9768:	ee060a10 	vmov	s12, r0
    976c:	e2877912 	add	r7, r7, #294912	@ 0x48000
    9770:	e59d9024 	ldr	r9, [sp, #36]	@ 0x24
    9774:	e2877052 	add	r7, r7, #82	@ 0x52
    9778:	e0847107 	add	r7, r4, r7, lsl #2
    977c:	ed9c4a5c 	vldr	s8, [ip, #368]	@ 0x170
    9780:	edd74a01 	vldr	s9, [r7, #4]
    9784:	ed995a56 	vldr	s10, [r9, #344]	@ 0x158
    9788:	eeb86ac6 	vcvt.f32.s32	s12, s12
    978c:	edc94a53 	vstr	s9, [r9, #332]	@ 0x14c
    9790:	ee366a04 	vadd.f32	s12, s12, s8
    9794:	ee2b5a05 	vmul.f32	s10, s22, s10
    9798:	ee2bba24 	vmul.f32	s22, s22, s9
    979c:	eddc4a5a 	vldr	s9, [ip, #360]	@ 0x168
    97a0:	ee464a0e 	vmla.f32	s9, s12, s28
    97a4:	ee856a0f 	vdiv.f32	s12, s10, s30
    97a8:	ee8b5a0f 	vdiv.f32	s10, s22, s30
    97ac:	ed994a54 	vldr	s8, [r9, #336]	@ 0x150
    97b0:	ee366a05 	vadd.f32	s12, s12, s10
    97b4:	e59d3004 	ldr	r3, [sp, #4]
    97b8:	ee366a04 	vadd.f32	s12, s12, s8
    97bc:	ed935a48 	vldr	s10, [r3, #288]	@ 0x120
    97c0:	ee74baca 	vsub.f32	s23, s9, s20
    97c4:	ee68fa2f 	vmul.f32	s31, s16, s31
    97c8:	eeb16a46 	vneg.f32	s12, s12
    97cc:	ee48fa85 	vmla.f32	s31, s17, s10
    97d0:	eefd7aeb 	vcvt.s32.f32	s15, s23
    97d4:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    97d8:	ee171a90 	vmov	r1, s15
    97dc:	e0073005 	and	r3, r7, r5
    97e0:	e2833913 	add	r3, r3, #311296	@ 0x4c000
    97e4:	e2833058 	add	r3, r3, #88	@ 0x58
    97e8:	e0843103 	add	r3, r4, r3, lsl #2
    97ec:	ed896a55 	vstr	s12, [r9, #340]	@ 0x154
    97f0:	ed896a57 	vstr	s12, [r9, #348]	@ 0x15c
    97f4:	e3a00000 	mov	r0, #0
    97f8:	edc3fa01 	vstr	s31, [r3, #4]
    97fc:	edcc4a5b 	vstr	s9, [ip, #364]	@ 0x16c
    9800:	e1a0900c 	mov	r9, ip
    9804:	ebfffa1a 	bl	8074 <max>
    9808:	e1a01000 	mov	r1, r0
    980c:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9810:	ebfffa14 	bl	8068 <min>
    9814:	e0477000 	sub	r7, r7, r0
    9818:	e0077005 	and	r7, r7, r5
    981c:	e2877913 	add	r7, r7, #311296	@ 0x4c000
    9820:	e2877058 	add	r7, r7, #88	@ 0x58
    9824:	e0847107 	add	r7, r4, r7, lsl #2
    9828:	ed97ba01 	vldr	s22, [r7, #4]
    982c:	eeb00a6b 	vmov.f32	s0, s23
    9830:	ed89ba5d 	vstr	s22, [r9, #372]	@ 0x174
    9834:	eb0044c8 	bl	1ab5c <floorf>
    9838:	ed995a5b 	vldr	s10, [r9, #364]	@ 0x16c
    983c:	edd94a60 	vldr	s9, [r9, #384]	@ 0x180
    9840:	ee396ac5 	vsub.f32	s12, s19, s10
    9844:	ee744acb 	vsub.f32	s9, s9, s22
    9848:	ee355a40 	vsub.f32	s10, s10, s0
    984c:	ee360a00 	vadd.f32	s0, s12, s0
    9850:	eddd6a3b 	vldr	s13, [sp, #236]	@ 0xec
    9854:	ee200a24 	vmul.f32	s0, s0, s9
    9858:	ed996a5e 	vldr	s12, [r9, #376]	@ 0x178
    985c:	eec04a05 	vdiv.f32	s9, s0, s10
    9860:	ee686a26 	vmul.f32	s13, s16, s13
    9864:	ed995a62 	vldr	s10, [r9, #392]	@ 0x188
    9868:	ee366a64 	vsub.f32	s12, s12, s9
    986c:	eefd7acc 	vcvt.s32.f32	s15, s24
    9870:	ee486a85 	vmla.f32	s13, s17, s10
    9874:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9878:	ed896a5f 	vstr	s12, [r9, #380]	@ 0x17c
    987c:	e0073005 	and	r3, r7, r5
    9880:	e2833805 	add	r3, r3, #327680	@ 0x50000
    9884:	e2833062 	add	r3, r3, #98	@ 0x62
    9888:	e0843103 	add	r3, r4, r3, lsl #2
    988c:	ed896a61 	vstr	s12, [r9, #388]	@ 0x184
    9890:	ee171a90 	vmov	r1, s15
    9894:	edc36a01 	vstr	s13, [r3, #4]
    9898:	e3a00000 	mov	r0, #0
    989c:	e58d9038 	str	r9, [sp, #56]	@ 0x38
    98a0:	ebfff9f3 	bl	8074 <max>
    98a4:	e1a01000 	mov	r1, r0
    98a8:	e3a00a02 	mov	r0, #8192	@ 0x2000
    98ac:	ebfff9ed 	bl	8068 <min>
    98b0:	e59d9048 	ldr	r9, [sp, #72]	@ 0x48
    98b4:	e0477000 	sub	r7, r7, r0
    98b8:	e59931a4 	ldr	r3, [r9, #420]	@ 0x1a4
    98bc:	e0077005 	and	r7, r7, r5
    98c0:	e0000693 	mul	r0, r3, r6
    98c4:	ee060a90 	vmov	s13, r0
    98c8:	e2877805 	add	r7, r7, #327680	@ 0x50000
    98cc:	e59dc02c 	ldr	ip, [sp, #44]	@ 0x2c
    98d0:	e2877062 	add	r7, r7, #98	@ 0x62
    98d4:	e0847107 	add	r7, r4, r7, lsl #2
    98d8:	ed975a01 	vldr	s10, [r7, #4]
    98dc:	ed9c6a66 	vldr	s12, [ip, #408]	@ 0x198
    98e0:	edd94a6c 	vldr	s9, [r9, #432]	@ 0x1b0
    98e4:	eef86ae6 	vcvt.f32.s32	s13, s13
    98e8:	ed8c5a63 	vstr	s10, [ip, #396]	@ 0x18c
    98ec:	ee766aa4 	vadd.f32	s13, s13, s9
    98f0:	ee2c6a86 	vmul.f32	s12, s25, s12
    98f4:	ee6cca85 	vmul.f32	s25, s25, s10
    98f8:	ed995a6a 	vldr	s10, [r9, #424]	@ 0x1a8
    98fc:	ee065a8e 	vmla.f32	s10, s13, s28
    9900:	eec66a2e 	vdiv.f32	s13, s12, s29
    9904:	ee8c6aae 	vdiv.f32	s12, s25, s29
    9908:	eddc4a64 	vldr	s9, [ip, #400]	@ 0x190
    990c:	ee766a86 	vadd.f32	s13, s13, s12
    9910:	e59d0024 	ldr	r0, [sp, #36]	@ 0x24
    9914:	ee75ba4a 	vsub.f32	s23, s10, s20
    9918:	ed906a58 	vldr	s12, [r0, #352]	@ 0x160
    991c:	ee766aa4 	vadd.f32	s13, s13, s9
    9920:	ee68da2d 	vmul.f32	s27, s16, s27
    9924:	eef16a66 	vneg.f32	s13, s13
    9928:	ee48da86 	vmla.f32	s27, s17, s12
    992c:	eefd7aeb 	vcvt.s32.f32	s15, s23
    9930:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9934:	ee171a90 	vmov	r1, s15
    9938:	e0073005 	and	r3, r7, r5
    993c:	e2833915 	add	r3, r3, #344064	@ 0x54000
    9940:	e2833068 	add	r3, r3, #104	@ 0x68
    9944:	e0843103 	add	r3, r4, r3, lsl #2
    9948:	edcc6a65 	vstr	s13, [ip, #404]	@ 0x194
    994c:	edcc6a67 	vstr	s13, [ip, #412]	@ 0x19c
    9950:	e3a00000 	mov	r0, #0
    9954:	edc3da01 	vstr	s27, [r3, #4]
    9958:	ed895a6b 	vstr	s10, [r9, #428]	@ 0x1ac
    995c:	ebfff9c4 	bl	8074 <max>
    9960:	e1a01000 	mov	r1, r0
    9964:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9968:	ebfff9be 	bl	8068 <min>
    996c:	e0477000 	sub	r7, r7, r0
    9970:	e0077005 	and	r7, r7, r5
    9974:	e2877915 	add	r7, r7, #344064	@ 0x54000
    9978:	e2877068 	add	r7, r7, #104	@ 0x68
    997c:	e0847107 	add	r7, r4, r7, lsl #2
    9980:	ed97ba01 	vldr	s22, [r7, #4]
    9984:	eeb00a6b 	vmov.f32	s0, s23
    9988:	ed89ba6d 	vstr	s22, [r9, #436]	@ 0x1b4
    998c:	eb004472 	bl	1ab5c <floorf>
    9990:	ed996a6b 	vldr	s12, [r9, #428]	@ 0x1ac
    9994:	ed995a70 	vldr	s10, [r9, #448]	@ 0x1c0
    9998:	ee796ac6 	vsub.f32	s13, s19, s12
    999c:	ee355a4b 	vsub.f32	s10, s10, s22
    99a0:	ee366a40 	vsub.f32	s12, s12, s0
    99a4:	ee360a80 	vadd.f32	s0, s13, s0
    99a8:	ed9d7a3c 	vldr	s14, [sp, #240]	@ 0xf0
    99ac:	ee200a05 	vmul.f32	s0, s0, s10
    99b0:	edd96a6e 	vldr	s13, [r9, #440]	@ 0x1b8
    99b4:	ee805a06 	vdiv.f32	s10, s0, s12
    99b8:	ee287a07 	vmul.f32	s14, s16, s14
    99bc:	ed996a72 	vldr	s12, [r9, #456]	@ 0x1c8
    99c0:	eddd7a2d 	vldr	s15, [sp, #180]	@ 0xb4
    99c4:	ee766ac5 	vsub.f32	s13, s13, s10
    99c8:	ee087a86 	vmla.f32	s14, s17, s12
    99cc:	eefd7ae7 	vcvt.s32.f32	s15, s15
    99d0:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    99d4:	edc96a6f 	vstr	s13, [r9, #444]	@ 0x1bc
    99d8:	e0073005 	and	r3, r7, r5
    99dc:	e2833916 	add	r3, r3, #360448	@ 0x58000
    99e0:	e2833072 	add	r3, r3, #114	@ 0x72
    99e4:	e0843103 	add	r3, r4, r3, lsl #2
    99e8:	edc96a71 	vstr	s13, [r9, #452]	@ 0x1c4
    99ec:	ee171a90 	vmov	r1, s15
    99f0:	ed837a01 	vstr	s14, [r3, #4]
    99f4:	e3a00000 	mov	r0, #0
    99f8:	e58d9048 	str	r9, [sp, #72]	@ 0x48
    99fc:	ebfff99c 	bl	8074 <max>
    9a00:	e1a01000 	mov	r1, r0
    9a04:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9a08:	ebfff996 	bl	8068 <min>
    9a0c:	e59d9050 	ldr	r9, [sp, #80]	@ 0x50
    9a10:	e0477000 	sub	r7, r7, r0
    9a14:	e59931e4 	ldr	r3, [r9, #484]	@ 0x1e4
    9a18:	e0077005 	and	r7, r7, r5
    9a1c:	e0010693 	mul	r1, r3, r6
    9a20:	ee071a10 	vmov	s14, r1
    9a24:	e2877916 	add	r7, r7, #360448	@ 0x58000
    9a28:	e59dc034 	ldr	ip, [sp, #52]	@ 0x34
    9a2c:	e2877072 	add	r7, r7, #114	@ 0x72
    9a30:	e0847107 	add	r7, r4, r7, lsl #2
    9a34:	edd76a01 	vldr	s13, [r7, #4]
    9a38:	ed996a7c 	vldr	s12, [r9, #496]	@ 0x1f0
    9a3c:	ed9c5a76 	vldr	s10, [ip, #472]	@ 0x1d8
    9a40:	eddd7a2e 	vldr	s15, [sp, #184]	@ 0xb8
    9a44:	eeb87ac7 	vcvt.f32.s32	s14, s14
    9a48:	edcc6a73 	vstr	s13, [ip, #460]	@ 0x1cc
    9a4c:	ee377a06 	vadd.f32	s14, s14, s12
    9a50:	ee275a85 	vmul.f32	s10, s15, s10
    9a54:	ee276aa6 	vmul.f32	s12, s15, s13
    9a58:	edd96a7a 	vldr	s13, [r9, #488]	@ 0x1e8
    9a5c:	eddd7a2f 	vldr	s15, [sp, #188]	@ 0xbc
    9a60:	ee476a0e 	vmla.f32	s13, s14, s28
    9a64:	ee857a27 	vdiv.f32	s14, s10, s15
    9a68:	ee865a27 	vdiv.f32	s10, s12, s15
    9a6c:	eddc4a74 	vldr	s9, [ip, #464]	@ 0x1d0
    9a70:	ee377a05 	vadd.f32	s14, s14, s10
    9a74:	e59d002c 	ldr	r0, [sp, #44]	@ 0x2c
    9a78:	ee377a24 	vadd.f32	s14, s14, s9
    9a7c:	ed906a68 	vldr	s12, [r0, #416]	@ 0x1a0
    9a80:	ee36baca 	vsub.f32	s22, s13, s20
    9a84:	ee28da0d 	vmul.f32	s26, s16, s26
    9a88:	eeb17a47 	vneg.f32	s14, s14
    9a8c:	ee08da86 	vmla.f32	s26, s17, s12
    9a90:	eefd7acb 	vcvt.s32.f32	s15, s22
    9a94:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9a98:	ee171a90 	vmov	r1, s15
    9a9c:	e0073005 	and	r3, r7, r5
    9aa0:	e2833917 	add	r3, r3, #376832	@ 0x5c000
    9aa4:	e2833078 	add	r3, r3, #120	@ 0x78
    9aa8:	e0843103 	add	r3, r4, r3, lsl #2
    9aac:	ed8c7a75 	vstr	s14, [ip, #468]	@ 0x1d4
    9ab0:	ed8c7a77 	vstr	s14, [ip, #476]	@ 0x1dc
    9ab4:	e3a00000 	mov	r0, #0
    9ab8:	ed83da01 	vstr	s26, [r3, #4]
    9abc:	edc96a7b 	vstr	s13, [r9, #492]	@ 0x1ec
    9ac0:	ebfff96b 	bl	8074 <max>
    9ac4:	e1a01000 	mov	r1, r0
    9ac8:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9acc:	ebfff965 	bl	8068 <min>
    9ad0:	e0477000 	sub	r7, r7, r0
    9ad4:	e0077005 	and	r7, r7, r5
    9ad8:	e2877917 	add	r7, r7, #376832	@ 0x5c000
    9adc:	e2877078 	add	r7, r7, #120	@ 0x78
    9ae0:	e0847107 	add	r7, r4, r7, lsl #2
    9ae4:	edd7ba01 	vldr	s23, [r7, #4]
    9ae8:	eeb00a4b 	vmov.f32	s0, s22
    9aec:	edc9ba7d 	vstr	s23, [r9, #500]	@ 0x1f4
    9af0:	eb004419 	bl	1ab5c <floorf>
    9af4:	eddd7a3d 	vldr	s15, [sp, #244]	@ 0xf4
    9af8:	ed997a7b 	vldr	s14, [r9, #492]	@ 0x1ec
    9afc:	ee28ba27 	vmul.f32	s22, s16, s15
    9b00:	edd97a82 	vldr	s15, [r9, #520]	@ 0x208
    9b04:	edd96a80 	vldr	s13, [r9, #512]	@ 0x200
    9b08:	ee08baa7 	vmla.f32	s22, s17, s15
    9b0c:	ee797ac7 	vsub.f32	s15, s19, s14
    9b10:	e59dc04c 	ldr	ip, [sp, #76]	@ 0x4c
    9b14:	ee766aeb 	vsub.f32	s13, s13, s23
    9b18:	ed9ccac6 	vldr	s24, [ip, #792]	@ 0x318
    9b1c:	ee377a40 	vsub.f32	s14, s14, s0
    9b20:	ee370a80 	vadd.f32	s0, s15, s0
    9b24:	e59a320c 	ldr	r3, [sl, #524]	@ 0x20c
    9b28:	e59d2040 	ldr	r2, [sp, #64]	@ 0x40
    9b2c:	e0010693 	mul	r1, r3, r6
    9b30:	ed92dab6 	vldr	s26, [r2, #728]	@ 0x2d8
    9b34:	ee200a26 	vmul.f32	s0, s0, s13
    9b38:	ee29ca0c 	vmul.f32	s24, s18, s24
    9b3c:	ee071a90 	vmov	s15, r1
    9b40:	edd8eaa6 	vldr	s29, [r8, #664]	@ 0x298
    9b44:	eec06a07 	vdiv.f32	s13, s0, s14
    9b48:	ee1aca8b 	vnmls.f32	s24, s21, s22
    9b4c:	ed9a7a86 	vldr	s14, [sl, #536]	@ 0x218
    9b50:	ee29da0d 	vmul.f32	s26, s18, s26
    9b54:	eef87ae7 	vcvt.f32.s32	s15, s15
    9b58:	ee1ada8c 	vnmls.f32	s26, s21, s24
    9b5c:	ee777a87 	vadd.f32	s15, s15, s14
    9b60:	ee69ea2e 	vmul.f32	s29, s18, s29
    9b64:	ed9a7a84 	vldr	s14, [sl, #528]	@ 0x210
    9b68:	ee5aea8d 	vnmls.f32	s29, s21, s26
    9b6c:	ee077a8e 	vmla.f32	s14, s15, s28
    9b70:	edd97a7e 	vldr	s15, [r9, #504]	@ 0x1f8
    9b74:	ed9b6a96 	vldr	s12, [fp, #600]	@ 0x258
    9b78:	ee77ba4a 	vsub.f32	s23, s14, s20
    9b7c:	ee777ae6 	vsub.f32	s15, s15, s13
    9b80:	ee6a6aae 	vmul.f32	s13, s21, s29
    9b84:	edc97a7f 	vstr	s15, [r9, #508]	@ 0x1fc
    9b88:	ee596a06 	vnmls.f32	s13, s18, s12
    9b8c:	edc97a81 	vstr	s15, [r9, #516]	@ 0x204
    9b90:	eefd7aeb 	vcvt.s32.f32	s15, s23
    9b94:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9b98:	ee171a90 	vmov	r1, s15
    9b9c:	e0073005 	and	r3, r7, r5
    9ba0:	e2833806 	add	r3, r3, #393216	@ 0x60000
    9ba4:	e2833082 	add	r3, r3, #130	@ 0x82
    9ba8:	e0843103 	add	r3, r4, r3, lsl #2
    9bac:	edc36a01 	vstr	s13, [r3, #4]
    9bb0:	e3a00000 	mov	r0, #0
    9bb4:	ed8a7a85 	vstr	s14, [sl, #532]	@ 0x214
    9bb8:	e58d9050 	str	r9, [sp, #80]	@ 0x50
    9bbc:	ebfff92c 	bl	8074 <max>
    9bc0:	e1a01000 	mov	r1, r0
    9bc4:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9bc8:	ebfff926 	bl	8068 <min>
    9bcc:	e0477000 	sub	r7, r7, r0
    9bd0:	e0077005 	and	r7, r7, r5
    9bd4:	e2877806 	add	r7, r7, #393216	@ 0x60000
    9bd8:	e2877082 	add	r7, r7, #130	@ 0x82
    9bdc:	e0847107 	add	r7, r4, r7, lsl #2
    9be0:	edd7ca01 	vldr	s25, [r7, #4]
    9be4:	eeb00a6b 	vmov.f32	s0, s23
    9be8:	edcaca87 	vstr	s25, [sl, #540]	@ 0x21c
    9bec:	eb0043da 	bl	1ab5c <floorf>
    9bf0:	eddd5a30 	vldr	s11, [sp, #192]	@ 0xc0
    9bf4:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
    9bf8:	ee28fa25 	vmul.f32	s30, s16, s11
    9bfc:	edd17a78 	vldr	s15, [r1, #480]	@ 0x1e0
    9c00:	ed9a7a85 	vldr	s14, [sl, #532]	@ 0x214
    9c04:	eef06a40 	vmov.f32	s13, s0
    9c08:	ee08faa7 	vmla.f32	s30, s17, s15
    9c0c:	ee390ac7 	vsub.f32	s0, s19, s14
    9c10:	edda7a8a 	vldr	s15, [sl, #552]	@ 0x228
    9c14:	e59d1030 	ldr	r1, [sp, #48]	@ 0x30
    9c18:	ee777aec 	vsub.f32	s15, s15, s25
    9c1c:	edd1babc 	vldr	s23, [r1, #752]	@ 0x2f0
    9c20:	ee300a26 	vadd.f32	s0, s0, s13
    9c24:	e59b3234 	ldr	r3, [fp, #564]	@ 0x234
    9c28:	e59d903c 	ldr	r9, [sp, #60]	@ 0x3c
    9c2c:	e00e0693 	mul	lr, r3, r6
    9c30:	edd9caac 	vldr	s25, [r9, #688]	@ 0x2b0
    9c34:	ee377a66 	vsub.f32	s14, s14, s13
    9c38:	ee200a27 	vmul.f32	s0, s0, s15
    9c3c:	ee69ba2b 	vmul.f32	s23, s18, s23
    9c40:	ee07ea90 	vmov	s15, lr
    9c44:	e59de020 	ldr	lr, [sp, #32]
    9c48:	ee806a07 	vdiv.f32	s12, s0, s14
    9c4c:	eddeda9c 	vldr	s27, [lr, #624]	@ 0x270
    9c50:	ed9b7a90 	vldr	s14, [fp, #576]	@ 0x240
    9c54:	ee5aba8f 	vnmls.f32	s23, s21, s30
    9c58:	ee69ca2c 	vmul.f32	s25, s18, s25
    9c5c:	eef87ae7 	vcvt.f32.s32	s15, s15
    9c60:	eddb6a8e 	vldr	s13, [fp, #568]	@ 0x238
    9c64:	ee5acaab 	vnmls.f32	s25, s21, s23
    9c68:	ee777a87 	vadd.f32	s15, s15, s14
    9c6c:	ee69da2d 	vmul.f32	s27, s18, s27
    9c70:	ed9a7a8c 	vldr	s14, [sl, #560]	@ 0x230
    9c74:	ee476a8e 	vmla.f32	s13, s15, s28
    9c78:	ee5adaac 	vnmls.f32	s27, s21, s25
    9c7c:	ee697a07 	vmul.f32	s15, s18, s14
    9c80:	ed9a7a88 	vldr	s14, [sl, #544]	@ 0x220
    9c84:	ee360aca 	vsub.f32	s0, s13, s20
    9c88:	ee377a46 	vsub.f32	s14, s14, s12
    9c8c:	ee5a7aad 	vnmls.f32	s15, s21, s27
    9c90:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9c94:	ed8a7a89 	vstr	s14, [sl, #548]	@ 0x224
    9c98:	e0073005 	and	r3, r7, r5
    9c9c:	e2833919 	add	r3, r3, #409600	@ 0x64000
    9ca0:	e283308c 	add	r3, r3, #140	@ 0x8c
    9ca4:	e0843103 	add	r3, r4, r3, lsl #2
    9ca8:	ed8a7a8b 	vstr	s14, [sl, #556]	@ 0x22c
    9cac:	edc37a01 	vstr	s15, [r3, #4]
    9cb0:	eefd7ac0 	vcvt.s32.f32	s15, s0
    9cb4:	edcb6a8f 	vstr	s13, [fp, #572]	@ 0x23c
    9cb8:	ee171a90 	vmov	r1, s15
    9cbc:	e3a00000 	mov	r0, #0
    9cc0:	ed8d0a0f 	vstr	s0, [sp, #60]	@ 0x3c
    9cc4:	ebfff8ea 	bl	8074 <max>
    9cc8:	e1a01000 	mov	r1, r0
    9ccc:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9cd0:	ebfff8e4 	bl	8068 <min>
    9cd4:	e0477000 	sub	r7, r7, r0
    9cd8:	e0077005 	and	r7, r7, r5
    9cdc:	e2877919 	add	r7, r7, #409600	@ 0x64000
    9ce0:	e287708c 	add	r7, r7, #140	@ 0x8c
    9ce4:	e0847107 	add	r7, r4, r7, lsl #2
    9ce8:	edd7fa01 	vldr	s31, [r7, #4]
    9cec:	ed9d0a0f 	vldr	s0, [sp, #60]	@ 0x3c
    9cf0:	edcbfa91 	vstr	s31, [fp, #580]	@ 0x244
    9cf4:	eb004398 	bl	1ab5c <floorf>
    9cf8:	eddd7a2a 	vldr	s15, [sp, #168]	@ 0xa8
    9cfc:	ed9b7a8f 	vldr	s14, [fp, #572]	@ 0x23c
    9d00:	eefd7ae7 	vcvt.s32.f32	s15, s15
    9d04:	eddb6a94 	vldr	s13, [fp, #592]	@ 0x250
    9d08:	ee171a90 	vmov	r1, s15
    9d0c:	ee797ac7 	vsub.f32	s15, s19, s14
    9d10:	ee766aef 	vsub.f32	s13, s13, s31
    9d14:	ee377a40 	vsub.f32	s14, s14, s0
    9d18:	ee370a80 	vadd.f32	s0, s15, s0
    9d1c:	ee200a26 	vmul.f32	s0, s0, s13
    9d20:	eddb7a92 	vldr	s15, [fp, #584]	@ 0x248
    9d24:	eec06a07 	vdiv.f32	s13, s0, s14
    9d28:	ee69ea2e 	vmul.f32	s29, s18, s29
    9d2c:	ed9b7a96 	vldr	s14, [fp, #600]	@ 0x258
    9d30:	ee777ae6 	vsub.f32	s15, s15, s13
    9d34:	ee4aea87 	vmla.f32	s29, s21, s14
    9d38:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9d3c:	edcb7a93 	vstr	s15, [fp, #588]	@ 0x24c
    9d40:	e0073005 	and	r3, r7, r5
    9d44:	e283391a 	add	r3, r3, #425984	@ 0x68000
    9d48:	e2833096 	add	r3, r3, #150	@ 0x96
    9d4c:	e0843103 	add	r3, r4, r3, lsl #2
    9d50:	edcb7a95 	vstr	s15, [fp, #596]	@ 0x254
    9d54:	e3a00000 	mov	r0, #0
    9d58:	edc3ea01 	vstr	s29, [r3, #4]
    9d5c:	ebfff8c4 	bl	8074 <max>
    9d60:	e1a01000 	mov	r1, r0
    9d64:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9d68:	ebfff8be 	bl	8068 <min>
    9d6c:	e5983274 	ldr	r3, [r8, #628]	@ 0x274
    9d70:	ed987aa0 	vldr	s14, [r8, #640]	@ 0x280
    9d74:	e0010693 	mul	r1, r3, r6
    9d78:	ee071a90 	vmov	s15, r1
    9d7c:	eef87ae7 	vcvt.f32.s32	s15, s15
    9d80:	e0477000 	sub	r7, r7, r0
    9d84:	e0077005 	and	r7, r7, r5
    9d88:	e287791a 	add	r7, r7, #425984	@ 0x68000
    9d8c:	e59de020 	ldr	lr, [sp, #32]
    9d90:	e2877096 	add	r7, r7, #150	@ 0x96
    9d94:	e0847107 	add	r7, r4, r7, lsl #2
    9d98:	ed976a01 	vldr	s12, [r7, #4]
    9d9c:	edde6a9a 	vldr	s13, [lr, #616]	@ 0x268
    9da0:	ee777a87 	vadd.f32	s15, s15, s14
    9da4:	ed9d7a2b 	vldr	s14, [sp, #172]	@ 0xac
    9da8:	ed8e6a97 	vstr	s12, [lr, #604]	@ 0x25c
    9dac:	ed9d5a2c 	vldr	s10, [sp, #176]	@ 0xb0
    9db0:	ee676a26 	vmul.f32	s13, s14, s13
    9db4:	ee277a06 	vmul.f32	s14, s14, s12
    9db8:	ed986a9e 	vldr	s12, [r8, #632]	@ 0x278
    9dbc:	ee076a8e 	vmla.f32	s12, s15, s28
    9dc0:	eec67a85 	vdiv.f32	s15, s13, s10
    9dc4:	eec76a05 	vdiv.f32	s13, s14, s10
    9dc8:	edde5a98 	vldr	s11, [lr, #608]	@ 0x260
    9dcc:	ee777aa6 	vadd.f32	s15, s15, s13
    9dd0:	ee777aa5 	vadd.f32	s15, s15, s11
    9dd4:	ee76ea4a 	vsub.f32	s29, s12, s20
    9dd8:	ed9a7a8c 	vldr	s14, [sl, #560]	@ 0x230
    9ddc:	eef17a67 	vneg.f32	s15, s15
    9de0:	ee69da2d 	vmul.f32	s27, s18, s27
    9de4:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9de8:	ee4ada87 	vmla.f32	s27, s21, s14
    9dec:	edce7a99 	vstr	s15, [lr, #612]	@ 0x264
    9df0:	edce7a9b 	vstr	s15, [lr, #620]	@ 0x26c
    9df4:	eefd7aee 	vcvt.s32.f32	s15, s29
    9df8:	e0073005 	and	r3, r7, r5
    9dfc:	e283391b 	add	r3, r3, #442368	@ 0x6c000
    9e00:	e283309c 	add	r3, r3, #156	@ 0x9c
    9e04:	e0843103 	add	r3, r4, r3, lsl #2
    9e08:	edc3da01 	vstr	s27, [r3, #4]
    9e0c:	ee171a90 	vmov	r1, s15
    9e10:	ed886a9f 	vstr	s12, [r8, #636]	@ 0x27c
    9e14:	e3a00000 	mov	r0, #0
    9e18:	ebfff895 	bl	8074 <max>
    9e1c:	e1a01000 	mov	r1, r0
    9e20:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9e24:	ebfff88f 	bl	8068 <min>
    9e28:	e0477000 	sub	r7, r7, r0
    9e2c:	e0077005 	and	r7, r7, r5
    9e30:	e287791b 	add	r7, r7, #442368	@ 0x6c000
    9e34:	e287709c 	add	r7, r7, #156	@ 0x9c
    9e38:	e0847107 	add	r7, r4, r7, lsl #2
    9e3c:	edd7da01 	vldr	s27, [r7, #4]
    9e40:	eeb00a6e 	vmov.f32	s0, s29
    9e44:	edc8daa1 	vstr	s27, [r8, #644]	@ 0x284
    9e48:	eb004343 	bl	1ab5c <floorf>
    9e4c:	eddd7a27 	vldr	s15, [sp, #156]	@ 0x9c
    9e50:	ed987a9f 	vldr	s14, [r8, #636]	@ 0x27c
    9e54:	eefd7ae7 	vcvt.s32.f32	s15, s15
    9e58:	edd86aa4 	vldr	s13, [r8, #656]	@ 0x290
    9e5c:	ee171a90 	vmov	r1, s15
    9e60:	ee797ac7 	vsub.f32	s15, s19, s14
    9e64:	ee766aed 	vsub.f32	s13, s13, s27
    9e68:	ee377a40 	vsub.f32	s14, s14, s0
    9e6c:	ee370a80 	vadd.f32	s0, s15, s0
    9e70:	ee29da0d 	vmul.f32	s26, s18, s26
    9e74:	ee200a26 	vmul.f32	s0, s0, s13
    9e78:	edd86aa6 	vldr	s13, [r8, #664]	@ 0x298
    9e7c:	edd87aa2 	vldr	s15, [r8, #648]	@ 0x288
    9e80:	ee0adaa6 	vmla.f32	s26, s21, s13
    9e84:	eec06a07 	vdiv.f32	s13, s0, s14
    9e88:	ee777ae6 	vsub.f32	s15, s15, s13
    9e8c:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9e90:	e3a00000 	mov	r0, #0
    9e94:	e0073005 	and	r3, r7, r5
    9e98:	e2833807 	add	r3, r3, #458752	@ 0x70000
    9e9c:	e28330a6 	add	r3, r3, #166	@ 0xa6
    9ea0:	e0843103 	add	r3, r4, r3, lsl #2
    9ea4:	edc87aa3 	vstr	s15, [r8, #652]	@ 0x28c
    9ea8:	edc87aa5 	vstr	s15, [r8, #660]	@ 0x294
    9eac:	ed83da01 	vstr	s26, [r3, #4]
    9eb0:	ebfff86f 	bl	8074 <max>
    9eb4:	e1a01000 	mov	r1, r0
    9eb8:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9ebc:	ebfff869 	bl	8068 <min>
    9ec0:	e1a0e009 	mov	lr, r9
    9ec4:	edd96aaa 	vldr	s13, [r9, #680]	@ 0x2a8
    9ec8:	e59d9040 	ldr	r9, [sp, #64]	@ 0x40
    9ecc:	e0477000 	sub	r7, r7, r0
    9ed0:	e59932b4 	ldr	r3, [r9, #692]	@ 0x2b4
    9ed4:	ed997ab0 	vldr	s14, [r9, #704]	@ 0x2c0
    9ed8:	e0010693 	mul	r1, r3, r6
    9edc:	ee071a90 	vmov	s15, r1
    9ee0:	eef87ae7 	vcvt.f32.s32	s15, s15
    9ee4:	e0077005 	and	r7, r7, r5
    9ee8:	e2877807 	add	r7, r7, #458752	@ 0x70000
    9eec:	e28770a6 	add	r7, r7, #166	@ 0xa6
    9ef0:	e0847107 	add	r7, r4, r7, lsl #2
    9ef4:	ed976a01 	vldr	s12, [r7, #4]
    9ef8:	ee777a87 	vadd.f32	s15, s15, s14
    9efc:	ed9d7a28 	vldr	s14, [sp, #160]	@ 0xa0
    9f00:	ed8e6aa7 	vstr	s12, [lr, #668]	@ 0x29c
    9f04:	ed9d5a29 	vldr	s10, [sp, #164]	@ 0xa4
    9f08:	ee676a26 	vmul.f32	s13, s14, s13
    9f0c:	ee277a06 	vmul.f32	s14, s14, s12
    9f10:	ed996aae 	vldr	s12, [r9, #696]	@ 0x2b8
    9f14:	ee076a8e 	vmla.f32	s12, s15, s28
    9f18:	eec67a85 	vdiv.f32	s15, s13, s10
    9f1c:	eec76a05 	vdiv.f32	s13, s14, s10
    9f20:	edde5aa8 	vldr	s11, [lr, #672]	@ 0x2a0
    9f24:	ee777aa6 	vadd.f32	s15, s15, s13
    9f28:	e59d1020 	ldr	r1, [sp, #32]
    9f2c:	ee36da4a 	vsub.f32	s26, s12, s20
    9f30:	ed917a9c 	vldr	s14, [r1, #624]	@ 0x270
    9f34:	ee777aa5 	vadd.f32	s15, s15, s11
    9f38:	ee69ca2c 	vmul.f32	s25, s18, s25
    9f3c:	eef17a67 	vneg.f32	s15, s15
    9f40:	ee4aca87 	vmla.f32	s25, s21, s14
    9f44:	eebd7acd 	vcvt.s32.f32	s14, s26
    9f48:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9f4c:	ee171a10 	vmov	r1, s14
    9f50:	e0073005 	and	r3, r7, r5
    9f54:	e283391d 	add	r3, r3, #475136	@ 0x74000
    9f58:	e28330ac 	add	r3, r3, #172	@ 0xac
    9f5c:	e0843103 	add	r3, r4, r3, lsl #2
    9f60:	edce7aa9 	vstr	s15, [lr, #676]	@ 0x2a4
    9f64:	edce7aab 	vstr	s15, [lr, #684]	@ 0x2ac
    9f68:	e3a00000 	mov	r0, #0
    9f6c:	edc3ca01 	vstr	s25, [r3, #4]
    9f70:	ed896aaf 	vstr	s12, [r9, #700]	@ 0x2bc
    9f74:	e58de03c 	str	lr, [sp, #60]	@ 0x3c
    9f78:	ebfff83d 	bl	8074 <max>
    9f7c:	e1a01000 	mov	r1, r0
    9f80:	e3a00a02 	mov	r0, #8192	@ 0x2000
    9f84:	ebfff837 	bl	8068 <min>
    9f88:	e0477000 	sub	r7, r7, r0
    9f8c:	e0077005 	and	r7, r7, r5
    9f90:	e287791d 	add	r7, r7, #475136	@ 0x74000
    9f94:	e28770ac 	add	r7, r7, #172	@ 0xac
    9f98:	e0847107 	add	r7, r4, r7, lsl #2
    9f9c:	edd7ca01 	vldr	s25, [r7, #4]
    9fa0:	eeb00a4d 	vmov.f32	s0, s26
    9fa4:	edc9cab1 	vstr	s25, [r9, #708]	@ 0x2c4
    9fa8:	eb0042eb 	bl	1ab5c <floorf>
    9fac:	eddd7a15 	vldr	s15, [sp, #84]	@ 0x54
    9fb0:	ed997aaf 	vldr	s14, [r9, #700]	@ 0x2bc
    9fb4:	eefd7ae7 	vcvt.s32.f32	s15, s15
    9fb8:	edd96ab4 	vldr	s13, [r9, #720]	@ 0x2d0
    9fbc:	ee171a90 	vmov	r1, s15
    9fc0:	ee797ac7 	vsub.f32	s15, s19, s14
    9fc4:	ee766aec 	vsub.f32	s13, s13, s25
    9fc8:	ee377a40 	vsub.f32	s14, s14, s0
    9fcc:	ee370a80 	vadd.f32	s0, s15, s0
    9fd0:	ee200a26 	vmul.f32	s0, s0, s13
    9fd4:	ed996ab2 	vldr	s12, [r9, #712]	@ 0x2c8
    9fd8:	eec07a07 	vdiv.f32	s15, s0, s14
    9fdc:	edd95ab6 	vldr	s11, [r9, #728]	@ 0x2d8
    9fe0:	ee29ca0c 	vmul.f32	s24, s18, s24
    9fe4:	ee767a67 	vsub.f32	s15, s12, s15
    9fe8:	ee0acaa5 	vmla.f32	s24, s21, s11
    9fec:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    9ff0:	e3a00000 	mov	r0, #0
    9ff4:	e0073005 	and	r3, r7, r5
    9ff8:	e283391e 	add	r3, r3, #491520	@ 0x78000
    9ffc:	e28330b6 	add	r3, r3, #182	@ 0xb6
    a000:	e0843103 	add	r3, r4, r3, lsl #2
    a004:	edc97ab3 	vstr	s15, [r9, #716]	@ 0x2cc
    a008:	edc97ab5 	vstr	s15, [r9, #724]	@ 0x2d4
    a00c:	ed83ca01 	vstr	s24, [r3, #4]
    a010:	e58d9040 	str	r9, [sp, #64]	@ 0x40
    a014:	ebfff816 	bl	8074 <max>
    a018:	e1a01000 	mov	r1, r0
    a01c:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a020:	ebfff810 	bl	8068 <min>
    a024:	e59d904c 	ldr	r9, [sp, #76]	@ 0x4c
    a028:	e0477000 	sub	r7, r7, r0
    a02c:	e59932f4 	ldr	r3, [r9, #756]	@ 0x2f4
    a030:	e0077005 	and	r7, r7, r5
    a034:	e287791e 	add	r7, r7, #491520	@ 0x78000
    a038:	e0030693 	mul	r3, r3, r6
    a03c:	e28770b6 	add	r7, r7, #182	@ 0xb6
    a040:	e0847107 	add	r7, r4, r7, lsl #2
    a044:	edd77a01 	vldr	s15, [r7, #4]
    a048:	e59d7030 	ldr	r7, [sp, #48]	@ 0x30
    a04c:	eddd3a25 	vldr	s7, [sp, #148]	@ 0x94
    a050:	ed976aba 	vldr	s12, [r7, #744]	@ 0x2e8
    a054:	ee073a10 	vmov	s14, r3
    a058:	e59de03c 	ldr	lr, [sp, #60]	@ 0x3c
    a05c:	ee634aa7 	vmul.f32	s9, s7, s15
    a060:	ed9e4aac 	vldr	s8, [lr, #688]	@ 0x2b0
    a064:	ee236a86 	vmul.f32	s12, s7, s12
    a068:	ed995ac0 	vldr	s10, [r9, #768]	@ 0x300
    a06c:	edd96abe 	vldr	s13, [r9, #760]	@ 0x2f8
    a070:	eeb87ac7 	vcvt.f32.s32	s14, s14
    a074:	edc77ab7 	vstr	s15, [r7, #732]	@ 0x2dc
    a078:	eddd7a26 	vldr	s15, [sp, #152]	@ 0x98
    a07c:	ee377a05 	vadd.f32	s14, s14, s10
    a080:	ee845aa7 	vdiv.f32	s10, s9, s15
    a084:	eec67a27 	vdiv.f32	s15, s12, s15
    a088:	edd75ab8 	vldr	s11, [r7, #736]	@ 0x2e0
    a08c:	ee476a0e 	vmla.f32	s13, s14, s28
    a090:	ee777a85 	vadd.f32	s15, s15, s10
    a094:	ee76caca 	vsub.f32	s25, s13, s20
    a098:	ee777aa5 	vadd.f32	s15, s15, s11
    a09c:	ee69ba2b 	vmul.f32	s23, s18, s23
    a0a0:	e1a0e007 	mov	lr, r7
    a0a4:	ee4aba84 	vmla.f32	s23, s21, s8
    a0a8:	eebd7aec 	vcvt.s32.f32	s14, s25
    a0ac:	eef17a67 	vneg.f32	s15, s15
    a0b0:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a0b4:	ee171a10 	vmov	r1, s14
    a0b8:	e0073005 	and	r3, r7, r5
    a0bc:	e283391f 	add	r3, r3, #507904	@ 0x7c000
    a0c0:	e28330bc 	add	r3, r3, #188	@ 0xbc
    a0c4:	e0843103 	add	r3, r4, r3, lsl #2
    a0c8:	edce7ab9 	vstr	s15, [lr, #740]	@ 0x2e4
    a0cc:	edce7abb 	vstr	s15, [lr, #748]	@ 0x2ec
    a0d0:	e3a00000 	mov	r0, #0
    a0d4:	edc3ba01 	vstr	s23, [r3, #4]
    a0d8:	edc96abf 	vstr	s13, [r9, #764]	@ 0x2fc
    a0dc:	ebfff7e4 	bl	8074 <max>
    a0e0:	e1a01000 	mov	r1, r0
    a0e4:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a0e8:	ebfff7de 	bl	8068 <min>
    a0ec:	e0477000 	sub	r7, r7, r0
    a0f0:	e0077005 	and	r7, r7, r5
    a0f4:	e287791f 	add	r7, r7, #507904	@ 0x7c000
    a0f8:	e28770bc 	add	r7, r7, #188	@ 0xbc
    a0fc:	e0847107 	add	r7, r4, r7, lsl #2
    a100:	ed97ca01 	vldr	s24, [r7, #4]
    a104:	eeb00a6c 	vmov.f32	s0, s25
    a108:	ed89cac1 	vstr	s24, [r9, #772]	@ 0x304
    a10c:	eb004292 	bl	1ab5c <floorf>
    a110:	e59de014 	ldr	lr, [sp, #20]
    a114:	e59d3070 	ldr	r3, [sp, #112]	@ 0x70
    a118:	ed994ac6 	vldr	s8, [r9, #792]	@ 0x318
    a11c:	edd95ac2 	vldr	s11, [r9, #776]	@ 0x308
    a120:	e1a0c009 	mov	ip, r9
    a124:	ed995abf 	vldr	s10, [r9, #764]	@ 0x2fc
    a128:	edd94ac4 	vldr	s9, [r9, #784]	@ 0x310
    a12c:	e2839e42 	add	r9, r3, #1056	@ 0x420
    a130:	e59e331c 	ldr	r3, [lr, #796]	@ 0x31c
    a134:	edde7aca 	vldr	s15, [lr, #808]	@ 0x328
    a138:	e0030693 	mul	r3, r3, r6
    a13c:	ee073a10 	vmov	s14, r3
    a140:	edd9ba02 	vldr	s23, [r9, #8]
    a144:	ee29ba0b 	vmul.f32	s22, s18, s22
    a148:	eeb87ac7 	vcvt.f32.s32	s14, s14
    a14c:	e59d7010 	ldr	r7, [sp, #16]
    a150:	ed9e6ac8 	vldr	s12, [lr, #800]	@ 0x320
    a154:	edd7cafa 	vldr	s25, [r7, #1000]	@ 0x3e8
    a158:	ee0aba84 	vmla.f32	s22, s21, s8
    a15c:	ee377a27 	vadd.f32	s14, s14, s15
    a160:	ee68ba2b 	vmul.f32	s23, s16, s23
    a164:	ee797ac5 	vsub.f32	s15, s19, s10
    a168:	e59d100c 	ldr	r1, [sp, #12]
    a16c:	ee076a0e 	vmla.f32	s12, s14, s28
    a170:	ed91daea 	vldr	s26, [r1, #936]	@ 0x3a8
    a174:	ee744acc 	vsub.f32	s9, s9, s24
    a178:	ee777a80 	vadd.f32	s15, s15, s0
    a17c:	ee68ca2c 	vmul.f32	s25, s16, s25
    a180:	ee58ba8b 	vnmls.f32	s23, s17, s22
    a184:	ee36ca4a 	vsub.f32	s24, s12, s20
    a188:	ee355a40 	vsub.f32	s10, s10, s0
    a18c:	ee677aa4 	vmul.f32	s15, s15, s9
    a190:	ee58caab 	vnmls.f32	s25, s17, s23
    a194:	ee28da0d 	vmul.f32	s26, s16, s26
    a198:	ee877a85 	vdiv.f32	s14, s15, s10
    a19c:	ee18daac 	vnmls.f32	s26, s17, s25
    a1a0:	eefd7acc 	vcvt.s32.f32	s15, s24
    a1a4:	e59d1018 	ldr	r1, [sp, #24]
    a1a8:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a1ac:	edd16ada 	vldr	s13, [r1, #872]	@ 0x368
    a1b0:	ee171a90 	vmov	r1, s15
    a1b4:	ee757ac7 	vsub.f32	s15, s11, s14
    a1b8:	ee287a8d 	vmul.f32	s14, s17, s26
    a1bc:	ee187a26 	vnmls.f32	s14, s16, s13
    a1c0:	e0073005 	and	r3, r7, r5
    a1c4:	e2833702 	add	r3, r3, #524288	@ 0x80000
    a1c8:	e28330c6 	add	r3, r3, #198	@ 0xc6
    a1cc:	e0843103 	add	r3, r4, r3, lsl #2
    a1d0:	edcc7ac3 	vstr	s15, [ip, #780]	@ 0x30c
    a1d4:	edcc7ac5 	vstr	s15, [ip, #788]	@ 0x314
    a1d8:	e3a00000 	mov	r0, #0
    a1dc:	ed837a01 	vstr	s14, [r3, #4]
    a1e0:	ed8e6ac9 	vstr	s12, [lr, #804]	@ 0x324
    a1e4:	e58dc04c 	str	ip, [sp, #76]	@ 0x4c
    a1e8:	ebfff7a1 	bl	8074 <max>
    a1ec:	e1a01000 	mov	r1, r0
    a1f0:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a1f4:	ebfff79b 	bl	8068 <min>
    a1f8:	e0477000 	sub	r7, r7, r0
    a1fc:	e0077005 	and	r7, r7, r5
    a200:	e2877702 	add	r7, r7, #524288	@ 0x80000
    a204:	e28770c6 	add	r7, r7, #198	@ 0xc6
    a208:	e0847107 	add	r7, r4, r7, lsl #2
    a20c:	edd7da01 	vldr	s27, [r7, #4]
    a210:	e59d7014 	ldr	r7, [sp, #20]
    a214:	eeb00a4c 	vmov.f32	s0, s24
    a218:	edc7dacb 	vstr	s27, [r7, #812]	@ 0x32c
    a21c:	eb00424e 	bl	1ab5c <floorf>
    a220:	e59d3030 	ldr	r3, [sp, #48]	@ 0x30
    a224:	ee299a0f 	vmul.f32	s18, s18, s30
    a228:	ed937abc 	vldr	s14, [r3, #752]	@ 0x2f0
    a22c:	e59d3028 	ldr	r3, [sp, #40]	@ 0x28
    a230:	ee0a9a87 	vmla.f32	s18, s21, s14
    a234:	ed93caf0 	vldr	s24, [r3, #960]	@ 0x3c0
    a238:	e59d3044 	ldr	r3, [sp, #68]	@ 0x44
    a23c:	e59dc018 	ldr	ip, [sp, #24]
    a240:	e2832b01 	add	r2, r3, #1024	@ 0x400
    a244:	edd2aa00 	vldr	s21, [r2]
    a248:	e59c3344 	ldr	r3, [ip, #836]	@ 0x344
    a24c:	edd74ac9 	vldr	s9, [r7, #804]	@ 0x324
    a250:	e0010693 	mul	r1, r3, r6
    a254:	ee68aa2a 	vmul.f32	s21, s16, s21
    a258:	ee061a90 	vmov	s13, r1
    a25c:	e1a0e007 	mov	lr, r7
    a260:	ed974ace 	vldr	s8, [r7, #824]	@ 0x338
    a264:	e59d701c 	ldr	r7, [sp, #28]
    a268:	eddc3ad4 	vldr	s7, [ip, #848]	@ 0x350
    a26c:	edd77ae0 	vldr	s15, [r7, #896]	@ 0x380
    a270:	ee397ae4 	vsub.f32	s14, s19, s9
    a274:	ee58aa89 	vnmls.f32	s21, s17, s18
    a278:	ee28ca0c 	vmul.f32	s24, s16, s24
    a27c:	eef86ae6 	vcvt.f32.s32	s13, s13
    a280:	ee344a6d 	vsub.f32	s8, s8, s27
    a284:	eddc5ad2 	vldr	s11, [ip, #840]	@ 0x348
    a288:	ee766aa3 	vadd.f32	s13, s13, s7
    a28c:	ee377a00 	vadd.f32	s14, s14, s0
    a290:	ee18caaa 	vnmls.f32	s24, s17, s21
    a294:	ee687a27 	vmul.f32	s15, s16, s15
    a298:	ed9e6ad0 	vldr	s12, [lr, #832]	@ 0x340
    a29c:	ee744ac0 	vsub.f32	s9, s9, s0
    a2a0:	ee277a04 	vmul.f32	s14, s14, s8
    a2a4:	ee465a8e 	vmla.f32	s11, s13, s28
    a2a8:	ee587a8c 	vnmls.f32	s15, s17, s24
    a2ac:	ed9e5acc 	vldr	s10, [lr, #816]	@ 0x330
    a2b0:	eec76a24 	vdiv.f32	s13, s14, s9
    a2b4:	ee75eaca 	vsub.f32	s29, s11, s20
    a2b8:	eef0da67 	vmov.f32	s27, s15
    a2bc:	ee286a06 	vmul.f32	s12, s16, s12
    a2c0:	ee355a66 	vsub.f32	s10, s10, s13
    a2c4:	ee186aad 	vnmls.f32	s12, s17, s27
    a2c8:	eefd7aee 	vcvt.s32.f32	s15, s29
    a2cc:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a2d0:	ee171a90 	vmov	r1, s15
    a2d4:	e0073005 	and	r3, r7, r5
    a2d8:	e2833921 	add	r3, r3, #540672	@ 0x84000
    a2dc:	e28330d0 	add	r3, r3, #208	@ 0xd0
    a2e0:	e0843103 	add	r3, r4, r3, lsl #2
    a2e4:	ed8e5acd 	vstr	s10, [lr, #820]	@ 0x334
    a2e8:	ed8e5acf 	vstr	s10, [lr, #828]	@ 0x33c
    a2ec:	e3a00000 	mov	r0, #0
    a2f0:	ed836a01 	vstr	s12, [r3, #4]
    a2f4:	edcc5ad3 	vstr	s11, [ip, #844]	@ 0x34c
    a2f8:	e58d2054 	str	r2, [sp, #84]	@ 0x54
    a2fc:	e58de014 	str	lr, [sp, #20]
    a300:	ebfff75b 	bl	8074 <max>
    a304:	e1a01000 	mov	r1, r0
    a308:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a30c:	ebfff755 	bl	8068 <min>
    a310:	e0477000 	sub	r7, r7, r0
    a314:	e0077005 	and	r7, r7, r5
    a318:	e2877921 	add	r7, r7, #540672	@ 0x84000
    a31c:	e28770d0 	add	r7, r7, #208	@ 0xd0
    a320:	e0847107 	add	r7, r4, r7, lsl #2
    a324:	ed97fa01 	vldr	s30, [r7, #4]
    a328:	e59d7018 	ldr	r7, [sp, #24]
    a32c:	eeb00a6e 	vmov.f32	s0, s29
    a330:	ed87fad5 	vstr	s30, [r7, #852]	@ 0x354
    a334:	eb004208 	bl	1ab5c <floorf>
    a338:	edd76ad3 	vldr	s13, [r7, #844]	@ 0x34c
    a33c:	eeb06a40 	vmov.f32	s12, s0
    a340:	ed977ad8 	vldr	s14, [r7, #864]	@ 0x360
    a344:	ee390ae6 	vsub.f32	s0, s19, s13
    a348:	ee377a4f 	vsub.f32	s14, s14, s30
    a34c:	ee300a06 	vadd.f32	s0, s0, s12
    a350:	ee766ac6 	vsub.f32	s13, s13, s12
    a354:	ee200a07 	vmul.f32	s0, s0, s14
    a358:	edd75ada 	vldr	s11, [r7, #872]	@ 0x368
    a35c:	ee807a26 	vdiv.f32	s14, s0, s13
    a360:	edd77ad6 	vldr	s15, [r7, #856]	@ 0x358
    a364:	ee28da0d 	vmul.f32	s26, s16, s26
    a368:	ed9d5a22 	vldr	s10, [sp, #136]	@ 0x88
    a36c:	e1a0c007 	mov	ip, r7
    a370:	ee777ac7 	vsub.f32	s15, s15, s14
    a374:	ee08daa5 	vmla.f32	s26, s17, s11
    a378:	eebd5ac5 	vcvt.s32.f32	s10, s10
    a37c:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a380:	ee151a10 	vmov	r1, s10
    a384:	e0073005 	and	r3, r7, r5
    a388:	e2833922 	add	r3, r3, #557056	@ 0x88000
    a38c:	e28330da 	add	r3, r3, #218	@ 0xda
    a390:	e0843103 	add	r3, r4, r3, lsl #2
    a394:	edcc7ad7 	vstr	s15, [ip, #860]	@ 0x35c
    a398:	edcc7ad9 	vstr	s15, [ip, #868]	@ 0x364
    a39c:	e3a00000 	mov	r0, #0
    a3a0:	ed83da01 	vstr	s26, [r3, #4]
    a3a4:	e58dc018 	str	ip, [sp, #24]
    a3a8:	ebfff731 	bl	8074 <max>
    a3ac:	e1a01000 	mov	r1, r0
    a3b0:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a3b4:	ebfff72b 	bl	8068 <min>
    a3b8:	e59de00c 	ldr	lr, [sp, #12]
    a3bc:	e0477000 	sub	r7, r7, r0
    a3c0:	e59e3384 	ldr	r3, [lr, #900]	@ 0x384
    a3c4:	e0077005 	and	r7, r7, r5
    a3c8:	e0000693 	mul	r0, r3, r6
    a3cc:	e2877922 	add	r7, r7, #557056	@ 0x88000
    a3d0:	e59d201c 	ldr	r2, [sp, #28]
    a3d4:	e28770da 	add	r7, r7, #218	@ 0xda
    a3d8:	e0847107 	add	r7, r4, r7, lsl #2
    a3dc:	ed9d3a23 	vldr	s6, [sp, #140]	@ 0x8c
    a3e0:	ed977a01 	vldr	s14, [r7, #4]
    a3e4:	edd25ade 	vldr	s11, [r2, #888]	@ 0x378
    a3e8:	ee060a90 	vmov	s13, r0
    a3ec:	e59d1014 	ldr	r1, [sp, #20]
    a3f0:	ee234a07 	vmul.f32	s8, s6, s14
    a3f4:	ee635a25 	vmul.f32	s11, s6, s11
    a3f8:	edd13ad0 	vldr	s7, [r1, #832]	@ 0x340
    a3fc:	edde4ae4 	vldr	s9, [lr, #912]	@ 0x390
    a400:	ed9e6ae2 	vldr	s12, [lr, #904]	@ 0x388
    a404:	eef86ae6 	vcvt.f32.s32	s13, s13
    a408:	ed827adb 	vstr	s14, [r2, #876]	@ 0x36c
    a40c:	ed9d7a24 	vldr	s14, [sp, #144]	@ 0x90
    a410:	ee766aa4 	vadd.f32	s13, s13, s9
    a414:	eec44a07 	vdiv.f32	s9, s8, s14
    a418:	ee857a87 	vdiv.f32	s14, s11, s14
    a41c:	ed925adc 	vldr	s10, [r2, #880]	@ 0x370
    a420:	ee066a8e 	vmla.f32	s12, s13, s28
    a424:	ee377a24 	vadd.f32	s14, s14, s9
    a428:	ee687a2d 	vmul.f32	s15, s16, s27
    a42c:	ee377a05 	vadd.f32	s14, s14, s10
    a430:	ee76da4a 	vsub.f32	s27, s12, s20
    a434:	ee487aa3 	vmla.f32	s15, s17, s7
    a438:	eeb17a47 	vneg.f32	s14, s14
    a43c:	eefd6aed 	vcvt.s32.f32	s13, s27
    a440:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a444:	ee161a90 	vmov	r1, s13
    a448:	e0073005 	and	r3, r7, r5
    a44c:	e2833923 	add	r3, r3, #573440	@ 0x8c000
    a450:	e28330e0 	add	r3, r3, #224	@ 0xe0
    a454:	e0843103 	add	r3, r4, r3, lsl #2
    a458:	ed827add 	vstr	s14, [r2, #884]	@ 0x374
    a45c:	ed827adf 	vstr	s14, [r2, #892]	@ 0x37c
    a460:	e3a00000 	mov	r0, #0
    a464:	edc37a01 	vstr	s15, [r3, #4]
    a468:	ed8e6ae3 	vstr	s12, [lr, #908]	@ 0x38c
    a46c:	ebfff700 	bl	8074 <max>
    a470:	e1a01000 	mov	r1, r0
    a474:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a478:	ebfff6fa 	bl	8068 <min>
    a47c:	e0477000 	sub	r7, r7, r0
    a480:	e0077005 	and	r7, r7, r5
    a484:	e2877923 	add	r7, r7, #573440	@ 0x8c000
    a488:	e28770e0 	add	r7, r7, #224	@ 0xe0
    a48c:	e0847107 	add	r7, r4, r7, lsl #2
    a490:	ed97da01 	vldr	s26, [r7, #4]
    a494:	e59d700c 	ldr	r7, [sp, #12]
    a498:	eeb00a6d 	vmov.f32	s0, s27
    a49c:	ed87dae5 	vstr	s26, [r7, #916]	@ 0x394
    a4a0:	eb0041ad 	bl	1ab5c <floorf>
    a4a4:	eddd7a1f 	vldr	s15, [sp, #124]	@ 0x7c
    a4a8:	edd76ae3 	vldr	s13, [r7, #908]	@ 0x38c
    a4ac:	eefd7ae7 	vcvt.s32.f32	s15, s15
    a4b0:	ed976ae8 	vldr	s12, [r7, #928]	@ 0x3a0
    a4b4:	ee171a90 	vmov	r1, s15
    a4b8:	ee797ae6 	vsub.f32	s15, s19, s13
    a4bc:	ee366a4d 	vsub.f32	s12, s12, s26
    a4c0:	ee766ac0 	vsub.f32	s13, s13, s0
    a4c4:	ee370a80 	vadd.f32	s0, s15, s0
    a4c8:	ee200a06 	vmul.f32	s0, s0, s12
    a4cc:	ed977ae6 	vldr	s14, [r7, #920]	@ 0x398
    a4d0:	edd75aea 	vldr	s11, [r7, #936]	@ 0x3a8
    a4d4:	eec07a26 	vdiv.f32	s15, s0, s13
    a4d8:	ee68ca2c 	vmul.f32	s25, s16, s25
    a4dc:	e1a0e007 	mov	lr, r7
    a4e0:	ee777a67 	vsub.f32	s15, s14, s15
    a4e4:	ee48caa5 	vmla.f32	s25, s17, s11
    a4e8:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a4ec:	e3a00000 	mov	r0, #0
    a4f0:	e0073005 	and	r3, r7, r5
    a4f4:	e2833809 	add	r3, r3, #589824	@ 0x90000
    a4f8:	e28330ea 	add	r3, r3, #234	@ 0xea
    a4fc:	e0843103 	add	r3, r4, r3, lsl #2
    a500:	edce7ae7 	vstr	s15, [lr, #924]	@ 0x39c
    a504:	edce7ae9 	vstr	s15, [lr, #932]	@ 0x3a4
    a508:	edc3ca01 	vstr	s25, [r3, #4]
    a50c:	e58de00c 	str	lr, [sp, #12]
    a510:	ebfff6d7 	bl	8074 <max>
    a514:	e1a01000 	mov	r1, r0
    a518:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a51c:	ebfff6d1 	bl	8068 <min>
    a520:	e0477000 	sub	r7, r7, r0
    a524:	e59de010 	ldr	lr, [sp, #16]
    a528:	e59d301c 	ldr	r3, [sp, #28]
    a52c:	e0077005 	and	r7, r7, r5
    a530:	e2877809 	add	r7, r7, #589824	@ 0x90000
    a534:	ed934ae0 	vldr	s8, [r3, #896]	@ 0x380
    a538:	e28770ea 	add	r7, r7, #234	@ 0xea
    a53c:	e59e33c4 	ldr	r3, [lr, #964]	@ 0x3c4
    a540:	e0847107 	add	r7, r4, r7, lsl #2
    a544:	edd77a01 	vldr	s15, [r7, #4]
    a548:	e0070693 	mul	r7, r3, r6
    a54c:	e59d2028 	ldr	r2, [sp, #40]	@ 0x28
    a550:	eddd3a20 	vldr	s7, [sp, #128]	@ 0x80
    a554:	ed926aee 	vldr	s12, [r2, #952]	@ 0x3b8
    a558:	ee077a10 	vmov	s14, r7
    a55c:	ee634aa7 	vmul.f32	s9, s7, s15
    a560:	ed9e5af4 	vldr	s10, [lr, #976]	@ 0x3d0
    a564:	ee236a86 	vmul.f32	s12, s7, s12
    a568:	edde6af2 	vldr	s13, [lr, #968]	@ 0x3c8
    a56c:	eeb87ac7 	vcvt.f32.s32	s14, s14
    a570:	edc27aeb 	vstr	s15, [r2, #940]	@ 0x3ac
    a574:	eddd7a21 	vldr	s15, [sp, #132]	@ 0x84
    a578:	ee377a05 	vadd.f32	s14, s14, s10
    a57c:	ee845aa7 	vdiv.f32	s10, s9, s15
    a580:	eec67a27 	vdiv.f32	s15, s12, s15
    a584:	edd25aec 	vldr	s11, [r2, #944]	@ 0x3b0
    a588:	ee476a0e 	vmla.f32	s13, s14, s28
    a58c:	ee777a85 	vadd.f32	s15, s15, s10
    a590:	ee76caca 	vsub.f32	s25, s13, s20
    a594:	ee777aa5 	vadd.f32	s15, s15, s11
    a598:	ee28ca0c 	vmul.f32	s24, s16, s24
    a59c:	eef17a67 	vneg.f32	s15, s15
    a5a0:	ee08ca84 	vmla.f32	s24, s17, s8
    a5a4:	eebd7aec 	vcvt.s32.f32	s14, s25
    a5a8:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a5ac:	ee171a10 	vmov	r1, s14
    a5b0:	e0073005 	and	r3, r7, r5
    a5b4:	e2833925 	add	r3, r3, #606208	@ 0x94000
    a5b8:	e28330f0 	add	r3, r3, #240	@ 0xf0
    a5bc:	e0843103 	add	r3, r4, r3, lsl #2
    a5c0:	edc27aed 	vstr	s15, [r2, #948]	@ 0x3b4
    a5c4:	edc27aef 	vstr	s15, [r2, #956]	@ 0x3bc
    a5c8:	e3a00000 	mov	r0, #0
    a5cc:	ed83ca01 	vstr	s24, [r3, #4]
    a5d0:	edce6af3 	vstr	s13, [lr, #972]	@ 0x3cc
    a5d4:	ebfff6a6 	bl	8074 <max>
    a5d8:	e1a01000 	mov	r1, r0
    a5dc:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a5e0:	ebfff6a0 	bl	8068 <min>
    a5e4:	e0477000 	sub	r7, r7, r0
    a5e8:	e0077005 	and	r7, r7, r5
    a5ec:	e2877925 	add	r7, r7, #606208	@ 0x94000
    a5f0:	e28770f0 	add	r7, r7, #240	@ 0xf0
    a5f4:	e0847107 	add	r7, r4, r7, lsl #2
    a5f8:	ed97ca01 	vldr	s24, [r7, #4]
    a5fc:	e59d7010 	ldr	r7, [sp, #16]
    a600:	eeb00a6c 	vmov.f32	s0, s25
    a604:	ed87caf5 	vstr	s24, [r7, #980]	@ 0x3d4
    a608:	eb004153 	bl	1ab5c <floorf>
    a60c:	eddd7a16 	vldr	s15, [sp, #88]	@ 0x58
    a610:	edd76af3 	vldr	s13, [r7, #972]	@ 0x3cc
    a614:	eefd7ae7 	vcvt.s32.f32	s15, s15
    a618:	ed976af8 	vldr	s12, [r7, #992]	@ 0x3e0
    a61c:	ee171a90 	vmov	r1, s15
    a620:	ee797ae6 	vsub.f32	s15, s19, s13
    a624:	ee366a4c 	vsub.f32	s12, s12, s24
    a628:	ee766ac0 	vsub.f32	s13, s13, s0
    a62c:	ee370a80 	vadd.f32	s0, s15, s0
    a630:	ee200a06 	vmul.f32	s0, s0, s12
    a634:	ed977af6 	vldr	s14, [r7, #984]	@ 0x3d8
    a638:	edd75afa 	vldr	s11, [r7, #1000]	@ 0x3e8
    a63c:	eec07a26 	vdiv.f32	s15, s0, s13
    a640:	ee68ba2b 	vmul.f32	s23, s16, s23
    a644:	e1a0e007 	mov	lr, r7
    a648:	ee777a67 	vsub.f32	s15, s14, s15
    a64c:	ee48baa5 	vmla.f32	s23, s17, s11
    a650:	e59470d4 	ldr	r7, [r4, #212]	@ 0xd4
    a654:	e3a00000 	mov	r0, #0
    a658:	e0073005 	and	r3, r7, r5
    a65c:	e2833926 	add	r3, r3, #622592	@ 0x98000
    a660:	e28330fa 	add	r3, r3, #250	@ 0xfa
    a664:	e0843103 	add	r3, r4, r3, lsl #2
    a668:	edce7af7 	vstr	s15, [lr, #988]	@ 0x3dc
    a66c:	edce7af9 	vstr	s15, [lr, #996]	@ 0x3e4
    a670:	edc3ba01 	vstr	s23, [r3, #4]
    a674:	e58de010 	str	lr, [sp, #16]
    a678:	ebfff67d 	bl	8074 <max>
    a67c:	e1a01000 	mov	r1, r0
    a680:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a684:	ebfff677 	bl	8068 <min>
    a688:	e0477000 	sub	r7, r7, r0
    a68c:	e0077005 	and	r7, r7, r5
    a690:	e2877926 	add	r7, r7, #622592	@ 0x98000
    a694:	e28770fa 	add	r7, r7, #250	@ 0xfa
    a698:	e0847107 	add	r7, r4, r7, lsl #2
    a69c:	ed977a01 	vldr	s14, [r7, #4]
    a6a0:	e59d7028 	ldr	r7, [sp, #40]	@ 0x28
    a6a4:	e59dc044 	ldr	ip, [sp, #68]	@ 0x44
    a6a8:	edd74af0 	vldr	s9, [r7, #960]	@ 0x3c0
    a6ac:	e59d7070 	ldr	r7, [sp, #112]	@ 0x70
    a6b0:	eddc6afe 	vldr	s13, [ip, #1016]	@ 0x3f8
    a6b4:	e5973404 	ldr	r3, [r7, #1028]	@ 0x404
    a6b8:	ed9d4a1d 	vldr	s8, [sp, #116]	@ 0x74
    a6bc:	e0060693 	mul	r6, r3, r6
    a6c0:	ee076a90 	vmov	s15, r6
    a6c4:	e1a03007 	mov	r3, r7
    a6c8:	e2877e41 	add	r7, r7, #1040	@ 0x410
    a6cc:	edd75a00 	vldr	s11, [r7]
    a6d0:	ee245a07 	vmul.f32	s10, s8, s14
    a6d4:	ed8c7afb 	vstr	s14, [ip, #1004]	@ 0x3ec
    a6d8:	ee646a26 	vmul.f32	s13, s8, s13
    a6dc:	ed9d7a1e 	vldr	s14, [sp, #120]	@ 0x78
    a6e0:	eef87ae7 	vcvt.f32.s32	s15, s15
    a6e4:	e2836b01 	add	r6, r3, #1024	@ 0x400
    a6e8:	ee777aa5 	vadd.f32	s15, s15, s11
    a6ec:	eec55a07 	vdiv.f32	s11, s10, s14
    a6f0:	ee867a87 	vdiv.f32	s14, s13, s14
    a6f4:	edd66a02 	vldr	s13, [r6, #8]
    a6f8:	ed9c6afc 	vldr	s12, [ip, #1008]	@ 0x3f0
    a6fc:	ee476a8e 	vmla.f32	s13, s15, s28
    a700:	ee377a25 	vadd.f32	s14, s14, s11
    a704:	ee36aaca 	vsub.f32	s20, s13, s20
    a708:	ee777a06 	vadd.f32	s15, s14, s12
    a70c:	ee68aa2a 	vmul.f32	s21, s16, s21
    a710:	e1a02006 	mov	r2, r6
    a714:	eef17a67 	vneg.f32	s15, s15
    a718:	ee48aaa4 	vmla.f32	s21, s17, s9
    a71c:	eebd7aca 	vcvt.s32.f32	s14, s20
    a720:	e59460d4 	ldr	r6, [r4, #212]	@ 0xd4
    a724:	ee171a10 	vmov	r1, s14
    a728:	e0063005 	and	r3, r6, r5
    a72c:	e2833927 	add	r3, r3, #638976	@ 0x9c000
    a730:	e2833c01 	add	r3, r3, #256	@ 0x100
    a734:	e0843103 	add	r3, r4, r3, lsl #2
    a738:	edcc7afd 	vstr	s15, [ip, #1012]	@ 0x3f4
    a73c:	edcc7aff 	vstr	s15, [ip, #1020]	@ 0x3fc
    a740:	e3a00000 	mov	r0, #0
    a744:	edc3aa01 	vstr	s21, [r3, #4]
    a748:	edc26a03 	vstr	s13, [r2, #12]
    a74c:	e58d2058 	str	r2, [sp, #88]	@ 0x58
    a750:	ebfff647 	bl	8074 <max>
    a754:	e1a01000 	mov	r1, r0
    a758:	e3a00a02 	mov	r0, #8192	@ 0x2000
    a75c:	ebfff641 	bl	8068 <min>
    a760:	e0466000 	sub	r6, r6, r0
    a764:	e0066005 	and	r6, r6, r5
    a768:	e2866927 	add	r6, r6, #638976	@ 0x9c000
    a76c:	e2866c01 	add	r6, r6, #256	@ 0x100
    a770:	e0846106 	add	r6, r4, r6, lsl #2
    a774:	edd6aa01 	vldr	s21, [r6, #4]
    a778:	eeb00a4a 	vmov.f32	s0, s20
    a77c:	edc7aa01 	vstr	s21, [r7, #4]
    a780:	eb0040f5 	bl	1ab5c <floorf>
    a784:	e59d6058 	ldr	r6, [sp, #88]	@ 0x58
    a788:	edd96a00 	vldr	s13, [r9]
    a78c:	ed967a03 	vldr	s14, [r6, #12]
    a790:	ee799ac7 	vsub.f32	s19, s19, s14
    a794:	ee766aea 	vsub.f32	s13, s13, s21
    a798:	ee799a80 	vadd.f32	s19, s19, s0
    a79c:	ee377a40 	vsub.f32	s14, s14, s0
    a7a0:	ee699aa6 	vmul.f32	s19, s19, s13
    a7a4:	e59d6054 	ldr	r6, [sp, #84]	@ 0x54
    a7a8:	edd77a02 	vldr	s15, [r7, #8]
    a7ac:	ed966a00 	vldr	s12, [r6]
    a7b0:	eec96a87 	vdiv.f32	s13, s19, s14
    a7b4:	ee289a09 	vmul.f32	s18, s16, s18
    a7b8:	ee777ae6 	vsub.f32	s15, s15, s13
    a7bc:	ee089a86 	vmla.f32	s18, s17, s12
    a7c0:	e59d6060 	ldr	r6, [sp, #96]	@ 0x60
    a7c4:	e59420d4 	ldr	r2, [r4, #212]	@ 0xd4
    a7c8:	e59d30fc 	ldr	r3, [sp, #252]	@ 0xfc
    a7cc:	e2866001 	add	r6, r6, #1
    a7d0:	e1530006 	cmp	r3, r6
    a7d4:	e1a03b02 	lsl	r3, r2, #22
    a7d8:	e1a03b23 	lsr	r3, r3, #22
    a7dc:	e0843103 	add	r3, r4, r3, lsl #2
    a7e0:	e283370a 	add	r3, r3, #2621440	@ 0x280000
    a7e4:	e2831e42 	add	r1, r3, #1056	@ 0x420
    a7e8:	edc77a03 	vstr	s15, [r7, #12]
    a7ec:	edc97a01 	vstr	s15, [r9, #4]
    a7f0:	ed819a03 	vstr	s18, [r1, #12]
    a7f4:	ee288a0b 	vmul.f32	s16, s16, s22
    a7f8:	edd97a02 	vldr	s15, [r9, #8]
    a7fc:	ee088aa7 	vmla.f32	s16, s17, s15
    a800:	e58d6060 	str	r6, [sp, #96]	@ 0x60
    a804:	e59d6068 	ldr	r6, [sp, #104]	@ 0x68
    a808:	e2833b05 	add	r3, r3, #5120	@ 0x1400
    a80c:	ed838a0b 	vstr	s16, [r3, #44]	@ 0x2c
    a810:	eca69a01 	vstmia	r6!, {s18}
    a814:	e2833020 	add	r3, r3, #32
    a818:	e593300c 	ldr	r3, [r3, #12]
    a81c:	e58d6068 	str	r6, [sp, #104]	@ 0x68
    a820:	e59d6064 	ldr	r6, [sp, #100]	@ 0x64
    a824:	e2822001 	add	r2, r2, #1
    a828:	e4863004 	str	r3, [r6], #4
    a82c:	ed947a04 	vldr	s14, [r4, #16]
    a830:	e5943018 	ldr	r3, [r4, #24]
    a834:	e58d6064 	str	r6, [sp, #100]	@ 0x64
    a838:	e584301c 	str	r3, [r4, #28]
    a83c:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    a840:	e5946000 	ldr	r6, [r4]
    a844:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    a848:	e5943038 	ldr	r3, [r4, #56]	@ 0x38
    a84c:	ed847a05 	vstr	s14, [r4, #20]
    a850:	e5846004 	str	r6, [r4, #4]
    a854:	e584303c 	str	r3, [r4, #60]	@ 0x3c
    a858:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
    a85c:	e59d5000 	ldr	r5, [sp]
    a860:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    a864:	edd55a37 	vldr	s11, [r5, #220]	@ 0xdc
    a868:	ed956a39 	vldr	s12, [r5, #228]	@ 0xe4
    a86c:	edd56a3b 	vldr	s13, [r5, #236]	@ 0xec
    a870:	edd57a3d 	vldr	s15, [r5, #244]	@ 0xf4
    a874:	e5943058 	ldr	r3, [r4, #88]	@ 0x58
    a878:	e58420d4 	str	r2, [r4, #212]	@ 0xd4
    a87c:	e584305c 	str	r3, [r4, #92]	@ 0x5c
    a880:	e5943068 	ldr	r3, [r4, #104]	@ 0x68
    a884:	e584306c 	str	r3, [r4, #108]	@ 0x6c
    a888:	e5943078 	ldr	r3, [r4, #120]	@ 0x78
    a88c:	e584307c 	str	r3, [r4, #124]	@ 0x7c
    a890:	e5943088 	ldr	r3, [r4, #136]	@ 0x88
    a894:	e584308c 	str	r3, [r4, #140]	@ 0x8c
    a898:	e5943098 	ldr	r3, [r4, #152]	@ 0x98
    a89c:	e584309c 	str	r3, [r4, #156]	@ 0x9c
    a8a0:	e59430a0 	ldr	r3, [r4, #160]	@ 0xa0
    a8a4:	e58430a4 	str	r3, [r4, #164]	@ 0xa4
    a8a8:	e59430b0 	ldr	r3, [r4, #176]	@ 0xb0
    a8ac:	e58430b4 	str	r3, [r4, #180]	@ 0xb4
    a8b0:	e59430c4 	ldr	r3, [r4, #196]	@ 0xc4
    a8b4:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    a8b8:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
    a8bc:	e58430d0 	str	r3, [r4, #208]	@ 0xd0
    a8c0:	e59d3004 	ldr	r3, [sp, #4]
    a8c4:	e5935104 	ldr	r5, [r3, #260]	@ 0x104
    a8c8:	e593c114 	ldr	ip, [r3, #276]	@ 0x114
    a8cc:	e593011c 	ldr	r0, [r3, #284]	@ 0x11c
    a8d0:	e593e10c 	ldr	lr, [r3, #268]	@ 0x10c
    a8d4:	e59d3008 	ldr	r3, [sp, #8]
    a8d8:	e593212c 	ldr	r2, [r3, #300]	@ 0x12c
    a8dc:	e59410bc 	ldr	r1, [r4, #188]	@ 0xbc
    a8e0:	e5933134 	ldr	r3, [r3, #308]	@ 0x134
    a8e4:	e58410c0 	str	r1, [r4, #192]	@ 0xc0
    a8e8:	e59d1000 	ldr	r1, [sp]
    a8ec:	edc15a38 	vstr	s11, [r1, #224]	@ 0xe0
    a8f0:	ed816a3a 	vstr	s12, [r1, #232]	@ 0xe8
    a8f4:	edc16a3c 	vstr	s13, [r1, #240]	@ 0xf0
    a8f8:	edc17a3e 	vstr	s15, [r1, #248]	@ 0xf8
    a8fc:	e59d1004 	ldr	r1, [sp, #4]
    a900:	e581c118 	str	ip, [r1, #280]	@ 0x118
    a904:	e59dc008 	ldr	ip, [sp, #8]
    a908:	e5815108 	str	r5, [r1, #264]	@ 0x108
    a90c:	e5810120 	str	r0, [r1, #288]	@ 0x120
    a910:	e581e110 	str	lr, [r1, #272]	@ 0x110
    a914:	e58c3138 	str	r3, [ip, #312]	@ 0x138
    a918:	e59c313c 	ldr	r3, [ip, #316]	@ 0x13c
    a91c:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
    a920:	e58c3140 	str	r3, [ip, #320]	@ 0x140
    a924:	e59c3144 	ldr	r3, [ip, #324]	@ 0x144
    a928:	e58c2130 	str	r2, [ip, #304]	@ 0x130
    a92c:	e58c3148 	str	r3, [ip, #328]	@ 0x148
    a930:	e595314c 	ldr	r3, [r5, #332]	@ 0x14c
    a934:	e59d0038 	ldr	r0, [sp, #56]	@ 0x38
    a938:	e5853150 	str	r3, [r5, #336]	@ 0x150
    a93c:	e5953154 	ldr	r3, [r5, #340]	@ 0x154
    a940:	e5853158 	str	r3, [r5, #344]	@ 0x158
    a944:	e595315c 	ldr	r3, [r5, #348]	@ 0x15c
    a948:	e5853160 	str	r3, [r5, #352]	@ 0x160
    a94c:	e590316c 	ldr	r3, [r0, #364]	@ 0x16c
    a950:	e5803170 	str	r3, [r0, #368]	@ 0x170
    a954:	e5903174 	ldr	r3, [r0, #372]	@ 0x174
    a958:	e5803178 	str	r3, [r0, #376]	@ 0x178
    a95c:	e590317c 	ldr	r3, [r0, #380]	@ 0x17c
    a960:	e59d1048 	ldr	r1, [sp, #72]	@ 0x48
    a964:	e5803180 	str	r3, [r0, #384]	@ 0x180
    a968:	e5903184 	ldr	r3, [r0, #388]	@ 0x184
    a96c:	e59d5034 	ldr	r5, [sp, #52]	@ 0x34
    a970:	e5803188 	str	r3, [r0, #392]	@ 0x188
    a974:	e59d002c 	ldr	r0, [sp, #44]	@ 0x2c
    a978:	e59d2050 	ldr	r2, [sp, #80]	@ 0x50
    a97c:	e590318c 	ldr	r3, [r0, #396]	@ 0x18c
    a980:	e5803190 	str	r3, [r0, #400]	@ 0x190
    a984:	e5903194 	ldr	r3, [r0, #404]	@ 0x194
    a988:	e5803198 	str	r3, [r0, #408]	@ 0x198
    a98c:	e590319c 	ldr	r3, [r0, #412]	@ 0x19c
    a990:	e58031a0 	str	r3, [r0, #416]	@ 0x1a0
    a994:	e59131ac 	ldr	r3, [r1, #428]	@ 0x1ac
    a998:	e58131b0 	str	r3, [r1, #432]	@ 0x1b0
    a99c:	e59131b4 	ldr	r3, [r1, #436]	@ 0x1b4
    a9a0:	e58131b8 	str	r3, [r1, #440]	@ 0x1b8
    a9a4:	e59131bc 	ldr	r3, [r1, #444]	@ 0x1bc
    a9a8:	e58131c0 	str	r3, [r1, #448]	@ 0x1c0
    a9ac:	e59131c4 	ldr	r3, [r1, #452]	@ 0x1c4
    a9b0:	e58131c8 	str	r3, [r1, #456]	@ 0x1c8
    a9b4:	e59531cc 	ldr	r3, [r5, #460]	@ 0x1cc
    a9b8:	e58531d0 	str	r3, [r5, #464]	@ 0x1d0
    a9bc:	e59531d4 	ldr	r3, [r5, #468]	@ 0x1d4
    a9c0:	e58531d8 	str	r3, [r5, #472]	@ 0x1d8
    a9c4:	e59531dc 	ldr	r3, [r5, #476]	@ 0x1dc
    a9c8:	e58531e0 	str	r3, [r5, #480]	@ 0x1e0
    a9cc:	e59231ec 	ldr	r3, [r2, #492]	@ 0x1ec
    a9d0:	e58231f0 	str	r3, [r2, #496]	@ 0x1f0
    a9d4:	e59231f4 	ldr	r3, [r2, #500]	@ 0x1f4
    a9d8:	e58231f8 	str	r3, [r2, #504]	@ 0x1f8
    a9dc:	e59231fc 	ldr	r3, [r2, #508]	@ 0x1fc
    a9e0:	e59d5020 	ldr	r5, [sp, #32]
    a9e4:	e5823200 	str	r3, [r2, #512]	@ 0x200
    a9e8:	e5923204 	ldr	r3, [r2, #516]	@ 0x204
    a9ec:	e5823208 	str	r3, [r2, #520]	@ 0x208
    a9f0:	e59a3214 	ldr	r3, [sl, #532]	@ 0x214
    a9f4:	e58a3218 	str	r3, [sl, #536]	@ 0x218
    a9f8:	e59a321c 	ldr	r3, [sl, #540]	@ 0x21c
    a9fc:	e58a3220 	str	r3, [sl, #544]	@ 0x220
    aa00:	e59a3224 	ldr	r3, [sl, #548]	@ 0x224
    aa04:	e58a3228 	str	r3, [sl, #552]	@ 0x228
    aa08:	e59a322c 	ldr	r3, [sl, #556]	@ 0x22c
    aa0c:	e58a3230 	str	r3, [sl, #560]	@ 0x230
    aa10:	e59b323c 	ldr	r3, [fp, #572]	@ 0x23c
    aa14:	e58b3240 	str	r3, [fp, #576]	@ 0x240
    aa18:	e59b3244 	ldr	r3, [fp, #580]	@ 0x244
    aa1c:	e58b3248 	str	r3, [fp, #584]	@ 0x248
    aa20:	e59b324c 	ldr	r3, [fp, #588]	@ 0x24c
    aa24:	e58b3250 	str	r3, [fp, #592]	@ 0x250
    aa28:	e59b3254 	ldr	r3, [fp, #596]	@ 0x254
    aa2c:	e58b3258 	str	r3, [fp, #600]	@ 0x258
    aa30:	e595325c 	ldr	r3, [r5, #604]	@ 0x25c
    aa34:	e5853260 	str	r3, [r5, #608]	@ 0x260
    aa38:	e5953264 	ldr	r3, [r5, #612]	@ 0x264
    aa3c:	e5853268 	str	r3, [r5, #616]	@ 0x268
    aa40:	e595326c 	ldr	r3, [r5, #620]	@ 0x26c
    aa44:	e5853270 	str	r3, [r5, #624]	@ 0x270
    aa48:	e598327c 	ldr	r3, [r8, #636]	@ 0x27c
    aa4c:	e5883280 	str	r3, [r8, #640]	@ 0x280
    aa50:	e5983284 	ldr	r3, [r8, #644]	@ 0x284
    aa54:	e5883288 	str	r3, [r8, #648]	@ 0x288
    aa58:	e598328c 	ldr	r3, [r8, #652]	@ 0x28c
    aa5c:	e5883290 	str	r3, [r8, #656]	@ 0x290
    aa60:	e5983294 	ldr	r3, [r8, #660]	@ 0x294
    aa64:	e59d003c 	ldr	r0, [sp, #60]	@ 0x3c
    aa68:	e5883298 	str	r3, [r8, #664]	@ 0x298
    aa6c:	e590329c 	ldr	r3, [r0, #668]	@ 0x29c
    aa70:	e59d1040 	ldr	r1, [sp, #64]	@ 0x40
    aa74:	e58032a0 	str	r3, [r0, #672]	@ 0x2a0
    aa78:	e59032a4 	ldr	r3, [r0, #676]	@ 0x2a4
    aa7c:	e59d5030 	ldr	r5, [sp, #48]	@ 0x30
    aa80:	e58032a8 	str	r3, [r0, #680]	@ 0x2a8
    aa84:	e59032ac 	ldr	r3, [r0, #684]	@ 0x2ac
    aa88:	e59d204c 	ldr	r2, [sp, #76]	@ 0x4c
    aa8c:	e58032b0 	str	r3, [r0, #688]	@ 0x2b0
    aa90:	e59132bc 	ldr	r3, [r1, #700]	@ 0x2bc
    aa94:	e58132c0 	str	r3, [r1, #704]	@ 0x2c0
    aa98:	e59132c4 	ldr	r3, [r1, #708]	@ 0x2c4
    aa9c:	e58132c8 	str	r3, [r1, #712]	@ 0x2c8
    aaa0:	e59132cc 	ldr	r3, [r1, #716]	@ 0x2cc
    aaa4:	e58132d0 	str	r3, [r1, #720]	@ 0x2d0
    aaa8:	e59132d4 	ldr	r3, [r1, #724]	@ 0x2d4
    aaac:	e58132d8 	str	r3, [r1, #728]	@ 0x2d8
    aab0:	e59532dc 	ldr	r3, [r5, #732]	@ 0x2dc
    aab4:	e58532e0 	str	r3, [r5, #736]	@ 0x2e0
    aab8:	e59532e4 	ldr	r3, [r5, #740]	@ 0x2e4
    aabc:	e58532e8 	str	r3, [r5, #744]	@ 0x2e8
    aac0:	e59532ec 	ldr	r3, [r5, #748]	@ 0x2ec
    aac4:	e58532f0 	str	r3, [r5, #752]	@ 0x2f0
    aac8:	e59232fc 	ldr	r3, [r2, #764]	@ 0x2fc
    aacc:	e5823300 	str	r3, [r2, #768]	@ 0x300
    aad0:	e5923304 	ldr	r3, [r2, #772]	@ 0x304
    aad4:	e5823308 	str	r3, [r2, #776]	@ 0x308
    aad8:	e592330c 	ldr	r3, [r2, #780]	@ 0x30c
    aadc:	e5823310 	str	r3, [r2, #784]	@ 0x310
    aae0:	e5923314 	ldr	r3, [r2, #788]	@ 0x314
    aae4:	e59d000c 	ldr	r0, [sp, #12]
    aae8:	e5823318 	str	r3, [r2, #792]	@ 0x318
    aaec:	e59d2014 	ldr	r2, [sp, #20]
    aaf0:	e5923324 	ldr	r3, [r2, #804]	@ 0x324
    aaf4:	e5823328 	str	r3, [r2, #808]	@ 0x328
    aaf8:	e592332c 	ldr	r3, [r2, #812]	@ 0x32c
    aafc:	e5823330 	str	r3, [r2, #816]	@ 0x330
    ab00:	e5923334 	ldr	r3, [r2, #820]	@ 0x334
    ab04:	e5823338 	str	r3, [r2, #824]	@ 0x338
    ab08:	e592333c 	ldr	r3, [r2, #828]	@ 0x33c
    ab0c:	e5823340 	str	r3, [r2, #832]	@ 0x340
    ab10:	e59d2018 	ldr	r2, [sp, #24]
    ab14:	e592334c 	ldr	r3, [r2, #844]	@ 0x34c
    ab18:	e5823350 	str	r3, [r2, #848]	@ 0x350
    ab1c:	e5923354 	ldr	r3, [r2, #852]	@ 0x354
    ab20:	e5823358 	str	r3, [r2, #856]	@ 0x358
    ab24:	e592335c 	ldr	r3, [r2, #860]	@ 0x35c
    ab28:	e5823360 	str	r3, [r2, #864]	@ 0x360
    ab2c:	e5923364 	ldr	r3, [r2, #868]	@ 0x364
    ab30:	e5823368 	str	r3, [r2, #872]	@ 0x368
    ab34:	e59d201c 	ldr	r2, [sp, #28]
    ab38:	e592336c 	ldr	r3, [r2, #876]	@ 0x36c
    ab3c:	e5823370 	str	r3, [r2, #880]	@ 0x370
    ab40:	e5923374 	ldr	r3, [r2, #884]	@ 0x374
    ab44:	e5823378 	str	r3, [r2, #888]	@ 0x378
    ab48:	e592337c 	ldr	r3, [r2, #892]	@ 0x37c
    ab4c:	e5823380 	str	r3, [r2, #896]	@ 0x380
    ab50:	e590338c 	ldr	r3, [r0, #908]	@ 0x38c
    ab54:	e5902394 	ldr	r2, [r0, #916]	@ 0x394
    ab58:	e5803390 	str	r3, [r0, #912]	@ 0x390
    ab5c:	e59d3058 	ldr	r3, [sp, #88]	@ 0x58
    ab60:	e593300c 	ldr	r3, [r3, #12]
    ab64:	e5802398 	str	r2, [r0, #920]	@ 0x398
    ab68:	e590239c 	ldr	r2, [r0, #924]	@ 0x39c
    ab6c:	e59d1010 	ldr	r1, [sp, #16]
    ab70:	e58023a0 	str	r2, [r0, #928]	@ 0x3a0
    ab74:	e59023a4 	ldr	r2, [r0, #932]	@ 0x3a4
    ab78:	e59dc044 	ldr	ip, [sp, #68]	@ 0x44
    ab7c:	e58023a8 	str	r2, [r0, #936]	@ 0x3a8
    ab80:	e59d0028 	ldr	r0, [sp, #40]	@ 0x28
    ab84:	e59023ac 	ldr	r2, [r0, #940]	@ 0x3ac
    ab88:	e58023b0 	str	r2, [r0, #944]	@ 0x3b0
    ab8c:	e59023b4 	ldr	r2, [r0, #948]	@ 0x3b4
    ab90:	e58023b8 	str	r2, [r0, #952]	@ 0x3b8
    ab94:	e59023bc 	ldr	r2, [r0, #956]	@ 0x3bc
    ab98:	e58023c0 	str	r2, [r0, #960]	@ 0x3c0
    ab9c:	e59123cc 	ldr	r2, [r1, #972]	@ 0x3cc
    aba0:	e58123d0 	str	r2, [r1, #976]	@ 0x3d0
    aba4:	e59123d4 	ldr	r2, [r1, #980]	@ 0x3d4
    aba8:	e58123d8 	str	r2, [r1, #984]	@ 0x3d8
    abac:	e59123dc 	ldr	r2, [r1, #988]	@ 0x3dc
    abb0:	e58123e0 	str	r2, [r1, #992]	@ 0x3e0
    abb4:	e59123e4 	ldr	r2, [r1, #996]	@ 0x3e4
    abb8:	e58123e8 	str	r2, [r1, #1000]	@ 0x3e8
    abbc:	e59c23ec 	ldr	r2, [ip, #1004]	@ 0x3ec
    abc0:	e59d1054 	ldr	r1, [sp, #84]	@ 0x54
    abc4:	e58c23f0 	str	r2, [ip, #1008]	@ 0x3f0
    abc8:	e59c23f4 	ldr	r2, [ip, #1012]	@ 0x3f4
    abcc:	e58c23f8 	str	r2, [ip, #1016]	@ 0x3f8
    abd0:	e59c23fc 	ldr	r2, [ip, #1020]	@ 0x3fc
    abd4:	e5812000 	str	r2, [r1]
    abd8:	e5873000 	str	r3, [r7]
    abdc:	e5973004 	ldr	r3, [r7, #4]
    abe0:	e5873008 	str	r3, [r7, #8]
    abe4:	e597300c 	ldr	r3, [r7, #12]
    abe8:	e5893000 	str	r3, [r9]
    abec:	e5993004 	ldr	r3, [r9, #4]
    abf0:	e5893008 	str	r3, [r9, #8]
    abf4:	0a0001a4 	beq	b28c <computemydsp+0x234c>
    abf8:	e5943008 	ldr	r3, [r4, #8]
    abfc:	e2666001 	rsb	r6, r6, #1
    ac00:	e0030693 	mul	r3, r3, r6
    ac04:	ee063a90 	vmov	s13, r3
    ac08:	eef86ae6 	vcvt.f32.s32	s13, s13
    ac0c:	edd47a03 	vldr	s15, [r4, #12]
    ac10:	ee766a87 	vadd.f32	s13, s13, s14
    ac14:	eddfbafd 	vldr	s23, [pc, #1012]	@ b010 <computemydsp+0x20d0>
    ac18:	ee467a8e 	vmla.f32	s15, s13, s28
    ac1c:	e3a03001 	mov	r3, #1
    ac20:	ee377aeb 	vsub.f32	s14, s15, s23
    ac24:	e5843000 	str	r3, [r4]
    ac28:	edc47a04 	vstr	s15, [r4, #16]
    ac2c:	eeb00a47 	vmov.f32	s0, s14
    ac30:	ed8d7a16 	vstr	s14, [sp, #88]	@ 0x58
    ac34:	eb003fc8 	bl	1ab5c <floorf>
    ac38:	eddf7af5 	vldr	s15, [pc, #980]	@ b014 <computemydsp+0x20d4>
    ac3c:	ed949a07 	vldr	s18, [r4, #28]
    ac40:	ed9fbaf4 	vldr	s22, [pc, #976]	@ b018 <computemydsp+0x20d8>
    ac44:	ed947a04 	vldr	s14, [r4, #16]
    ac48:	ee399a27 	vadd.f32	s18, s18, s15
    ac4c:	ee7b6a47 	vsub.f32	s13, s22, s14
    ac50:	ee299a27 	vmul.f32	s18, s18, s15
    ac54:	ee377a40 	vsub.f32	s14, s14, s0
    ac58:	edc47a06 	vstr	s15, [r4, #24]
    ac5c:	ee767a80 	vadd.f32	s15, s13, s0
    ac60:	eeb00a49 	vmov.f32	s0, s18
    ac64:	ed8d7a1e 	vstr	s14, [sp, #120]	@ 0x78
    ac68:	edcd7a1d 	vstr	s15, [sp, #116]	@ 0x74
    ac6c:	eb003ebd 	bl	1a768 <cosf>
    ac70:	e5943020 	ldr	r3, [r4, #32]
    ac74:	edd46a0b 	vldr	s13, [r4, #44]	@ 0x2c
    ac78:	e0030693 	mul	r3, r3, r6
    ac7c:	ee073a90 	vmov	s15, r3
    ac80:	eef87ae7 	vcvt.f32.s32	s15, s15
    ac84:	ed947a09 	vldr	s14, [r4, #36]	@ 0x24
    ac88:	ee777aa6 	vadd.f32	s15, s15, s13
    ac8c:	ee077a8e 	vmla.f32	s14, s15, s28
    ac90:	ee777a6b 	vsub.f32	s15, s14, s23
    ac94:	ed847a0a 	vstr	s14, [r4, #40]	@ 0x28
    ac98:	eef08a40 	vmov.f32	s17, s0
    ac9c:	eeb00a67 	vmov.f32	s0, s15
    aca0:	edcd7a1f 	vstr	s15, [sp, #124]	@ 0x7c
    aca4:	eb003fac 	bl	1ab5c <floorf>
    aca8:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
    acac:	edd45a0f 	vldr	s11, [r4, #60]	@ 0x3c
    acb0:	e0030693 	mul	r3, r3, r6
    acb4:	ee073a90 	vmov	s15, r3
    acb8:	eef87ae7 	vcvt.f32.s32	s15, s15
    acbc:	ed947a0d 	vldr	s14, [r4, #52]	@ 0x34
    acc0:	ee777aa5 	vadd.f32	s15, s15, s11
    acc4:	edd46a0a 	vldr	s13, [r4, #40]	@ 0x28
    acc8:	ee077a8e 	vmla.f32	s14, s15, s28
    accc:	ee3b6a66 	vsub.f32	s12, s22, s13
    acd0:	ee766ac0 	vsub.f32	s13, s13, s0
    acd4:	ee777a6b 	vsub.f32	s15, s14, s23
    acd8:	edcd6a21 	vstr	s13, [sp, #132]	@ 0x84
    acdc:	ee766a00 	vadd.f32	s13, s12, s0
    ace0:	ed847a0e 	vstr	s14, [r4, #56]	@ 0x38
    ace4:	eeb00a67 	vmov.f32	s0, s15
    ace8:	edcd6a20 	vstr	s13, [sp, #128]	@ 0x80
    acec:	edcd7a22 	vstr	s15, [sp, #136]	@ 0x88
    acf0:	eb003f99 	bl	1ab5c <floorf>
    acf4:	ed947a0e 	vldr	s14, [r4, #56]	@ 0x38
    acf8:	eef07a40 	vmov.f32	s15, s0
    acfc:	ee7b6a47 	vsub.f32	s13, s22, s14
    ad00:	ee377a67 	vsub.f32	s14, s14, s15
    ad04:	ee767aa7 	vadd.f32	s15, s13, s15
    ad08:	eeb00a49 	vmov.f32	s0, s18
    ad0c:	ed8d7a24 	vstr	s14, [sp, #144]	@ 0x90
    ad10:	edcd7a23 	vstr	s15, [sp, #140]	@ 0x8c
    ad14:	eeb19a49 	vneg.f32	s18, s18
    ad18:	eb003e06 	bl	1a538 <sinf>
    ad1c:	eeb08a40 	vmov.f32	s16, s0
    ad20:	eeb00a49 	vmov.f32	s0, s18
    ad24:	eb003e8f 	bl	1a768 <cosf>
    ad28:	e5943040 	ldr	r3, [r4, #64]	@ 0x40
    ad2c:	edd46a13 	vldr	s13, [r4, #76]	@ 0x4c
    ad30:	e0030693 	mul	r3, r3, r6
    ad34:	ee073a90 	vmov	s15, r3
    ad38:	eef87ae7 	vcvt.f32.s32	s15, s15
    ad3c:	ed947a11 	vldr	s14, [r4, #68]	@ 0x44
    ad40:	ee777aa6 	vadd.f32	s15, s15, s13
    ad44:	ee077a8e 	vmla.f32	s14, s15, s28
    ad48:	ee777a6b 	vsub.f32	s15, s14, s23
    ad4c:	ed847a12 	vstr	s14, [r4, #72]	@ 0x48
    ad50:	eef0aa40 	vmov.f32	s21, s0
    ad54:	eeb00a67 	vmov.f32	s0, s15
    ad58:	edcd7a15 	vstr	s15, [sp, #84]	@ 0x54
    ad5c:	eb003f7e 	bl	1ab5c <floorf>
    ad60:	e5943050 	ldr	r3, [r4, #80]	@ 0x50
    ad64:	edd45a17 	vldr	s11, [r4, #92]	@ 0x5c
    ad68:	e0030693 	mul	r3, r3, r6
    ad6c:	ee073a90 	vmov	s15, r3
    ad70:	eef87ae7 	vcvt.f32.s32	s15, s15
    ad74:	ed947a15 	vldr	s14, [r4, #84]	@ 0x54
    ad78:	ee777aa5 	vadd.f32	s15, s15, s11
    ad7c:	edd46a12 	vldr	s13, [r4, #72]	@ 0x48
    ad80:	ee077a8e 	vmla.f32	s14, s15, s28
    ad84:	ee3b6a66 	vsub.f32	s12, s22, s13
    ad88:	ee766ac0 	vsub.f32	s13, s13, s0
    ad8c:	ee777a6b 	vsub.f32	s15, s14, s23
    ad90:	edcd6a26 	vstr	s13, [sp, #152]	@ 0x98
    ad94:	ee766a00 	vadd.f32	s13, s12, s0
    ad98:	ed847a16 	vstr	s14, [r4, #88]	@ 0x58
    ad9c:	eeb00a67 	vmov.f32	s0, s15
    ada0:	edcd6a25 	vstr	s13, [sp, #148]	@ 0x94
    ada4:	edcd7a27 	vstr	s15, [sp, #156]	@ 0x9c
    ada8:	eb003f6b 	bl	1ab5c <floorf>
    adac:	e5943060 	ldr	r3, [r4, #96]	@ 0x60
    adb0:	edd45a1b 	vldr	s11, [r4, #108]	@ 0x6c
    adb4:	e0030693 	mul	r3, r3, r6
    adb8:	ee073a90 	vmov	s15, r3
    adbc:	eef87ae7 	vcvt.f32.s32	s15, s15
    adc0:	ed947a19 	vldr	s14, [r4, #100]	@ 0x64
    adc4:	ee777aa5 	vadd.f32	s15, s15, s11
    adc8:	edd46a16 	vldr	s13, [r4, #88]	@ 0x58
    adcc:	ee077a8e 	vmla.f32	s14, s15, s28
    add0:	ee3b6a66 	vsub.f32	s12, s22, s13
    add4:	ee766ac0 	vsub.f32	s13, s13, s0
    add8:	ee777a6b 	vsub.f32	s15, s14, s23
    addc:	edcd6a29 	vstr	s13, [sp, #164]	@ 0xa4
    ade0:	ee766a00 	vadd.f32	s13, s12, s0
    ade4:	ed847a1a 	vstr	s14, [r4, #104]	@ 0x68
    ade8:	eeb00a67 	vmov.f32	s0, s15
    adec:	edcd6a28 	vstr	s13, [sp, #160]	@ 0xa0
    adf0:	edcd7a2a 	vstr	s15, [sp, #168]	@ 0xa8
    adf4:	eb003f58 	bl	1ab5c <floorf>
    adf8:	ed947a1a 	vldr	s14, [r4, #104]	@ 0x68
    adfc:	eef07a40 	vmov.f32	s15, s0
    ae00:	ee7b6a47 	vsub.f32	s13, s22, s14
    ae04:	ee377a67 	vsub.f32	s14, s14, s15
    ae08:	ee767aa7 	vadd.f32	s15, s13, s15
    ae0c:	eeb00a49 	vmov.f32	s0, s18
    ae10:	ed8d7a2c 	vstr	s14, [sp, #176]	@ 0xb0
    ae14:	edcd7a2b 	vstr	s15, [sp, #172]	@ 0xac
    ae18:	eb003dc6 	bl	1a538 <sinf>
    ae1c:	e5943070 	ldr	r3, [r4, #112]	@ 0x70
    ae20:	edd46a1f 	vldr	s13, [r4, #124]	@ 0x7c
    ae24:	e0030693 	mul	r3, r3, r6
    ae28:	ee073a90 	vmov	s15, r3
    ae2c:	eef87ae7 	vcvt.f32.s32	s15, s15
    ae30:	ed947a1d 	vldr	s14, [r4, #116]	@ 0x74
    ae34:	ee777aa6 	vadd.f32	s15, s15, s13
    ae38:	ee077a8e 	vmla.f32	s14, s15, s28
    ae3c:	ee777a6b 	vsub.f32	s15, s14, s23
    ae40:	ed847a1e 	vstr	s14, [r4, #120]	@ 0x78
    ae44:	eeb09a40 	vmov.f32	s18, s0
    ae48:	eeb00a67 	vmov.f32	s0, s15
    ae4c:	edcd7a2d 	vstr	s15, [sp, #180]	@ 0xb4
    ae50:	eb003f41 	bl	1ab5c <floorf>
    ae54:	e5943080 	ldr	r3, [r4, #128]	@ 0x80
    ae58:	edd46a23 	vldr	s13, [r4, #140]	@ 0x8c
    ae5c:	e0030693 	mul	r3, r3, r6
    ae60:	ee073a90 	vmov	s15, r3
    ae64:	eef87ae7 	vcvt.f32.s32	s15, s15
    ae68:	ed94ca21 	vldr	s24, [r4, #132]	@ 0x84
    ae6c:	ee777aa6 	vadd.f32	s15, s15, s13
    ae70:	ed947a1e 	vldr	s14, [r4, #120]	@ 0x78
    ae74:	ee07ca8e 	vmla.f32	s24, s15, s28
    ae78:	ee7b6a47 	vsub.f32	s13, s22, s14
    ae7c:	ee377a40 	vsub.f32	s14, s14, s0
    ae80:	ed84ca22 	vstr	s24, [r4, #136]	@ 0x88
    ae84:	ee3cca6b 	vsub.f32	s24, s24, s23
    ae88:	ed8d7a2f 	vstr	s14, [sp, #188]	@ 0xbc
    ae8c:	ee367a80 	vadd.f32	s14, s13, s0
    ae90:	eeb00a4c 	vmov.f32	s0, s24
    ae94:	ed8d7a2e 	vstr	s14, [sp, #184]	@ 0xb8
    ae98:	eb003f2f 	bl	1ab5c <floorf>
    ae9c:	e5943090 	ldr	r3, [r4, #144]	@ 0x90
    aea0:	ed947a27 	vldr	s14, [r4, #156]	@ 0x9c
    aea4:	e0030693 	mul	r3, r3, r6
    aea8:	ee073a90 	vmov	s15, r3
    aeac:	eef87ae7 	vcvt.f32.s32	s15, s15
    aeb0:	ee777a87 	vadd.f32	s15, s15, s14
    aeb4:	ed947a25 	vldr	s14, [r4, #148]	@ 0x94
    aeb8:	edd4ea22 	vldr	s29, [r4, #136]	@ 0x88
    aebc:	ee077a8e 	vmla.f32	s14, s15, s28
    aec0:	ee7bca6e 	vsub.f32	s25, s22, s29
    aec4:	ee77ba6b 	vsub.f32	s23, s14, s23
    aec8:	ed847a26 	vstr	s14, [r4, #152]	@ 0x98
    aecc:	ee7eeac0 	vsub.f32	s29, s29, s0
    aed0:	ee7cca80 	vadd.f32	s25, s25, s0
    aed4:	eeb00a6b 	vmov.f32	s0, s23
    aed8:	eb003f1f 	bl	1ab5c <floorf>
    aedc:	e3a03002 	mov	r3, #2
    aee0:	e58430bc 	str	r3, [r4, #188]	@ 0xbc
    aee4:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    aee8:	ed947a2e 	vldr	s14, [r4, #184]	@ 0xb8
    aeec:	e2833002 	add	r3, r3, #2
    aef0:	ee093a90 	vmov	s19, r3
    aef4:	ed94fa26 	vldr	s30, [r4, #152]	@ 0x98
    aef8:	eef89ae9 	vcvt.f32.s32	s19, s19
    aefc:	eddf7a46 	vldr	s15, [pc, #280]	@ b01c <computemydsp+0x20dc>
    af00:	edd4fa29 	vldr	s31, [r4, #164]	@ 0xa4
    af04:	ee699a87 	vmul.f32	s19, s19, s14
    af08:	ed94da2b 	vldr	s26, [r4, #172]	@ 0xac
    af0c:	ee3bba4f 	vsub.f32	s22, s22, s30
    af10:	edc47a28 	vstr	s15, [r4, #160]	@ 0xa0
    af14:	ee7ffaa7 	vadd.f32	s31, s31, s15
    af18:	edd47a2d 	vldr	s15, [r4, #180]	@ 0xb4
    af1c:	ed84da2c 	vstr	s26, [r4, #176]	@ 0xb0
    af20:	ee3ffa40 	vsub.f32	s30, s30, s0
    af24:	ee3bba00 	vadd.f32	s22, s22, s0
    af28:	eeb00a69 	vmov.f32	s0, s19
    af2c:	ee3dda27 	vadd.f32	s26, s26, s15
    af30:	eb003d80 	bl	1a538 <sinf>
    af34:	eeb0aa40 	vmov.f32	s20, s0
    af38:	eeb00a69 	vmov.f32	s0, s19
    af3c:	eb003e09 	bl	1a768 <cosf>
    af40:	eddf7a36 	vldr	s15, [pc, #216]	@ b020 <computemydsp+0x20e0>
    af44:	ee2dda27 	vmul.f32	s26, s26, s15
    af48:	ee076a90 	vmov	s15, r6
    af4c:	edd46a34 	vldr	s13, [r4, #208]	@ 0xd0
    af50:	eeb87ae7 	vcvt.f32.s32	s14, s15
    af54:	ed946a32 	vldr	s12, [r4, #200]	@ 0xc8
    af58:	ee067a80 	vmla.f32	s14, s13, s0
    af5c:	ee667a00 	vmul.f32	s15, s12, s0
    af60:	ee067a4a 	vmls.f32	s14, s12, s20
    af64:	ee467a8a 	vmla.f32	s15, s13, s20
    af68:	ed847a33 	vstr	s14, [r4, #204]	@ 0xcc
    af6c:	ed9f7a36 	vldr	s14, [pc, #216]	@ b04c <computemydsp+0x210c>
    af70:	edc47a31 	vstr	s15, [r4, #196]	@ 0xc4
    af74:	ee777a87 	vadd.f32	s15, s15, s14
    af78:	eddf9a29 	vldr	s19, [pc, #164]	@ b024 <computemydsp+0x20e4>
    af7c:	ee67da8d 	vmul.f32	s27, s15, s26
    af80:	ee7d9aa9 	vadd.f32	s19, s27, s19
    af84:	eeb00a69 	vmov.f32	s0, s19
    af88:	eb003ef3 	bl	1ab5c <floorf>
    af8c:	ed9f6a25 	vldr	s12, [pc, #148]	@ b028 <computemydsp+0x20e8>
    af90:	ed9f7a25 	vldr	s14, [pc, #148]	@ b02c <computemydsp+0x20ec>
    af94:	ee366a40 	vsub.f32	s12, s12, s0
    af98:	ee377a40 	vsub.f32	s14, s14, s0
    af9c:	eddf6a23 	vldr	s13, [pc, #140]	@ b030 <computemydsp+0x20f0>
    afa0:	eddf5a23 	vldr	s11, [pc, #140]	@ b034 <computemydsp+0x20f4>
    afa4:	eebd5ae9 	vcvt.s32.f32	s10, s19
    afa8:	ee766ac0 	vsub.f32	s13, s13, s0
    afac:	ee755ac0 	vsub.f32	s11, s11, s0
    afb0:	ee366a2d 	vadd.f32	s12, s12, s27
    afb4:	ee377a2d 	vadd.f32	s14, s14, s27
    afb8:	ee155a10 	vmov	r5, s10
    afbc:	ee755aad 	vadd.f32	s11, s11, s27
    afc0:	ee265a07 	vmul.f32	s10, s12, s14
    afc4:	ee766aad 	vadd.f32	s13, s13, s27
    afc8:	ed9faa1a 	vldr	s20, [pc, #104]	@ b038 <computemydsp+0x20f8>
    afcc:	e1a01005 	mov	r1, r5
    afd0:	e3a00000 	mov	r0, #0
    afd4:	ee3aaa40 	vsub.f32	s20, s20, s0
    afd8:	edcd5a36 	vstr	s11, [sp, #216]	@ 0xd8
    afdc:	ee669a85 	vmul.f32	s19, s13, s10
    afe0:	ed8d5a31 	vstr	s10, [sp, #196]	@ 0xc4
    afe4:	edcd6a34 	vstr	s13, [sp, #208]	@ 0xd0
    afe8:	ed8d7a30 	vstr	s14, [sp, #192]	@ 0xc0
    afec:	ed8d6a35 	vstr	s12, [sp, #212]	@ 0xd4
    aff0:	e59490d4 	ldr	r9, [r4, #212]	@ 0xd4
    aff4:	ebfff41e 	bl	8074 <max>
    aff8:	e1a01000 	mov	r1, r0
    affc:	e3a00c02 	mov	r0, #512	@ 0x200
    b000:	ebfff418 	bl	8068 <min>
    b004:	e1a03000 	mov	r3, r0
    b008:	e2833001 	add	r3, r3, #1
    b00c:	ea000011 	b	b058 <computemydsp+0x2118>
    b010:	3fbfffac 	.word	0x3fbfffac
    b014:	3f000000 	.word	0x3f000000
    b018:	40000000 	.word	0x40000000
    b01c:	3f333333 	.word	0x3f333333
    b020:	386dc5b8 	.word	0x386dc5b8
    b024:	41080005 	.word	0x41080005
    b028:	41100000 	.word	0x41100000
    b02c:	41200000 	.word	0x41200000
    b030:	41000000 	.word	0x41000000
    b034:	40c00000 	.word	0x40c00000
    b038:	40e00000 	.word	0x40e00000
    b03c:	000a050a 	.word	0x000a050a
    b040:	3d2aaaab 	.word	0x3d2aaaab
    b044:	3e2aaaab 	.word	0x3e2aaaab
    b048:	3e800000 	.word	0x3e800000
    b04c:	3f800000 	.word	0x3f800000
    b050:	b83e37c6 	.word	0xb83e37c6
    b054:	383e37c6 	.word	0x383e37c6
    b058:	e0499003 	sub	r9, r9, r3
    b05c:	e51f7028 	ldr	r7, [pc, #-40]	@ b03c <computemydsp+0x20fc>
    b060:	e1a09b09 	lsl	r9, r9, #22
    b064:	e1a09b29 	lsr	r9, r9, #22
    b068:	e0899007 	add	r9, r9, r7
    b06c:	e0849109 	add	r9, r4, r9, lsl #2
    b070:	ed5f4a0e 	vldr	s9, [pc, #-56]	@ b040 <computemydsp+0x2100>
    b074:	ed5f7a0e 	vldr	s15, [pc, #-56]	@ b044 <computemydsp+0x2104>
    b078:	ee3aaa2d 	vadd.f32	s20, s20, s27
    b07c:	ed9d7a30 	vldr	s14, [sp, #192]	@ 0xc0
    b080:	edd9da01 	vldr	s27, [r9, #4]
    b084:	ee277a27 	vmul.f32	s14, s14, s15
    b088:	ee6ddaa4 	vmul.f32	s27, s27, s9
    b08c:	ed9d6a35 	vldr	s12, [sp, #212]	@ 0xd4
    b090:	e2851001 	add	r1, r5, #1
    b094:	e3a00000 	mov	r0, #0
    b098:	edcd4a32 	vstr	s9, [sp, #200]	@ 0xc8
    b09c:	edcd7a33 	vstr	s15, [sp, #204]	@ 0xcc
    b0a0:	ee6dda86 	vmul.f32	s27, s27, s12
    b0a4:	ed8d7a30 	vstr	s14, [sp, #192]	@ 0xc0
    b0a8:	e59490d4 	ldr	r9, [r4, #212]	@ 0xd4
    b0ac:	ebfff3f0 	bl	8074 <max>
    b0b0:	e1a01000 	mov	r1, r0
    b0b4:	e3a00c02 	mov	r0, #512	@ 0x200
    b0b8:	ebfff3ea 	bl	8068 <min>
    b0bc:	ed9d5a31 	vldr	s10, [sp, #196]	@ 0xc4
    b0c0:	ed1f6a20 	vldr	s12, [pc, #-128]	@ b048 <computemydsp+0x2108>
    b0c4:	e2800001 	add	r0, r0, #1
    b0c8:	e0499000 	sub	r9, r9, r0
    b0cc:	e1a09b09 	lsl	r9, r9, #22
    b0d0:	e1a09b29 	lsr	r9, r9, #22
    b0d4:	e0899007 	add	r9, r9, r7
    b0d8:	e0849109 	add	r9, r4, r9, lsl #2
    b0dc:	ee255a06 	vmul.f32	s10, s10, s12
    b0e0:	ed9d7a30 	vldr	s14, [sp, #192]	@ 0xc0
    b0e4:	ed996a01 	vldr	s12, [r9, #4]
    b0e8:	eddd6a34 	vldr	s13, [sp, #208]	@ 0xd0
    b0ec:	ee47da46 	vmls.f32	s27, s14, s12
    b0f0:	e2851002 	add	r1, r5, #2
    b0f4:	e3a00000 	mov	r0, #0
    b0f8:	ee6ddaa6 	vmul.f32	s27, s27, s13
    b0fc:	ed8d5a31 	vstr	s10, [sp, #196]	@ 0xc4
    b100:	e59490d4 	ldr	r9, [r4, #212]	@ 0xd4
    b104:	ebfff3da 	bl	8074 <max>
    b108:	e1a01000 	mov	r1, r0
    b10c:	e3a00c02 	mov	r0, #512	@ 0x200
    b110:	ebfff3d4 	bl	8068 <min>
    b114:	e1a03000 	mov	r3, r0
    b118:	eddd7a33 	vldr	s15, [sp, #204]	@ 0xcc
    b11c:	e2833001 	add	r3, r3, #1
    b120:	e0499003 	sub	r9, r9, r3
    b124:	e1a09b09 	lsl	r9, r9, #22
    b128:	e1a09b29 	lsr	r9, r9, #22
    b12c:	e0899007 	add	r9, r9, r7
    b130:	e0849109 	add	r9, r4, r9, lsl #2
    b134:	ee297aa7 	vmul.f32	s14, s19, s15
    b138:	edd96a01 	vldr	s13, [r9, #4]
    b13c:	ed9d5a31 	vldr	s10, [sp, #196]	@ 0xc4
    b140:	eef07a6d 	vmov.f32	s15, s27
    b144:	ee457a26 	vmla.f32	s15, s10, s13
    b148:	e2851003 	add	r1, r5, #3
    b14c:	e3a00000 	mov	r0, #0
    b150:	ee67da8a 	vmul.f32	s27, s15, s20
    b154:	ed8d7a30 	vstr	s14, [sp, #192]	@ 0xc0
    b158:	e59490d4 	ldr	r9, [r4, #212]	@ 0xd4
    b15c:	ebfff3c4 	bl	8074 <max>
    b160:	e1a01000 	mov	r1, r0
    b164:	e3a00c02 	mov	r0, #512	@ 0x200
    b168:	ebfff3be 	bl	8068 <min>
    b16c:	e2800001 	add	r0, r0, #1
    b170:	e0499000 	sub	r9, r9, r0
    b174:	e1a09b09 	lsl	r9, r9, #22
    b178:	e1a09b29 	lsr	r9, r9, #22
    b17c:	e0899007 	add	r9, r9, r7
    b180:	e0849109 	add	r9, r4, r9, lsl #2
    b184:	ed9d7a30 	vldr	s14, [sp, #192]	@ 0xc0
    b188:	eddd4a32 	vldr	s9, [sp, #200]	@ 0xc8
    b18c:	edd96a01 	vldr	s13, [r9, #4]
    b190:	eef07a6d 	vmov.f32	s15, s27
    b194:	ee699aa4 	vmul.f32	s19, s19, s9
    b198:	ee477a66 	vmls.f32	s15, s14, s13
    b19c:	eddd5a36 	vldr	s11, [sp, #216]	@ 0xd8
    b1a0:	e2851004 	add	r1, r5, #4
    b1a4:	e3a00000 	mov	r0, #0
    b1a8:	ee699a8a 	vmul.f32	s19, s19, s20
    b1ac:	e59450d4 	ldr	r5, [r4, #212]	@ 0xd4
    b1b0:	ee27aaa5 	vmul.f32	s20, s15, s11
    b1b4:	ebfff3ae 	bl	8074 <max>
    b1b8:	e1a01000 	mov	r1, r0
    b1bc:	e3a00c02 	mov	r0, #512	@ 0x200
    b1c0:	ebfff3a8 	bl	8068 <min>
    b1c4:	e2800001 	add	r0, r0, #1
    b1c8:	e0455000 	sub	r5, r5, r0
    b1cc:	e1a05b05 	lsl	r5, r5, #22
    b1d0:	e1a05b25 	lsr	r5, r5, #22
    b1d4:	e0855007 	add	r5, r5, r7
    b1d8:	e0845105 	add	r5, r4, r5, lsl #2
    b1dc:	ed957a01 	vldr	s14, [r5, #4]
    b1e0:	eef07a4a 	vmov.f32	s15, s20
    b1e4:	e59d2000 	ldr	r2, [sp]
    b1e8:	ee497a87 	vmla.f32	s15, s19, s14
    b1ec:	ed927a38 	vldr	s14, [r2, #224]	@ 0xe0
    b1f0:	eeb57a40 	vcmp.f32	s14, #0.0
    b1f4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    b1f8:	e59430d4 	ldr	r3, [r4, #212]	@ 0xd4
    b1fc:	e3c334ff 	bic	r3, r3, #-16777216	@ 0xff000000
    b200:	e3c338fe 	bic	r3, r3, #16646144	@ 0xfe0000
    b204:	e0843103 	add	r3, r4, r3, lsl #2
    b208:	edc37a36 	vstr	s15, [r3, #216]	@ 0xd8
    b20c:	1afff7a2 	bne	909c <computemydsp+0x15c>
    b210:	e59d2000 	ldr	r2, [sp]
    b214:	edd27a36 	vldr	s15, [r2, #216]	@ 0xd8
    b218:	ed927a3c 	vldr	s14, [r2, #240]	@ 0xf0
    b21c:	edd20a3a 	vldr	s1, [r2, #232]	@ 0xe8
    b220:	eeb47a67 	vcmp.f32	s14, s15
    b224:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    b228:	eef50a40 	vcmp.f32	s1, #0.0
    b22c:	13a03001 	movne	r3, #1
    b230:	03a03000 	moveq	r3, #0
    b234:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    b238:	13a03000 	movne	r3, #0
    b23c:	02033001 	andeq	r3, r3, #1
    b240:	e3530000 	cmp	r3, #0
    b244:	1a00000e 	bne	b284 <computemydsp+0x2344>
    b248:	ed927a3e 	vldr	s14, [r2, #248]	@ 0xf8
    b24c:	eeb47a67 	vcmp.f32	s14, s15
    b250:	ed5f7a83 	vldr	s15, [pc, #-524]	@ b04c <computemydsp+0x210c>
    b254:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    b258:	eef40a67 	vcmp.f32	s1, s15
    b25c:	13a03001 	movne	r3, #1
    b260:	03a03000 	moveq	r3, #0
    b264:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    b268:	13a03000 	movne	r3, #0
    b26c:	02033001 	andeq	r3, r3, #1
    b270:	e3530000 	cmp	r3, #0
    b274:	0afff794 	beq	90cc <computemydsp+0x18c>
    b278:	eef00a67 	vmov.f32	s1, s15
    b27c:	ed1f7a8d 	vldr	s14, [pc, #-564]	@ b050 <computemydsp+0x2110>
    b280:	eafff792 	b	90d0 <computemydsp+0x190>
    b284:	ed1f7a8e 	vldr	s14, [pc, #-568]	@ b054 <computemydsp+0x2114>
    b288:	eafff790 	b	90d0 <computemydsp+0x190>
    b28c:	e28ddf41 	add	sp, sp, #260	@ 0x104
    b290:	ecbd8b10 	vpop	{d8-d15}
    b294:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b298 <CAudio::GetChunk(unsigned int*, unsigned int)>:
    b298:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b29c:	e59f61b4 	ldr	r6, [pc, #436]	@ b458 <CAudio::GetChunk(unsigned int*, unsigned int)+0x1c0>
    b2a0:	e1a05002 	mov	r5, r2
    b2a4:	e5962808 	ldr	r2, [r6, #2056]	@ 0x808
    b2a8:	e1a04001 	mov	r4, r1
    b2ac:	e3520000 	cmp	r2, #0
    b2b0:	0a00004a 	beq	b3e0 <CAudio::GetChunk(unsigned int*, unsigned int)+0x148>
    b2b4:	e5d63000 	ldrb	r3, [r6]
    b2b8:	ed9f7a64 	vldr	s14, [pc, #400]	@ b450 <CAudio::GetChunk(unsigned int*, unsigned int)+0x1b8>
    b2bc:	e3530000 	cmp	r3, #0
    b2c0:	e5920000 	ldr	r0, [r2]
    b2c4:	e592c004 	ldr	ip, [r2, #4]
    b2c8:	1a00002e 	bne	b388 <CAudio::GetChunk(unsigned int*, unsigned int)+0xf0>
    b2cc:	e59f1188 	ldr	r1, [pc, #392]	@ b45c <CAudio::GetChunk(unsigned int*, unsigned int)+0x1c4>
    b2d0:	e2817b01 	add	r7, r1, #1024	@ 0x400
    b2d4:	e5913000 	ldr	r3, [r1]
    b2d8:	e591e004 	ldr	lr, [r1, #4]
    b2dc:	e3130502 	tst	r3, #8388608	@ 0x800000
    b2e0:	138334ff 	orrne	r3, r3, #-16777216	@ 0xff000000
    b2e4:	03c334ff 	biceq	r3, r3, #-16777216	@ 0xff000000
    b2e8:	ee073a90 	vmov	s15, r3
    b2ec:	eef87ae7 	vcvt.f32.s32	s15, s15
    b2f0:	e31e0502 	tst	lr, #8388608	@ 0x800000
    b2f4:	e38e34ff 	orr	r3, lr, #-16777216	@ 0xff000000
    b2f8:	03ce34ff 	biceq	r3, lr, #-16777216	@ 0xff000000
    b2fc:	eec76a87 	vdiv.f32	s13, s15, s14
    b300:	ee073a90 	vmov	s15, r3
    b304:	eef87ae7 	vcvt.f32.s32	s15, s15
    b308:	ece06a01 	vstmia	r0!, {s13}
    b30c:	eec76a87 	vdiv.f32	s13, s15, s14
    b310:	e2811008 	add	r1, r1, #8
    b314:	e1570001 	cmp	r7, r1
    b318:	ecec6a01 	vstmia	ip!, {s13}
    b31c:	1affffec 	bne	b2d4 <CAudio::GetChunk(unsigned int*, unsigned int)+0x3c>
    b320:	e3a01080 	mov	r1, #128	@ 0x80
    b324:	e596380c 	ldr	r3, [r6, #2060]	@ 0x80c
    b328:	e5960810 	ldr	r0, [r6, #2064]	@ 0x810
    b32c:	ebfff703 	bl	8f40 <computemydsp>
    b330:	eddf6a47 	vldr	s13, [pc, #284]	@ b454 <CAudio::GetChunk(unsigned int*, unsigned int)+0x1bc>
    b334:	e3a0e000 	mov	lr, #0
    b338:	e596380c 	ldr	r3, [r6, #2060]	@ 0x80c
    b33c:	e2840004 	add	r0, r4, #4
    b340:	e8930006 	ldm	r3, {r1, r2}
    b344:	ecb17a01 	vldmia	r1!, {s14}
    b348:	ecf27a01 	vldmia	r2!, {s15}
    b34c:	ee277a26 	vmul.f32	s14, s14, s13
    b350:	ee677aa6 	vmul.f32	s15, s15, s13
    b354:	eebd7ac7 	vcvt.s32.f32	s14, s14
    b358:	eefd7ae7 	vcvt.s32.f32	s15, s15
    b35c:	ee17ca10 	vmov	ip, s14
    b360:	ee173a90 	vmov	r3, s15
    b364:	e1a0c44c 	asr	ip, ip, #8
    b368:	e1a03443 	asr	r3, r3, #8
    b36c:	e784c18e 	str	ip, [r4, lr, lsl #3]
    b370:	e780318e 	str	r3, [r0, lr, lsl #3]
    b374:	e28ee001 	add	lr, lr, #1
    b378:	e35e0080 	cmp	lr, #128	@ 0x80
    b37c:	1afffff0 	bne	b344 <CAudio::GetChunk(unsigned int*, unsigned int)+0xac>
    b380:	e1a00005 	mov	r0, r5
    b384:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b388:	e59f10d0 	ldr	r1, [pc, #208]	@ b460 <CAudio::GetChunk(unsigned int*, unsigned int)+0x1c8>
    b38c:	e2817b01 	add	r7, r1, #1024	@ 0x400
    b390:	e5913000 	ldr	r3, [r1]
    b394:	e591e004 	ldr	lr, [r1, #4]
    b398:	e3130502 	tst	r3, #8388608	@ 0x800000
    b39c:	138334ff 	orrne	r3, r3, #-16777216	@ 0xff000000
    b3a0:	03c334ff 	biceq	r3, r3, #-16777216	@ 0xff000000
    b3a4:	ee073a90 	vmov	s15, r3
    b3a8:	eef87ae7 	vcvt.f32.s32	s15, s15
    b3ac:	e31e0502 	tst	lr, #8388608	@ 0x800000
    b3b0:	e38e34ff 	orr	r3, lr, #-16777216	@ 0xff000000
    b3b4:	03ce34ff 	biceq	r3, lr, #-16777216	@ 0xff000000
    b3b8:	eec76a87 	vdiv.f32	s13, s15, s14
    b3bc:	ee073a90 	vmov	s15, r3
    b3c0:	eef87ae7 	vcvt.f32.s32	s15, s15
    b3c4:	ece06a01 	vstmia	r0!, {s13}
    b3c8:	eec76a87 	vdiv.f32	s13, s15, s14
    b3cc:	e2811008 	add	r1, r1, #8
    b3d0:	e1570001 	cmp	r7, r1
    b3d4:	ecec6a01 	vstmia	ip!, {s13}
    b3d8:	1affffec 	bne	b390 <CAudio::GetChunk(unsigned int*, unsigned int)+0xf8>
    b3dc:	eaffffcf 	b	b320 <CAudio::GetChunk(unsigned int*, unsigned int)+0x88>
    b3e0:	e3a00008 	mov	r0, #8
    b3e4:	eb00108a 	bl	f614 <malloc>
    b3e8:	e1a03000 	mov	r3, r0
    b3ec:	e3a00008 	mov	r0, #8
    b3f0:	e5863808 	str	r3, [r6, #2056]	@ 0x808
    b3f4:	eb001086 	bl	f614 <malloc>
    b3f8:	e1a03000 	mov	r3, r0
    b3fc:	e3a00c02 	mov	r0, #512	@ 0x200
    b400:	e5967808 	ldr	r7, [r6, #2056]	@ 0x808
    b404:	e586380c 	str	r3, [r6, #2060]	@ 0x80c
    b408:	eb001081 	bl	f614 <malloc>
    b40c:	e1a03000 	mov	r3, r0
    b410:	e3a00c02 	mov	r0, #512	@ 0x200
    b414:	e5873000 	str	r3, [r7]
    b418:	e596780c 	ldr	r7, [r6, #2060]	@ 0x80c
    b41c:	eb00107c 	bl	f614 <malloc>
    b420:	e5870000 	str	r0, [r7]
    b424:	e3a00c02 	mov	r0, #512	@ 0x200
    b428:	e5967808 	ldr	r7, [r6, #2056]	@ 0x808
    b42c:	eb001078 	bl	f614 <malloc>
    b430:	e1a03000 	mov	r3, r0
    b434:	e3a00c02 	mov	r0, #512	@ 0x200
    b438:	e5873004 	str	r3, [r7, #4]
    b43c:	e596780c 	ldr	r7, [r6, #2060]	@ 0x80c
    b440:	eb001073 	bl	f614 <malloc>
    b444:	e5962808 	ldr	r2, [r6, #2056]	@ 0x808
    b448:	e5870004 	str	r0, [r7, #4]
    b44c:	eaffff98 	b	b2b4 <CAudio::GetChunk(unsigned int*, unsigned int)+0x1c>
    b450:	4afffffe 	.word	0x4afffffe
    b454:	4f000000 	.word	0x4f000000
    b458:	0001eee0 	.word	0x0001eee0
    b45c:	0001f2e8 	.word	0x0001f2e8
    b460:	0001eee8 	.word	0x0001eee8

0000b464 <extract(char const*, float*, float, float, float, float)>:
    b464:	e12fff1e 	bx	lr

0000b468 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)>:
    b468:	e3a0c01a 	mov	ip, #26
    b46c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b470:	e24dd01c 	sub	sp, sp, #28
    b474:	e98d1004 	stmib	sp, {r2, ip}
    b478:	e3a03002 	mov	r3, #2
    b47c:	e3a0c000 	mov	ip, #0
    b480:	e1a05000 	mov	r5, r0
    b484:	e59f40d8 	ldr	r4, [pc, #216]	@ b564 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0xfc>
    b488:	e58dc000 	str	ip, [sp]
    b48c:	e59f20d4 	ldr	r2, [pc, #212]	@ b568 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0x100>
    b490:	e58d3010 	str	r3, [sp, #16]
    b494:	e58d300c 	str	r3, [sp, #12]
    b498:	e3a03c01 	mov	r3, #256	@ 0x100
    b49c:	eb000996 	bl	dafc <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)>
    b4a0:	e5854000 	str	r4, [r5]
    b4a4:	eb00159e 	bl	10b24 <CLogger::Get()>
    b4a8:	e2843e5e 	add	r3, r4, #1504	@ 0x5e0
    b4ac:	e284105c 	add	r1, r4, #92	@ 0x5c
    b4b0:	e3a02004 	mov	r2, #4
    b4b4:	e283300c 	add	r3, r3, #12
    b4b8:	eb001765 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b4bc:	e59f10a8 	ldr	r1, [pc, #168]	@ b56c <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0x104>
    b4c0:	e3a00001 	mov	r0, #1
    b4c4:	eb00106b 	bl	f678 <calloc>
    b4c8:	e59f70a0 	ldr	r7, [pc, #160]	@ b570 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0x108>
    b4cc:	e59f60a0 	ldr	r6, [pc, #160]	@ b574 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0x10c>
    b4d0:	e5870810 	str	r0, [r7, #2064]	@ 0x810
    b4d4:	eb001592 	bl	10b24 <CLogger::Get()>
    b4d8:	e5973810 	ldr	r3, [r7, #2064]	@ 0x810
    b4dc:	e2461e5a 	sub	r1, r6, #1440	@ 0x5a0
    b4e0:	e3530000 	cmp	r3, #0
    b4e4:	02844e5d 	addeq	r4, r4, #1488	@ 0x5d0
    b4e8:	02844008 	addeq	r4, r4, #8
    b4ec:	12844e5e 	addne	r4, r4, #1504	@ 0x5e0
    b4f0:	e3a02004 	mov	r2, #4
    b4f4:	e1a03006 	mov	r3, r6
    b4f8:	e58d4000 	str	r4, [sp]
    b4fc:	e241100c 	sub	r1, r1, #12
    b500:	eb001753 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b504:	e5974810 	ldr	r4, [r7, #2064]	@ 0x810
    b508:	e59f0058 	ldr	r0, [pc, #88]	@ b568 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0x100>
    b50c:	ebfff3e7 	bl	84b0 <classInitmydsp>
    b510:	e1a00004 	mov	r0, r4
    b514:	e59f104c 	ldr	r1, [pc, #76]	@ b568 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0x100>
    b518:	ebfff5ac 	bl	8bd0 <instanceConstantsmydsp>
    b51c:	e1a00004 	mov	r0, r4
    b520:	e59f4050 	ldr	r4, [pc, #80]	@ b578 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)+0x110>
    b524:	e2467f81 	sub	r7, r6, #516	@ 0x204
    b528:	ebfff400 	bl	8530 <instanceClearmydsp>
    b52c:	e8940009 	ldm	r4, {r0, r3}
    b530:	e1a01007 	mov	r1, r7
    b534:	e12fff33 	blx	r3
    b538:	e594300c 	ldr	r3, [r4, #12]
    b53c:	e5940000 	ldr	r0, [r4]
    b540:	e12fff33 	blx	r3
    b544:	eb001576 	bl	10b24 <CLogger::Get()>
    b548:	e3a02004 	mov	r2, #4
    b54c:	e2863008 	add	r3, r6, #8
    b550:	e2471fea 	sub	r1, r7, #936	@ 0x3a8
    b554:	eb00173e 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b558:	e1a00005 	mov	r0, r5
    b55c:	e28dd01c 	add	sp, sp, #28
    b560:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b564:	0001afe8 	.word	0x0001afe8
    b568:	0000bb80 	.word	0x0000bb80
    b56c:	0028242c 	.word	0x0028242c
    b570:	0001eee0 	.word	0x0001eee0
    b574:	0001b5f0 	.word	0x0001b5f0
    b578:	0001ee44 	.word	0x0001ee44

0000b57c <tos24(int)>:
    b57c:	e1a03000 	mov	r3, r0
    b580:	e3c004ff 	bic	r0, r0, #-16777216	@ 0xff000000
    b584:	e3c00502 	bic	r0, r0, #8388608	@ 0x800000
    b588:	e3530000 	cmp	r3, #0
    b58c:	b3800502 	orrlt	r0, r0, #8388608	@ 0x800000
    b590:	e12fff1e 	bx	lr

0000b594 <CAudio::Process()>:
    b594:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b598:	e5903000 	ldr	r3, [r0]
    b59c:	e24dd01c 	sub	sp, sp, #28
    b5a0:	e5933034 	ldr	r3, [r3, #52]	@ 0x34
    b5a4:	e12fff33 	blx	r3
    b5a8:	e2504000 	subs	r4, r0, #0
    b5ac:	0a000091 	beq	b7f8 <CAudio::Process()+0x264>
    b5b0:	eb00155b 	bl	10b24 <CLogger::Get()>
    b5b4:	e59f3290 	ldr	r3, [pc, #656]	@ b84c <CAudio::Process()+0x2b8>
    b5b8:	e3a02004 	mov	r2, #4
    b5bc:	e2431e5d 	sub	r1, r3, #1488	@ 0x5d0
    b5c0:	e2411008 	sub	r1, r1, #8
    b5c4:	eb001722 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b5c8:	e5943000 	ldr	r3, [r4]
    b5cc:	e59f527c 	ldr	r5, [pc, #636]	@ b850 <CAudio::Process()+0x2bc>
    b5d0:	e593601c 	ldr	r6, [r3, #28]
    b5d4:	e1560005 	cmp	r6, r5
    b5d8:	1a000025 	bne	b674 <CAudio::Process()+0xe0>
    b5dc:	eb001550 	bl	10b24 <CLogger::Get()>
    b5e0:	e59f326c 	ldr	r3, [pc, #620]	@ b854 <CAudio::Process()+0x2c0>
    b5e4:	e3a02004 	mov	r2, #4
    b5e8:	e2431e5e 	sub	r1, r3, #1504	@ 0x5e0
    b5ec:	e2411008 	sub	r1, r1, #8
    b5f0:	eb001717 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b5f4:	e5943000 	ldr	r3, [r4]
    b5f8:	e593601c 	ldr	r6, [r3, #28]
    b5fc:	e1560005 	cmp	r6, r5
    b600:	1a000054 	bne	b758 <CAudio::Process()+0x1c4>
    b604:	eb001546 	bl	10b24 <CLogger::Get()>
    b608:	e59f3248 	ldr	r3, [pc, #584]	@ b858 <CAudio::Process()+0x2c4>
    b60c:	e3a02004 	mov	r2, #4
    b610:	e2431e63 	sub	r1, r3, #1584	@ 0x630
    b614:	e241100c 	sub	r1, r1, #12
    b618:	eb00170d 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b61c:	e5943000 	ldr	r3, [r4]
    b620:	e593601c 	ldr	r6, [r3, #28]
    b624:	e1560005 	cmp	r6, r5
    b628:	1a000039 	bne	b714 <CAudio::Process()+0x180>
    b62c:	eb00153c 	bl	10b24 <CLogger::Get()>
    b630:	e59f3224 	ldr	r3, [pc, #548]	@ b85c <CAudio::Process()+0x2c8>
    b634:	e3a02004 	mov	r2, #4
    b638:	e2431e69 	sub	r1, r3, #1680	@ 0x690
    b63c:	eb001704 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b640:	e5943000 	ldr	r3, [r4]
    b644:	e59f2214 	ldr	r2, [pc, #532]	@ b860 <CAudio::Process()+0x2cc>
    b648:	e5933014 	ldr	r3, [r3, #20]
    b64c:	e1530002 	cmp	r3, r2
    b650:	1a000070 	bne	b818 <CAudio::Process()+0x284>
    b654:	eb001532 	bl	10b24 <CLogger::Get()>
    b658:	e3a02004 	mov	r2, #4
    b65c:	e59f3200 	ldr	r3, [pc, #512]	@ b864 <CAudio::Process()+0x2d0>
    b660:	e2431e6b 	sub	r1, r3, #1712	@ 0x6b0
    b664:	e2411004 	sub	r1, r1, #4
    b668:	e28dd01c 	add	sp, sp, #28
    b66c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    b670:	ea0016f7 	b	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b674:	e3a03001 	mov	r3, #1
    b678:	e3a08000 	mov	r8, #0
    b67c:	e1a02003 	mov	r2, r3
    b680:	e1a01004 	mov	r1, r4
    b684:	e28d000c 	add	r0, sp, #12
    b688:	e58d8000 	str	r8, [sp]
    b68c:	e12fff36 	blx	r6
    b690:	e5dd300c 	ldrb	r3, [sp, #12]
    b694:	e59d9010 	ldr	r9, [sp, #16]
    b698:	e1530008 	cmp	r3, r8
    b69c:	e59d6014 	ldr	r6, [sp, #20]
    b6a0:	0affffcd 	beq	b5dc <CAudio::Process()+0x48>
    b6a4:	eb00151e 	bl	10b24 <CLogger::Get()>
    b6a8:	e59f31b8 	ldr	r3, [pc, #440]	@ b868 <CAudio::Process()+0x2d4>
    b6ac:	e3a02004 	mov	r2, #4
    b6b0:	e2431e61 	sub	r1, r3, #1552	@ 0x610
    b6b4:	e2411004 	sub	r1, r1, #4
    b6b8:	eb0016e5 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b6bc:	e5943000 	ldr	r3, [r4]
    b6c0:	e59f21a4 	ldr	r2, [pc, #420]	@ b86c <CAudio::Process()+0x2d8>
    b6c4:	e5937020 	ldr	r7, [r3, #32]
    b6c8:	e1570002 	cmp	r7, r2
    b6cc:	0affffc9 	beq	b5f8 <CAudio::Process()+0x64>
    b6d0:	e3a02001 	mov	r2, #1
    b6d4:	e0466009 	sub	r6, r6, r9
    b6d8:	e59f1190 	ldr	r1, [pc, #400]	@ b870 <CAudio::Process()+0x2dc>
    b6dc:	e0666306 	rsb	r6, r6, r6, lsl #6
    b6e0:	e1a06086 	lsl	r6, r6, #1
    b6e4:	e0c10691 	smull	r0, r1, r1, r6
    b6e8:	e0811006 	add	r1, r1, r6
    b6ec:	e1a06fc6 	asr	r6, r6, #31
    b6f0:	e0666341 	rsb	r6, r6, r1, asr #6
    b6f4:	e0866009 	add	r6, r6, r9
    b6f8:	e1a03008 	mov	r3, r8
    b6fc:	e1a00004 	mov	r0, r4
    b700:	e1a01002 	mov	r1, r2
    b704:	e58d6000 	str	r6, [sp]
    b708:	e12fff37 	blx	r7
    b70c:	e5943000 	ldr	r3, [r4]
    b710:	eaffffb8 	b	b5f8 <CAudio::Process()+0x64>
    b714:	e3a0c000 	mov	ip, #0
    b718:	e3a03001 	mov	r3, #1
    b71c:	e3a02002 	mov	r2, #2
    b720:	e1a01004 	mov	r1, r4
    b724:	e28d000c 	add	r0, sp, #12
    b728:	e58dc000 	str	ip, [sp]
    b72c:	e12fff36 	blx	r6
    b730:	e5dd300c 	ldrb	r3, [sp, #12]
    b734:	e3530000 	cmp	r3, #0
    b738:	0affffbb 	beq	b62c <CAudio::Process()+0x98>
    b73c:	eb0014f8 	bl	10b24 <CLogger::Get()>
    b740:	e59f312c 	ldr	r3, [pc, #300]	@ b874 <CAudio::Process()+0x2e0>
    b744:	e3a02004 	mov	r2, #4
    b748:	e2431e6a 	sub	r1, r3, #1696	@ 0x6a0
    b74c:	e2411004 	sub	r1, r1, #4
    b750:	eb0016bf 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b754:	eaffffb9 	b	b640 <CAudio::Process()+0xac>
    b758:	e3a08000 	mov	r8, #0
    b75c:	e3a03008 	mov	r3, #8
    b760:	e3a02001 	mov	r2, #1
    b764:	e1a01004 	mov	r1, r4
    b768:	e28d000c 	add	r0, sp, #12
    b76c:	e58d8000 	str	r8, [sp]
    b770:	e12fff36 	blx	r6
    b774:	e5dd300c 	ldrb	r3, [sp, #12]
    b778:	e59d9010 	ldr	r9, [sp, #16]
    b77c:	e1530008 	cmp	r3, r8
    b780:	e59d6014 	ldr	r6, [sp, #20]
    b784:	0affff9e 	beq	b604 <CAudio::Process()+0x70>
    b788:	eb0014e5 	bl	10b24 <CLogger::Get()>
    b78c:	e59f30e4 	ldr	r3, [pc, #228]	@ b878 <CAudio::Process()+0x2e4>
    b790:	e3a02004 	mov	r2, #4
    b794:	e2431e66 	sub	r1, r3, #1632	@ 0x660
    b798:	e2411008 	sub	r1, r1, #8
    b79c:	eb0016ac 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b7a0:	e5943000 	ldr	r3, [r4]
    b7a4:	e59f20c0 	ldr	r2, [pc, #192]	@ b86c <CAudio::Process()+0x2d8>
    b7a8:	e5937020 	ldr	r7, [r3, #32]
    b7ac:	e1570002 	cmp	r7, r2
    b7b0:	0affff9a 	beq	b620 <CAudio::Process()+0x8c>
    b7b4:	e0466009 	sub	r6, r6, r9
    b7b8:	e59f20b0 	ldr	r2, [pc, #176]	@ b870 <CAudio::Process()+0x2dc>
    b7bc:	e0666306 	rsb	r6, r6, r6, lsl #6
    b7c0:	e1a06086 	lsl	r6, r6, #1
    b7c4:	e0c21692 	smull	r1, r2, r2, r6
    b7c8:	e0822006 	add	r2, r2, r6
    b7cc:	e1a06fc6 	asr	r6, r6, #31
    b7d0:	e0666342 	rsb	r6, r6, r2, asr #6
    b7d4:	e0899006 	add	r9, r9, r6
    b7d8:	e1a03008 	mov	r3, r8
    b7dc:	e3a02008 	mov	r2, #8
    b7e0:	e3a01001 	mov	r1, #1
    b7e4:	e1a00004 	mov	r0, r4
    b7e8:	e58d9000 	str	r9, [sp]
    b7ec:	e12fff37 	blx	r7
    b7f0:	e5943000 	ldr	r3, [r4]
    b7f4:	eaffff89 	b	b620 <CAudio::Process()+0x8c>
    b7f8:	eb0014c9 	bl	10b24 <CLogger::Get()>
    b7fc:	e3a02004 	mov	r2, #4
    b800:	e59f3074 	ldr	r3, [pc, #116]	@ b87c <CAudio::Process()+0x2e8>
    b804:	e2431d17 	sub	r1, r3, #1472	@ 0x5c0
    b808:	e2411008 	sub	r1, r1, #8
    b80c:	e28dd01c 	add	sp, sp, #28
    b810:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    b814:	ea00168e 	b	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b818:	e3a01008 	mov	r1, #8
    b81c:	e1a00004 	mov	r0, r4
    b820:	e12fff33 	blx	r3
    b824:	e3500000 	cmp	r0, #0
    b828:	0affff89 	beq	b654 <CAudio::Process()+0xc0>
    b82c:	eb0014bc 	bl	10b24 <CLogger::Get()>
    b830:	e3a02004 	mov	r2, #4
    b834:	e59f3044 	ldr	r3, [pc, #68]	@ b880 <CAudio::Process()+0x2ec>
    b838:	e2431e6d 	sub	r1, r3, #1744	@ 0x6d0
    b83c:	e241100c 	sub	r1, r1, #12
    b840:	e28dd01c 	add	sp, sp, #28
    b844:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    b848:	ea001681 	b	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b84c:	0001b61c 	.word	0x0001b61c
    b850:	0000b89c 	.word	0x0000b89c
    b854:	0001b62c 	.word	0x0001b62c
    b858:	0001b680 	.word	0x0001b680
    b85c:	0001b6d4 	.word	0x0001b6d4
    b860:	0000b894 	.word	0x0000b894
    b864:	0001b6f8 	.word	0x0001b6f8
    b868:	0001b658 	.word	0x0001b658
    b86c:	0000b8b0 	.word	0x0000b8b0
    b870:	81020409 	.word	0x81020409
    b874:	0001b6e8 	.word	0x0001b6e8
    b878:	0001b6ac 	.word	0x0001b6ac
    b87c:	0001b60c 	.word	0x0001b60c
    b880:	0001b720 	.word	0x0001b720

0000b884 <u32_to_s24(unsigned long)>:
    b884:	e3100502 	tst	r0, #8388608	@ 0x800000
    b888:	138004ff 	orrne	r0, r0, #-16777216	@ 0xff000000
    b88c:	03c004ff 	biceq	r0, r0, #-16777216	@ 0xff000000
    b890:	e12fff1e 	bx	lr

0000b894 <CSoundController::EnableJack(CSoundController::TJack)>:
    b894:	e3a00000 	mov	r0, #0
    b898:	e12fff1e 	bx	lr

0000b89c <CSoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const>:
    b89c:	e3a02000 	mov	r2, #0
    b8a0:	e5c02000 	strb	r2, [r0]
    b8a4:	e5802004 	str	r2, [r0, #4]
    b8a8:	e5802008 	str	r2, [r0, #8]
    b8ac:	e12fff1e 	bx	lr

0000b8b0 <CSoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)>:
    b8b0:	e3a00000 	mov	r0, #0
    b8b4:	e12fff1e 	bx	lr

0000b8b8 <CKernel::CKernel()>:
    b8b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b8bc:	e1a04000 	mov	r4, r0
    b8c0:	e3a01000 	mov	r1, #0
    b8c4:	e284700c 	add	r7, r4, #12
    b8c8:	eb000ed3 	bl	f41c <CActLED::CActLED(bool)>
    b8cc:	e2845e8a 	add	r5, r4, #2208	@ 0x8a0
    b8d0:	e1a00007 	mov	r0, r7
    b8d4:	eb00130e 	bl	10514 <CKernelOptions::CKernelOptions()>
    b8d8:	e2850004 	add	r0, r5, #4
    b8dc:	eb00108b 	bl	fb10 <CDeviceNameService::CDeviceNameService()>
    b8e0:	e3a03000 	mov	r3, #0
    b8e4:	e285000c 	add	r0, r5, #12
    b8e8:	e1a02003 	mov	r2, r3
    b8ec:	e1a01003 	mov	r1, r3
    b8f0:	e2845d66 	add	r5, r4, #6528	@ 0x1980
    b8f4:	eb001a5e 	bl	12274 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    b8f8:	e2846d6f 	add	r6, r4, #7104	@ 0x1bc0
    b8fc:	e285001c 	add	r0, r5, #28
    b900:	e2855020 	add	r5, r5, #32
    b904:	eb002e1b 	bl	17178 <CExceptionHandler::CExceptionHandler()>
    b908:	e2866020 	add	r6, r6, #32
    b90c:	e1a00005 	mov	r0, r5
    b910:	eb003035 	bl	179ec <CInterruptSystem::CInterruptSystem()>
    b914:	e1a01005 	mov	r1, r5
    b918:	e1a00006 	mov	r0, r6
    b91c:	eb002547 	bl	14e40 <CTimer::CTimer(CInterruptSystem*)>
    b920:	e1a00007 	mov	r0, r7
    b924:	eb00122f 	bl	101e8 <CKernelOptions::GetLogLevel() const>
    b928:	e1a01000 	mov	r1, r0
    b92c:	e2840b07 	add	r0, r4, #7168	@ 0x1c00
    b930:	e1a02006 	mov	r2, r6
    b934:	e3a03001 	mov	r3, #1
    b938:	e2800020 	add	r0, r0, #32
    b93c:	eb00143e 	bl	10a3c <CLogger::CLogger(unsigned int, CTimer*, bool)>
    b940:	e3a03000 	mov	r3, #0
    b944:	e2840c1d 	add	r0, r4, #7424	@ 0x1d00
    b948:	e1a02003 	mov	r2, r3
    b94c:	e1a01003 	mov	r1, r3
    b950:	e280001c 	add	r0, r0, #28
    b954:	eb00360f 	bl	19198 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)>
    b958:	e1a00004 	mov	r0, r4
    b95c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b960 <CKernel::Initialize()>:
    b960:	e3a0c000 	mov	ip, #0
    b964:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b968:	e2806e8a 	add	r6, r0, #2208	@ 0x8a0
    b96c:	e24dd008 	sub	sp, sp, #8
    b970:	e286600c 	add	r6, r6, #12
    b974:	e1a04000 	mov	r4, r0
    b978:	e3a03001 	mov	r3, #1
    b97c:	e3a02008 	mov	r2, #8
    b980:	e1a00006 	mov	r0, r6
    b984:	e59f10d8 	ldr	r1, [pc, #216]	@ ba64 <CKernel::Initialize()+0x104>
    b988:	e58dc000 	str	ip, [sp]
    b98c:	eb001aac 	bl	12444 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    b990:	e3500000 	cmp	r0, #0
    b994:	e2845b07 	add	r5, r4, #7168	@ 0x1c00
    b998:	1a00001c 	bne	ba10 <CKernel::Initialize()+0xb0>
    b99c:	e2847d66 	add	r7, r4, #6528	@ 0x1980
    b9a0:	e2855020 	add	r5, r5, #32
    b9a4:	e2877020 	add	r7, r7, #32
    b9a8:	e3a08000 	mov	r8, #0
    b9ac:	e2846c1d 	add	r6, r4, #7424	@ 0x1d00
    b9b0:	e286601c 	add	r6, r6, #28
    b9b4:	e59f30ac 	ldr	r3, [pc, #172]	@ ba68 <CKernel::Initialize()+0x108>
    b9b8:	e3a02003 	mov	r2, #3
    b9bc:	e2831024 	add	r1, r3, #36	@ 0x24
    b9c0:	e1a00005 	mov	r0, r5
    b9c4:	eb001622 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b9c8:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
    b9cc:	eb002842 	bl	15adc <CTimer::SimpleMsDelay(unsigned int)>
    b9d0:	e3a00f95 	mov	r0, #596	@ 0x254
    b9d4:	eb002be3 	bl	16968 <operator new(unsigned int)>
    b9d8:	e1a02006 	mov	r2, r6
    b9dc:	e1a06000 	mov	r6, r0
    b9e0:	e1a01007 	mov	r1, r7
    b9e4:	ebfffe9f 	bl	b468 <CAudio::CAudio(CInterruptSystem*, CI2CMaster*)>
    b9e8:	e59f307c 	ldr	r3, [pc, #124]	@ ba6c <CKernel::Initialize()+0x10c>
    b9ec:	e2844a01 	add	r4, r4, #4096	@ 0x1000
    b9f0:	e1a00005 	mov	r0, r5
    b9f4:	e3a02003 	mov	r2, #3
    b9f8:	e2431008 	sub	r1, r3, #8
    b9fc:	e5846d8c 	str	r6, [r4, #3468]	@ 0xd8c
    ba00:	eb001613 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ba04:	e1a00008 	mov	r0, r8
    ba08:	e28dd008 	add	sp, sp, #8
    ba0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ba10:	e2855020 	add	r5, r5, #32
    ba14:	e2847d66 	add	r7, r4, #6528	@ 0x1980
    ba18:	e1a01006 	mov	r1, r6
    ba1c:	e1a00005 	mov	r0, r5
    ba20:	e2877020 	add	r7, r7, #32
    ba24:	eb001616 	bl	11284 <CLogger::Initialize(CDevice*)>
    ba28:	e1a00007 	mov	r0, r7
    ba2c:	eb00301f 	bl	17ab0 <CInterruptSystem::Initialize()>
    ba30:	e3500000 	cmp	r0, #0
    ba34:	0affffdb 	beq	b9a8 <CKernel::Initialize()+0x48>
    ba38:	e2840d6f 	add	r0, r4, #7104	@ 0x1bc0
    ba3c:	e2800020 	add	r0, r0, #32
    ba40:	eb0027d6 	bl	159a0 <CTimer::Initialize()>
    ba44:	e3500000 	cmp	r0, #0
    ba48:	0affffd6 	beq	b9a8 <CKernel::Initialize()+0x48>
    ba4c:	e2846c1d 	add	r6, r4, #7424	@ 0x1d00
    ba50:	e286601c 	add	r6, r6, #28
    ba54:	e1a00006 	mov	r0, r6
    ba58:	eb003624 	bl	192f0 <CI2CMaster::Initialize()>
    ba5c:	e1a08000 	mov	r8, r0
    ba60:	eaffffd3 	b	b9b4 <CKernel::Initialize()+0x54>
    ba64:	0001c200 	.word	0x0001c200
    ba68:	0001cb98 	.word	0x0001cb98
    ba6c:	0001cbc4 	.word	0x0001cbc4

0000ba70 <CKernel::Run()>:
    ba70:	e2803a01 	add	r3, r0, #4096	@ 0x1000
    ba74:	e92d4010 	push	{r4, lr}
    ba78:	e1a04000 	mov	r4, r0
    ba7c:	e5930d8c 	ldr	r0, [r3, #3468]	@ 0xd8c
    ba80:	e5903000 	ldr	r3, [r0]
    ba84:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
    ba88:	e12fff33 	blx	r3
    ba8c:	e2502000 	subs	r2, r0, #0
    ba90:	059f3028 	ldreq	r3, [pc, #40]	@ bac0 <CKernel::Run()+0x50>
    ba94:	159f3028 	ldrne	r3, [pc, #40]	@ bac4 <CKernel::Run()+0x54>
    ba98:	02840b07 	addeq	r0, r4, #7168	@ 0x1c00
    ba9c:	12840b07 	addne	r0, r4, #7168	@ 0x1c00
    baa0:	13a02003 	movne	r2, #3
    baa4:	0243101c 	subeq	r1, r3, #28
    baa8:	12431038 	subne	r1, r3, #56	@ 0x38
    baac:	e2800020 	add	r0, r0, #32
    bab0:	eb0015e7 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bab4:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
    bab8:	eb002807 	bl	15adc <CTimer::SimpleMsDelay(unsigned int)>
    babc:	eafffffc 	b	bab4 <CKernel::Run()+0x44>
    bac0:	0001cbd8 	.word	0x0001cbd8
    bac4:	0001cbf4 	.word	0x0001cbf4

0000bac8 <CKernel::~CKernel()>:
    bac8:	e92d4070 	push	{r4, r5, r6, lr}
    bacc:	e1a04000 	mov	r4, r0
    bad0:	e2800c1d 	add	r0, r0, #7424	@ 0x1d00
    bad4:	e280001c 	add	r0, r0, #28
    bad8:	eb0037bb 	bl	199cc <CI2CMaster::~CI2CMaster()>
    badc:	e2840b07 	add	r0, r4, #7168	@ 0x1c00
    bae0:	e2800020 	add	r0, r0, #32
    bae4:	eb0013ed 	bl	10aa0 <CLogger::~CLogger()>
    bae8:	e2840d6f 	add	r0, r4, #7104	@ 0x1bc0
    baec:	e2845d66 	add	r5, r4, #6528	@ 0x1980
    baf0:	e2800020 	add	r0, r0, #32
    baf4:	eb0024f3 	bl	14ec8 <CTimer::~CTimer()>
    baf8:	e2850020 	add	r0, r5, #32
    bafc:	eb002fc7 	bl	17a20 <CInterruptSystem::~CInterruptSystem()>
    bb00:	e285001c 	add	r0, r5, #28
    bb04:	e2845e8a 	add	r5, r4, #2208	@ 0x8a0
    bb08:	eb002d3f 	bl	1700c <CExceptionHandler::~CExceptionHandler()>
    bb0c:	e285000c 	add	r0, r5, #12
    bb10:	eb001dd3 	bl	13264 <CSerialDevice::~CSerialDevice()>
    bb14:	e2850004 	add	r0, r5, #4
    bb18:	eb00100d 	bl	fb54 <CDeviceNameService::~CDeviceNameService()>
    bb1c:	e284000c 	add	r0, r4, #12
    bb20:	eb00118e 	bl	10160 <CKernelOptions::~CKernelOptions()>
    bb24:	e1a00004 	mov	r0, r4
    bb28:	eb000e71 	bl	f4f4 <CActLED::~CActLED()>
    bb2c:	e1a00004 	mov	r0, r4
    bb30:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bb34 <main>:
    bb34:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    bb38:	e24ddd76 	sub	sp, sp, #7552	@ 0x1d80
    bb3c:	e24dd014 	sub	sp, sp, #20
    bb40:	e1a0000d 	mov	r0, sp
    bb44:	ebffff5b 	bl	b8b8 <CKernel::CKernel()>
    bb48:	e1a0000d 	mov	r0, sp
    bb4c:	ebffff83 	bl	b960 <CKernel::Initialize()>
    bb50:	e3500000 	cmp	r0, #0
    bb54:	0a000003 	beq	bb68 <main+0x34>
    bb58:	e1a0000d 	mov	r0, sp
    bb5c:	ebffffc3 	bl	ba70 <CKernel::Run()>
    bb60:	e3500002 	cmp	r0, #2
    bb64:	0a000000 	beq	bb6c <main+0x38>
    bb68:	eb00244b 	bl	14c9c <halt>
    bb6c:	eb00245b 	bl	14ce0 <reboot>

0000bb70 <CSoundBaseDevice::GetRangeMin() const>:
    bb70:	e5900030 	ldr	r0, [r0, #48]	@ 0x30
    bb74:	e12fff1e 	bx	lr

0000bb78 <CSoundBaseDevice::GetRangeMax() const>:
    bb78:	e5900034 	ldr	r0, [r0, #52]	@ 0x34
    bb7c:	e12fff1e 	bx	lr

0000bb80 <CSoundBaseDevice::CSoundBaseDevice()>:
    bb80:	e92d4010 	push	{r4, lr}
    bb84:	e1a04000 	mov	r4, r0
    bb88:	eb000fa3 	bl	fa1c <CDevice::CDevice()>
    bb8c:	e3a03000 	mov	r3, #0
    bb90:	e3a02006 	mov	r2, #6
    bb94:	e3a01001 	mov	r1, #1
    bb98:	e59f0058 	ldr	r0, [pc, #88]	@ bbf8 <CSoundBaseDevice::CSoundBaseDevice()+0x78>
    bb9c:	e5c42008 	strb	r2, [r4, #8]
    bba0:	e5840000 	str	r0, [r4]
    bba4:	e5843028 	str	r3, [r4, #40]	@ 0x28
    bba8:	e1a00004 	mov	r0, r4
    bbac:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    bbb0:	e5c420b8 	strb	r2, [r4, #184]	@ 0xb8
    bbb4:	e58430bc 	str	r3, [r4, #188]	@ 0xbc
    bbb8:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    bbbc:	e58430cc 	str	r3, [r4, #204]	@ 0xcc
    bbc0:	e58430d0 	str	r3, [r4, #208]	@ 0xd0
    bbc4:	e58430d4 	str	r3, [r4, #212]	@ 0xd4
    bbc8:	e58410dc 	str	r1, [r4, #220]	@ 0xdc
    bbcc:	e58430e8 	str	r3, [r4, #232]	@ 0xe8
    bbd0:	e58430ec 	str	r3, [r4, #236]	@ 0xec
    bbd4:	e5c420f0 	strb	r2, [r4, #240]	@ 0xf0
    bbd8:	e58430f4 	str	r3, [r4, #244]	@ 0xf4
    bbdc:	e5843104 	str	r3, [r4, #260]	@ 0x104
    bbe0:	e5843108 	str	r3, [r4, #264]	@ 0x108
    bbe4:	e584310c 	str	r3, [r4, #268]	@ 0x10c
    bbe8:	e5843110 	str	r3, [r4, #272]	@ 0x110
    bbec:	e5843114 	str	r3, [r4, #276]	@ 0x114
    bbf0:	e5841118 	str	r1, [r4, #280]	@ 0x118
    bbf4:	e8bd8010 	pop	{r4, pc}
    bbf8:	0001da5c 	.word	0x0001da5c

0000bbfc <CSoundBaseDevice::~CSoundBaseDevice()>:
    bbfc:	e3a03000 	mov	r3, #0
    bc00:	e92d4010 	push	{r4, lr}
    bc04:	e1a04000 	mov	r4, r0
    bc08:	e59000c8 	ldr	r0, [r0, #200]	@ 0xc8
    bc0c:	e59f2044 	ldr	r2, [pc, #68]	@ bc58 <CSoundBaseDevice::~CSoundBaseDevice()+0x5c>
    bc10:	e1500003 	cmp	r0, r3
    bc14:	e5842000 	str	r2, [r4]
    bc18:	e58430d4 	str	r3, [r4, #212]	@ 0xd4
    bc1c:	e5843110 	str	r3, [r4, #272]	@ 0x110
    bc20:	0a000000 	beq	bc28 <CSoundBaseDevice::~CSoundBaseDevice()+0x2c>
    bc24:	eb002b61 	bl	169b0 <operator delete[](void*)>
    bc28:	e3a03000 	mov	r3, #0
    bc2c:	e5940104 	ldr	r0, [r4, #260]	@ 0x104
    bc30:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    bc34:	e1500003 	cmp	r0, r3
    bc38:	0a000000 	beq	bc40 <CSoundBaseDevice::~CSoundBaseDevice()+0x44>
    bc3c:	eb002b5b 	bl	169b0 <operator delete[](void*)>
    bc40:	e3a03000 	mov	r3, #0
    bc44:	e1a00004 	mov	r0, r4
    bc48:	e5843104 	str	r3, [r4, #260]	@ 0x104
    bc4c:	eb000f47 	bl	f970 <CDevice::~CDevice()>
    bc50:	e1a00004 	mov	r0, r4
    bc54:	e8bd8010 	pop	{r4, pc}
    bc58:	0001da5c 	.word	0x0001da5c

0000bc5c <CSoundBaseDevice::~CSoundBaseDevice()>:
    bc5c:	e3a03000 	mov	r3, #0
    bc60:	e92d4010 	push	{r4, lr}
    bc64:	e1a04000 	mov	r4, r0
    bc68:	e59000c8 	ldr	r0, [r0, #200]	@ 0xc8
    bc6c:	e59f2050 	ldr	r2, [pc, #80]	@ bcc4 <CSoundBaseDevice::~CSoundBaseDevice()+0x68>
    bc70:	e1500003 	cmp	r0, r3
    bc74:	e5842000 	str	r2, [r4]
    bc78:	e58430d4 	str	r3, [r4, #212]	@ 0xd4
    bc7c:	e5843110 	str	r3, [r4, #272]	@ 0x110
    bc80:	0a000000 	beq	bc88 <CSoundBaseDevice::~CSoundBaseDevice()+0x2c>
    bc84:	eb002b49 	bl	169b0 <operator delete[](void*)>
    bc88:	e3a03000 	mov	r3, #0
    bc8c:	e5940104 	ldr	r0, [r4, #260]	@ 0x104
    bc90:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    bc94:	e1500003 	cmp	r0, r3
    bc98:	0a000000 	beq	bca0 <CSoundBaseDevice::~CSoundBaseDevice()+0x44>
    bc9c:	eb002b43 	bl	169b0 <operator delete[](void*)>
    bca0:	e3a03000 	mov	r3, #0
    bca4:	e1a00004 	mov	r0, r4
    bca8:	e5843104 	str	r3, [r4, #260]	@ 0x104
    bcac:	eb000f2f 	bl	f970 <CDevice::~CDevice()>
    bcb0:	e1a00004 	mov	r0, r4
    bcb4:	e3a01f47 	mov	r1, #284	@ 0x11c
    bcb8:	eb002b42 	bl	169c8 <operator delete(void*, unsigned int)>
    bcbc:	e1a00004 	mov	r0, r4
    bcc0:	e8bd8010 	pop	{r4, pc}
    bcc4:	0001da5c 	.word	0x0001da5c

0000bcc8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
    bcc8:	e92d4070 	push	{r4, r5, r6, lr}
    bccc:	e59dc010 	ldr	ip, [sp, #16]
    bcd0:	e59de014 	ldr	lr, [sp, #20]
    bcd4:	e35c0020 	cmp	ip, #32
    bcd8:	e5dd5018 	ldrb	r5, [sp, #24]
    bcdc:	e5c01008 	strb	r1, [r0, #8]
    bce0:	e580300c 	str	r3, [r0, #12]
    bce4:	e580c010 	str	ip, [r0, #16]
    bce8:	e580e014 	str	lr, [r0, #20]
    bcec:	8a00007e 	bhi	beec <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x224>
    bcf0:	e35e0020 	cmp	lr, #32
    bcf4:	8a000080 	bhi	befc <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x234>
    bcf8:	e2253001 	eor	r3, r5, #1
    bcfc:	e35c0002 	cmp	ip, #2
    bd00:	03833001 	orreq	r3, r3, #1
    bd04:	e3530000 	cmp	r3, #0
    bd08:	e1a04000 	mov	r4, r0
    bd0c:	e5c05018 	strb	r5, [r0, #24]
    bd10:	0a0000a6 	beq	bfb0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2e8>
    bd14:	e2805038 	add	r5, r0, #56	@ 0x38
    bd18:	e1a06002 	mov	r6, r2
    bd1c:	e3a01000 	mov	r1, #0
    bd20:	e3a02080 	mov	r2, #128	@ 0x80
    bd24:	e1a00005 	mov	r0, r5
    bd28:	eb0029ec 	bl	164e0 <memset>
    bd2c:	e5d42008 	ldrb	r2, [r4, #8]
    bd30:	e2423001 	sub	r3, r2, #1
    bd34:	e3530004 	cmp	r3, #4
    bd38:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bd3c:	ea00009f 	b	bfc0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2f8>
    bd40:	0000be08 	.word	0x0000be08
    bd44:	0000bdd8 	.word	0x0000bdd8
    bd48:	0000bd54 	.word	0x0000bd54
    bd4c:	0000be38 	.word	0x0000be38
    bd50:	0000bd54 	.word	0x0000bd54
    bd54:	e3a00004 	mov	r0, #4
    bd58:	e59fc270 	ldr	ip, [pc, #624]	@ bfd0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x308>
    bd5c:	e5941010 	ldr	r1, [r4, #16]
    bd60:	e5943014 	ldr	r3, [r4, #20]
    bd64:	e584c030 	str	ip, [r4, #48]	@ 0x30
    bd68:	e59fc264 	ldr	ip, [pc, #612]	@ bfd4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x30c>
    bd6c:	e3520005 	cmp	r2, #5
    bd70:	e1a03103 	lsl	r3, r3, #2
    bd74:	e1a02101 	lsl	r2, r1, #2
    bd78:	e1c422f0 	strd	r2, [r4, #32]
    bd7c:	e584c034 	str	ip, [r4, #52]	@ 0x34
    bd80:	e584001c 	str	r0, [r4, #28]
    bd84:	18bd8070 	popne	{r4, r5, r6, pc}
    bd88:	e594300c 	ldr	r3, [r4, #12]
    bd8c:	e59f2244 	ldr	r2, [pc, #580]	@ bfd8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x310>
    bd90:	e1530002 	cmp	r3, r2
    bd94:	0a000071 	beq	bf60 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x298>
    bd98:	8a000046 	bhi	beb8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1f0>
    bd9c:	e3530c7d 	cmp	r3, #32000	@ 0x7d00
    bda0:	0a000077 	beq	bf84 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2bc>
    bda4:	8a000070 	bhi	bf6c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2a4>
    bda8:	e59f222c 	ldr	r2, [pc, #556]	@ bfdc <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x314>
    bdac:	e1530002 	cmp	r3, r2
    bdb0:	0a000055 	beq	bf0c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x244>
    bdb4:	e59f2224 	ldr	r2, [pc, #548]	@ bfe0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x318>
    bdb8:	e1530002 	cmp	r3, r2
    bdbc:	03a0109b 	moveq	r1, #155	@ 0x9b
    bdc0:	03a00006 	moveq	r0, #6
    bdc4:	0a000051 	beq	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bdc8:	e3a0209d 	mov	r2, #157	@ 0x9d
    bdcc:	e59f1210 	ldr	r1, [pc, #528]	@ bfe4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x31c>
    bdd0:	e59f0210 	ldr	r0, [pc, #528]	@ bfe8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x320>
    bdd4:	eb000e52 	bl	f724 <assertion_failed>
    bdd8:	e3a01003 	mov	r1, #3
    bddc:	e1c421d0 	ldrd	r2, [r4, #16]
    bde0:	e59f01e8 	ldr	r0, [pc, #488]	@ bfd0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x308>
    bde4:	e0822082 	add	r2, r2, r2, lsl #1
    bde8:	e5840030 	str	r0, [r4, #48]	@ 0x30
    bdec:	e59f01e0 	ldr	r0, [pc, #480]	@ bfd4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x30c>
    bdf0:	e0833083 	add	r3, r3, r3, lsl #1
    bdf4:	e5842020 	str	r2, [r4, #32]
    bdf8:	e5840034 	str	r0, [r4, #52]	@ 0x34
    bdfc:	e5843024 	str	r3, [r4, #36]	@ 0x24
    be00:	e584101c 	str	r1, [r4, #28]
    be04:	e8bd8070 	pop	{r4, r5, r6, pc}
    be08:	e3a01002 	mov	r1, #2
    be0c:	e1c421d0 	ldrd	r2, [r4, #16]
    be10:	e59f01d4 	ldr	r0, [pc, #468]	@ bfec <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x324>
    be14:	e1a02082 	lsl	r2, r2, #1
    be18:	e5840030 	str	r0, [r4, #48]	@ 0x30
    be1c:	e59f01cc 	ldr	r0, [pc, #460]	@ bff0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x328>
    be20:	e1a03083 	lsl	r3, r3, #1
    be24:	e5842020 	str	r2, [r4, #32]
    be28:	e5840034 	str	r0, [r4, #52]	@ 0x34
    be2c:	e5843024 	str	r3, [r4, #36]	@ 0x24
    be30:	e584101c 	str	r1, [r4, #28]
    be34:	e8bd8070 	pop	{r4, r5, r6, pc}
    be38:	e3a03000 	mov	r3, #0
    be3c:	e3a02004 	mov	r2, #4
    be40:	e2466001 	sub	r6, r6, #1
    be44:	e1560003 	cmp	r6, r3
    be48:	e5846034 	str	r6, [r4, #52]	@ 0x34
    be4c:	e584201c 	str	r2, [r4, #28]
    be50:	e5843030 	str	r3, [r4, #48]	@ 0x30
    be54:	da000037 	ble	bf38 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x270>
    be58:	e5943010 	ldr	r3, [r4, #16]
    be5c:	e3530000 	cmp	r3, #0
    be60:	0a00004d 	beq	bf9c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2d4>
    be64:	e1a060c6 	asr	r6, r6, #1
    be68:	e3530001 	cmp	r3, #1
    be6c:	e5846038 	str	r6, [r4, #56]	@ 0x38
    be70:	0a000009 	beq	be9c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1d4>
    be74:	e1a00005 	mov	r0, r5
    be78:	e3a02001 	mov	r2, #1
    be7c:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
    be80:	e2822001 	add	r2, r2, #1
    be84:	e0833fa3 	add	r3, r3, r3, lsr #31
    be88:	e1a030c3 	asr	r3, r3, #1
    be8c:	e5a03004 	str	r3, [r0, #4]!
    be90:	e5943010 	ldr	r3, [r4, #16]
    be94:	e1530002 	cmp	r3, r2
    be98:	8afffff7 	bhi	be7c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1b4>
    be9c:	e594101c 	ldr	r1, [r4, #28]
    bea0:	e5942014 	ldr	r2, [r4, #20]
    bea4:	e0030391 	mul	r3, r1, r3
    bea8:	e0020291 	mul	r2, r1, r2
    beac:	e5843020 	str	r3, [r4, #32]
    beb0:	e5842024 	str	r2, [r4, #36]	@ 0x24
    beb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    beb8:	e59f2134 	ldr	r2, [pc, #308]	@ bff4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x32c>
    bebc:	e1530002 	cmp	r3, r2
    bec0:	0a000032 	beq	bf90 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2c8>
    bec4:	8a00001f 	bhi	bf48 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x280>
    bec8:	e59f2128 	ldr	r2, [pc, #296]	@ bff8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x330>
    becc:	e1530002 	cmp	r3, r2
    bed0:	0a000015 	beq	bf2c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x264>
    bed4:	e59f2120 	ldr	r2, [pc, #288]	@ bffc <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x334>
    bed8:	e1530002 	cmp	r3, r2
    bedc:	03a0105b 	moveq	r1, #91	@ 0x5b
    bee0:	03a0000a 	moveq	r0, #10
    bee4:	0a000009 	beq	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bee8:	eaffffb6 	b	bdc8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x100>
    beec:	e3a0205b 	mov	r2, #91	@ 0x5b
    bef0:	e59f10ec 	ldr	r1, [pc, #236]	@ bfe4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x31c>
    bef4:	e59f0104 	ldr	r0, [pc, #260]	@ c000 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x338>
    bef8:	eb000e09 	bl	f724 <assertion_failed>
    befc:	e3a0205c 	mov	r2, #92	@ 0x5c
    bf00:	e59f10dc 	ldr	r1, [pc, #220]	@ bfe4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x31c>
    bf04:	e59f00f8 	ldr	r0, [pc, #248]	@ c004 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x33c>
    bf08:	eb000e05 	bl	f724 <assertion_failed>
    bf0c:	e3a010bb 	mov	r1, #187	@ 0xbb
    bf10:	e3a02004 	mov	r2, #4
    bf14:	e3a03000 	mov	r3, #0
    bf18:	e5c400e3 	strb	r0, [r4, #227]	@ 0xe3
    bf1c:	e5c410e4 	strb	r1, [r4, #228]	@ 0xe4
    bf20:	e1c42eb0 	strh	r2, [r4, #224]	@ 0xe0
    bf24:	e5c430e2 	strb	r3, [r4, #226]	@ 0xe2
    bf28:	e8bd8070 	pop	{r4, r5, r6, pc}
    bf2c:	e3a0107b 	mov	r1, #123	@ 0x7b
    bf30:	e3a00008 	mov	r0, #8
    bf34:	eafffff5 	b	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bf38:	e3a0207c 	mov	r2, #124	@ 0x7c
    bf3c:	e59f10a0 	ldr	r1, [pc, #160]	@ bfe4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x31c>
    bf40:	e59f00c0 	ldr	r0, [pc, #192]	@ c008 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x340>
    bf44:	eb000df6 	bl	f724 <assertion_failed>
    bf48:	e59f20bc 	ldr	r2, [pc, #188]	@ c00c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x344>
    bf4c:	e1530002 	cmp	r3, r2
    bf50:	03a0101b 	moveq	r1, #27
    bf54:	03a0000e 	moveq	r0, #14
    bf58:	0affffec 	beq	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bf5c:	eaffff99 	b	bdc8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x100>
    bf60:	e3a010db 	mov	r1, #219	@ 0xdb
    bf64:	e3a00002 	mov	r0, #2
    bf68:	eaffffe8 	b	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bf6c:	e59f209c 	ldr	r2, [pc, #156]	@ c010 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x348>
    bf70:	e1530002 	cmp	r3, r2
    bf74:	03a010fb 	moveq	r1, #251	@ 0xfb
    bf78:	03a00000 	moveq	r0, #0
    bf7c:	0affffe3 	beq	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bf80:	eaffff90 	b	bdc8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x100>
    bf84:	e3a010cb 	mov	r1, #203	@ 0xcb
    bf88:	e3a00003 	mov	r0, #3
    bf8c:	eaffffdf 	b	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bf90:	e3a0103b 	mov	r1, #59	@ 0x3b
    bf94:	e3a0000c 	mov	r0, #12
    bf98:	eaffffdc 	b	bf10 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x248>
    bf9c:	e5942014 	ldr	r2, [r4, #20]
    bfa0:	e5843020 	str	r3, [r4, #32]
    bfa4:	e1a03102 	lsl	r3, r2, #2
    bfa8:	e5843024 	str	r3, [r4, #36]	@ 0x24
    bfac:	e8bd8070 	pop	{r4, r5, r6, pc}
    bfb0:	e3a0205f 	mov	r2, #95	@ 0x5f
    bfb4:	e59f1028 	ldr	r1, [pc, #40]	@ bfe4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x31c>
    bfb8:	e59f0054 	ldr	r0, [pc, #84]	@ c014 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x34c>
    bfbc:	eb000dd8 	bl	f724 <assertion_failed>
    bfc0:	e3a02086 	mov	r2, #134	@ 0x86
    bfc4:	e59f1018 	ldr	r1, [pc, #24]	@ bfe4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x31c>
    bfc8:	e59f0018 	ldr	r0, [pc, #24]	@ bfe8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x320>
    bfcc:	eb000dd4 	bl	f724 <assertion_failed>
    bfd0:	ff800001 	.word	0xff800001
    bfd4:	007fffff 	.word	0x007fffff
    bfd8:	0000bb80 	.word	0x0000bb80
    bfdc:	00005622 	.word	0x00005622
    bfe0:	00005dc0 	.word	0x00005dc0
    bfe4:	0001cc0c 	.word	0x0001cc0c
    bfe8:	0001ced0 	.word	0x0001ced0
    bfec:	ffff8000 	.word	0xffff8000
    bff0:	00007fff 	.word	0x00007fff
    bff4:	0002b110 	.word	0x0002b110
    bff8:	00015888 	.word	0x00015888
    bffc:	00017700 	.word	0x00017700
    c000:	0001cc20 	.word	0x0001cc20
    c004:	0001cc48 	.word	0x0001cc48
    c008:	0001cc9c 	.word	0x0001cc9c
    c00c:	0002ee00 	.word	0x0002ee00
    c010:	0000ac44 	.word	0x0000ac44
    c014:	0001cc70 	.word	0x0001cc70

0000c018 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>:
    c018:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c01c:	e1a05001 	mov	r5, r1
    c020:	e24dd010 	sub	sp, sp, #16
    c024:	e5dd8028 	ldrb	r8, [sp, #40]	@ 0x28
    c028:	e1a04000 	mov	r4, r0
    c02c:	e1a06002 	mov	r6, r2
    c030:	e1a07003 	mov	r7, r3
    c034:	eb000e78 	bl	fa1c <CDevice::CDevice()>
    c038:	e58d8008 	str	r8, [sp, #8]
    c03c:	e3a0c000 	mov	ip, #0
    c040:	e3a0e006 	mov	lr, #6
    c044:	e3a08002 	mov	r8, #2
    c048:	e1a01005 	mov	r1, r5
    c04c:	e3a05001 	mov	r5, #1
    c050:	e59f0074 	ldr	r0, [pc, #116]	@ c0cc <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0xb4>
    c054:	e1a03007 	mov	r3, r7
    c058:	e5840000 	str	r0, [r4]
    c05c:	e1a02006 	mov	r2, r6
    c060:	e58d8004 	str	r8, [sp, #4]
    c064:	e58d8000 	str	r8, [sp]
    c068:	e1a00004 	mov	r0, r4
    c06c:	e584c028 	str	ip, [r4, #40]	@ 0x28
    c070:	e5c4e008 	strb	lr, [r4, #8]
    c074:	e584c02c 	str	ip, [r4, #44]	@ 0x2c
    c078:	e5c4e0b8 	strb	lr, [r4, #184]	@ 0xb8
    c07c:	e5c4e0f0 	strb	lr, [r4, #240]	@ 0xf0
    c080:	e584c0bc 	str	ip, [r4, #188]	@ 0xbc
    c084:	e584c0c8 	str	ip, [r4, #200]	@ 0xc8
    c088:	e584c0cc 	str	ip, [r4, #204]	@ 0xcc
    c08c:	e584c0d0 	str	ip, [r4, #208]	@ 0xd0
    c090:	e584c0d4 	str	ip, [r4, #212]	@ 0xd4
    c094:	e58450dc 	str	r5, [r4, #220]	@ 0xdc
    c098:	e584c0e8 	str	ip, [r4, #232]	@ 0xe8
    c09c:	e584c0ec 	str	ip, [r4, #236]	@ 0xec
    c0a0:	e584c0f4 	str	ip, [r4, #244]	@ 0xf4
    c0a4:	e584c104 	str	ip, [r4, #260]	@ 0x104
    c0a8:	e584c108 	str	ip, [r4, #264]	@ 0x108
    c0ac:	e584c10c 	str	ip, [r4, #268]	@ 0x10c
    c0b0:	e5845118 	str	r5, [r4, #280]	@ 0x118
    c0b4:	e584c110 	str	ip, [r4, #272]	@ 0x110
    c0b8:	e584c114 	str	ip, [r4, #276]	@ 0x114
    c0bc:	ebffff01 	bl	bcc8 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    c0c0:	e1a00004 	mov	r0, r4
    c0c4:	e28dd010 	add	sp, sp, #16
    c0c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c0cc:	0001da5c 	.word	0x0001da5c

0000c0d0 <CSoundBaseDevice::GetHWTXChannels() const>:
    c0d0:	e5900010 	ldr	r0, [r0, #16]
    c0d4:	e12fff1e 	bx	lr

0000c0d8 <CSoundBaseDevice::GetHWRXChannels() const>:
    c0d8:	e5900014 	ldr	r0, [r0, #20]
    c0dc:	e12fff1e 	bx	lr

0000c0e0 <CSoundBaseDevice::AllocateQueue(unsigned int)>:
    c0e0:	e59030c8 	ldr	r3, [r0, #200]	@ 0xc8
    c0e4:	e92d4010 	push	{r4, lr}
    c0e8:	e3530000 	cmp	r3, #0
    c0ec:	1a000016 	bne	c14c <CSoundBaseDevice::AllocateQueue(unsigned int)+0x6c>
    c0f0:	e2413001 	sub	r3, r1, #1
    c0f4:	e3530ffa 	cmp	r3, #1000	@ 0x3e8
    c0f8:	2a000017 	bcs	c15c <CSoundBaseDevice::AllocateQueue(unsigned int)+0x7c>
    c0fc:	e1a04000 	mov	r4, r0
    c100:	e5903020 	ldr	r3, [r0, #32]
    c104:	e590000c 	ldr	r0, [r0, #12]
    c108:	e59f205c 	ldr	r2, [pc, #92]	@ c16c <CSoundBaseDevice::AllocateQueue(unsigned int)+0x8c>
    c10c:	e0030390 	mul	r3, r0, r3
    c110:	e0010391 	mul	r1, r1, r3
    c114:	e2811ff9 	add	r1, r1, #996	@ 0x3e4
    c118:	e2811003 	add	r1, r1, #3
    c11c:	e0812192 	umull	r2, r1, r2, r1
    c120:	e1a01321 	lsr	r1, r1, #6
    c124:	e2810001 	add	r0, r1, #1
    c128:	e5840028 	str	r0, [r4, #40]	@ 0x28
    c12c:	eb002a13 	bl	16980 <operator new[](unsigned int)>
    c130:	e1a02000 	mov	r2, r0
    c134:	e3a00001 	mov	r0, #1
    c138:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    c13c:	e58420c8 	str	r2, [r4, #200]	@ 0xc8
    c140:	e1a03033 	lsr	r3, r3, r0
    c144:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    c148:	e8bd8010 	pop	{r4, pc}
    c14c:	e3a020c1 	mov	r2, #193	@ 0xc1
    c150:	e59f1018 	ldr	r1, [pc, #24]	@ c170 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x90>
    c154:	e59f0018 	ldr	r0, [pc, #24]	@ c174 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x94>
    c158:	eb000d71 	bl	f724 <assertion_failed>
    c15c:	e3a020c2 	mov	r2, #194	@ 0xc2
    c160:	e59f1008 	ldr	r1, [pc, #8]	@ c170 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x90>
    c164:	e59f000c 	ldr	r0, [pc, #12]	@ c178 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x98>
    c168:	eb000d6d 	bl	f724 <assertion_failed>
    c16c:	10624dd3 	.word	0x10624dd3
    c170:	0001cc0c 	.word	0x0001cc0c
    c174:	0001ccac 	.word	0x0001ccac
    c178:	0001ccbc 	.word	0x0001ccbc

0000c17c <CSoundBaseDevice::AllocateQueueFrames(unsigned int)>:
    c17c:	e59030c8 	ldr	r3, [r0, #200]	@ 0xc8
    c180:	e92d4010 	push	{r4, lr}
    c184:	e3530000 	cmp	r3, #0
    c188:	1a000014 	bne	c1e0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x64>
    c18c:	e3510000 	cmp	r1, #0
    c190:	0a00000e 	beq	c1d0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x54>
    c194:	e590300c 	ldr	r3, [r0, #12]
    c198:	e1a04000 	mov	r4, r0
    c19c:	e1530001 	cmp	r3, r1
    c1a0:	3a00000a 	bcc	c1d0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x54>
    c1a4:	e5903020 	ldr	r3, [r0, #32]
    c1a8:	e0010193 	mul	r1, r3, r1
    c1ac:	e2810001 	add	r0, r1, #1
    c1b0:	e5840028 	str	r0, [r4, #40]	@ 0x28
    c1b4:	eb0029f1 	bl	16980 <operator new[](unsigned int)>
    c1b8:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    c1bc:	e58400c8 	str	r0, [r4, #200]	@ 0xc8
    c1c0:	e1a030a3 	lsr	r3, r3, #1
    c1c4:	e3a00001 	mov	r0, #1
    c1c8:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    c1cc:	e8bd8010 	pop	{r4, pc}
    c1d0:	e3a020d5 	mov	r2, #213	@ 0xd5
    c1d4:	e59f1014 	ldr	r1, [pc, #20]	@ c1f0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x74>
    c1d8:	e59f0014 	ldr	r0, [pc, #20]	@ c1f4 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x78>
    c1dc:	eb000d50 	bl	f724 <assertion_failed>
    c1e0:	e3a020d4 	mov	r2, #212	@ 0xd4
    c1e4:	e59f1004 	ldr	r1, [pc, #4]	@ c1f0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x74>
    c1e8:	e59f0008 	ldr	r0, [pc, #8]	@ c1f8 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x7c>
    c1ec:	eb000d4c 	bl	f724 <assertion_failed>
    c1f0:	0001cc0c 	.word	0x0001cc0c
    c1f4:	0001cce4 	.word	0x0001cce4
    c1f8:	0001ccac 	.word	0x0001ccac

0000c1fc <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)>:
    c1fc:	e3510005 	cmp	r1, #5
    c200:	e92d4010 	push	{r4, lr}
    c204:	8a000018 	bhi	c26c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x70>
    c208:	e2423001 	sub	r3, r2, #1
    c20c:	e353001f 	cmp	r3, #31
    c210:	e5c010b8 	strb	r1, [r0, #184]	@ 0xb8
    c214:	8a000018 	bhi	c27c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x80>
    c218:	e58020bc 	str	r2, [r0, #188]	@ 0xbc
    c21c:	e3510003 	cmp	r1, #3
    c220:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c224:	ea000018 	b	c28c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x90>
    c228:	0000c238 	.word	0x0000c238
    c22c:	0000c260 	.word	0x0000c260
    c230:	0000c254 	.word	0x0000c254
    c234:	0000c248 	.word	0x0000c248
    c238:	e3a03001 	mov	r3, #1
    c23c:	e58030c0 	str	r3, [r0, #192]	@ 0xc0
    c240:	e58020c4 	str	r2, [r0, #196]	@ 0xc4
    c244:	e8bd8010 	pop	{r4, pc}
    c248:	e3a03004 	mov	r3, #4
    c24c:	e1a02102 	lsl	r2, r2, #2
    c250:	eafffff9 	b	c23c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x40>
    c254:	e3a03003 	mov	r3, #3
    c258:	e0822082 	add	r2, r2, r2, lsl #1
    c25c:	eafffff6 	b	c23c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x40>
    c260:	e3a03002 	mov	r3, #2
    c264:	e1a02082 	lsl	r2, r2, #1
    c268:	eafffff3 	b	c23c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x40>
    c26c:	e3a020e7 	mov	r2, #231	@ 0xe7
    c270:	e59f1024 	ldr	r1, [pc, #36]	@ c29c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xa0>
    c274:	e59f0024 	ldr	r0, [pc, #36]	@ c2a0 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xa4>
    c278:	eb000d29 	bl	f724 <assertion_failed>
    c27c:	e3a020ea 	mov	r2, #234	@ 0xea
    c280:	e59f1014 	ldr	r1, [pc, #20]	@ c29c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xa0>
    c284:	e59f0018 	ldr	r0, [pc, #24]	@ c2a4 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xa8>
    c288:	eb000d25 	bl	f724 <assertion_failed>
    c28c:	e3a02c01 	mov	r2, #256	@ 0x100
    c290:	e59f1004 	ldr	r1, [pc, #4]	@ c29c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xa0>
    c294:	e59f000c 	ldr	r0, [pc, #12]	@ c2a8 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xac>
    c298:	eb000d21 	bl	f724 <assertion_failed>
    c29c:	0001cc0c 	.word	0x0001cc0c
    c2a0:	0001cd18 	.word	0x0001cd18
    c2a4:	0001cd34 	.word	0x0001cd34
    c2a8:	0001ced0 	.word	0x0001ced0

0000c2ac <CSoundBaseDevice::GetQueueSizeFrames()>:
    c2ac:	e1a03000 	mov	r3, r0
    c2b0:	e5900028 	ldr	r0, [r0, #40]	@ 0x28
    c2b4:	e92d4010 	push	{r4, lr}
    c2b8:	e3500000 	cmp	r0, #0
    c2bc:	0a000002 	beq	c2cc <CSoundBaseDevice::GetQueueSizeFrames()+0x20>
    c2c0:	e5931020 	ldr	r1, [r3, #32]
    c2c4:	eb0037b7 	bl	1a1a8 <__udivsi3>
    c2c8:	e8bd8010 	pop	{r4, pc}
    c2cc:	e59f2008 	ldr	r2, [pc, #8]	@ c2dc <CSoundBaseDevice::GetQueueSizeFrames()+0x30>
    c2d0:	e59f1008 	ldr	r1, [pc, #8]	@ c2e0 <CSoundBaseDevice::GetQueueSizeFrames()+0x34>
    c2d4:	e59f0008 	ldr	r0, [pc, #8]	@ c2e4 <CSoundBaseDevice::GetQueueSizeFrames()+0x38>
    c2d8:	eb000d11 	bl	f724 <assertion_failed>
    c2dc:	0000017e 	.word	0x0000017e
    c2e0:	0001cc0c 	.word	0x0001cc0c
    c2e4:	0001cd68 	.word	0x0001cd68

0000c2e8 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)>:
    c2e8:	e59030d4 	ldr	r3, [r0, #212]	@ 0xd4
    c2ec:	e92d4010 	push	{r4, lr}
    c2f0:	e3530000 	cmp	r3, #0
    c2f4:	1a000004 	bne	c30c <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x24>
    c2f8:	e3510000 	cmp	r1, #0
    c2fc:	e58010d4 	str	r1, [r0, #212]	@ 0xd4
    c300:	0a000005 	beq	c31c <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x34>
    c304:	e58020d8 	str	r2, [r0, #216]	@ 0xd8
    c308:	e8bd8010 	pop	{r4, pc}
    c30c:	e59f2018 	ldr	r2, [pc, #24]	@ c32c <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x44>
    c310:	e59f1018 	ldr	r1, [pc, #24]	@ c330 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x48>
    c314:	e59f0018 	ldr	r0, [pc, #24]	@ c334 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x4c>
    c318:	eb000d01 	bl	f724 <assertion_failed>
    c31c:	e59f2014 	ldr	r2, [pc, #20]	@ c338 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x50>
    c320:	e59f1008 	ldr	r1, [pc, #8]	@ c330 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x48>
    c324:	e59f0010 	ldr	r0, [pc, #16]	@ c33c <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x54>
    c328:	eb000cfd 	bl	f724 <assertion_failed>
    c32c:	00000191 	.word	0x00000191
    c330:	0001cc0c 	.word	0x0001cc0c
    c334:	0001cd7c 	.word	0x0001cd7c
    c338:	00000193 	.word	0x00000193
    c33c:	0001cd90 	.word	0x0001cd90

0000c340 <CSoundBaseDevice::AreChannelsSwapped() const>:
    c340:	e5d00018 	ldrb	r0, [r0, #24]
    c344:	e12fff1e 	bx	lr

0000c348 <CSoundBaseDevice::AllocateReadQueue(unsigned int)>:
    c348:	e5903104 	ldr	r3, [r0, #260]	@ 0x104
    c34c:	e92d4010 	push	{r4, lr}
    c350:	e3530000 	cmp	r3, #0
    c354:	1a000016 	bne	c3b4 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x6c>
    c358:	e2413001 	sub	r3, r1, #1
    c35c:	e3530ffa 	cmp	r3, #1000	@ 0x3e8
    c360:	2a000017 	bcs	c3c4 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x7c>
    c364:	e1a04000 	mov	r4, r0
    c368:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
    c36c:	e590000c 	ldr	r0, [r0, #12]
    c370:	e59f205c 	ldr	r2, [pc, #92]	@ c3d4 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x8c>
    c374:	e0030390 	mul	r3, r0, r3
    c378:	e0010391 	mul	r1, r1, r3
    c37c:	e2811ff9 	add	r1, r1, #996	@ 0x3e4
    c380:	e2811003 	add	r1, r1, #3
    c384:	e0812192 	umull	r2, r1, r2, r1
    c388:	e1a01321 	lsr	r1, r1, #6
    c38c:	e2810001 	add	r0, r1, #1
    c390:	e58400e8 	str	r0, [r4, #232]	@ 0xe8
    c394:	eb002979 	bl	16980 <operator new[](unsigned int)>
    c398:	e1a02000 	mov	r2, r0
    c39c:	e3a00001 	mov	r0, #1
    c3a0:	e59430e8 	ldr	r3, [r4, #232]	@ 0xe8
    c3a4:	e5842104 	str	r2, [r4, #260]	@ 0x104
    c3a8:	e1a03033 	lsr	r3, r3, r0
    c3ac:	e58430ec 	str	r3, [r4, #236]	@ 0xec
    c3b0:	e8bd8010 	pop	{r4, pc}
    c3b4:	e59f201c 	ldr	r2, [pc, #28]	@ c3d8 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x90>
    c3b8:	e59f101c 	ldr	r1, [pc, #28]	@ c3dc <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x94>
    c3bc:	e59f001c 	ldr	r0, [pc, #28]	@ c3e0 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x98>
    c3c0:	eb000cd7 	bl	f724 <assertion_failed>
    c3c4:	e59f2018 	ldr	r2, [pc, #24]	@ c3e4 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x9c>
    c3c8:	e59f100c 	ldr	r1, [pc, #12]	@ c3dc <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x94>
    c3cc:	e59f0014 	ldr	r0, [pc, #20]	@ c3e8 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0xa0>
    c3d0:	eb000cd3 	bl	f724 <assertion_failed>
    c3d4:	10624dd3 	.word	0x10624dd3
    c3d8:	000001a1 	.word	0x000001a1
    c3dc:	0001cc0c 	.word	0x0001cc0c
    c3e0:	0001cda4 	.word	0x0001cda4
    c3e4:	000001a2 	.word	0x000001a2
    c3e8:	0001ccbc 	.word	0x0001ccbc

0000c3ec <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)>:
    c3ec:	e5903104 	ldr	r3, [r0, #260]	@ 0x104
    c3f0:	e92d4010 	push	{r4, lr}
    c3f4:	e3530000 	cmp	r3, #0
    c3f8:	1a000014 	bne	c450 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x64>
    c3fc:	e3510000 	cmp	r1, #0
    c400:	0a00000e 	beq	c440 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x54>
    c404:	e590300c 	ldr	r3, [r0, #12]
    c408:	e1a04000 	mov	r4, r0
    c40c:	e1530001 	cmp	r3, r1
    c410:	3a00000a 	bcc	c440 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x54>
    c414:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
    c418:	e0010193 	mul	r1, r3, r1
    c41c:	e2810001 	add	r0, r1, #1
    c420:	e58400e8 	str	r0, [r4, #232]	@ 0xe8
    c424:	eb002955 	bl	16980 <operator new[](unsigned int)>
    c428:	e59430e8 	ldr	r3, [r4, #232]	@ 0xe8
    c42c:	e5840104 	str	r0, [r4, #260]	@ 0x104
    c430:	e1a030a3 	lsr	r3, r3, #1
    c434:	e3a00001 	mov	r0, #1
    c438:	e58430ec 	str	r3, [r4, #236]	@ 0xec
    c43c:	e8bd8010 	pop	{r4, pc}
    c440:	e59f2018 	ldr	r2, [pc, #24]	@ c460 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x74>
    c444:	e59f1018 	ldr	r1, [pc, #24]	@ c464 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x78>
    c448:	e59f0018 	ldr	r0, [pc, #24]	@ c468 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x7c>
    c44c:	eb000cb4 	bl	f724 <assertion_failed>
    c450:	e3a02f6d 	mov	r2, #436	@ 0x1b4
    c454:	e59f1008 	ldr	r1, [pc, #8]	@ c464 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x78>
    c458:	e59f000c 	ldr	r0, [pc, #12]	@ c46c <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x80>
    c45c:	eb000cb0 	bl	f724 <assertion_failed>
    c460:	000001b5 	.word	0x000001b5
    c464:	0001cc0c 	.word	0x0001cc0c
    c468:	0001cce4 	.word	0x0001cce4
    c46c:	0001cda4 	.word	0x0001cda4

0000c470 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)>:
    c470:	e3510005 	cmp	r1, #5
    c474:	e92d4010 	push	{r4, lr}
    c478:	8a000019 	bhi	c4e4 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x74>
    c47c:	e242c001 	sub	ip, r2, #1
    c480:	e35c001f 	cmp	ip, #31
    c484:	e5c010f0 	strb	r1, [r0, #240]	@ 0xf0
    c488:	8a000019 	bhi	c4f4 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x84>
    c48c:	e58020f4 	str	r2, [r0, #244]	@ 0xf4
    c490:	e5c030f8 	strb	r3, [r0, #248]	@ 0xf8
    c494:	e3510003 	cmp	r1, #3
    c498:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c49c:	ea000018 	b	c504 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x94>
    c4a0:	0000c4b0 	.word	0x0000c4b0
    c4a4:	0000c4d8 	.word	0x0000c4d8
    c4a8:	0000c4cc 	.word	0x0000c4cc
    c4ac:	0000c4c0 	.word	0x0000c4c0
    c4b0:	e3a03001 	mov	r3, #1
    c4b4:	e58030fc 	str	r3, [r0, #252]	@ 0xfc
    c4b8:	e5802100 	str	r2, [r0, #256]	@ 0x100
    c4bc:	e8bd8010 	pop	{r4, pc}
    c4c0:	e3a03004 	mov	r3, #4
    c4c4:	e1a02102 	lsl	r2, r2, #2
    c4c8:	eafffff9 	b	c4b4 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x44>
    c4cc:	e3a03003 	mov	r3, #3
    c4d0:	e0822082 	add	r2, r2, r2, lsl #1
    c4d4:	eafffff6 	b	c4b4 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x44>
    c4d8:	e3a03002 	mov	r3, #2
    c4dc:	e1a02082 	lsl	r2, r2, #1
    c4e0:	eafffff3 	b	c4b4 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x44>
    c4e4:	e3a02f72 	mov	r2, #456	@ 0x1c8
    c4e8:	e59f1024 	ldr	r1, [pc, #36]	@ c514 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xa4>
    c4ec:	e59f0024 	ldr	r0, [pc, #36]	@ c518 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xa8>
    c4f0:	eb000c8b 	bl	f724 <assertion_failed>
    c4f4:	e59f2020 	ldr	r2, [pc, #32]	@ c51c <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xac>
    c4f8:	e59f1014 	ldr	r1, [pc, #20]	@ c514 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xa4>
    c4fc:	e59f001c 	ldr	r0, [pc, #28]	@ c520 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xb0>
    c500:	eb000c87 	bl	f724 <assertion_failed>
    c504:	e59f2018 	ldr	r2, [pc, #24]	@ c524 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xb4>
    c508:	e59f1004 	ldr	r1, [pc, #4]	@ c514 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xa4>
    c50c:	e59f0014 	ldr	r0, [pc, #20]	@ c528 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xb8>
    c510:	eb000c83 	bl	f724 <assertion_failed>
    c514:	0001cc0c 	.word	0x0001cc0c
    c518:	0001cd18 	.word	0x0001cd18
    c51c:	000001cb 	.word	0x000001cb
    c520:	0001cd34 	.word	0x0001cd34
    c524:	000001e2 	.word	0x000001e2
    c528:	0001ced0 	.word	0x0001ced0

0000c52c <CSoundBaseDevice::GetReadQueueSizeFrames()>:
    c52c:	e1a03000 	mov	r3, r0
    c530:	e59000e8 	ldr	r0, [r0, #232]	@ 0xe8
    c534:	e92d4010 	push	{r4, lr}
    c538:	e3500000 	cmp	r0, #0
    c53c:	0a000002 	beq	c54c <CSoundBaseDevice::GetReadQueueSizeFrames()+0x20>
    c540:	e5931024 	ldr	r1, [r3, #36]	@ 0x24
    c544:	eb003717 	bl	1a1a8 <__udivsi3>
    c548:	e8bd8010 	pop	{r4, pc}
    c54c:	e59f2008 	ldr	r2, [pc, #8]	@ c55c <CSoundBaseDevice::GetReadQueueSizeFrames()+0x30>
    c550:	e59f1008 	ldr	r1, [pc, #8]	@ c560 <CSoundBaseDevice::GetReadQueueSizeFrames()+0x34>
    c554:	e59f0008 	ldr	r0, [pc, #8]	@ c564 <CSoundBaseDevice::GetReadQueueSizeFrames()+0x38>
    c558:	eb000c71 	bl	f724 <assertion_failed>
    c55c:	0000025d 	.word	0x0000025d
    c560:	0001cc0c 	.word	0x0001cc0c
    c564:	0001cdb8 	.word	0x0001cdb8

0000c568 <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)>:
    c568:	e5903110 	ldr	r3, [r0, #272]	@ 0x110
    c56c:	e92d4010 	push	{r4, lr}
    c570:	e3530000 	cmp	r3, #0
    c574:	1a000004 	bne	c58c <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x24>
    c578:	e3510000 	cmp	r1, #0
    c57c:	e5801110 	str	r1, [r0, #272]	@ 0x110
    c580:	0a000005 	beq	c59c <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x34>
    c584:	e5802114 	str	r2, [r0, #276]	@ 0x114
    c588:	e8bd8010 	pop	{r4, pc}
    c58c:	e3a02e27 	mov	r2, #624	@ 0x270
    c590:	e59f1014 	ldr	r1, [pc, #20]	@ c5ac <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x44>
    c594:	e59f0014 	ldr	r0, [pc, #20]	@ c5b0 <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x48>
    c598:	eb000c61 	bl	f724 <assertion_failed>
    c59c:	e59f2010 	ldr	r2, [pc, #16]	@ c5b4 <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x4c>
    c5a0:	e59f1004 	ldr	r1, [pc, #4]	@ c5ac <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x44>
    c5a4:	e59f000c 	ldr	r0, [pc, #12]	@ c5b8 <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x50>
    c5a8:	eb000c5d 	bl	f724 <assertion_failed>
    c5ac:	0001cc0c 	.word	0x0001cc0c
    c5b0:	0001cdd0 	.word	0x0001cdd0
    c5b4:	00000272 	.word	0x00000272
    c5b8:	0001cde8 	.word	0x0001cde8

0000c5bc <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)>:
    c5bc:	e5d03008 	ldrb	r3, [r0, #8]
    c5c0:	e92d4070 	push	{r4, r5, r6, lr}
    c5c4:	e3530005 	cmp	r3, #5
    c5c8:	1a00001c 	bne	c640 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0x84>
    c5cc:	e35200bf 	cmp	r2, #191	@ 0xbf
    c5d0:	e1a05002 	mov	r5, r2
    c5d4:	8a00001d 	bhi	c650 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0x94>
    c5d8:	e1a01201 	lsl	r1, r1, #4
    c5dc:	e3520027 	cmp	r2, #39	@ 0x27
    c5e0:	e3c142ff 	bic	r4, r1, #-268435441	@ 0xf000000f
    c5e4:	8a00000f 	bhi	c628 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0x6c>
    c5e8:	e08001a2 	add	r0, r0, r2, lsr #3
    c5ec:	e5d030e0 	ldrb	r3, [r0, #224]	@ 0xe0
    c5f0:	e2022007 	and	r2, r2, #7
    c5f4:	e1a03233 	lsr	r3, r3, r2
    c5f8:	e2133001 	ands	r3, r3, #1
    c5fc:	13e03000 	mvnne	r3, #0
    c600:	e2033101 	and	r3, r3, #1073741824	@ 0x40000000
    c604:	e1834004 	orr	r4, r3, r4
    c608:	e1a00004 	mov	r0, r4
    c60c:	eb003778 	bl	1a3f4 <__paritysi2>
    c610:	e2600000 	rsb	r0, r0, #0
    c614:	e2000102 	and	r0, r0, #-2147483648	@ 0x80000000
    c618:	e1800004 	orr	r0, r0, r4
    c61c:	e3550000 	cmp	r5, #0
    c620:	0380000f 	orreq	r0, r0, #15
    c624:	e8bd8070 	pop	{r4, r5, r6, pc}
    c628:	e1a00004 	mov	r0, r4
    c62c:	eb003770 	bl	1a3f4 <__paritysi2>
    c630:	e2600000 	rsb	r0, r0, #0
    c634:	e2000102 	and	r0, r0, #-2147483648	@ 0x80000000
    c638:	e1800004 	orr	r0, r0, r4
    c63c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c640:	e3a02fa3 	mov	r2, #652	@ 0x28c
    c644:	e59f1014 	ldr	r1, [pc, #20]	@ c660 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0xa4>
    c648:	e59f0014 	ldr	r0, [pc, #20]	@ c664 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0xa8>
    c64c:	eb000c34 	bl	f724 <assertion_failed>
    c650:	e59f2010 	ldr	r2, [pc, #16]	@ c668 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0xac>
    c654:	e59f1004 	ldr	r1, [pc, #4]	@ c660 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0xa4>
    c658:	e59f000c 	ldr	r0, [pc, #12]	@ c66c <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0xb0>
    c65c:	eb000c30 	bl	f724 <assertion_failed>
    c660:	0001cc0c 	.word	0x0001cc0c
    c664:	0001cfb0 	.word	0x0001cfb0
    c668:	0000028d 	.word	0x0000028d
    c66c:	0001ce00 	.word	0x0001ce00

0000c670 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>:
    c670:	e5d030b8 	ldrb	r3, [r0, #184]	@ 0xb8
    c674:	e92d4070 	push	{r4, r5, r6, lr}
    c678:	e1a0c000 	mov	ip, r0
    c67c:	e1a05001 	mov	r5, r1
    c680:	e3530006 	cmp	r3, #6
    c684:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c688:	ea000035 	b	c764 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xf4>
    c68c:	0000c6e4 	.word	0x0000c6e4
    c690:	0000c6d8 	.word	0x0000c6d8
    c694:	0000c6a8 	.word	0x0000c6a8
    c698:	0000c6a8 	.word	0x0000c6a8
    c69c:	0000c764 	.word	0x0000c764
    c6a0:	0000c764 	.word	0x0000c764
    c6a4:	0000c6f4 	.word	0x0000c6f4
    c6a8:	e5923000 	ldr	r3, [r2]
    c6ac:	e1a03403 	lsl	r3, r3, #8
    c6b0:	e5dc2008 	ldrb	r2, [ip, #8]
    c6b4:	e2422001 	sub	r2, r2, #1
    c6b8:	e3520004 	cmp	r2, #4
    c6bc:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    c6c0:	ea00002b 	b	c774 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x104>
    c6c4:	0000c714 	.word	0x0000c714
    c6c8:	0000c708 	.word	0x0000c708
    c6cc:	0000c708 	.word	0x0000c708
    c6d0:	0000c738 	.word	0x0000c738
    c6d4:	0000c720 	.word	0x0000c720
    c6d8:	e1d230f0 	ldrsh	r3, [r2]
    c6dc:	e1a03803 	lsl	r3, r3, #16
    c6e0:	eafffff2 	b	c6b0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x40>
    c6e4:	e5d23000 	ldrb	r3, [r2]
    c6e8:	e2433080 	sub	r3, r3, #128	@ 0x80
    c6ec:	e1a03c03 	lsl	r3, r3, #24
    c6f0:	eaffffee 	b	c6b0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x40>
    c6f4:	e1a01002 	mov	r1, r2
    c6f8:	e1a00005 	mov	r0, r5
    c6fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    c700:	e59c20c0 	ldr	r2, [ip, #192]	@ 0xc0
    c704:	ea00278c 	b	1653c <memcpy>
    c708:	e1a03443 	asr	r3, r3, #8
    c70c:	e5853000 	str	r3, [r5]
    c710:	e8bd8070 	pop	{r4, r5, r6, pc}
    c714:	e1a03843 	asr	r3, r3, #16
    c718:	e1c530b0 	strh	r3, [r5]
    c71c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c720:	e1a04223 	lsr	r4, r3, #4
    c724:	e1a00004 	mov	r0, r4
    c728:	eb003731 	bl	1a3f4 <__paritysi2>
    c72c:	e1843f80 	orr	r3, r4, r0, lsl #31
    c730:	e5853000 	str	r3, [r5]
    c734:	e8bd8070 	pop	{r4, r5, r6, pc}
    c738:	e59c2034 	ldr	r2, [ip, #52]	@ 0x34
    c73c:	e2931102 	adds	r1, r3, #-2147483648	@ 0x80000000
    c740:	e1a03fc3 	asr	r3, r3, #31
    c744:	e2a33000 	adc	r3, r3, #0
    c748:	e0030392 	mul	r3, r2, r3
    c74c:	e1a0cfc2 	asr	ip, r2, #31
    c750:	e0233c91 	mla	r3, r1, ip, r3
    c754:	e0802192 	umull	r2, r0, r2, r1
    c758:	e0833000 	add	r3, r3, r0
    c75c:	e5853000 	str	r3, [r5]
    c760:	e8bd8070 	pop	{r4, r5, r6, pc}
    c764:	e59f2018 	ldr	r2, [pc, #24]	@ c784 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x114>
    c768:	e59f1018 	ldr	r1, [pc, #24]	@ c788 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x118>
    c76c:	e59f0018 	ldr	r0, [pc, #24]	@ c78c <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x11c>
    c770:	eb000beb 	bl	f724 <assertion_failed>
    c774:	e59f2014 	ldr	r2, [pc, #20]	@ c790 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x120>
    c778:	e59f1008 	ldr	r1, [pc, #8]	@ c788 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x118>
    c77c:	e59f0008 	ldr	r0, [pc, #8]	@ c78c <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x11c>
    c780:	eb000be7 	bl	f724 <assertion_failed>
    c784:	000002c5 	.word	0x000002c5
    c788:	0001cc0c 	.word	0x0001cc0c
    c78c:	0001ced0 	.word	0x0001ced0
    c790:	000002ed 	.word	0x000002ed

0000c794 <CSoundBaseDevice::GetQueueBytesFree()>:
    c794:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
    c798:	e92d4010 	push	{r4, lr}
    c79c:	e3530001 	cmp	r3, #1
    c7a0:	9a00000c 	bls	c7d8 <CSoundBaseDevice::GetQueueBytesFree()+0x44>
    c7a4:	e59020cc 	ldr	r2, [r0, #204]	@ 0xcc
    c7a8:	e1530002 	cmp	r3, r2
    c7ac:	9a00000d 	bls	c7e8 <CSoundBaseDevice::GetQueueBytesFree()+0x54>
    c7b0:	e59010d0 	ldr	r1, [r0, #208]	@ 0xd0
    c7b4:	e1530001 	cmp	r3, r1
    c7b8:	9a00000e 	bls	c7f8 <CSoundBaseDevice::GetQueueBytesFree()+0x64>
    c7bc:	e1520001 	cmp	r2, r1
    c7c0:	20833001 	addcs	r3, r3, r1
    c7c4:	22433001 	subcs	r3, r3, #1
    c7c8:	32411001 	subcc	r1, r1, #1
    c7cc:	20430002 	subcs	r0, r3, r2
    c7d0:	30410002 	subcc	r0, r1, r2
    c7d4:	e8bd8010 	pop	{r4, pc}
    c7d8:	e3a02fd2 	mov	r2, #840	@ 0x348
    c7dc:	e59f1024 	ldr	r1, [pc, #36]	@ c808 <CSoundBaseDevice::GetQueueBytesFree()+0x74>
    c7e0:	e59f0024 	ldr	r0, [pc, #36]	@ c80c <CSoundBaseDevice::GetQueueBytesFree()+0x78>
    c7e4:	eb000bce 	bl	f724 <assertion_failed>
    c7e8:	e59f2020 	ldr	r2, [pc, #32]	@ c810 <CSoundBaseDevice::GetQueueBytesFree()+0x7c>
    c7ec:	e59f1014 	ldr	r1, [pc, #20]	@ c808 <CSoundBaseDevice::GetQueueBytesFree()+0x74>
    c7f0:	e59f001c 	ldr	r0, [pc, #28]	@ c814 <CSoundBaseDevice::GetQueueBytesFree()+0x80>
    c7f4:	eb000bca 	bl	f724 <assertion_failed>
    c7f8:	e59f2018 	ldr	r2, [pc, #24]	@ c818 <CSoundBaseDevice::GetQueueBytesFree()+0x84>
    c7fc:	e59f1004 	ldr	r1, [pc, #4]	@ c808 <CSoundBaseDevice::GetQueueBytesFree()+0x74>
    c800:	e59f0014 	ldr	r0, [pc, #20]	@ c81c <CSoundBaseDevice::GetQueueBytesFree()+0x88>
    c804:	eb000bc6 	bl	f724 <assertion_failed>
    c808:	0001cc0c 	.word	0x0001cc0c
    c80c:	0001ce24 	.word	0x0001ce24
    c810:	00000349 	.word	0x00000349
    c814:	0001ce38 	.word	0x0001ce38
    c818:	0000034a 	.word	0x0000034a
    c81c:	0001ce50 	.word	0x0001ce50

0000c820 <CSoundBaseDevice::GetQueueBytesAvail()>:
    c820:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
    c824:	e92d4010 	push	{r4, lr}
    c828:	e3530001 	cmp	r3, #1
    c82c:	9a00000a 	bls	c85c <CSoundBaseDevice::GetQueueBytesAvail()+0x3c>
    c830:	e59020cc 	ldr	r2, [r0, #204]	@ 0xcc
    c834:	e1530002 	cmp	r3, r2
    c838:	9a00000b 	bls	c86c <CSoundBaseDevice::GetQueueBytesAvail()+0x4c>
    c83c:	e59000d0 	ldr	r0, [r0, #208]	@ 0xd0
    c840:	e1530000 	cmp	r3, r0
    c844:	9a00000c 	bls	c87c <CSoundBaseDevice::GetQueueBytesAvail()+0x5c>
    c848:	e1520000 	cmp	r2, r0
    c84c:	30833002 	addcc	r3, r3, r2
    c850:	30430000 	subcc	r0, r3, r0
    c854:	20420000 	subcs	r0, r2, r0
    c858:	e8bd8010 	pop	{r4, pc}
    c85c:	e59f2028 	ldr	r2, [pc, #40]	@ c88c <CSoundBaseDevice::GetQueueBytesAvail()+0x6c>
    c860:	e59f1028 	ldr	r1, [pc, #40]	@ c890 <CSoundBaseDevice::GetQueueBytesAvail()+0x70>
    c864:	e59f0028 	ldr	r0, [pc, #40]	@ c894 <CSoundBaseDevice::GetQueueBytesAvail()+0x74>
    c868:	eb000bad 	bl	f724 <assertion_failed>
    c86c:	e59f2024 	ldr	r2, [pc, #36]	@ c898 <CSoundBaseDevice::GetQueueBytesAvail()+0x78>
    c870:	e59f1018 	ldr	r1, [pc, #24]	@ c890 <CSoundBaseDevice::GetQueueBytesAvail()+0x70>
    c874:	e59f0020 	ldr	r0, [pc, #32]	@ c89c <CSoundBaseDevice::GetQueueBytesAvail()+0x7c>
    c878:	eb000ba9 	bl	f724 <assertion_failed>
    c87c:	e3a02fd6 	mov	r2, #856	@ 0x358
    c880:	e59f1008 	ldr	r1, [pc, #8]	@ c890 <CSoundBaseDevice::GetQueueBytesAvail()+0x70>
    c884:	e59f0014 	ldr	r0, [pc, #20]	@ c8a0 <CSoundBaseDevice::GetQueueBytesAvail()+0x80>
    c888:	eb000ba5 	bl	f724 <assertion_failed>
    c88c:	00000356 	.word	0x00000356
    c890:	0001cc0c 	.word	0x0001cc0c
    c894:	0001ce24 	.word	0x0001ce24
    c898:	00000357 	.word	0x00000357
    c89c:	0001ce38 	.word	0x0001ce38
    c8a0:	0001ce50 	.word	0x0001ce50

0000c8a4 <CSoundBaseDevice::GetQueueFramesAvail()>:
    c8a4:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
    c8a8:	e92d4070 	push	{r4, r5, r6, lr}
    c8ac:	e3530000 	cmp	r3, #0
    c8b0:	0a000013 	beq	c904 <CSoundBaseDevice::GetQueueFramesAvail()+0x60>
    c8b4:	e59030dc 	ldr	r3, [r0, #220]	@ 0xdc
    c8b8:	e1a04000 	mov	r4, r0
    c8bc:	e3530000 	cmp	r3, #0
    c8c0:	1a000005 	bne	c8dc <CSoundBaseDevice::GetQueueFramesAvail()+0x38>
    c8c4:	ebffffd5 	bl	c820 <CSoundBaseDevice::GetQueueBytesAvail()>
    c8c8:	e1a05000 	mov	r5, r0
    c8cc:	e1a00005 	mov	r0, r5
    c8d0:	e5941020 	ldr	r1, [r4, #32]
    c8d4:	eb003633 	bl	1a1a8 <__udivsi3>
    c8d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c8dc:	e1a00003 	mov	r0, r3
    c8e0:	eb002bea 	bl	17890 <EnterCritical>
    c8e4:	e1a00004 	mov	r0, r4
    c8e8:	ebffffcc 	bl	c820 <CSoundBaseDevice::GetQueueBytesAvail()>
    c8ec:	e59430dc 	ldr	r3, [r4, #220]	@ 0xdc
    c8f0:	e1a05000 	mov	r5, r0
    c8f4:	e3530000 	cmp	r3, #0
    c8f8:	0afffff3 	beq	c8cc <CSoundBaseDevice::GetQueueFramesAvail()+0x28>
    c8fc:	eb002c0d 	bl	17938 <LeaveCritical>
    c900:	eafffff1 	b	c8cc <CSoundBaseDevice::GetQueueFramesAvail()+0x28>
    c904:	e3a02f61 	mov	r2, #388	@ 0x184
    c908:	e59f1004 	ldr	r1, [pc, #4]	@ c914 <CSoundBaseDevice::GetQueueFramesAvail()+0x70>
    c90c:	e59f0004 	ldr	r0, [pc, #4]	@ c918 <CSoundBaseDevice::GetQueueFramesAvail()+0x74>
    c910:	eb000b83 	bl	f724 <assertion_failed>
    c914:	0001cc0c 	.word	0x0001cc0c
    c918:	0001cd68 	.word	0x0001cd68

0000c91c <CSoundBaseDevice::Enqueue(void const*, unsigned int)>:
    c91c:	e3510000 	cmp	r1, #0
    c920:	e92d4010 	push	{r4, lr}
    c924:	0a000012 	beq	c974 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x58>
    c928:	e590c0c8 	ldr	ip, [r0, #200]	@ 0xc8
    c92c:	e35c0000 	cmp	ip, #0
    c930:	0a000013 	beq	c984 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x68>
    c934:	e3520000 	cmp	r2, #0
    c938:	0a000015 	beq	c994 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x78>
    c93c:	e59030cc 	ldr	r3, [r0, #204]	@ 0xcc
    c940:	e0812002 	add	r2, r1, r2
    c944:	e4d1e001 	ldrb	lr, [r1], #1
    c948:	e7cce003 	strb	lr, [ip, r3]
    c94c:	e59030cc 	ldr	r3, [r0, #204]	@ 0xcc
    c950:	e590c028 	ldr	ip, [r0, #40]	@ 0x28
    c954:	e2833001 	add	r3, r3, #1
    c958:	e153000c 	cmp	r3, ip
    c95c:	03a03000 	moveq	r3, #0
    c960:	e1520001 	cmp	r2, r1
    c964:	e58030cc 	str	r3, [r0, #204]	@ 0xcc
    c968:	08bd8010 	popeq	{r4, pc}
    c96c:	e590c0c8 	ldr	ip, [r0, #200]	@ 0xc8
    c970:	eafffff3 	b	c944 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x28>
    c974:	e59f2028 	ldr	r2, [pc, #40]	@ c9a4 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x88>
    c978:	e59f1028 	ldr	r1, [pc, #40]	@ c9a8 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x8c>
    c97c:	e59f0028 	ldr	r0, [pc, #40]	@ c9ac <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x90>
    c980:	eb000b67 	bl	f724 <assertion_failed>
    c984:	e59f2024 	ldr	r2, [pc, #36]	@ c9b0 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x94>
    c988:	e59f1018 	ldr	r1, [pc, #24]	@ c9a8 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x8c>
    c98c:	e59f0020 	ldr	r0, [pc, #32]	@ c9b4 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x98>
    c990:	eb000b63 	bl	f724 <assertion_failed>
    c994:	e3a02fda 	mov	r2, #872	@ 0x368
    c998:	e59f1008 	ldr	r1, [pc, #8]	@ c9a8 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x8c>
    c99c:	e59f0014 	ldr	r0, [pc, #20]	@ c9b8 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x9c>
    c9a0:	eb000b5f 	bl	f724 <assertion_failed>
    c9a4:	00000365 	.word	0x00000365
    c9a8:	0001cc0c 	.word	0x0001cc0c
    c9ac:	0001ce6c 	.word	0x0001ce6c
    c9b0:	00000366 	.word	0x00000366
    c9b4:	0001ce74 	.word	0x0001ce74
    c9b8:	0001ce84 	.word	0x0001ce84

0000c9bc <CSoundBaseDevice::Write(void const*, unsigned int)>:
    c9bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9c0:	e5d030b8 	ldrb	r3, [r0, #184]	@ 0xb8
    c9c4:	e24dd08c 	sub	sp, sp, #140	@ 0x8c
    c9c8:	e3530005 	cmp	r3, #5
    c9cc:	8a0000a3 	bhi	cc60 <CSoundBaseDevice::Write(void const*, unsigned int)+0x2a4>
    c9d0:	e3510000 	cmp	r1, #0
    c9d4:	e1a05001 	mov	r5, r1
    c9d8:	0a0000a4 	beq	cc70 <CSoundBaseDevice::Write(void const*, unsigned int)+0x2b4>
    c9dc:	e1a04000 	mov	r4, r0
    c9e0:	e59000dc 	ldr	r0, [r0, #220]	@ 0xdc
    c9e4:	e1a0b002 	mov	fp, r2
    c9e8:	e3500000 	cmp	r0, #0
    c9ec:	1a000081 	bne	cbf8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x23c>
    c9f0:	e5d40008 	ldrb	r0, [r4, #8]
    c9f4:	e59410bc 	ldr	r1, [r4, #188]	@ 0xbc
    c9f8:	e1500003 	cmp	r0, r3
    c9fc:	e5947010 	ldr	r7, [r4, #16]
    ca00:	0a000037 	beq	cae4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x128>
    ca04:	e3570002 	cmp	r7, #2
    ca08:	0a00003c 	beq	cb00 <CSoundBaseDevice::Write(void const*, unsigned int)+0x144>
    ca0c:	e1570001 	cmp	r7, r1
    ca10:	9a00007f 	bls	cc14 <CSoundBaseDevice::Write(void const*, unsigned int)+0x258>
    ca14:	e047a001 	sub	sl, r7, r1
    ca18:	e1a07001 	mov	r7, r1
    ca1c:	e594301c 	ldr	r3, [r4, #28]
    ca20:	e0030a93 	mul	r3, r3, sl
    ca24:	e58d3000 	str	r3, [sp]
    ca28:	e59430c4 	ldr	r3, [r4, #196]	@ 0xc4
    ca2c:	e3a08000 	mov	r8, #0
    ca30:	e15b0003 	cmp	fp, r3
    ca34:	3a000024 	bcc	cacc <CSoundBaseDevice::Write(void const*, unsigned int)+0x110>
    ca38:	e2843038 	add	r3, r4, #56	@ 0x38
    ca3c:	e58d3004 	str	r3, [sp, #4]
    ca40:	e1a00004 	mov	r0, r4
    ca44:	ebffff52 	bl	c794 <CSoundBaseDevice::GetQueueBytesFree()>
    ca48:	e5942020 	ldr	r2, [r4, #32]
    ca4c:	e1500002 	cmp	r0, r2
    ca50:	3a00001d 	bcc	cacc <CSoundBaseDevice::Write(void const*, unsigned int)+0x110>
    ca54:	e3570000 	cmp	r7, #0
    ca58:	028d9008 	addeq	r9, sp, #8
    ca5c:	01a0a009 	moveq	sl, r9
    ca60:	0a00000d 	beq	ca9c <CSoundBaseDevice::Write(void const*, unsigned int)+0xe0>
    ca64:	e28d9008 	add	r9, sp, #8
    ca68:	e3a06000 	mov	r6, #0
    ca6c:	e1a0a009 	mov	sl, r9
    ca70:	e1a02005 	mov	r2, r5
    ca74:	e1a0100a 	mov	r1, sl
    ca78:	e1a00004 	mov	r0, r4
    ca7c:	ebfffefb 	bl	c670 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
    ca80:	e2866001 	add	r6, r6, #1
    ca84:	e594201c 	ldr	r2, [r4, #28]
    ca88:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    ca8c:	e1560007 	cmp	r6, r7
    ca90:	e08aa002 	add	sl, sl, r2
    ca94:	e0855003 	add	r5, r5, r3
    ca98:	1afffff4 	bne	ca70 <CSoundBaseDevice::Write(void const*, unsigned int)+0xb4>
    ca9c:	e59d3000 	ldr	r3, [sp]
    caa0:	e3530000 	cmp	r3, #0
    caa4:	1a00004a 	bne	cbd4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x218>
    caa8:	e5942020 	ldr	r2, [r4, #32]
    caac:	e1a01009 	mov	r1, r9
    cab0:	e1a00004 	mov	r0, r4
    cab4:	ebffff98 	bl	c91c <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
    cab8:	e59420c4 	ldr	r2, [r4, #196]	@ 0xc4
    cabc:	e04bb002 	sub	fp, fp, r2
    cac0:	e152000b 	cmp	r2, fp
    cac4:	e0888002 	add	r8, r8, r2
    cac8:	9affffdc 	bls	ca40 <CSoundBaseDevice::Write(void const*, unsigned int)+0x84>
    cacc:	e59430dc 	ldr	r3, [r4, #220]	@ 0xdc
    cad0:	e3530000 	cmp	r3, #0
    cad4:	1a000043 	bne	cbe8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x22c>
    cad8:	e1a00008 	mov	r0, r8
    cadc:	e28dd08c 	add	sp, sp, #140	@ 0x8c
    cae0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cae4:	e1570001 	cmp	r7, r1
    cae8:	1affffc5 	bne	ca04 <CSoundBaseDevice::Write(void const*, unsigned int)+0x48>
    caec:	e5d43018 	ldrb	r3, [r4, #24]
    caf0:	e3530000 	cmp	r3, #0
    caf4:	0a000061 	beq	cc80 <CSoundBaseDevice::Write(void const*, unsigned int)+0x2c4>
    caf8:	e3570002 	cmp	r7, #2
    cafc:	1a000044 	bne	cc14 <CSoundBaseDevice::Write(void const*, unsigned int)+0x258>
    cb00:	e3510002 	cmp	r1, #2
    cb04:	8a00003e 	bhi	cc04 <CSoundBaseDevice::Write(void const*, unsigned int)+0x248>
    cb08:	e59430c4 	ldr	r3, [r4, #196]	@ 0xc4
    cb0c:	e3a08000 	mov	r8, #0
    cb10:	e153000b 	cmp	r3, fp
    cb14:	9a000016 	bls	cb74 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1b8>
    cb18:	eaffffeb 	b	cacc <CSoundBaseDevice::Write(void const*, unsigned int)+0x110>
    cb1c:	e1a02005 	mov	r2, r5
    cb20:	e1a00004 	mov	r0, r4
    cb24:	e28d1008 	add	r1, sp, #8
    cb28:	ebfffed0 	bl	c670 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
    cb2c:	e59430bc 	ldr	r3, [r4, #188]	@ 0xbc
    cb30:	e3530002 	cmp	r3, #2
    cb34:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    cb38:	e0855003 	add	r5, r5, r3
    cb3c:	0a000037 	beq	cc20 <CSoundBaseDevice::Write(void const*, unsigned int)+0x264>
    cb40:	e594201c 	ldr	r2, [r4, #28]
    cb44:	e28d1008 	add	r1, sp, #8
    cb48:	e0810002 	add	r0, r1, r2
    cb4c:	eb00267a 	bl	1653c <memcpy>
    cb50:	e1a00004 	mov	r0, r4
    cb54:	e5942020 	ldr	r2, [r4, #32]
    cb58:	e28d1008 	add	r1, sp, #8
    cb5c:	ebffff6e 	bl	c91c <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
    cb60:	e59430c4 	ldr	r3, [r4, #196]	@ 0xc4
    cb64:	e04bb003 	sub	fp, fp, r3
    cb68:	e153000b 	cmp	r3, fp
    cb6c:	e0888003 	add	r8, r8, r3
    cb70:	8affffd5 	bhi	cacc <CSoundBaseDevice::Write(void const*, unsigned int)+0x110>
    cb74:	e1a00004 	mov	r0, r4
    cb78:	ebffff05 	bl	c794 <CSoundBaseDevice::GetQueueBytesFree()>
    cb7c:	e5943020 	ldr	r3, [r4, #32]
    cb80:	e1500003 	cmp	r0, r3
    cb84:	3affffd0 	bcc	cacc <CSoundBaseDevice::Write(void const*, unsigned int)+0x110>
    cb88:	e5d43018 	ldrb	r3, [r4, #24]
    cb8c:	e3530000 	cmp	r3, #0
    cb90:	0affffe1 	beq	cb1c <CSoundBaseDevice::Write(void const*, unsigned int)+0x160>
    cb94:	e594101c 	ldr	r1, [r4, #28]
    cb98:	e1a02005 	mov	r2, r5
    cb9c:	e2813008 	add	r3, r1, #8
    cba0:	e08d1003 	add	r1, sp, r3
    cba4:	e1a00004 	mov	r0, r4
    cba8:	ebfffeb0 	bl	c670 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
    cbac:	e59430bc 	ldr	r3, [r4, #188]	@ 0xbc
    cbb0:	e3530002 	cmp	r3, #2
    cbb4:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    cbb8:	e0855003 	add	r5, r5, r3
    cbbc:	0a000020 	beq	cc44 <CSoundBaseDevice::Write(void const*, unsigned int)+0x288>
    cbc0:	e594201c 	ldr	r2, [r4, #28]
    cbc4:	e28d0008 	add	r0, sp, #8
    cbc8:	e0801002 	add	r1, r0, r2
    cbcc:	eb00265a 	bl	1653c <memcpy>
    cbd0:	eaffffde 	b	cb50 <CSoundBaseDevice::Write(void const*, unsigned int)+0x194>
    cbd4:	e1a0000a 	mov	r0, sl
    cbd8:	e1a02003 	mov	r2, r3
    cbdc:	e59d1004 	ldr	r1, [sp, #4]
    cbe0:	eb002655 	bl	1653c <memcpy>
    cbe4:	eaffffaf 	b	caa8 <CSoundBaseDevice::Write(void const*, unsigned int)+0xec>
    cbe8:	eb002b52 	bl	17938 <LeaveCritical>
    cbec:	e1a00008 	mov	r0, r8
    cbf0:	e28dd08c 	add	sp, sp, #140	@ 0x8c
    cbf4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbf8:	eb002b24 	bl	17890 <EnterCritical>
    cbfc:	e5d430b8 	ldrb	r3, [r4, #184]	@ 0xb8
    cc00:	eaffff7a 	b	c9f0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x34>
    cc04:	e3a03000 	mov	r3, #0
    cc08:	e3a07002 	mov	r7, #2
    cc0c:	e58d3000 	str	r3, [sp]
    cc10:	eaffff84 	b	ca28 <CSoundBaseDevice::Write(void const*, unsigned int)+0x6c>
    cc14:	e3a03000 	mov	r3, #0
    cc18:	e58d3000 	str	r3, [sp]
    cc1c:	eaffff81 	b	ca28 <CSoundBaseDevice::Write(void const*, unsigned int)+0x6c>
    cc20:	e594101c 	ldr	r1, [r4, #28]
    cc24:	e1a02005 	mov	r2, r5
    cc28:	e2813008 	add	r3, r1, #8
    cc2c:	e08d1003 	add	r1, sp, r3
    cc30:	e1a00004 	mov	r0, r4
    cc34:	ebfffe8d 	bl	c670 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
    cc38:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    cc3c:	e0855003 	add	r5, r5, r3
    cc40:	eaffffc2 	b	cb50 <CSoundBaseDevice::Write(void const*, unsigned int)+0x194>
    cc44:	e1a02005 	mov	r2, r5
    cc48:	e1a00004 	mov	r0, r4
    cc4c:	e28d1008 	add	r1, sp, #8
    cc50:	ebfffe86 	bl	c670 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
    cc54:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    cc58:	e0855003 	add	r5, r5, r3
    cc5c:	eaffffbb 	b	cb50 <CSoundBaseDevice::Write(void const*, unsigned int)+0x194>
    cc60:	e59f2054 	ldr	r2, [pc, #84]	@ ccbc <CSoundBaseDevice::Write(void const*, unsigned int)+0x300>
    cc64:	e59f1054 	ldr	r1, [pc, #84]	@ ccc0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x304>
    cc68:	e59f0054 	ldr	r0, [pc, #84]	@ ccc4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x308>
    cc6c:	eb000aac 	bl	f724 <assertion_failed>
    cc70:	e59f2050 	ldr	r2, [pc, #80]	@ ccc8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x30c>
    cc74:	e59f1044 	ldr	r1, [pc, #68]	@ ccc0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x304>
    cc78:	e59f004c 	ldr	r0, [pc, #76]	@ cccc <CSoundBaseDevice::Write(void const*, unsigned int)+0x310>
    cc7c:	eb000aa8 	bl	f724 <assertion_failed>
    cc80:	e1a00004 	mov	r0, r4
    cc84:	ebfffec2 	bl	c794 <CSoundBaseDevice::GetQueueBytesFree()>
    cc88:	e150000b 	cmp	r0, fp
    cc8c:	31a08000 	movcc	r8, r0
    cc90:	21a0800b 	movcs	r8, fp
    cc94:	e59410c4 	ldr	r1, [r4, #196]	@ 0xc4
    cc98:	e1a00008 	mov	r0, r8
    cc9c:	eb0035bc 	bl	1a394 <__aeabi_uidivmod>
    cca0:	e0588001 	subs	r8, r8, r1
    cca4:	0affff88 	beq	cacc <CSoundBaseDevice::Write(void const*, unsigned int)+0x110>
    cca8:	e1a02008 	mov	r2, r8
    ccac:	e1a01005 	mov	r1, r5
    ccb0:	e1a00004 	mov	r0, r4
    ccb4:	ebffff18 	bl	c91c <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
    ccb8:	eaffff83 	b	cacc <CSoundBaseDevice::Write(void const*, unsigned int)+0x110>
    ccbc:	00000109 	.word	0x00000109
    ccc0:	0001cc0c 	.word	0x0001cc0c
    ccc4:	0001ce90 	.word	0x0001ce90
    ccc8:	0000010b 	.word	0x0000010b
    cccc:	0001ceb4 	.word	0x0001ceb4

0000ccd0 <CSoundBaseDevice::Dequeue(void*, unsigned int)>:
    ccd0:	e3510000 	cmp	r1, #0
    ccd4:	e92d4010 	push	{r4, lr}
    ccd8:	0a000012 	beq	cd28 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x58>
    ccdc:	e590c0c8 	ldr	ip, [r0, #200]	@ 0xc8
    cce0:	e35c0000 	cmp	ip, #0
    cce4:	0a000013 	beq	cd38 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x68>
    cce8:	e3520000 	cmp	r2, #0
    ccec:	0a000015 	beq	cd48 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x78>
    ccf0:	e59030d0 	ldr	r3, [r0, #208]	@ 0xd0
    ccf4:	e0812002 	add	r2, r1, r2
    ccf8:	e7dc3003 	ldrb	r3, [ip, r3]
    ccfc:	e4c13001 	strb	r3, [r1], #1
    cd00:	e59030d0 	ldr	r3, [r0, #208]	@ 0xd0
    cd04:	e590c028 	ldr	ip, [r0, #40]	@ 0x28
    cd08:	e2833001 	add	r3, r3, #1
    cd0c:	e153000c 	cmp	r3, ip
    cd10:	03a03000 	moveq	r3, #0
    cd14:	e1520001 	cmp	r2, r1
    cd18:	e58030d0 	str	r3, [r0, #208]	@ 0xd0
    cd1c:	08bd8010 	popeq	{r4, pc}
    cd20:	e590c0c8 	ldr	ip, [r0, #200]	@ 0xc8
    cd24:	eafffff3 	b	ccf8 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x28>
    cd28:	e59f2028 	ldr	r2, [pc, #40]	@ cd58 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x88>
    cd2c:	e59f1028 	ldr	r1, [pc, #40]	@ cd5c <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x8c>
    cd30:	e59f0028 	ldr	r0, [pc, #40]	@ cd60 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x90>
    cd34:	eb000a7a 	bl	f724 <assertion_failed>
    cd38:	e3a02fde 	mov	r2, #888	@ 0x378
    cd3c:	e59f1018 	ldr	r1, [pc, #24]	@ cd5c <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x8c>
    cd40:	e59f001c 	ldr	r0, [pc, #28]	@ cd64 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x94>
    cd44:	eb000a76 	bl	f724 <assertion_failed>
    cd48:	e59f2018 	ldr	r2, [pc, #24]	@ cd68 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x98>
    cd4c:	e59f1008 	ldr	r1, [pc, #8]	@ cd5c <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x8c>
    cd50:	e59f0014 	ldr	r0, [pc, #20]	@ cd6c <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x9c>
    cd54:	eb000a72 	bl	f724 <assertion_failed>
    cd58:	00000377 	.word	0x00000377
    cd5c:	0001cc0c 	.word	0x0001cc0c
    cd60:	0001ce6c 	.word	0x0001ce6c
    cd64:	0001ce74 	.word	0x0001ce74
    cd68:	0000037a 	.word	0x0000037a
    cd6c:	0001ce84 	.word	0x0001ce84

0000cd70 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>:
    cd70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd74:	e2515000 	subs	r5, r1, #0
    cd78:	e24dd00c 	sub	sp, sp, #12
    cd7c:	e58d2000 	str	r2, [sp]
    cd80:	0a000076 	beq	cf60 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1f0>
    cd84:	e59d3000 	ldr	r3, [sp]
    cd88:	e3530000 	cmp	r3, #0
    cd8c:	0a000077 	beq	cf70 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x200>
    cd90:	e1a04000 	mov	r4, r0
    cd94:	e59d0000 	ldr	r0, [sp]
    cd98:	e5941010 	ldr	r1, [r4, #16]
    cd9c:	eb00357c 	bl	1a394 <__aeabi_uidivmod>
    cda0:	e3510000 	cmp	r1, #0
    cda4:	1a000075 	bne	cf80 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x210>
    cda8:	e59400dc 	ldr	r0, [r4, #220]	@ 0xdc
    cdac:	e594901c 	ldr	r9, [r4, #28]
    cdb0:	e59d3000 	ldr	r3, [sp]
    cdb4:	e3500000 	cmp	r0, #0
    cdb8:	e0090399 	mul	r9, r9, r3
    cdbc:	1a000023 	bne	ce50 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xe0>
    cdc0:	e1a00004 	mov	r0, r4
    cdc4:	ebfffe95 	bl	c820 <CSoundBaseDevice::GetQueueBytesAvail()>
    cdc8:	e1500009 	cmp	r0, r9
    cdcc:	31a07000 	movcc	r7, r0
    cdd0:	21a07009 	movcs	r7, r9
    cdd4:	e3570000 	cmp	r7, #0
    cdd8:	01a0b005 	moveq	fp, r5
    cddc:	e58d0004 	str	r0, [sp, #4]
    cde0:	1a000029 	bne	ce8c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x11c>
    cde4:	e1570009 	cmp	r7, r9
    cde8:	35942020 	ldrcc	r2, [r4, #32]
    cdec:	3284a038 	addcc	sl, r4, #56	@ 0x38
    cdf0:	2a000007 	bcs	ce14 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xa4>
    cdf4:	e1a0000b 	mov	r0, fp
    cdf8:	e1a0100a 	mov	r1, sl
    cdfc:	eb0025ce 	bl	1653c <memcpy>
    ce00:	e5942020 	ldr	r2, [r4, #32]
    ce04:	e0877002 	add	r7, r7, r2
    ce08:	e1590007 	cmp	r9, r7
    ce0c:	e08bb002 	add	fp, fp, r2
    ce10:	8afffff7 	bhi	cdf4 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x84>
    ce14:	e5d43008 	ldrb	r3, [r4, #8]
    ce18:	e3530005 	cmp	r3, #5
    ce1c:	0a000023 	beq	ceb0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x140>
    ce20:	e59430d4 	ldr	r3, [r4, #212]	@ 0xd4
    ce24:	e3530000 	cmp	r3, #0
    ce28:	0a000005 	beq	ce44 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xd4>
    ce2c:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
    ce30:	e59d1004 	ldr	r1, [sp, #4]
    ce34:	e1520001 	cmp	r2, r1
    ce38:	9a000001 	bls	ce44 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xd4>
    ce3c:	e59400d8 	ldr	r0, [r4, #216]	@ 0xd8
    ce40:	e12fff33 	blx	r3
    ce44:	e59d0000 	ldr	r0, [sp]
    ce48:	e28dd00c 	add	sp, sp, #12
    ce4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce50:	eb002a8e 	bl	17890 <EnterCritical>
    ce54:	e1a00004 	mov	r0, r4
    ce58:	ebfffe70 	bl	c820 <CSoundBaseDevice::GetQueueBytesAvail()>
    ce5c:	e1590000 	cmp	r9, r0
    ce60:	31a07009 	movcc	r7, r9
    ce64:	21a07000 	movcs	r7, r0
    ce68:	e3570000 	cmp	r7, #0
    ce6c:	01a0b005 	moveq	fp, r5
    ce70:	e58d0004 	str	r0, [sp, #4]
    ce74:	1a000004 	bne	ce8c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x11c>
    ce78:	e59430dc 	ldr	r3, [r4, #220]	@ 0xdc
    ce7c:	e3530000 	cmp	r3, #0
    ce80:	0affffd7 	beq	cde4 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x74>
    ce84:	eb002aab 	bl	17938 <LeaveCritical>
    ce88:	eaffffd5 	b	cde4 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x74>
    ce8c:	e1a02007 	mov	r2, r7
    ce90:	e1a01005 	mov	r1, r5
    ce94:	e1a00004 	mov	r0, r4
    ce98:	ebffff8c 	bl	ccd0 <CSoundBaseDevice::Dequeue(void*, unsigned int)>
    ce9c:	e59d3004 	ldr	r3, [sp, #4]
    cea0:	e085b007 	add	fp, r5, r7
    cea4:	e0433007 	sub	r3, r3, r7
    cea8:	e58d3004 	str	r3, [sp, #4]
    ceac:	eafffff1 	b	ce78 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x108>
    ceb0:	e3a07000 	mov	r7, #0
    ceb4:	e594b010 	ldr	fp, [r4, #16]
    ceb8:	e08b310b 	add	r3, fp, fp, lsl #2
    cebc:	e1b03183 	lsls	r3, r3, #3
    cec0:	11a0a005 	movne	sl, r5
    cec4:	13a09000 	movne	r9, #0
    cec8:	0a00001a 	beq	cf38 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1c8>
    cecc:	e1a0100b 	mov	r1, fp
    ced0:	e1a00009 	mov	r0, r9
    ced4:	eb0034b3 	bl	1a1a8 <__udivsi3>
    ced8:	e08431a0 	add	r3, r4, r0, lsr #3
    cedc:	e5d330e0 	ldrb	r3, [r3, #224]	@ 0xe0
    cee0:	e2000007 	and	r0, r0, #7
    cee4:	e1a03033 	lsr	r3, r3, r0
    cee8:	e3130001 	tst	r3, #1
    ceec:	0a000007 	beq	cf10 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1a0>
    cef0:	e59a3000 	ldr	r3, [sl]
    cef4:	e3c36102 	bic	r6, r3, #-2147483648	@ 0x80000000
    cef8:	e3868101 	orr	r8, r6, #1073741824	@ 0x40000000
    cefc:	e1a00008 	mov	r0, r8
    cf00:	eb00353b 	bl	1a3f4 <__paritysi2>
    cf04:	e3500000 	cmp	r0, #0
    cf08:	13868103 	orrne	r8, r6, #-1073741824	@ 0xc0000000
    cf0c:	e58a8000 	str	r8, [sl]
    cf10:	e15b0009 	cmp	fp, r9
    cf14:	859a3000 	ldrhi	r3, [sl]
    cf18:	e2899001 	add	r9, r9, #1
    cf1c:	8383300f 	orrhi	r3, r3, #15
    cf20:	858a3000 	strhi	r3, [sl]
    cf24:	e594b010 	ldr	fp, [r4, #16]
    cf28:	e28aa004 	add	sl, sl, #4
    cf2c:	e08b310b 	add	r3, fp, fp, lsl #2
    cf30:	e1590183 	cmp	r9, r3, lsl #3
    cf34:	3affffe4 	bcc	cecc <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x15c>
    cf38:	e59d3000 	ldr	r3, [sp]
    cf3c:	e2877d06 	add	r7, r7, #384	@ 0x180
    cf40:	e1530007 	cmp	r3, r7
    cf44:	e2855c06 	add	r5, r5, #1536	@ 0x600
    cf48:	8affffda 	bhi	ceb8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x148>
    cf4c:	0affffb3 	beq	ce20 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xb0>
    cf50:	e59f2038 	ldr	r2, [pc, #56]	@ cf90 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x220>
    cf54:	e59f1038 	ldr	r1, [pc, #56]	@ cf94 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x224>
    cf58:	e59f0038 	ldr	r0, [pc, #56]	@ cf98 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x228>
    cf5c:	eb0009f0 	bl	f724 <assertion_failed>
    cf60:	e59f2034 	ldr	r2, [pc, #52]	@ cf9c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x22c>
    cf64:	e59f1028 	ldr	r1, [pc, #40]	@ cf94 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x224>
    cf68:	e59f0030 	ldr	r0, [pc, #48]	@ cfa0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x230>
    cf6c:	eb0009ec 	bl	f724 <assertion_failed>
    cf70:	e59f202c 	ldr	r2, [pc, #44]	@ cfa4 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x234>
    cf74:	e59f1018 	ldr	r1, [pc, #24]	@ cf94 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x224>
    cf78:	e59f0028 	ldr	r0, [pc, #40]	@ cfa8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x238>
    cf7c:	eb0009e8 	bl	f724 <assertion_failed>
    cf80:	e3a02fbe 	mov	r2, #760	@ 0x2f8
    cf84:	e59f1008 	ldr	r1, [pc, #8]	@ cf94 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x224>
    cf88:	e59f001c 	ldr	r0, [pc, #28]	@ cfac <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x23c>
    cf8c:	eb0009e4 	bl	f724 <assertion_failed>
    cf90:	0000033a 	.word	0x0000033a
    cf94:	0001cc0c 	.word	0x0001cc0c
    cf98:	0001cf08 	.word	0x0001cf08
    cf9c:	000002f5 	.word	0x000002f5
    cfa0:	0001cec4 	.word	0x0001cec4
    cfa4:	000002f7 	.word	0x000002f7
    cfa8:	0001ced4 	.word	0x0001ced4
    cfac:	0001cee4 	.word	0x0001cee4

0000cfb0 <CSoundBaseDevice::GetChunk(short*, unsigned int)>:
    cfb0:	e5d03008 	ldrb	r3, [r0, #8]
    cfb4:	e3530001 	cmp	r3, #1
    cfb8:	1a000000 	bne	cfc0 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x10>
    cfbc:	eaffff6b 	b	cd70 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>
    cfc0:	e92d4010 	push	{r4, lr}
    cfc4:	e59f2008 	ldr	r2, [pc, #8]	@ cfd4 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x24>
    cfc8:	e59f1008 	ldr	r1, [pc, #8]	@ cfd8 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x28>
    cfcc:	e59f0008 	ldr	r0, [pc, #8]	@ cfdc <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x2c>
    cfd0:	eb0009d3 	bl	f724 <assertion_failed>
    cfd4:	0000027b 	.word	0x0000027b
    cfd8:	0001cc0c 	.word	0x0001cc0c
    cfdc:	0001cf18 	.word	0x0001cf18

0000cfe0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)>:
    cfe0:	e5d03008 	ldrb	r3, [r0, #8]
    cfe4:	e2433002 	sub	r3, r3, #2
    cfe8:	e3530003 	cmp	r3, #3
    cfec:	8a000000 	bhi	cff4 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x14>
    cff0:	eaffff5e 	b	cd70 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>
    cff4:	e92d4010 	push	{r4, lr}
    cff8:	e59f2008 	ldr	r2, [pc, #8]	@ d008 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x28>
    cffc:	e59f1008 	ldr	r1, [pc, #8]	@ d00c <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x2c>
    d000:	e59f0008 	ldr	r0, [pc, #8]	@ d010 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x30>
    d004:	eb0009c6 	bl	f724 <assertion_failed>
    d008:	00000282 	.word	0x00000282
    d00c:	0001cc0c 	.word	0x0001cc0c
    d010:	0001cf3c 	.word	0x0001cf3c

0000d014 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>:
    d014:	e5d03008 	ldrb	r3, [r0, #8]
    d018:	e92d4010 	push	{r4, lr}
    d01c:	e3530002 	cmp	r3, #2
    d020:	0a000015 	beq	d07c <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x68>
    d024:	e3530003 	cmp	r3, #3
    d028:	0a00000c 	beq	d060 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x4c>
    d02c:	e3530001 	cmp	r3, #1
    d030:	1a000018 	bne	d098 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x84>
    d034:	e1d230f0 	ldrsh	r3, [r2]
    d038:	e1a03403 	lsl	r3, r3, #8
    d03c:	e5d020f0 	ldrb	r2, [r0, #240]	@ 0xf0
    d040:	e3520001 	cmp	r2, #1
    d044:	0a000009 	beq	d070 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x5c>
    d048:	9a00000e 	bls	d088 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x74>
    d04c:	e2422002 	sub	r2, r2, #2
    d050:	e3520001 	cmp	r2, #1
    d054:	8a000013 	bhi	d0a8 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x94>
    d058:	e5813000 	str	r3, [r1]
    d05c:	e8bd8010 	pop	{r4, pc}
    d060:	e5923000 	ldr	r3, [r2]
    d064:	e5d020f0 	ldrb	r2, [r0, #240]	@ 0xf0
    d068:	e3520001 	cmp	r2, #1
    d06c:	1afffff5 	bne	d048 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x34>
    d070:	e1a03423 	lsr	r3, r3, #8
    d074:	e1c130b0 	strh	r3, [r1]
    d078:	e8bd8010 	pop	{r4, pc}
    d07c:	e5923000 	ldr	r3, [r2]
    d080:	e3c334ff 	bic	r3, r3, #-16777216	@ 0xff000000
    d084:	eaffffec 	b	d03c <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x28>
    d088:	e1a03823 	lsr	r3, r3, #16
    d08c:	e2433080 	sub	r3, r3, #128	@ 0x80
    d090:	e5c13000 	strb	r3, [r1]
    d094:	e8bd8010 	pop	{r4, pc}
    d098:	e3a02e3d 	mov	r2, #976	@ 0x3d0
    d09c:	e59f1014 	ldr	r1, [pc, #20]	@ d0b8 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0xa4>
    d0a0:	e59f0014 	ldr	r0, [pc, #20]	@ d0bc <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0xa8>
    d0a4:	eb00099e 	bl	f724 <assertion_failed>
    d0a8:	e3a02ffa 	mov	r2, #1000	@ 0x3e8
    d0ac:	e59f1004 	ldr	r1, [pc, #4]	@ d0b8 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0xa4>
    d0b0:	e59f0004 	ldr	r0, [pc, #4]	@ d0bc <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0xa8>
    d0b4:	eb00099a 	bl	f724 <assertion_failed>
    d0b8:	0001cc0c 	.word	0x0001cc0c
    d0bc:	0001ced0 	.word	0x0001ced0

0000d0c0 <CSoundBaseDevice::GetReadQueueBytesFree()>:
    d0c0:	e59030e8 	ldr	r3, [r0, #232]	@ 0xe8
    d0c4:	e92d4010 	push	{r4, lr}
    d0c8:	e3530001 	cmp	r3, #1
    d0cc:	9a00000c 	bls	d104 <CSoundBaseDevice::GetReadQueueBytesFree()+0x44>
    d0d0:	e5902108 	ldr	r2, [r0, #264]	@ 0x108
    d0d4:	e1530002 	cmp	r3, r2
    d0d8:	9a00000d 	bls	d114 <CSoundBaseDevice::GetReadQueueBytesFree()+0x54>
    d0dc:	e590110c 	ldr	r1, [r0, #268]	@ 0x10c
    d0e0:	e1530001 	cmp	r3, r1
    d0e4:	9a00000e 	bls	d124 <CSoundBaseDevice::GetReadQueueBytesFree()+0x64>
    d0e8:	e1520001 	cmp	r2, r1
    d0ec:	20833001 	addcs	r3, r3, r1
    d0f0:	22433001 	subcs	r3, r3, #1
    d0f4:	32411001 	subcc	r1, r1, #1
    d0f8:	20430002 	subcs	r0, r3, r2
    d0fc:	30410002 	subcc	r0, r1, r2
    d100:	e8bd8010 	pop	{r4, pc}
    d104:	e59f2028 	ldr	r2, [pc, #40]	@ d134 <CSoundBaseDevice::GetReadQueueBytesFree()+0x74>
    d108:	e59f1028 	ldr	r1, [pc, #40]	@ d138 <CSoundBaseDevice::GetReadQueueBytesFree()+0x78>
    d10c:	e59f0028 	ldr	r0, [pc, #40]	@ d13c <CSoundBaseDevice::GetReadQueueBytesFree()+0x7c>
    d110:	eb000983 	bl	f724 <assertion_failed>
    d114:	e3a02e3f 	mov	r2, #1008	@ 0x3f0
    d118:	e59f1018 	ldr	r1, [pc, #24]	@ d138 <CSoundBaseDevice::GetReadQueueBytesFree()+0x78>
    d11c:	e59f001c 	ldr	r0, [pc, #28]	@ d140 <CSoundBaseDevice::GetReadQueueBytesFree()+0x80>
    d120:	eb00097f 	bl	f724 <assertion_failed>
    d124:	e59f2018 	ldr	r2, [pc, #24]	@ d144 <CSoundBaseDevice::GetReadQueueBytesFree()+0x84>
    d128:	e59f1008 	ldr	r1, [pc, #8]	@ d138 <CSoundBaseDevice::GetReadQueueBytesFree()+0x78>
    d12c:	e59f0014 	ldr	r0, [pc, #20]	@ d148 <CSoundBaseDevice::GetReadQueueBytesFree()+0x88>
    d130:	eb00097b 	bl	f724 <assertion_failed>
    d134:	000003ef 	.word	0x000003ef
    d138:	0001cc0c 	.word	0x0001cc0c
    d13c:	0001cfd0 	.word	0x0001cfd0
    d140:	0001cfe8 	.word	0x0001cfe8
    d144:	000003f1 	.word	0x000003f1
    d148:	0001d008 	.word	0x0001d008

0000d14c <CSoundBaseDevice::GetReadQueueBytesAvail()>:
    d14c:	e59030e8 	ldr	r3, [r0, #232]	@ 0xe8
    d150:	e92d4010 	push	{r4, lr}
    d154:	e3530001 	cmp	r3, #1
    d158:	9a00000a 	bls	d188 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x3c>
    d15c:	e5902108 	ldr	r2, [r0, #264]	@ 0x108
    d160:	e1530002 	cmp	r3, r2
    d164:	9a00000b 	bls	d198 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x4c>
    d168:	e590010c 	ldr	r0, [r0, #268]	@ 0x10c
    d16c:	e1530000 	cmp	r3, r0
    d170:	9a00000c 	bls	d1a8 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x5c>
    d174:	e1520000 	cmp	r2, r0
    d178:	30833002 	addcc	r3, r3, r2
    d17c:	30430000 	subcc	r0, r3, r0
    d180:	20420000 	subcs	r0, r2, r0
    d184:	e8bd8010 	pop	{r4, pc}
    d188:	e59f2028 	ldr	r2, [pc, #40]	@ d1b8 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x6c>
    d18c:	e59f1028 	ldr	r1, [pc, #40]	@ d1bc <CSoundBaseDevice::GetReadQueueBytesAvail()+0x70>
    d190:	e59f0028 	ldr	r0, [pc, #40]	@ d1c0 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x74>
    d194:	eb000962 	bl	f724 <assertion_failed>
    d198:	e59f2024 	ldr	r2, [pc, #36]	@ d1c4 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x78>
    d19c:	e59f1018 	ldr	r1, [pc, #24]	@ d1bc <CSoundBaseDevice::GetReadQueueBytesAvail()+0x70>
    d1a0:	e59f0020 	ldr	r0, [pc, #32]	@ d1c8 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x7c>
    d1a4:	eb00095e 	bl	f724 <assertion_failed>
    d1a8:	e59f201c 	ldr	r2, [pc, #28]	@ d1cc <CSoundBaseDevice::GetReadQueueBytesAvail()+0x80>
    d1ac:	e59f1008 	ldr	r1, [pc, #8]	@ d1bc <CSoundBaseDevice::GetReadQueueBytesAvail()+0x70>
    d1b0:	e59f0018 	ldr	r0, [pc, #24]	@ d1d0 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x84>
    d1b4:	eb00095a 	bl	f724 <assertion_failed>
    d1b8:	000003fd 	.word	0x000003fd
    d1bc:	0001cc0c 	.word	0x0001cc0c
    d1c0:	0001cfd0 	.word	0x0001cfd0
    d1c4:	000003fe 	.word	0x000003fe
    d1c8:	0001cfe8 	.word	0x0001cfe8
    d1cc:	000003ff 	.word	0x000003ff
    d1d0:	0001d008 	.word	0x0001d008

0000d1d4 <CSoundBaseDevice::GetReadQueueFramesAvail()>:
    d1d4:	e59030e8 	ldr	r3, [r0, #232]	@ 0xe8
    d1d8:	e92d4070 	push	{r4, r5, r6, lr}
    d1dc:	e3530000 	cmp	r3, #0
    d1e0:	0a000013 	beq	d234 <CSoundBaseDevice::GetReadQueueFramesAvail()+0x60>
    d1e4:	e5903118 	ldr	r3, [r0, #280]	@ 0x118
    d1e8:	e1a04000 	mov	r4, r0
    d1ec:	e3530000 	cmp	r3, #0
    d1f0:	1a000005 	bne	d20c <CSoundBaseDevice::GetReadQueueFramesAvail()+0x38>
    d1f4:	ebffffd4 	bl	d14c <CSoundBaseDevice::GetReadQueueBytesAvail()>
    d1f8:	e1a05000 	mov	r5, r0
    d1fc:	e1a00005 	mov	r0, r5
    d200:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
    d204:	eb0033e7 	bl	1a1a8 <__udivsi3>
    d208:	e8bd8070 	pop	{r4, r5, r6, pc}
    d20c:	e1a00003 	mov	r0, r3
    d210:	eb00299e 	bl	17890 <EnterCritical>
    d214:	e1a00004 	mov	r0, r4
    d218:	ebffffcb 	bl	d14c <CSoundBaseDevice::GetReadQueueBytesAvail()>
    d21c:	e5943118 	ldr	r3, [r4, #280]	@ 0x118
    d220:	e1a05000 	mov	r5, r0
    d224:	e3530000 	cmp	r3, #0
    d228:	0afffff3 	beq	d1fc <CSoundBaseDevice::GetReadQueueFramesAvail()+0x28>
    d22c:	eb0029c1 	bl	17938 <LeaveCritical>
    d230:	eafffff1 	b	d1fc <CSoundBaseDevice::GetReadQueueFramesAvail()+0x28>
    d234:	e59f2008 	ldr	r2, [pc, #8]	@ d244 <CSoundBaseDevice::GetReadQueueFramesAvail()+0x70>
    d238:	e59f1008 	ldr	r1, [pc, #8]	@ d248 <CSoundBaseDevice::GetReadQueueFramesAvail()+0x74>
    d23c:	e59f0008 	ldr	r0, [pc, #8]	@ d24c <CSoundBaseDevice::GetReadQueueFramesAvail()+0x78>
    d240:	eb000937 	bl	f724 <assertion_failed>
    d244:	00000263 	.word	0x00000263
    d248:	0001cc0c 	.word	0x0001cc0c
    d24c:	0001cdb8 	.word	0x0001cdb8

0000d250 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)>:
    d250:	e3510000 	cmp	r1, #0
    d254:	e92d4010 	push	{r4, lr}
    d258:	0a000012 	beq	d2a8 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x58>
    d25c:	e590c104 	ldr	ip, [r0, #260]	@ 0x104
    d260:	e35c0000 	cmp	ip, #0
    d264:	0a000013 	beq	d2b8 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x68>
    d268:	e3520000 	cmp	r2, #0
    d26c:	0a000015 	beq	d2c8 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x78>
    d270:	e5903108 	ldr	r3, [r0, #264]	@ 0x108
    d274:	e0812002 	add	r2, r1, r2
    d278:	e4d1e001 	ldrb	lr, [r1], #1
    d27c:	e7cce003 	strb	lr, [ip, r3]
    d280:	e5903108 	ldr	r3, [r0, #264]	@ 0x108
    d284:	e590c0e8 	ldr	ip, [r0, #232]	@ 0xe8
    d288:	e2833001 	add	r3, r3, #1
    d28c:	e153000c 	cmp	r3, ip
    d290:	03a03000 	moveq	r3, #0
    d294:	e1520001 	cmp	r2, r1
    d298:	e5803108 	str	r3, [r0, #264]	@ 0x108
    d29c:	08bd8010 	popeq	{r4, pc}
    d2a0:	e590c104 	ldr	ip, [r0, #260]	@ 0x104
    d2a4:	eafffff3 	b	d278 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x28>
    d2a8:	e59f2028 	ldr	r2, [pc, #40]	@ d2d8 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x88>
    d2ac:	e59f1028 	ldr	r1, [pc, #40]	@ d2dc <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x8c>
    d2b0:	e59f0028 	ldr	r0, [pc, #40]	@ d2e0 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x90>
    d2b4:	eb00091a 	bl	f724 <assertion_failed>
    d2b8:	e59f2024 	ldr	r2, [pc, #36]	@ d2e4 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x94>
    d2bc:	e59f1018 	ldr	r1, [pc, #24]	@ d2dc <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x8c>
    d2c0:	e59f0020 	ldr	r0, [pc, #32]	@ d2e8 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x98>
    d2c4:	eb000916 	bl	f724 <assertion_failed>
    d2c8:	e59f201c 	ldr	r2, [pc, #28]	@ d2ec <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x9c>
    d2cc:	e59f1008 	ldr	r1, [pc, #8]	@ d2dc <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x8c>
    d2d0:	e59f0018 	ldr	r0, [pc, #24]	@ d2f0 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0xa0>
    d2d4:	eb000912 	bl	f724 <assertion_failed>
    d2d8:	0000040c 	.word	0x0000040c
    d2dc:	0001cc0c 	.word	0x0001cc0c
    d2e0:	0001ce6c 	.word	0x0001ce6c
    d2e4:	0000040d 	.word	0x0000040d
    d2e8:	0001d02c 	.word	0x0001d02c
    d2ec:	0000040f 	.word	0x0000040f
    d2f0:	0001ce84 	.word	0x0001ce84

0000d2f4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)>:
    d2f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2f8:	e2517000 	subs	r7, r1, #0
    d2fc:	0a000030 	beq	d3c4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xd0>
    d300:	e3520000 	cmp	r2, #0
    d304:	e1a04002 	mov	r4, r2
    d308:	0a000031 	beq	d3d4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xe0>
    d30c:	e1a05000 	mov	r5, r0
    d310:	e1a00002 	mov	r0, r2
    d314:	e5951014 	ldr	r1, [r5, #20]
    d318:	eb00341d 	bl	1a394 <__aeabi_uidivmod>
    d31c:	e3510000 	cmp	r1, #0
    d320:	1a00002f 	bne	d3e4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xf0>
    d324:	e5950118 	ldr	r0, [r5, #280]	@ 0x118
    d328:	e595301c 	ldr	r3, [r5, #28]
    d32c:	e3500000 	cmp	r0, #0
    d330:	e0040493 	mul	r4, r3, r4
    d334:	1a00000f 	bne	d378 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x84>
    d338:	e1a00005 	mov	r0, r5
    d33c:	ebffff5f 	bl	d0c0 <CSoundBaseDevice::GetReadQueueBytesFree()>
    d340:	e1500004 	cmp	r0, r4
    d344:	31a04000 	movcc	r4, r0
    d348:	e3540000 	cmp	r4, #0
    d34c:	e1a06000 	mov	r6, r0
    d350:	1a000015 	bne	d3ac <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xb8>
    d354:	e5953110 	ldr	r3, [r5, #272]	@ 0x110
    d358:	e3530000 	cmp	r3, #0
    d35c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d360:	e59520ec 	ldr	r2, [r5, #236]	@ 0xec
    d364:	e1560002 	cmp	r6, r2
    d368:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d36c:	e5950114 	ldr	r0, [r5, #276]	@ 0x114
    d370:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d374:	e12fff13 	bx	r3
    d378:	eb002944 	bl	17890 <EnterCritical>
    d37c:	e1a00005 	mov	r0, r5
    d380:	ebffff4e 	bl	d0c0 <CSoundBaseDevice::GetReadQueueBytesFree()>
    d384:	e1540000 	cmp	r4, r0
    d388:	21a04000 	movcs	r4, r0
    d38c:	e3540000 	cmp	r4, #0
    d390:	e1a06000 	mov	r6, r0
    d394:	1a000004 	bne	d3ac <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xb8>
    d398:	e5953118 	ldr	r3, [r5, #280]	@ 0x118
    d39c:	e3530000 	cmp	r3, #0
    d3a0:	0affffeb 	beq	d354 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x60>
    d3a4:	eb002963 	bl	17938 <LeaveCritical>
    d3a8:	eaffffe9 	b	d354 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x60>
    d3ac:	e1a02004 	mov	r2, r4
    d3b0:	e1a01007 	mov	r1, r7
    d3b4:	e1a00005 	mov	r0, r5
    d3b8:	ebffffa4 	bl	d250 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)>
    d3bc:	e0466004 	sub	r6, r6, r4
    d3c0:	eafffff4 	b	d398 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xa4>
    d3c4:	e59f2028 	ldr	r2, [pc, #40]	@ d3f4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x100>
    d3c8:	e59f1028 	ldr	r1, [pc, #40]	@ d3f8 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x104>
    d3cc:	e59f0028 	ldr	r0, [pc, #40]	@ d3fc <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x108>
    d3d0:	eb0008d3 	bl	f724 <assertion_failed>
    d3d4:	e3a02fe7 	mov	r2, #924	@ 0x39c
    d3d8:	e59f1018 	ldr	r1, [pc, #24]	@ d3f8 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x104>
    d3dc:	e59f001c 	ldr	r0, [pc, #28]	@ d400 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x10c>
    d3e0:	eb0008cf 	bl	f724 <assertion_failed>
    d3e4:	e59f2018 	ldr	r2, [pc, #24]	@ d404 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x110>
    d3e8:	e59f1008 	ldr	r1, [pc, #8]	@ d3f8 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x104>
    d3ec:	e59f0014 	ldr	r0, [pc, #20]	@ d408 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x114>
    d3f0:	eb0008cb 	bl	f724 <assertion_failed>
    d3f4:	0000039a 	.word	0x0000039a
    d3f8:	0001cc0c 	.word	0x0001cc0c
    d3fc:	0001cec4 	.word	0x0001cec4
    d400:	0001ced4 	.word	0x0001ced4
    d404:	0000039d 	.word	0x0000039d
    d408:	0001d040 	.word	0x0001d040

0000d40c <CSoundBaseDevice::PutChunk(short const*, unsigned int)>:
    d40c:	e5d03008 	ldrb	r3, [r0, #8]
    d410:	e3530001 	cmp	r3, #1
    d414:	1a000000 	bne	d41c <CSoundBaseDevice::PutChunk(short const*, unsigned int)+0x10>
    d418:	eaffffb5 	b	d2f4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)>
    d41c:	e92d4010 	push	{r4, lr}
    d420:	e59f2008 	ldr	r2, [pc, #8]	@ d430 <CSoundBaseDevice::PutChunk(short const*, unsigned int)+0x24>
    d424:	e59f1008 	ldr	r1, [pc, #8]	@ d434 <CSoundBaseDevice::PutChunk(short const*, unsigned int)+0x28>
    d428:	e59f0008 	ldr	r0, [pc, #8]	@ d438 <CSoundBaseDevice::PutChunk(short const*, unsigned int)+0x2c>
    d42c:	eb0008bc 	bl	f724 <assertion_failed>
    d430:	0000038a 	.word	0x0000038a
    d434:	0001cc0c 	.word	0x0001cc0c
    d438:	0001cf18 	.word	0x0001cf18

0000d43c <CSoundBaseDevice::PutChunk(unsigned int const*, unsigned int)>:
    d43c:	e5d03008 	ldrb	r3, [r0, #8]
    d440:	e2433002 	sub	r3, r3, #2
    d444:	e3530001 	cmp	r3, #1
    d448:	8a000000 	bhi	d450 <CSoundBaseDevice::PutChunk(unsigned int const*, unsigned int)+0x14>
    d44c:	eaffffa8 	b	d2f4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)>
    d450:	e92d4010 	push	{r4, lr}
    d454:	e59f2008 	ldr	r2, [pc, #8]	@ d464 <CSoundBaseDevice::PutChunk(unsigned int const*, unsigned int)+0x28>
    d458:	e59f1008 	ldr	r1, [pc, #8]	@ d468 <CSoundBaseDevice::PutChunk(unsigned int const*, unsigned int)+0x2c>
    d45c:	e59f0008 	ldr	r0, [pc, #8]	@ d46c <CSoundBaseDevice::PutChunk(unsigned int const*, unsigned int)+0x30>
    d460:	eb0008af 	bl	f724 <assertion_failed>
    d464:	00000391 	.word	0x00000391
    d468:	0001cc0c 	.word	0x0001cc0c
    d46c:	0001d064 	.word	0x0001d064

0000d470 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>:
    d470:	e3510000 	cmp	r1, #0
    d474:	e92d4010 	push	{r4, lr}
    d478:	0a000012 	beq	d4c8 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x58>
    d47c:	e590c104 	ldr	ip, [r0, #260]	@ 0x104
    d480:	e35c0000 	cmp	ip, #0
    d484:	0a000013 	beq	d4d8 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x68>
    d488:	e3520000 	cmp	r2, #0
    d48c:	0a000015 	beq	d4e8 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x78>
    d490:	e590310c 	ldr	r3, [r0, #268]	@ 0x10c
    d494:	e0812002 	add	r2, r1, r2
    d498:	e7dc3003 	ldrb	r3, [ip, r3]
    d49c:	e4c13001 	strb	r3, [r1], #1
    d4a0:	e590310c 	ldr	r3, [r0, #268]	@ 0x10c
    d4a4:	e590c0e8 	ldr	ip, [r0, #232]	@ 0xe8
    d4a8:	e2833001 	add	r3, r3, #1
    d4ac:	e153000c 	cmp	r3, ip
    d4b0:	03a03000 	moveq	r3, #0
    d4b4:	e1520001 	cmp	r2, r1
    d4b8:	e580310c 	str	r3, [r0, #268]	@ 0x10c
    d4bc:	08bd8010 	popeq	{r4, pc}
    d4c0:	e590c104 	ldr	ip, [r0, #260]	@ 0x104
    d4c4:	eafffff3 	b	d498 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x28>
    d4c8:	e59f2028 	ldr	r2, [pc, #40]	@ d4f8 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x88>
    d4cc:	e59f1028 	ldr	r1, [pc, #40]	@ d4fc <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x8c>
    d4d0:	e59f0028 	ldr	r0, [pc, #40]	@ d500 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x90>
    d4d4:	eb000892 	bl	f724 <assertion_failed>
    d4d8:	e59f2024 	ldr	r2, [pc, #36]	@ d504 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x94>
    d4dc:	e59f1018 	ldr	r1, [pc, #24]	@ d4fc <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x8c>
    d4e0:	e59f0020 	ldr	r0, [pc, #32]	@ d508 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x98>
    d4e4:	eb00088e 	bl	f724 <assertion_failed>
    d4e8:	e59f201c 	ldr	r2, [pc, #28]	@ d50c <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x9c>
    d4ec:	e59f1008 	ldr	r1, [pc, #8]	@ d4fc <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x8c>
    d4f0:	e59f0018 	ldr	r0, [pc, #24]	@ d510 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0xa0>
    d4f4:	eb00088a 	bl	f724 <assertion_failed>
    d4f8:	0000041e 	.word	0x0000041e
    d4fc:	0001cc0c 	.word	0x0001cc0c
    d500:	0001ce6c 	.word	0x0001ce6c
    d504:	0000041f 	.word	0x0000041f
    d508:	0001d02c 	.word	0x0001d02c
    d50c:	00000421 	.word	0x00000421
    d510:	0001ce84 	.word	0x0001ce84

0000d514 <CSoundBaseDevice::Read(void*, unsigned int)>:
    d514:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    d518:	e5d030f0 	ldrb	r3, [r0, #240]	@ 0xf0
    d51c:	e24dd08c 	sub	sp, sp, #140	@ 0x8c
    d520:	e3530005 	cmp	r3, #5
    d524:	8a0000ae 	bhi	d7e4 <CSoundBaseDevice::Read(void*, unsigned int)+0x2d0>
    d528:	e3510000 	cmp	r1, #0
    d52c:	e1a05001 	mov	r5, r1
    d530:	0a0000af 	beq	d7f4 <CSoundBaseDevice::Read(void*, unsigned int)+0x2e0>
    d534:	e1a04000 	mov	r4, r0
    d538:	e5900118 	ldr	r0, [r0, #280]	@ 0x118
    d53c:	e1a07002 	mov	r7, r2
    d540:	e3500000 	cmp	r0, #0
    d544:	1a00009f 	bne	d7c8 <CSoundBaseDevice::Read(void*, unsigned int)+0x2b4>
    d548:	e5d42008 	ldrb	r2, [r4, #8]
    d54c:	e59460f4 	ldr	r6, [r4, #244]	@ 0xf4
    d550:	e1520003 	cmp	r2, r3
    d554:	e5948014 	ldr	r8, [r4, #20]
    d558:	0a00008a 	beq	d788 <CSoundBaseDevice::Read(void*, unsigned int)+0x274>
    d55c:	e3580002 	cmp	r8, #2
    d560:	0a00002e 	beq	d620 <CSoundBaseDevice::Read(void*, unsigned int)+0x10c>
    d564:	e1560008 	cmp	r6, r8
    d568:	2a00005d 	bcs	d6e4 <CSoundBaseDevice::Read(void*, unsigned int)+0x1d0>
    d56c:	e5943100 	ldr	r3, [r4, #256]	@ 0x100
    d570:	e3a08000 	mov	r8, #0
    d574:	e1530007 	cmp	r3, r7
    d578:	8a00007c 	bhi	d770 <CSoundBaseDevice::Read(void*, unsigned int)+0x25c>
    d57c:	e1a00004 	mov	r0, r4
    d580:	ebfffef1 	bl	d14c <CSoundBaseDevice::GetReadQueueBytesAvail()>
    d584:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
    d588:	e1500002 	cmp	r0, r2
    d58c:	3a000077 	bcc	d770 <CSoundBaseDevice::Read(void*, unsigned int)+0x25c>
    d590:	e28d1008 	add	r1, sp, #8
    d594:	e1a00004 	mov	r0, r4
    d598:	ebffffb4 	bl	d470 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>
    d59c:	e3560000 	cmp	r6, #0
    d5a0:	13a02000 	movne	r2, #0
    d5a4:	128d1008 	addne	r1, sp, #8
    d5a8:	1a00000b 	bne	d5dc <CSoundBaseDevice::Read(void*, unsigned int)+0xc8>
    d5ac:	ea00005c 	b	d724 <CSoundBaseDevice::Read(void*, unsigned int)+0x210>
    d5b0:	e2400002 	sub	r0, r0, #2
    d5b4:	e3500001 	cmp	r0, #1
    d5b8:	8a000095 	bhi	d814 <CSoundBaseDevice::Read(void*, unsigned int)+0x300>
    d5bc:	e5853000 	str	r3, [r5]
    d5c0:	e59400fc 	ldr	r0, [r4, #252]	@ 0xfc
    d5c4:	e594301c 	ldr	r3, [r4, #28]
    d5c8:	e2822001 	add	r2, r2, #1
    d5cc:	e1520006 	cmp	r2, r6
    d5d0:	e0855000 	add	r5, r5, r0
    d5d4:	e0811003 	add	r1, r1, r3
    d5d8:	0a000051 	beq	d724 <CSoundBaseDevice::Read(void*, unsigned int)+0x210>
    d5dc:	e5d43008 	ldrb	r3, [r4, #8]
    d5e0:	e3530002 	cmp	r3, #2
    d5e4:	0a00004b 	beq	d718 <CSoundBaseDevice::Read(void*, unsigned int)+0x204>
    d5e8:	e3530003 	cmp	r3, #3
    d5ec:	0a000042 	beq	d6fc <CSoundBaseDevice::Read(void*, unsigned int)+0x1e8>
    d5f0:	e3530001 	cmp	r3, #1
    d5f4:	1a000082 	bne	d804 <CSoundBaseDevice::Read(void*, unsigned int)+0x2f0>
    d5f8:	e1d130f0 	ldrsh	r3, [r1]
    d5fc:	e1a03403 	lsl	r3, r3, #8
    d600:	e5d400f0 	ldrb	r0, [r4, #240]	@ 0xf0
    d604:	e3500001 	cmp	r0, #1
    d608:	0a00003f 	beq	d70c <CSoundBaseDevice::Read(void*, unsigned int)+0x1f8>
    d60c:	8affffe7 	bhi	d5b0 <CSoundBaseDevice::Read(void*, unsigned int)+0x9c>
    d610:	e1a03823 	lsr	r3, r3, #16
    d614:	e2433080 	sub	r3, r3, #128	@ 0x80
    d618:	e5c53000 	strb	r3, [r5]
    d61c:	eaffffe7 	b	d5c0 <CSoundBaseDevice::Read(void*, unsigned int)+0xac>
    d620:	e3560002 	cmp	r6, #2
    d624:	8a00002e 	bhi	d6e4 <CSoundBaseDevice::Read(void*, unsigned int)+0x1d0>
    d628:	e5943100 	ldr	r3, [r4, #256]	@ 0x100
    d62c:	e3a08000 	mov	r8, #0
    d630:	e1530007 	cmp	r3, r7
    d634:	9a000010 	bls	d67c <CSoundBaseDevice::Read(void*, unsigned int)+0x168>
    d638:	ea00004c 	b	d770 <CSoundBaseDevice::Read(void*, unsigned int)+0x25c>
    d63c:	e5d430f8 	ldrb	r3, [r4, #248]	@ 0xf8
    d640:	e1a01005 	mov	r1, r5
    d644:	e3530000 	cmp	r3, #0
    d648:	0594201c 	ldreq	r2, [r4, #28]
    d64c:	028d3008 	addeq	r3, sp, #8
    d650:	00832002 	addeq	r2, r3, r2
    d654:	e1a00004 	mov	r0, r4
    d658:	128d2008 	addne	r2, sp, #8
    d65c:	ebfffe6c 	bl	d014 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
    d660:	e59430fc 	ldr	r3, [r4, #252]	@ 0xfc
    d664:	e0855003 	add	r5, r5, r3
    d668:	e5943100 	ldr	r3, [r4, #256]	@ 0x100
    d66c:	e0477003 	sub	r7, r7, r3
    d670:	e1530007 	cmp	r3, r7
    d674:	e0888003 	add	r8, r8, r3
    d678:	8a00003c 	bhi	d770 <CSoundBaseDevice::Read(void*, unsigned int)+0x25c>
    d67c:	e1a00004 	mov	r0, r4
    d680:	ebfffeb1 	bl	d14c <CSoundBaseDevice::GetReadQueueBytesAvail()>
    d684:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
    d688:	e1500002 	cmp	r0, r2
    d68c:	3a000037 	bcc	d770 <CSoundBaseDevice::Read(void*, unsigned int)+0x25c>
    d690:	e1a00004 	mov	r0, r4
    d694:	e28d1008 	add	r1, sp, #8
    d698:	ebffff74 	bl	d470 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>
    d69c:	e59430f4 	ldr	r3, [r4, #244]	@ 0xf4
    d6a0:	e3530002 	cmp	r3, #2
    d6a4:	1affffe4 	bne	d63c <CSoundBaseDevice::Read(void*, unsigned int)+0x128>
    d6a8:	e1a01005 	mov	r1, r5
    d6ac:	e1a00004 	mov	r0, r4
    d6b0:	e28d2008 	add	r2, sp, #8
    d6b4:	ebfffe56 	bl	d014 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
    d6b8:	e59460fc 	ldr	r6, [r4, #252]	@ 0xfc
    d6bc:	e594201c 	ldr	r2, [r4, #28]
    d6c0:	e0856006 	add	r6, r5, r6
    d6c4:	e28d3008 	add	r3, sp, #8
    d6c8:	e1a01006 	mov	r1, r6
    d6cc:	e1a00004 	mov	r0, r4
    d6d0:	e0832002 	add	r2, r3, r2
    d6d4:	ebfffe4e 	bl	d014 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
    d6d8:	e59450fc 	ldr	r5, [r4, #252]	@ 0xfc
    d6dc:	e0865005 	add	r5, r6, r5
    d6e0:	eaffffe0 	b	d668 <CSoundBaseDevice::Read(void*, unsigned int)+0x154>
    d6e4:	e1a00004 	mov	r0, r4
    d6e8:	e2842038 	add	r2, r4, #56	@ 0x38
    d6ec:	e28d1004 	add	r1, sp, #4
    d6f0:	ebfffe47 	bl	d014 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
    d6f4:	e1a06008 	mov	r6, r8
    d6f8:	eaffff9b 	b	d56c <CSoundBaseDevice::Read(void*, unsigned int)+0x58>
    d6fc:	e5d400f0 	ldrb	r0, [r4, #240]	@ 0xf0
    d700:	e5913000 	ldr	r3, [r1]
    d704:	e3500001 	cmp	r0, #1
    d708:	1affffbf 	bne	d60c <CSoundBaseDevice::Read(void*, unsigned int)+0xf8>
    d70c:	e1a03423 	lsr	r3, r3, #8
    d710:	e1c530b0 	strh	r3, [r5]
    d714:	eaffffa9 	b	d5c0 <CSoundBaseDevice::Read(void*, unsigned int)+0xac>
    d718:	e5913000 	ldr	r3, [r1]
    d71c:	e3c334ff 	bic	r3, r3, #-16777216	@ 0xff000000
    d720:	eaffffb6 	b	d600 <CSoundBaseDevice::Read(void*, unsigned int)+0xec>
    d724:	e59430f4 	ldr	r3, [r4, #244]	@ 0xf4
    d728:	e1a09006 	mov	r9, r6
    d72c:	e1530006 	cmp	r3, r6
    d730:	9a000009 	bls	d75c <CSoundBaseDevice::Read(void*, unsigned int)+0x248>
    d734:	e59420fc 	ldr	r2, [r4, #252]	@ 0xfc
    d738:	e1a00005 	mov	r0, r5
    d73c:	e28d1004 	add	r1, sp, #4
    d740:	eb00237d 	bl	1653c <memcpy>
    d744:	e59430f4 	ldr	r3, [r4, #244]	@ 0xf4
    d748:	e59420fc 	ldr	r2, [r4, #252]	@ 0xfc
    d74c:	e2899001 	add	r9, r9, #1
    d750:	e1530009 	cmp	r3, r9
    d754:	e0855002 	add	r5, r5, r2
    d758:	8afffff6 	bhi	d738 <CSoundBaseDevice::Read(void*, unsigned int)+0x224>
    d75c:	e5943100 	ldr	r3, [r4, #256]	@ 0x100
    d760:	e0477003 	sub	r7, r7, r3
    d764:	e1530007 	cmp	r3, r7
    d768:	e0888003 	add	r8, r8, r3
    d76c:	9affff82 	bls	d57c <CSoundBaseDevice::Read(void*, unsigned int)+0x68>
    d770:	e5943118 	ldr	r3, [r4, #280]	@ 0x118
    d774:	e3530000 	cmp	r3, #0
    d778:	1a000015 	bne	d7d4 <CSoundBaseDevice::Read(void*, unsigned int)+0x2c0>
    d77c:	e1a00008 	mov	r0, r8
    d780:	e28dd08c 	add	sp, sp, #140	@ 0x8c
    d784:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d788:	e1560008 	cmp	r6, r8
    d78c:	1affff72 	bne	d55c <CSoundBaseDevice::Read(void*, unsigned int)+0x48>
    d790:	e1a00004 	mov	r0, r4
    d794:	ebfffe6c 	bl	d14c <CSoundBaseDevice::GetReadQueueBytesAvail()>
    d798:	e1500007 	cmp	r0, r7
    d79c:	31a07000 	movcc	r7, r0
    d7a0:	e5941100 	ldr	r1, [r4, #256]	@ 0x100
    d7a4:	e1a00007 	mov	r0, r7
    d7a8:	eb0032f9 	bl	1a394 <__aeabi_uidivmod>
    d7ac:	e0578001 	subs	r8, r7, r1
    d7b0:	0affffee 	beq	d770 <CSoundBaseDevice::Read(void*, unsigned int)+0x25c>
    d7b4:	e1a02008 	mov	r2, r8
    d7b8:	e1a01005 	mov	r1, r5
    d7bc:	e1a00004 	mov	r0, r4
    d7c0:	ebffff2a 	bl	d470 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>
    d7c4:	eaffffe9 	b	d770 <CSoundBaseDevice::Read(void*, unsigned int)+0x25c>
    d7c8:	eb002830 	bl	17890 <EnterCritical>
    d7cc:	e5d430f0 	ldrb	r3, [r4, #240]	@ 0xf0
    d7d0:	eaffff5c 	b	d548 <CSoundBaseDevice::Read(void*, unsigned int)+0x34>
    d7d4:	eb002857 	bl	17938 <LeaveCritical>
    d7d8:	e1a00008 	mov	r0, r8
    d7dc:	e28dd08c 	add	sp, sp, #140	@ 0x8c
    d7e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d7e4:	e59f2038 	ldr	r2, [pc, #56]	@ d824 <CSoundBaseDevice::Read(void*, unsigned int)+0x310>
    d7e8:	e59f1038 	ldr	r1, [pc, #56]	@ d828 <CSoundBaseDevice::Read(void*, unsigned int)+0x314>
    d7ec:	e59f0038 	ldr	r0, [pc, #56]	@ d82c <CSoundBaseDevice::Read(void*, unsigned int)+0x318>
    d7f0:	eb0007cb 	bl	f724 <assertion_failed>
    d7f4:	e59f2034 	ldr	r2, [pc, #52]	@ d830 <CSoundBaseDevice::Read(void*, unsigned int)+0x31c>
    d7f8:	e59f1028 	ldr	r1, [pc, #40]	@ d828 <CSoundBaseDevice::Read(void*, unsigned int)+0x314>
    d7fc:	e59f0030 	ldr	r0, [pc, #48]	@ d834 <CSoundBaseDevice::Read(void*, unsigned int)+0x320>
    d800:	eb0007c7 	bl	f724 <assertion_failed>
    d804:	e3a02e3d 	mov	r2, #976	@ 0x3d0
    d808:	e59f1018 	ldr	r1, [pc, #24]	@ d828 <CSoundBaseDevice::Read(void*, unsigned int)+0x314>
    d80c:	e59f0024 	ldr	r0, [pc, #36]	@ d838 <CSoundBaseDevice::Read(void*, unsigned int)+0x324>
    d810:	eb0007c3 	bl	f724 <assertion_failed>
    d814:	e3a02ffa 	mov	r2, #1000	@ 0x3e8
    d818:	e59f1008 	ldr	r1, [pc, #8]	@ d828 <CSoundBaseDevice::Read(void*, unsigned int)+0x314>
    d81c:	e59f0014 	ldr	r0, [pc, #20]	@ d838 <CSoundBaseDevice::Read(void*, unsigned int)+0x324>
    d820:	eb0007bf 	bl	f724 <assertion_failed>
    d824:	000001eb 	.word	0x000001eb
    d828:	0001cc0c 	.word	0x0001cc0c
    d82c:	0001d0b0 	.word	0x0001d0b0
    d830:	000001ed 	.word	0x000001ed
    d834:	0001ceb4 	.word	0x0001ceb4
    d838:	0001ced0 	.word	0x0001ced0

0000d83c <CSoundBaseDevice::GetController()>:
    d83c:	e3a00000 	mov	r0, #0
    d840:	e12fff1e 	bx	lr

0000d844 <CI2SSoundBaseDevice::GetRangeMin() const>:
    d844:	e59f0000 	ldr	r0, [pc]	@ d84c <CI2SSoundBaseDevice::GetRangeMin() const+0x8>
    d848:	e12fff1e 	bx	lr
    d84c:	ff800001 	.word	0xff800001

0000d850 <CI2SSoundBaseDevice::GetRangeMax() const>:
    d850:	e59f0000 	ldr	r0, [pc]	@ d858 <CI2SSoundBaseDevice::GetRangeMax() const+0x8>
    d854:	e12fff1e 	bx	lr
    d858:	007fffff 	.word	0x007fffff

0000d85c <CI2SSoundBaseDevice::GetController()>:
    d85c:	e5900250 	ldr	r0, [r0, #592]	@ 0x250
    d860:	e12fff1e 	bx	lr

0000d864 <CI2SSoundBaseDevice::Cancel()>:
    d864:	e5d0312d 	ldrb	r3, [r0, #301]	@ 0x12d
    d868:	e92d4010 	push	{r4, lr}
    d86c:	e3530001 	cmp	r3, #1
    d870:	e1a04000 	mov	r4, r0
    d874:	1a000002 	bne	d884 <CI2SSoundBaseDevice::Cancel()+0x20>
    d878:	e2840e21 	add	r0, r4, #528	@ 0x210
    d87c:	e8bd4010 	pop	{r4, lr}
    d880:	ea000492 	b	ead0 <CDMASoundBuffers::Cancel()>
    d884:	e2800f75 	add	r0, r0, #468	@ 0x1d4
    d888:	eb000490 	bl	ead0 <CDMASoundBuffers::Cancel()>
    d88c:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    d890:	e3530000 	cmp	r3, #0
    d894:	08bd8010 	popeq	{r4, pc}
    d898:	eafffff6 	b	d878 <CI2SSoundBaseDevice::Cancel()+0x14>

0000d89c <CI2SSoundBaseDevice::IsActive() const>:
    d89c:	e5d0312d 	ldrb	r3, [r0, #301]	@ 0x12d
    d8a0:	e92d4010 	push	{r4, lr}
    d8a4:	e3530001 	cmp	r3, #1
    d8a8:	e1a04000 	mov	r4, r0
    d8ac:	1a000002 	bne	d8bc <CI2SSoundBaseDevice::IsActive() const+0x20>
    d8b0:	e2840e21 	add	r0, r4, #528	@ 0x210
    d8b4:	e8bd4010 	pop	{r4, lr}
    d8b8:	ea000499 	b	eb24 <CDMASoundBuffers::IsActive() const>
    d8bc:	e2800f75 	add	r0, r0, #468	@ 0x1d4
    d8c0:	eb000497 	bl	eb24 <CDMASoundBuffers::IsActive() const>
    d8c4:	e3500000 	cmp	r0, #0
    d8c8:	18bd8010 	popne	{r4, pc}
    d8cc:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    d8d0:	e3530000 	cmp	r3, #0
    d8d4:	08bd8010 	popeq	{r4, pc}
    d8d8:	eafffff4 	b	d8b0 <CI2SSoundBaseDevice::IsActive() const+0x14>

0000d8dc <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)>:
    d8dc:	e3530000 	cmp	r3, #0
    d8e0:	0a000008 	beq	d908 <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x2c>
    d8e4:	e3500000 	cmp	r0, #0
    d8e8:	0a000003 	beq	d8fc <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x20>
    d8ec:	e593c000 	ldr	ip, [r3]
    d8f0:	e1a00003 	mov	r0, r3
    d8f4:	e59c303c 	ldr	r3, [ip, #60]	@ 0x3c
    d8f8:	e12fff13 	bx	r3
    d8fc:	e3a02001 	mov	r2, #1
    d900:	e5c321d2 	strb	r2, [r3, #466]	@ 0x1d2
    d904:	e12fff1e 	bx	lr
    d908:	e59f100c 	ldr	r1, [pc, #12]	@ d91c <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x40>
    d90c:	e92d4010 	push	{r4, lr}
    d910:	e59f2008 	ldr	r2, [pc, #8]	@ d920 <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x44>
    d914:	e2810018 	add	r0, r1, #24
    d918:	eb000781 	bl	f724 <assertion_failed>
    d91c:	0001daa4 	.word	0x0001daa4
    d920:	0000018a 	.word	0x0000018a

0000d924 <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)>:
    d924:	e3530000 	cmp	r3, #0
    d928:	e92d4010 	push	{r4, lr}
    d92c:	0a000009 	beq	d958 <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x34>
    d930:	e3500000 	cmp	r0, #0
    d934:	03a02001 	moveq	r2, #1
    d938:	05c321d2 	strbeq	r2, [r3, #466]	@ 0x1d2
    d93c:	0a000003 	beq	d950 <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x2c>
    d940:	e593c000 	ldr	ip, [r3]
    d944:	e1a00003 	mov	r0, r3
    d948:	e59c3044 	ldr	r3, [ip, #68]	@ 0x44
    d94c:	e12fff33 	blx	r3
    d950:	e3a00000 	mov	r0, #0
    d954:	e8bd8010 	pop	{r4, pc}
    d958:	e59f1008 	ldr	r1, [pc, #8]	@ d968 <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x44>
    d95c:	e59f2008 	ldr	r2, [pc, #8]	@ d96c <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x48>
    d960:	e2810018 	add	r0, r1, #24
    d964:	eb00076e 	bl	f724 <assertion_failed>
    d968:	0001daa4 	.word	0x0001daa4
    d96c:	0000019a 	.word	0x0000019a

0000d970 <CI2SSoundBaseDevice::RunI2S()>:
    d970:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d974:	e3a03000 	mov	r3, #0
    d978:	e1a04000 	mov	r4, r0
    d97c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d980:	e59f5164 	ldr	r5, [pc, #356]	@ daec <CI2SSoundBaseDevice::RunI2S()+0x17c>
    d984:	e2847e13 	add	r7, r4, #304	@ 0x130
    d988:	e5853000 	str	r3, [r5]
    d98c:	eb00209b 	bl	15c00 <CTimer::Get()>
    d990:	e3a0000a 	mov	r0, #10
    d994:	eb002063 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
    d998:	e5953000 	ldr	r3, [r5]
    d99c:	e3833018 	orr	r3, r3, #24
    d9a0:	e5853000 	str	r3, [r5]
    d9a4:	eb002095 	bl	15c00 <CTimer::Get()>
    d9a8:	e3a0000a 	mov	r0, #10
    d9ac:	eb00205d 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
    d9b0:	e59f2138 	ldr	r2, [pc, #312]	@ daf0 <CI2SSoundBaseDevice::RunI2S()+0x180>
    d9b4:	e59f1138 	ldr	r1, [pc, #312]	@ daf4 <CI2SSoundBaseDevice::RunI2S()+0x184>
    d9b8:	e5852010 	str	r2, [r5, #16]
    d9bc:	e585200c 	str	r2, [r5, #12]
    d9c0:	e5d42124 	ldrb	r2, [r4, #292]	@ 0x124
    d9c4:	e59f312c 	ldr	r3, [pc, #300]	@ daf8 <CI2SSoundBaseDevice::RunI2S()+0x188>
    d9c8:	e3520000 	cmp	r2, #0
    d9cc:	01a03001 	moveq	r3, r1
    d9d0:	e5853008 	str	r3, [r5, #8]
    d9d4:	eb0010aa 	bl	11c84 <CMachineInfo::Get()>
    d9d8:	eb000f90 	bl	11820 <CMachineInfo::GetMachineModel() const>
    d9dc:	e1a02000 	mov	r2, r0
    d9e0:	e2423002 	sub	r3, r2, #2
    d9e4:	e6ef3073 	uxtb	r3, r3
    d9e8:	e3520000 	cmp	r2, #0
    d9ec:	13530001 	cmpne	r3, #1
    d9f0:	93a03001 	movls	r3, #1
    d9f4:	83a03000 	movhi	r3, #0
    d9f8:	e3530000 	cmp	r3, #0
    d9fc:	13a0601c 	movne	r6, #28
    da00:	03a06012 	moveq	r6, #18
    da04:	13a05007 	movne	r5, #7
    da08:	03a05005 	moveq	r5, #5
    da0c:	13a0801d 	movne	r8, #29
    da10:	03a08013 	moveq	r8, #19
    da14:	e1a00007 	mov	r0, r7
    da18:	e1a01006 	mov	r1, r6
    da1c:	eb002a7e 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
    da20:	e3a02001 	mov	r2, #1
    da24:	e1a00007 	mov	r0, r7
    da28:	e1a01005 	mov	r1, r5
    da2c:	e2847f56 	add	r7, r4, #344	@ 0x158
    da30:	eb002cf6 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    da34:	e1a01008 	mov	r1, r8
    da38:	e1a00007 	mov	r0, r7
    da3c:	eb002a76 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
    da40:	e3a02001 	mov	r2, #1
    da44:	e1a00007 	mov	r0, r7
    da48:	e1a01005 	mov	r1, r5
    da4c:	eb002cef 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    da50:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    da54:	e3530000 	cmp	r3, #0
    da58:	1a000017 	bne	dabc <CI2SSoundBaseDevice::RunI2S()+0x14c>
    da5c:	e2844f6a 	add	r4, r4, #424	@ 0x1a8
    da60:	e1a00004 	mov	r0, r4
    da64:	e2861003 	add	r1, r6, #3
    da68:	eb002a6b 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
    da6c:	e3a02001 	mov	r2, #1
    da70:	e1a01005 	mov	r1, r5
    da74:	e1a00004 	mov	r0, r4
    da78:	eb002ce4 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    da7c:	e59f4068 	ldr	r4, [pc, #104]	@ daec <CI2SSoundBaseDevice::RunI2S()+0x17c>
    da80:	e5943000 	ldr	r3, [r4]
    da84:	e3833402 	orr	r3, r3, #33554432	@ 0x2000000
    da88:	e5843000 	str	r3, [r4]
    da8c:	eb00205b 	bl	15c00 <CTimer::Get()>
    da90:	e3a00032 	mov	r0, #50	@ 0x32
    da94:	eb002023 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
    da98:	e5943000 	ldr	r3, [r4]
    da9c:	e3833001 	orr	r3, r3, #1
    daa0:	e5843000 	str	r3, [r4]
    daa4:	eb002055 	bl	15c00 <CTimer::Get()>
    daa8:	e3a0000a 	mov	r0, #10
    daac:	eb00201d 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
    dab0:	e3a03000 	mov	r3, #0
    dab4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dab8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dabc:	e2847d06 	add	r7, r4, #384	@ 0x180
    dac0:	e1a00007 	mov	r0, r7
    dac4:	e2861002 	add	r1, r6, #2
    dac8:	eb002a53 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
    dacc:	e3a02001 	mov	r2, #1
    dad0:	e1a00007 	mov	r0, r7
    dad4:	e1a01005 	mov	r1, r5
    dad8:	eb002ccc 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    dadc:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    dae0:	e3530001 	cmp	r3, #1
    dae4:	0affffe4 	beq	da7c <CI2SSoundBaseDevice::RunI2S()+0x10c>
    dae8:	eaffffdb 	b	da5c <CI2SSoundBaseDevice::RunI2S()+0xec>
    daec:	20203000 	.word	0x20203000
    daf0:	c010c210 	.word	0xc010c210
    daf4:	0050fc20 	.word	0x0050fc20
    daf8:	00f0fc20 	.word	0x00f0fc20

0000dafc <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)>:
    dafc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db00:	e3a05000 	mov	r5, #0
    db04:	e1a06002 	mov	r6, r2
    db08:	e1a04000 	mov	r4, r0
    db0c:	e1a07003 	mov	r7, r3
    db10:	e1a08001 	mov	r8, r1
    db14:	e24dd00c 	sub	sp, sp, #12
    db18:	e5dd903c 	ldrb	r9, [sp, #60]	@ 0x3c
    db1c:	e3a01003 	mov	r1, #3
    db20:	e1a02005 	mov	r2, r5
    db24:	e1a03006 	mov	r3, r6
    db28:	e58d5000 	str	r5, [sp]
    db2c:	e5dda038 	ldrb	sl, [sp, #56]	@ 0x38
    db30:	e5ddb030 	ldrb	fp, [sp, #48]	@ 0x30
    db34:	ebfff937 	bl	c018 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>
    db38:	e59d3034 	ldr	r3, [sp, #52]	@ 0x34
    db3c:	e5c4912d 	strb	r9, [r4, #301]	@ 0x12d
    db40:	e59f91cc 	ldr	r9, [pc, #460]	@ dd14 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x218>
    db44:	e5843128 	str	r3, [r4, #296]	@ 0x128
    db48:	e5c4a12c 	strb	sl, [r4, #300]	@ 0x12c
    db4c:	e5c4b124 	strb	fp, [r4, #292]	@ 0x124
    db50:	e584611c 	str	r6, [r4, #284]	@ 0x11c
    db54:	e5847120 	str	r7, [r4, #288]	@ 0x120
    db58:	e5849000 	str	r9, [r4]
    db5c:	e2840e13 	add	r0, r4, #304	@ 0x130
    db60:	eb002a1f 	bl	183e4 <CGPIOPin::CGPIOPin()>
    db64:	e2840f56 	add	r0, r4, #344	@ 0x158
    db68:	eb002a1d 	bl	183e4 <CGPIOPin::CGPIOPin()>
    db6c:	e2840d06 	add	r0, r4, #384	@ 0x180
    db70:	eb002a1b 	bl	183e4 <CGPIOPin::CGPIOPin()>
    db74:	e284ae1d 	add	sl, r4, #464	@ 0x1d0
    db78:	e2840f6a 	add	r0, r4, #424	@ 0x1a8
    db7c:	eb002a18 	bl	183e4 <CGPIOPin::CGPIOPin()>
    db80:	e3a02006 	mov	r2, #6
    db84:	e3a01013 	mov	r1, #19
    db88:	e1a0000a 	mov	r0, sl
    db8c:	eb00297f 	bl	18190 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
    db90:	e3a03002 	mov	r3, #2
    db94:	e3a01001 	mov	r1, #1
    db98:	e59f2178 	ldr	r2, [pc, #376]	@ dd18 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x21c>
    db9c:	e5c451d2 	strb	r5, [r4, #466]	@ 0x1d2
    dba0:	e2840f75 	add	r0, r4, #468	@ 0x1d4
    dba4:	e88d0180 	stm	sp, {r7, r8}
    dba8:	eb000364 	bl	e940 <CDMASoundBuffers::CDMASoundBuffers(bool, unsigned int, TDREQ, unsigned int, CInterruptSystem*)>
    dbac:	e3a03003 	mov	r3, #3
    dbb0:	e1a01005 	mov	r1, r5
    dbb4:	e88d0180 	stm	sp, {r7, r8}
    dbb8:	e59f2158 	ldr	r2, [pc, #344]	@ dd18 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x21c>
    dbbc:	e2840e21 	add	r0, r4, #528	@ 0x210
    dbc0:	eb00035e 	bl	e940 <CDMASoundBuffers::CDMASoundBuffers(bool, unsigned int, TDREQ, unsigned int, CInterruptSystem*)>
    dbc4:	e5943120 	ldr	r3, [r4, #288]	@ 0x120
    dbc8:	e5c4524c 	strb	r5, [r4, #588]	@ 0x24c
    dbcc:	e353001f 	cmp	r3, #31
    dbd0:	e5845250 	str	r5, [r4, #592]	@ 0x250
    dbd4:	9a000032 	bls	dca4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x1a8>
    dbd8:	e3130001 	tst	r3, #1
    dbdc:	1a000034 	bne	dcb4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x1b8>
    dbe0:	e59d3040 	ldr	r3, [sp, #64]	@ 0x40
    dbe4:	e3530002 	cmp	r3, #2
    dbe8:	1a000035 	bne	dcc4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x1c8>
    dbec:	e5d43124 	ldrb	r3, [r4, #292]	@ 0x124
    dbf0:	e3530000 	cmp	r3, #0
    dbf4:	1a000020 	bne	dc7c <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x180>
    dbf8:	eb001021 	bl	11c84 <CMachineInfo::Get()>
    dbfc:	e3a01006 	mov	r1, #6
    dc00:	eb000f9a 	bl	11a70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
    dc04:	e3500000 	cmp	r0, #0
    dc08:	0a000031 	beq	dcd4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x1d8>
    dc0c:	e59f3108 	ldr	r3, [pc, #264]	@ dd1c <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x220>
    dc10:	e2462d7d 	sub	r2, r6, #8000	@ 0x1f40
    dc14:	e1520003 	cmp	r2, r3
    dc18:	8a000031 	bhi	dce4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x1e8>
    dc1c:	e210803f 	ands	r8, r0, #63	@ 0x3f
    dc20:	1a000033 	bne	dcf4 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x1f8>
    dc24:	e1a01006 	mov	r1, r6
    dc28:	e1a00320 	lsr	r0, r0, #6
    dc2c:	eb0031d8 	bl	1a394 <__aeabi_uidivmod>
    dc30:	e1a050a6 	lsr	r5, r6, #1
    dc34:	e0855601 	add	r5, r5, r1, lsl #12
    dc38:	e1a07000 	mov	r7, r0
    dc3c:	e1a01006 	mov	r1, r6
    dc40:	e1a00005 	mov	r0, r5
    dc44:	eb003157 	bl	1a1a8 <__udivsi3>
    dc48:	e3500a01 	cmp	r0, #4096	@ 0x1000
    dc4c:	e1a02000 	mov	r2, r0
    dc50:	8a00002b 	bhi	dd04 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x208>
    dc54:	01a02008 	moveq	r2, r8
    dc58:	02877001 	addeq	r7, r7, #1
    dc5c:	0a000002 	beq	dc6c <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x170>
    dc60:	e1550006 	cmp	r5, r6
    dc64:	33a08000 	movcc	r8, #0
    dc68:	23a08001 	movcs	r8, #1
    dc6c:	e1a03008 	mov	r3, r8
    dc70:	e1a01007 	mov	r1, r7
    dc74:	e1a0000a 	mov	r0, sl
    dc78:	eb00295d 	bl	181f4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
    dc7c:	e1a00004 	mov	r0, r4
    dc80:	ebffff3a 	bl	d970 <CI2SSoundBaseDevice::RunI2S()>
    dc84:	eb00089b 	bl	fef8 <CDeviceNameService::Get()>
    dc88:	e3a03000 	mov	r3, #0
    dc8c:	e1a02004 	mov	r2, r4
    dc90:	e59f1088 	ldr	r1, [pc, #136]	@ dd20 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode, unsigned int)+0x224>
    dc94:	eb0007c5 	bl	fbb0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    dc98:	e1a00004 	mov	r0, r4
    dc9c:	e28dd00c 	add	sp, sp, #12
    dca0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dca4:	e3a0206f 	mov	r2, #111	@ 0x6f
    dca8:	e249102c 	sub	r1, r9, #44	@ 0x2c
    dcac:	e2890048 	add	r0, r9, #72	@ 0x48
    dcb0:	eb00069b 	bl	f724 <assertion_failed>
    dcb4:	e3a02070 	mov	r2, #112	@ 0x70
    dcb8:	e249102c 	sub	r1, r9, #44	@ 0x2c
    dcbc:	e289005c 	add	r0, r9, #92	@ 0x5c
    dcc0:	eb000697 	bl	f724 <assertion_failed>
    dcc4:	e3a02071 	mov	r2, #113	@ 0x71
    dcc8:	e249102c 	sub	r1, r9, #44	@ 0x2c
    dccc:	e2890074 	add	r0, r9, #116	@ 0x74
    dcd0:	eb000693 	bl	f724 <assertion_failed>
    dcd4:	e3a02078 	mov	r2, #120	@ 0x78
    dcd8:	e249102c 	sub	r1, r9, #44	@ 0x2c
    dcdc:	e2890088 	add	r0, r9, #136	@ 0x88
    dce0:	eb00068f 	bl	f724 <assertion_failed>
    dce4:	e3a02079 	mov	r2, #121	@ 0x79
    dce8:	e249102c 	sub	r1, r9, #44	@ 0x2c
    dcec:	e2890098 	add	r0, r9, #152	@ 0x98
    dcf0:	eb00068b 	bl	f724 <assertion_failed>
    dcf4:	e3a0207a 	mov	r2, #122	@ 0x7a
    dcf8:	e249102c 	sub	r1, r9, #44	@ 0x2c
    dcfc:	e28900c8 	add	r0, r9, #200	@ 0xc8
    dd00:	eb000687 	bl	f724 <assertion_failed>
    dd04:	e3a0207e 	mov	r2, #126	@ 0x7e
    dd08:	e249102c 	sub	r1, r9, #44	@ 0x2c
    dd0c:	e28900ec 	add	r0, r9, #236	@ 0xec
    dd10:	eb000683 	bl	f724 <assertion_failed>
    dd14:	0001dad0 	.word	0x0001dad0
    dd18:	20203004 	.word	0x20203004
    dd1c:	0002cec0 	.word	0x0002cec0
    dd20:	0001dbcc 	.word	0x0001dbcc

0000dd24 <CI2SSoundBaseDevice::StopI2S()>:
    dd24:	e92d4070 	push	{r4, r5, r6, lr}
    dd28:	e3a05000 	mov	r5, #0
    dd2c:	e1a04000 	mov	r4, r0
    dd30:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    dd34:	e59f3088 	ldr	r3, [pc, #136]	@ ddc4 <CI2SSoundBaseDevice::StopI2S()+0xa0>
    dd38:	e5835000 	str	r5, [r3]
    dd3c:	eb001faf 	bl	15c00 <CTimer::Get()>
    dd40:	e3a00032 	mov	r0, #50	@ 0x32
    dd44:	eb001f77 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
    dd48:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    dd4c:	e5d43124 	ldrb	r3, [r4, #292]	@ 0x124
    dd50:	e1530005 	cmp	r3, r5
    dd54:	0a000017 	beq	ddb8 <CI2SSoundBaseDevice::StopI2S()+0x94>
    dd58:	e3a02001 	mov	r2, #1
    dd5c:	e2840e13 	add	r0, r4, #304	@ 0x130
    dd60:	e1a01002 	mov	r1, r2
    dd64:	eb002c29 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    dd68:	e3a02001 	mov	r2, #1
    dd6c:	e2840f56 	add	r0, r4, #344	@ 0x158
    dd70:	e1a01002 	mov	r1, r2
    dd74:	eb002c25 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    dd78:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    dd7c:	e3530000 	cmp	r3, #0
    dd80:	1a000004 	bne	dd98 <CI2SSoundBaseDevice::StopI2S()+0x74>
    dd84:	e3a02001 	mov	r2, #1
    dd88:	e2840f6a 	add	r0, r4, #424	@ 0x1a8
    dd8c:	e1a01002 	mov	r1, r2
    dd90:	e8bd4070 	pop	{r4, r5, r6, lr}
    dd94:	ea002c1d 	b	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    dd98:	e3a02001 	mov	r2, #1
    dd9c:	e2840d06 	add	r0, r4, #384	@ 0x180
    dda0:	e1a01002 	mov	r1, r2
    dda4:	eb002c19 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
    dda8:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    ddac:	e3530001 	cmp	r3, #1
    ddb0:	08bd8070 	popeq	{r4, r5, r6, pc}
    ddb4:	eafffff2 	b	dd84 <CI2SSoundBaseDevice::StopI2S()+0x60>
    ddb8:	e2840e1d 	add	r0, r4, #464	@ 0x1d0
    ddbc:	eb002972 	bl	1838c <CGPIOClock::Stop()>
    ddc0:	eaffffe4 	b	dd58 <CI2SSoundBaseDevice::StopI2S()+0x34>
    ddc4:	20203000 	.word	0x20203000

0000ddc8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>:
    ddc8:	e92d4070 	push	{r4, r5, r6, lr}
    ddcc:	e1a04000 	mov	r4, r0
    ddd0:	e59f5098 	ldr	r5, [pc, #152]	@ de70 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0xa8>
    ddd4:	e5805000 	str	r5, [r0]
    ddd8:	eb000846 	bl	fef8 <CDeviceNameService::Get()>
    dddc:	e3a02000 	mov	r2, #0
    dde0:	e28510fc 	add	r1, r5, #252	@ 0xfc
    dde4:	eb00079e 	bl	fc64 <CDeviceNameService::RemoveDevice(char const*, bool)>
    dde8:	e5940250 	ldr	r0, [r4, #592]	@ 0x250
    ddec:	e3500000 	cmp	r0, #0
    ddf0:	0a000006 	beq	de10 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x48>
    ddf4:	e5903000 	ldr	r3, [r0]
    ddf8:	e59f2074 	ldr	r2, [pc, #116]	@ de74 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0xac>
    ddfc:	e5933004 	ldr	r3, [r3, #4]
    de00:	e1530002 	cmp	r3, r2
    de04:	1a000017 	bne	de68 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0xa0>
    de08:	e3a01004 	mov	r1, #4
    de0c:	eb0022ed 	bl	169c8 <operator delete(void*, unsigned int)>
    de10:	e3a03000 	mov	r3, #0
    de14:	e1a00004 	mov	r0, r4
    de18:	e5843250 	str	r3, [r4, #592]	@ 0x250
    de1c:	ebffffc0 	bl	dd24 <CI2SSoundBaseDevice::StopI2S()>
    de20:	e2840e21 	add	r0, r4, #528	@ 0x210
    de24:	eb0002da 	bl	e994 <CDMASoundBuffers::~CDMASoundBuffers()>
    de28:	e2840f75 	add	r0, r4, #468	@ 0x1d4
    de2c:	eb0002d8 	bl	e994 <CDMASoundBuffers::~CDMASoundBuffers()>
    de30:	e2840e1d 	add	r0, r4, #464	@ 0x1d0
    de34:	eb0028df 	bl	181b8 <CGPIOClock::~CGPIOClock()>
    de38:	e2840f6a 	add	r0, r4, #424	@ 0x1a8
    de3c:	eb002961 	bl	183c8 <CGPIOPin::~CGPIOPin()>
    de40:	e2840d06 	add	r0, r4, #384	@ 0x180
    de44:	eb00295f 	bl	183c8 <CGPIOPin::~CGPIOPin()>
    de48:	e2840f56 	add	r0, r4, #344	@ 0x158
    de4c:	eb00295d 	bl	183c8 <CGPIOPin::~CGPIOPin()>
    de50:	e2840e13 	add	r0, r4, #304	@ 0x130
    de54:	eb00295b 	bl	183c8 <CGPIOPin::~CGPIOPin()>
    de58:	e1a00004 	mov	r0, r4
    de5c:	ebfff766 	bl	bbfc <CSoundBaseDevice::~CSoundBaseDevice()>
    de60:	e1a00004 	mov	r0, r4
    de64:	e8bd8070 	pop	{r4, r5, r6, pc}
    de68:	e12fff33 	blx	r3
    de6c:	eaffffe7 	b	de10 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x48>
    de70:	0001dad0 	.word	0x0001dad0
    de74:	0000e0bc 	.word	0x0000e0bc

0000de78 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>:
    de78:	e92d4010 	push	{r4, lr}
    de7c:	e1a04000 	mov	r4, r0
    de80:	ebffffd0 	bl	ddc8 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>
    de84:	e1a00004 	mov	r0, r4
    de88:	e3a01f95 	mov	r1, #596	@ 0x254
    de8c:	eb0022cd 	bl	169c8 <operator delete(void*, unsigned int)>
    de90:	e1a00004 	mov	r0, r4
    de94:	e8bd8010 	pop	{r4, pc}

0000de98 <CI2SSoundBaseDevice::ControllerFactory()>:
    de98:	e5903128 	ldr	r3, [r0, #296]	@ 0x128
    de9c:	e3530000 	cmp	r3, #0
    dea0:	0a000026 	beq	df40 <CI2SSoundBaseDevice::ControllerFactory()+0xa8>
    dea4:	e92d4030 	push	{r4, r5, lr}
    dea8:	e1a04000 	mov	r4, r0
    deac:	e24dd00c 	sub	sp, sp, #12
    deb0:	e3a00014 	mov	r0, #20
    deb4:	eb0022ab 	bl	16968 <operator new(unsigned int)>
    deb8:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    debc:	e1a05000 	mov	r5, r0
    dec0:	e253e000 	subs	lr, r3, #0
    dec4:	13a0e001 	movne	lr, #1
    dec8:	e253c001 	subs	ip, r3, #1
    decc:	13a0c001 	movne	ip, #1
    ded0:	e594311c 	ldr	r3, [r4, #284]	@ 0x11c
    ded4:	e5d4212c 	ldrb	r2, [r4, #300]	@ 0x12c
    ded8:	e5941128 	ldr	r1, [r4, #296]	@ 0x128
    dedc:	e88d5000 	stm	sp, {ip, lr}
    dee0:	eb0000f7 	bl	e2c4 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char, unsigned int, bool, bool)>
    dee4:	e1a00005 	mov	r0, r5
    dee8:	e5845250 	str	r5, [r4, #592]	@ 0x250
    deec:	eb00013c 	bl	e3e4 <CWM8960SoundController::Probe()>
    def0:	e3500000 	cmp	r0, #0
    def4:	13a00001 	movne	r0, #1
    def8:	1a00000e 	bne	df38 <CI2SSoundBaseDevice::ControllerFactory()+0xa0>
    defc:	e5940250 	ldr	r0, [r4, #592]	@ 0x250
    df00:	e3500000 	cmp	r0, #0
    df04:	0a000006 	beq	df24 <CI2SSoundBaseDevice::ControllerFactory()+0x8c>
    df08:	e5903000 	ldr	r3, [r0]
    df0c:	e59f203c 	ldr	r2, [pc, #60]	@ df50 <CI2SSoundBaseDevice::ControllerFactory()+0xb8>
    df10:	e5933004 	ldr	r3, [r3, #4]
    df14:	e1530002 	cmp	r3, r2
    df18:	1a00000a 	bne	df48 <CI2SSoundBaseDevice::ControllerFactory()+0xb0>
    df1c:	e3a01004 	mov	r1, #4
    df20:	eb0022a8 	bl	169c8 <operator delete(void*, unsigned int)>
    df24:	e5d4012c 	ldrb	r0, [r4, #300]	@ 0x12c
    df28:	e3a03000 	mov	r3, #0
    df2c:	e16f0f10 	clz	r0, r0
    df30:	e5843250 	str	r3, [r4, #592]	@ 0x250
    df34:	e1a002a0 	lsr	r0, r0, #5
    df38:	e28dd00c 	add	sp, sp, #12
    df3c:	e8bd8030 	pop	{r4, r5, pc}
    df40:	e3a00001 	mov	r0, #1
    df44:	e12fff1e 	bx	lr
    df48:	e12fff33 	blx	r3
    df4c:	eafffff4 	b	df24 <CI2SSoundBaseDevice::ControllerFactory()+0x8c>
    df50:	0000e0bc 	.word	0x0000e0bc

0000df54 <CI2SSoundBaseDevice::Start()>:
    df54:	e5d031d2 	ldrb	r3, [r0, #466]	@ 0x1d2
    df58:	e3530000 	cmp	r3, #0
    df5c:	1a000050 	bne	e0a4 <CI2SSoundBaseDevice::Start()+0x150>
    df60:	e5d0324c 	ldrb	r3, [r0, #588]	@ 0x24c
    df64:	e92d4070 	push	{r4, r5, r6, lr}
    df68:	e3530000 	cmp	r3, #0
    df6c:	e1a04000 	mov	r4, r0
    df70:	0a00003a 	beq	e060 <CI2SSoundBaseDevice::Start()+0x10c>
    df74:	e3a03000 	mov	r3, #0
    df78:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    df7c:	e5943120 	ldr	r3, [r4, #288]	@ 0x120
    df80:	e353003f 	cmp	r3, #63	@ 0x3f
    df84:	8a00000b 	bhi	dfb8 <CI2SSoundBaseDevice::Start()+0x64>
    df88:	e353001f 	cmp	r3, #31
    df8c:	9a000040 	bls	e094 <CI2SSoundBaseDevice::Start()+0x140>
    df90:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    df94:	e3530001 	cmp	r3, #1
    df98:	0a000037 	beq	e07c <CI2SSoundBaseDevice::Start()+0x128>
    df9c:	e59f2108 	ldr	r2, [pc, #264]	@ e0ac <CI2SSoundBaseDevice::Start()+0x158>
    dfa0:	e3530000 	cmp	r3, #0
    dfa4:	e5923014 	ldr	r3, [r2, #20]
    dfa8:	e3c33c7f 	bic	r3, r3, #32512	@ 0x7f00
    dfac:	e3833b06 	orr	r3, r3, #6144	@ 0x1800
    dfb0:	e5823014 	str	r3, [r2, #20]
    dfb4:	1a000030 	bne	e07c <CI2SSoundBaseDevice::Start()+0x128>
    dfb8:	e59f10ec 	ldr	r1, [pc, #236]	@ e0ac <CI2SSoundBaseDevice::Start()+0x158>
    dfbc:	e3a03000 	mov	r3, #0
    dfc0:	e5912000 	ldr	r2, [r1]
    dfc4:	e3822c02 	orr	r2, r2, #512	@ 0x200
    dfc8:	e5812000 	str	r2, [r1]
    dfcc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dfd0:	e5d4212d 	ldrb	r2, [r4, #301]	@ 0x12d
    dfd4:	e3520001 	cmp	r2, #1
    dfd8:	01a05003 	moveq	r5, r3
    dfdc:	1a00000b 	bne	e010 <CI2SSoundBaseDevice::Start()+0xbc>
    dfe0:	e1a02004 	mov	r2, r4
    dfe4:	e59f10c4 	ldr	r1, [pc, #196]	@ e0b0 <CI2SSoundBaseDevice::Start()+0x15c>
    dfe8:	e2840e21 	add	r0, r4, #528	@ 0x210
    dfec:	eb00042c 	bl	f0a4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)>
    dff0:	e3500000 	cmp	r0, #0
    dff4:	13853502 	orrne	r3, r5, #8388608	@ 0x800000
    dff8:	13833002 	orrne	r3, r3, #2
    dffc:	1a00000e 	bne	e03c <CI2SSoundBaseDevice::Start()+0xe8>
    e000:	e3a03001 	mov	r3, #1
    e004:	e5c431d2 	strb	r3, [r4, #466]	@ 0x1d2
    e008:	e3a00000 	mov	r0, #0
    e00c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e010:	e1a02004 	mov	r2, r4
    e014:	e59f1098 	ldr	r1, [pc, #152]	@ e0b4 <CI2SSoundBaseDevice::Start()+0x160>
    e018:	e2840f75 	add	r0, r4, #468	@ 0x1d4
    e01c:	eb000420 	bl	f0a4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)>
    e020:	e3500000 	cmp	r0, #0
    e024:	0afffff5 	beq	e000 <CI2SSoundBaseDevice::Start()+0xac>
    e028:	e5d4312d 	ldrb	r3, [r4, #301]	@ 0x12d
    e02c:	e3530000 	cmp	r3, #0
    e030:	13a05004 	movne	r5, #4
    e034:	1affffe9 	bne	dfe0 <CI2SSoundBaseDevice::Start()+0x8c>
    e038:	e3a03004 	mov	r3, #4
    e03c:	e3a02000 	mov	r2, #0
    e040:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    e044:	e59f1060 	ldr	r1, [pc, #96]	@ e0ac <CI2SSoundBaseDevice::Start()+0x158>
    e048:	e5910000 	ldr	r0, [r1]
    e04c:	e1833000 	orr	r3, r3, r0
    e050:	e5813000 	str	r3, [r1]
    e054:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
    e058:	e3a00001 	mov	r0, #1
    e05c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e060:	ebffff8c 	bl	de98 <CI2SSoundBaseDevice::ControllerFactory()>
    e064:	e3a03001 	mov	r3, #1
    e068:	e3500000 	cmp	r0, #0
    e06c:	15c4324c 	strbne	r3, [r4, #588]	@ 0x24c
    e070:	1affffbf 	bne	df74 <CI2SSoundBaseDevice::Start()+0x20>
    e074:	e5c431d2 	strb	r3, [r4, #466]	@ 0x1d2
    e078:	eaffffe2 	b	e008 <CI2SSoundBaseDevice::Start()+0xb4>
    e07c:	e59f2028 	ldr	r2, [pc, #40]	@ e0ac <CI2SSoundBaseDevice::Start()+0x158>
    e080:	e5923014 	ldr	r3, [r2, #20]
    e084:	e3c3307f 	bic	r3, r3, #127	@ 0x7f
    e088:	e3833018 	orr	r3, r3, #24
    e08c:	e5823014 	str	r3, [r2, #20]
    e090:	eaffffc8 	b	dfb8 <CI2SSoundBaseDevice::Start()+0x64>
    e094:	e59f101c 	ldr	r1, [pc, #28]	@ e0b8 <CI2SSoundBaseDevice::Start()+0x164>
    e098:	e3a020ba 	mov	r2, #186	@ 0xba
    e09c:	e2810074 	add	r0, r1, #116	@ 0x74
    e0a0:	eb00059f 	bl	f724 <assertion_failed>
    e0a4:	e3a00000 	mov	r0, #0
    e0a8:	e12fff1e 	bx	lr
    e0ac:	20203000 	.word	0x20203000
    e0b0:	0000d924 	.word	0x0000d924
    e0b4:	0000d8dc 	.word	0x0000d8dc
    e0b8:	0001daa4 	.word	0x0001daa4

0000e0bc <CSoundController::~CSoundController()>:
    e0bc:	e92d4010 	push	{r4, lr}
    e0c0:	e1a04000 	mov	r4, r0
    e0c4:	e3a01004 	mov	r1, #4
    e0c8:	eb00223e 	bl	169c8 <operator delete(void*, unsigned int)>
    e0cc:	e1a00004 	mov	r0, r4
    e0d0:	e8bd8010 	pop	{r4, pc}

0000e0d4 <CSoundController::~CSoundController()>:
    e0d4:	e12fff1e 	bx	lr

0000e0d8 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const>:
    e0d8:	e3520001 	cmp	r2, #1
    e0dc:	e1a0c000 	mov	ip, r0
    e0e0:	e5dd1000 	ldrb	r1, [sp]
    e0e4:	0a000016 	beq	e144 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x6c>
    e0e8:	e3520002 	cmp	r2, #2
    e0ec:	0a000009 	beq	e118 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x40>
    e0f0:	e3520000 	cmp	r2, #0
    e0f4:	1a000001 	bne	e100 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x28>
    e0f8:	e35300ff 	cmp	r3, #255	@ 0xff
    e0fc:	8a00000b 	bhi	e130 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x58>
    e100:	e3a03000 	mov	r3, #0
    e104:	e1a0000c 	mov	r0, ip
    e108:	e5cc3000 	strb	r3, [ip]
    e10c:	e58c3004 	str	r3, [ip, #4]
    e110:	e58c3008 	str	r3, [ip, #8]
    e114:	e12fff1e 	bx	lr
    e118:	e16f1f11 	clz	r1, r1
    e11c:	e35300ff 	cmp	r3, #255	@ 0xff
    e120:	e1a012a1 	lsr	r1, r1, #5
    e124:	93a01000 	movls	r1, #0
    e128:	e3510000 	cmp	r1, #0
    e12c:	0afffff3 	beq	e100 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x28>
    e130:	e59f3028 	ldr	r3, [pc, #40]	@ e160 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x88>
    e134:	e8930007 	ldm	r3, {r0, r1, r2}
    e138:	e88c0007 	stm	ip, {r0, r1, r2}
    e13c:	e1a0000c 	mov	r0, ip
    e140:	e12fff1e 	bx	lr
    e144:	e35300ff 	cmp	r3, #255	@ 0xff
    e148:	859f3014 	ldrhi	r3, [pc, #20]	@ e164 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x8c>
    e14c:	959f3014 	ldrls	r3, [pc, #20]	@ e168 <CWM8960SoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x90>
    e150:	e8930007 	ldm	r3, {r0, r1, r2}
    e154:	e88c0007 	stm	ip, {r0, r1, r2}
    e158:	e1a0000c 	mov	r0, ip
    e15c:	e12fff1e 	bx	lr
    e160:	0001dbd4 	.word	0x0001dbd4
    e164:	0001dbe0 	.word	0x0001dbe0
    e168:	0001dbec 	.word	0x0001dbec

0000e16c <CWM8960SoundController::EnableJack(CSoundController::TJack)>:
    e16c:	e3510004 	cmp	r1, #4
    e170:	0a00000d 	beq	e1ac <CWM8960SoundController::EnableJack(CSoundController::TJack)+0x40>
    e174:	9a000007 	bls	e198 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0x2c>
    e178:	e3510c01 	cmp	r1, #256	@ 0x100
    e17c:	0a00001d 	beq	e1f8 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0x8c>
    e180:	e3510b01 	cmp	r1, #1024	@ 0x400
    e184:	0a00001b 	beq	e1f8 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0x8c>
    e188:	e2410008 	sub	r0, r1, #8
    e18c:	e16f0f10 	clz	r0, r0
    e190:	e1a002a0 	lsr	r0, r0, #5
    e194:	e12fff1e 	bx	lr
    e198:	e2411001 	sub	r1, r1, #1
    e19c:	e3510001 	cmp	r1, #1
    e1a0:	83a00000 	movhi	r0, #0
    e1a4:	93a00001 	movls	r0, #1
    e1a8:	e12fff1e 	bx	lr
    e1ac:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    e1b0:	e5902004 	ldr	r2, [r0, #4]
    e1b4:	e59f3064 	ldr	r3, [pc, #100]	@ e220 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0xb4>
    e1b8:	e24dd00c 	sub	sp, sp, #12
    e1bc:	e3520000 	cmp	r2, #0
    e1c0:	e1cd30b4 	strh	r3, [sp, #4]
    e1c4:	0a00000d 	beq	e200 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0x94>
    e1c8:	e5d01008 	ldrb	r1, [r0, #8]
    e1cc:	e3510000 	cmp	r1, #0
    e1d0:	0a00000e 	beq	e210 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0xa4>
    e1d4:	e3a03002 	mov	r3, #2
    e1d8:	e1a00002 	mov	r0, r2
    e1dc:	e28d2004 	add	r2, sp, #4
    e1e0:	eb002ceb 	bl	19594 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
    e1e4:	e2400002 	sub	r0, r0, #2
    e1e8:	e16f0f10 	clz	r0, r0
    e1ec:	e1a002a0 	lsr	r0, r0, #5
    e1f0:	e28dd00c 	add	sp, sp, #12
    e1f4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    e1f8:	e3a00001 	mov	r0, #1
    e1fc:	e12fff1e 	bx	lr
    e200:	e3a02f52 	mov	r2, #328	@ 0x148
    e204:	e59f1018 	ldr	r1, [pc, #24]	@ e224 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0xb8>
    e208:	e59f0018 	ldr	r0, [pc, #24]	@ e228 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0xbc>
    e20c:	eb000544 	bl	f724 <assertion_failed>
    e210:	e59f2014 	ldr	r2, [pc, #20]	@ e22c <CWM8960SoundController::EnableJack(CSoundController::TJack)+0xc0>
    e214:	e59f1008 	ldr	r1, [pc, #8]	@ e224 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0xb8>
    e218:	e59f0010 	ldr	r0, [pc, #16]	@ e230 <CWM8960SoundController::EnableJack(CSoundController::TJack)+0xc4>
    e21c:	eb000540 	bl	f724 <assertion_failed>
    e220:	fffff762 	.word	0xfffff762
    e224:	0001d0d4 	.word	0x0001d0d4
    e228:	0001d0f0 	.word	0x0001d0f0
    e22c:	00000149 	.word	0x00000149
    e230:	0001d100 	.word	0x0001d100

0000e234 <CWM8960SoundController::DisableJack(CSoundController::TJack)>:
    e234:	e3510004 	cmp	r1, #4
    e238:	0a000001 	beq	e244 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x10>
    e23c:	e3a00000 	mov	r0, #0
    e240:	e12fff1e 	bx	lr
    e244:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    e248:	e5902004 	ldr	r2, [r0, #4]
    e24c:	e59f305c 	ldr	r3, [pc, #92]	@ e2b0 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x7c>
    e250:	e24dd00c 	sub	sp, sp, #12
    e254:	e3520000 	cmp	r2, #0
    e258:	e1cd30b4 	strh	r3, [sp, #4]
    e25c:	0a00000b 	beq	e290 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x5c>
    e260:	e5d01008 	ldrb	r1, [r0, #8]
    e264:	e3510000 	cmp	r1, #0
    e268:	0a00000c 	beq	e2a0 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x6c>
    e26c:	e3a03002 	mov	r3, #2
    e270:	e1a00002 	mov	r0, r2
    e274:	e28d2004 	add	r2, sp, #4
    e278:	eb002cc5 	bl	19594 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
    e27c:	e2400002 	sub	r0, r0, #2
    e280:	e16f0f10 	clz	r0, r0
    e284:	e1a002a0 	lsr	r0, r0, #5
    e288:	e28dd00c 	add	sp, sp, #12
    e28c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    e290:	e3a02f52 	mov	r2, #328	@ 0x148
    e294:	e59f1018 	ldr	r1, [pc, #24]	@ e2b4 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x80>
    e298:	e59f0018 	ldr	r0, [pc, #24]	@ e2b8 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x84>
    e29c:	eb000520 	bl	f724 <assertion_failed>
    e2a0:	e59f2014 	ldr	r2, [pc, #20]	@ e2bc <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x88>
    e2a4:	e59f1008 	ldr	r1, [pc, #8]	@ e2b4 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x80>
    e2a8:	e59f0010 	ldr	r0, [pc, #16]	@ e2c0 <CWM8960SoundController::DisableJack(CSoundController::TJack)+0x8c>
    e2ac:	eb00051c 	bl	f724 <assertion_failed>
    e2b0:	00003762 	.word	0x00003762
    e2b4:	0001d0d4 	.word	0x0001d0d4
    e2b8:	0001d0f0 	.word	0x0001d0f0
    e2bc:	00000149 	.word	0x00000149
    e2c0:	0001d100 	.word	0x0001d100

0000e2c4 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char, unsigned int, bool, bool)>:
    e2c4:	e3520000 	cmp	r2, #0
    e2c8:	03a0201a 	moveq	r2, #26
    e2cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e2d0:	e59f503c 	ldr	r5, [pc, #60]	@ e314 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char, unsigned int, bool, bool)+0x50>
    e2d4:	e5dd4018 	ldrb	r4, [sp, #24]
    e2d8:	e5dde01c 	ldrb	lr, [sp, #28]
    e2dc:	e1d562b4 	ldrh	r6, [r5, #36]	@ 0x24
    e2e0:	e194700e 	orrs	r7, r4, lr
    e2e4:	e5805000 	str	r5, [r0]
    e2e8:	e5801004 	str	r1, [r0, #4]
    e2ec:	e5c02008 	strb	r2, [r0, #8]
    e2f0:	e580300c 	str	r3, [r0, #12]
    e2f4:	e5c04010 	strb	r4, [r0, #16]
    e2f8:	e5c0e011 	strb	lr, [r0, #17]
    e2fc:	e1c061b2 	strh	r6, [r0, #18]
    e300:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
    e304:	e3a02021 	mov	r2, #33	@ 0x21
    e308:	e59f1008 	ldr	r1, [pc, #8]	@ e318 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char, unsigned int, bool, bool)+0x54>
    e30c:	e59f0008 	ldr	r0, [pc, #8]	@ e31c <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char, unsigned int, bool, bool)+0x58>
    e310:	eb000503 	bl	f724 <assertion_failed>
    e314:	0001dc00 	.word	0x0001dc00
    e318:	0001d0d4 	.word	0x0001d0d4
    e31c:	0001d110 	.word	0x0001d110

0000e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>:
    e320:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    e324:	e6af1071 	sxtb	r1, r1
    e328:	e3510000 	cmp	r1, #0
    e32c:	e24dd00c 	sub	sp, sp, #12
    e330:	ba000014 	blt	e388 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0x68>
    e334:	e3520c02 	cmp	r2, #512	@ 0x200
    e338:	2a000016 	bcs	e398 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0x78>
    e33c:	e1a03000 	mov	r3, r0
    e340:	e5900004 	ldr	r0, [r0, #4]
    e344:	e1a0c422 	lsr	ip, r2, #8
    e348:	e18c1081 	orr	r1, ip, r1, lsl #1
    e34c:	e3500000 	cmp	r0, #0
    e350:	e5cd1004 	strb	r1, [sp, #4]
    e354:	e5cd2005 	strb	r2, [sp, #5]
    e358:	0a000012 	beq	e3a8 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0x88>
    e35c:	e5d31008 	ldrb	r1, [r3, #8]
    e360:	e3510000 	cmp	r1, #0
    e364:	0a000013 	beq	e3b8 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0x98>
    e368:	e3a03002 	mov	r3, #2
    e36c:	e28d2004 	add	r2, sp, #4
    e370:	eb002c87 	bl	19594 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
    e374:	e2400002 	sub	r0, r0, #2
    e378:	e16f0f10 	clz	r0, r0
    e37c:	e1a002a0 	lsr	r0, r0, #5
    e380:	e28dd00c 	add	sp, sp, #12
    e384:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    e388:	e3a02f51 	mov	r2, #324	@ 0x144
    e38c:	e59f1034 	ldr	r1, [pc, #52]	@ e3c8 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xa8>
    e390:	e59f0034 	ldr	r0, [pc, #52]	@ e3cc <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xac>
    e394:	eb0004e2 	bl	f724 <assertion_failed>
    e398:	e59f2030 	ldr	r2, [pc, #48]	@ e3d0 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xb0>
    e39c:	e59f1024 	ldr	r1, [pc, #36]	@ e3c8 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xa8>
    e3a0:	e59f002c 	ldr	r0, [pc, #44]	@ e3d4 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xb4>
    e3a4:	eb0004de 	bl	f724 <assertion_failed>
    e3a8:	e3a02f52 	mov	r2, #328	@ 0x148
    e3ac:	e59f1014 	ldr	r1, [pc, #20]	@ e3c8 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xa8>
    e3b0:	e59f0020 	ldr	r0, [pc, #32]	@ e3d8 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xb8>
    e3b4:	eb0004da 	bl	f724 <assertion_failed>
    e3b8:	e59f201c 	ldr	r2, [pc, #28]	@ e3dc <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xbc>
    e3bc:	e59f1004 	ldr	r1, [pc, #4]	@ e3c8 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xa8>
    e3c0:	e59f0018 	ldr	r0, [pc, #24]	@ e3e0 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)+0xc0>
    e3c4:	eb0004d6 	bl	f724 <assertion_failed>
    e3c8:	0001d0d4 	.word	0x0001d0d4
    e3cc:	0001d134 	.word	0x0001d134
    e3d0:	00000145 	.word	0x00000145
    e3d4:	0001d144 	.word	0x0001d144
    e3d8:	0001d0f0 	.word	0x0001d0f0
    e3dc:	00000149 	.word	0x00000149
    e3e0:	0001d100 	.word	0x0001d100

0000e3e4 <CWM8960SoundController::Probe()>:
    e3e4:	e92d4010 	push	{r4, lr}
    e3e8:	e3a02000 	mov	r2, #0
    e3ec:	e3a0100f 	mov	r1, #15
    e3f0:	e1a04000 	mov	r4, r0
    e3f4:	ebffffc9 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e3f8:	e3500000 	cmp	r0, #0
    e3fc:	0a000025 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e400:	e5d43011 	ldrb	r3, [r4, #17]
    e404:	e3a01019 	mov	r1, #25
    e408:	e3530000 	cmp	r3, #0
    e40c:	03a02d07 	moveq	r2, #448	@ 0x1c0
    e410:	13a02f7f 	movne	r2, #508	@ 0x1fc
    e414:	e1a00004 	mov	r0, r4
    e418:	ebffffc0 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e41c:	e3500000 	cmp	r0, #0
    e420:	0a00001c 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e424:	e5d43010 	ldrb	r3, [r4, #16]
    e428:	e59f22bc 	ldr	r2, [pc, #700]	@ e6ec <CWM8960SoundController::Probe()+0x308>
    e42c:	e3530000 	cmp	r3, #0
    e430:	03a02001 	moveq	r2, #1
    e434:	e3a0101a 	mov	r1, #26
    e438:	e1a00004 	mov	r0, r4
    e43c:	ebffffb7 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e440:	e3500000 	cmp	r0, #0
    e444:	0a000013 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e448:	e5d42011 	ldrb	r2, [r4, #17]
    e44c:	e5d43010 	ldrb	r3, [r4, #16]
    e450:	e3520000 	cmp	r2, #0
    e454:	03a02000 	moveq	r2, #0
    e458:	13a02030 	movne	r2, #48	@ 0x30
    e45c:	e2633000 	rsb	r3, r3, #0
    e460:	e203300c 	and	r3, r3, #12
    e464:	e3a0102f 	mov	r1, #47	@ 0x2f
    e468:	e1a00004 	mov	r0, r4
    e46c:	e1822003 	orr	r2, r2, r3
    e470:	ebffffaa 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e474:	e3500000 	cmp	r0, #0
    e478:	0a000006 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e47c:	e594300c 	ldr	r3, [r4, #12]
    e480:	e59f2268 	ldr	r2, [pc, #616]	@ e6f0 <CWM8960SoundController::Probe()+0x30c>
    e484:	e1530002 	cmp	r3, r2
    e488:	0a00007d 	beq	e684 <CWM8960SoundController::Probe()+0x2a0>
    e48c:	e59f2260 	ldr	r2, [pc, #608]	@ e6f4 <CWM8960SoundController::Probe()+0x310>
    e490:	e1530002 	cmp	r3, r2
    e494:	0a000001 	beq	e4a0 <CWM8960SoundController::Probe()+0xbc>
    e498:	e3a00000 	mov	r0, #0
    e49c:	e8bd8010 	pop	{r4, pc}
    e4a0:	e3a02005 	mov	r2, #5
    e4a4:	e3a01004 	mov	r1, #4
    e4a8:	e1a00004 	mov	r0, r4
    e4ac:	ebffff9b 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e4b0:	e3500000 	cmp	r0, #0
    e4b4:	0afffff7 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e4b8:	e3a02038 	mov	r2, #56	@ 0x38
    e4bc:	e3a01034 	mov	r1, #52	@ 0x34
    e4c0:	e1a00004 	mov	r0, r4
    e4c4:	ebffff95 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e4c8:	e3500000 	cmp	r0, #0
    e4cc:	0afffff1 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e4d0:	e3a02031 	mov	r2, #49	@ 0x31
    e4d4:	e3a01035 	mov	r1, #53	@ 0x35
    e4d8:	e1a00004 	mov	r0, r4
    e4dc:	ebffff8f 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e4e0:	e3500000 	cmp	r0, #0
    e4e4:	0affffeb 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e4e8:	e3a02026 	mov	r2, #38	@ 0x26
    e4ec:	e3a01036 	mov	r1, #54	@ 0x36
    e4f0:	e1a00004 	mov	r0, r4
    e4f4:	ebffff89 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e4f8:	e3500000 	cmp	r0, #0
    e4fc:	13a020e8 	movne	r2, #232	@ 0xe8
    e500:	0affffe4 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e504:	e3a01037 	mov	r1, #55	@ 0x37
    e508:	e1a00004 	mov	r0, r4
    e50c:	ebffff83 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e510:	e3500000 	cmp	r0, #0
    e514:	0affffdf 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e518:	e3a02000 	mov	r2, #0
    e51c:	e3a01005 	mov	r1, #5
    e520:	e1a00004 	mov	r0, r4
    e524:	ebffff7d 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e528:	e3500000 	cmp	r0, #0
    e52c:	0affffd9 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e530:	e3a0200a 	mov	r2, #10
    e534:	e3a01007 	mov	r1, #7
    e538:	e1a00004 	mov	r0, r4
    e53c:	ebffff77 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e540:	e3500000 	cmp	r0, #0
    e544:	0affffd3 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e548:	e3a020f9 	mov	r2, #249	@ 0xf9
    e54c:	e3a01014 	mov	r1, #20
    e550:	e1a00004 	mov	r0, r4
    e554:	ebffff71 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e558:	e3500000 	cmp	r0, #0
    e55c:	0affffcd 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e560:	e3a01002 	mov	r1, #2
    e564:	e1a00004 	mov	r0, r4
    e568:	e59f2188 	ldr	r2, [pc, #392]	@ e6f8 <CWM8960SoundController::Probe()+0x314>
    e56c:	ebffff6b 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e570:	e3500000 	cmp	r0, #0
    e574:	0affffc7 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e578:	e3a01003 	mov	r1, #3
    e57c:	e1a00004 	mov	r0, r4
    e580:	e59f2170 	ldr	r2, [pc, #368]	@ e6f8 <CWM8960SoundController::Probe()+0x314>
    e584:	ebffff65 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e588:	e3500000 	cmp	r0, #0
    e58c:	0affffc1 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e590:	e3a01028 	mov	r1, #40	@ 0x28
    e594:	e1a00004 	mov	r0, r4
    e598:	e59f2158 	ldr	r2, [pc, #344]	@ e6f8 <CWM8960SoundController::Probe()+0x314>
    e59c:	ebffff5f 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e5a0:	e3500000 	cmp	r0, #0
    e5a4:	0affffbb 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e5a8:	e3a01029 	mov	r1, #41	@ 0x29
    e5ac:	e1a00004 	mov	r0, r4
    e5b0:	e59f2140 	ldr	r2, [pc, #320]	@ e6f8 <CWM8960SoundController::Probe()+0x314>
    e5b4:	ebffff59 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e5b8:	e3500000 	cmp	r0, #0
    e5bc:	0affffb5 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e5c0:	e3a0208d 	mov	r2, #141	@ 0x8d
    e5c4:	e3a01033 	mov	r1, #51	@ 0x33
    e5c8:	e1a00004 	mov	r0, r4
    e5cc:	ebffff53 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e5d0:	e3500000 	cmp	r0, #0
    e5d4:	0affffaf 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e5d8:	e5d42012 	ldrb	r2, [r4, #18]
    e5dc:	e3a01000 	mov	r1, #0
    e5e0:	e1a00004 	mov	r0, r4
    e5e4:	e3822c01 	orr	r2, r2, #256	@ 0x100
    e5e8:	ebffff4c 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e5ec:	e3500000 	cmp	r0, #0
    e5f0:	0affffa8 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e5f4:	e5d42013 	ldrb	r2, [r4, #19]
    e5f8:	e3a01001 	mov	r1, #1
    e5fc:	e1a00004 	mov	r0, r4
    e600:	e3822c01 	orr	r2, r2, #256	@ 0x100
    e604:	ebffff45 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e608:	e3500000 	cmp	r0, #0
    e60c:	0affffa1 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e610:	e3a02f42 	mov	r2, #264	@ 0x108
    e614:	e3a01020 	mov	r1, #32
    e618:	e1a00004 	mov	r0, r4
    e61c:	ebffff3f 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e620:	e3500000 	cmp	r0, #0
    e624:	0affff9b 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e628:	e3a02f42 	mov	r2, #264	@ 0x108
    e62c:	e3a01021 	mov	r1, #33	@ 0x21
    e630:	e1a00004 	mov	r0, r4
    e634:	ebffff39 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e638:	e3500000 	cmp	r0, #0
    e63c:	0affff95 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e640:	e3a020f7 	mov	r2, #247	@ 0xf7
    e644:	e3a01031 	mov	r1, #49	@ 0x31
    e648:	e1a00004 	mov	r0, r4
    e64c:	ebffff33 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e650:	e3500000 	cmp	r0, #0
    e654:	0affff8f 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e658:	e3a02c01 	mov	r2, #256	@ 0x100
    e65c:	e3a01022 	mov	r1, #34	@ 0x22
    e660:	e1a00004 	mov	r0, r4
    e664:	ebffff2d 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e668:	e3500000 	cmp	r0, #0
    e66c:	0affff89 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e670:	e1a00004 	mov	r0, r4
    e674:	e8bd4010 	pop	{r4, lr}
    e678:	e3a02c01 	mov	r2, #256	@ 0x100
    e67c:	e3a01025 	mov	r1, #37	@ 0x25
    e680:	eaffff26 	b	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e684:	e3a02005 	mov	r2, #5
    e688:	e3a01004 	mov	r1, #4
    e68c:	e1a00004 	mov	r0, r4
    e690:	ebffff22 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e694:	e3500000 	cmp	r0, #0
    e698:	0affff7e 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e69c:	e3a02037 	mov	r2, #55	@ 0x37
    e6a0:	e3a01034 	mov	r1, #52	@ 0x34
    e6a4:	e1a00004 	mov	r0, r4
    e6a8:	ebffff1c 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e6ac:	e3500000 	cmp	r0, #0
    e6b0:	0affff78 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e6b4:	e3a02086 	mov	r2, #134	@ 0x86
    e6b8:	e3a01035 	mov	r1, #53	@ 0x35
    e6bc:	e1a00004 	mov	r0, r4
    e6c0:	ebffff16 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e6c4:	e3500000 	cmp	r0, #0
    e6c8:	0affff72 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e6cc:	e3a020c2 	mov	r2, #194	@ 0xc2
    e6d0:	e3a01036 	mov	r1, #54	@ 0x36
    e6d4:	e1a00004 	mov	r0, r4
    e6d8:	ebffff10 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e6dc:	e3500000 	cmp	r0, #0
    e6e0:	0affff6c 	beq	e498 <CWM8960SoundController::Probe()+0xb4>
    e6e4:	e3a02026 	mov	r2, #38	@ 0x26
    e6e8:	eaffff85 	b	e504 <CWM8960SoundController::Probe()+0x120>
    e6ec:	000001f9 	.word	0x000001f9
    e6f0:	0000ac44 	.word	0x0000ac44
    e6f4:	0000bb80 	.word	0x0000bb80
    e6f8:	00000179 	.word	0x00000179

0000e6fc <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)>:
    e6fc:	e92d4070 	push	{r4, r5, r6, lr}
    e700:	e3510001 	cmp	r1, #1
    e704:	e24dd008 	sub	sp, sp, #8
    e708:	e1a05000 	mov	r5, r0
    e70c:	e59d4018 	ldr	r4, [sp, #24]
    e710:	0a000019 	beq	e77c <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x80>
    e714:	e3510002 	cmp	r1, #2
    e718:	0a000004 	beq	e730 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x34>
    e71c:	e3510000 	cmp	r1, #0
    e720:	0a000028 	beq	e7c8 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0xcc>
    e724:	e3a00000 	mov	r0, #0
    e728:	e28dd008 	add	sp, sp, #8
    e72c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e730:	e16f3f13 	clz	r3, r3
    e734:	e35200ff 	cmp	r2, #255	@ 0xff
    e738:	e1a032a3 	lsr	r3, r3, #5
    e73c:	93a03000 	movls	r3, #0
    e740:	e3530000 	cmp	r3, #0
    e744:	0afffff6 	beq	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e748:	e3540000 	cmp	r4, #0
    e74c:	0a000054 	beq	e8a4 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x1a8>
    e750:	e5d02012 	ldrb	r2, [r0, #18]
    e754:	e3a01001 	mov	r1, #1
    e758:	e5c02013 	strb	r2, [r0, #19]
    e75c:	e3822c01 	orr	r2, r2, #256	@ 0x100
    e760:	ebfffeee 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e764:	e3500000 	cmp	r0, #0
    e768:	0affffed 	beq	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e76c:	e3a01011 	mov	r1, #17
    e770:	e1a00005 	mov	r0, r5
    e774:	e59f2184 	ldr	r2, [pc, #388]	@ e900 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x204>
    e778:	ea000021 	b	e804 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x108>
    e77c:	e35200ff 	cmp	r2, #255	@ 0xff
    e780:	9a000022 	bls	e810 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x114>
    e784:	e2844011 	add	r4, r4, #17
    e788:	e354002f 	cmp	r4, #47	@ 0x2f
    e78c:	8affffe4 	bhi	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e790:	e0844104 	add	r4, r4, r4, lsl #2
    e794:	e0844104 	add	r4, r4, r4, lsl #2
    e798:	e59f1164 	ldr	r1, [pc, #356]	@ e904 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x208>
    e79c:	e1a02104 	lsl	r2, r4, #2
    e7a0:	e0821291 	umull	r1, r2, r1, r2
    e7a4:	e3530001 	cmp	r3, #1
    e7a8:	e1a021a2 	lsr	r2, r2, #3
    e7ac:	e6ef4072 	uxtb	r4, r2
    e7b0:	9a00003e 	bls	e8b0 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x1b4>
    e7b4:	e31300fd 	tst	r3, #253	@ 0xfd
    e7b8:	0a000031 	beq	e884 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x188>
    e7bc:	e3a00001 	mov	r0, #1
    e7c0:	e28dd008 	add	sp, sp, #8
    e7c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e7c8:	e35200ff 	cmp	r2, #255	@ 0xff
    e7cc:	9affffd4 	bls	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e7d0:	e3530001 	cmp	r3, #1
    e7d4:	9a00001d 	bls	e850 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x154>
    e7d8:	e31300fd 	tst	r3, #253	@ 0xfd
    e7dc:	1afffff6 	bne	e7bc <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0xc0>
    e7e0:	e2544000 	subs	r4, r4, #0
    e7e4:	13a04001 	movne	r4, #1
    e7e8:	e3a01001 	mov	r1, #1
    e7ec:	e1a00005 	mov	r0, r5
    e7f0:	e5d52013 	ldrb	r2, [r5, #19]
    e7f4:	e202203f 	and	r2, r2, #63	@ 0x3f
    e7f8:	e1822384 	orr	r2, r2, r4, lsl #7
    e7fc:	e5c52013 	strb	r2, [r5, #19]
    e800:	e3822c01 	orr	r2, r2, #256	@ 0x100
    e804:	e28dd008 	add	sp, sp, #8
    e808:	e8bd4070 	pop	{r4, r5, r6, lr}
    e80c:	eafffec3 	b	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e810:	e2841049 	add	r1, r4, #73	@ 0x49
    e814:	e351004f 	cmp	r1, #79	@ 0x4f
    e818:	8affffc1 	bhi	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e81c:	e3520004 	cmp	r2, #4
    e820:	13a06002 	movne	r6, #2
    e824:	03a06028 	moveq	r6, #40	@ 0x28
    e828:	e2844079 	add	r4, r4, #121	@ 0x79
    e82c:	e3530001 	cmp	r3, #1
    e830:	e6ef4074 	uxtb	r4, r4
    e834:	9a000029 	bls	e8e0 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x1e4>
    e838:	e31300fd 	tst	r3, #253	@ 0xfd
    e83c:	1affffde 	bne	e7bc <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0xc0>
    e840:	e1a00005 	mov	r0, r5
    e844:	e3842c01 	orr	r2, r4, #256	@ 0x100
    e848:	e2861001 	add	r1, r6, #1
    e84c:	eaffffec 	b	e804 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x108>
    e850:	e254c000 	subs	ip, r4, #0
    e854:	13a0c001 	movne	ip, #1
    e858:	e5d02012 	ldrb	r2, [r0, #18]
    e85c:	e58d3004 	str	r3, [sp, #4]
    e860:	e202203f 	and	r2, r2, #63	@ 0x3f
    e864:	e182238c 	orr	r2, r2, ip, lsl #7
    e868:	e5c02012 	strb	r2, [r0, #18]
    e86c:	e3822c01 	orr	r2, r2, #256	@ 0x100
    e870:	ebfffeaa 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e874:	e3500000 	cmp	r0, #0
    e878:	e59d3004 	ldr	r3, [sp, #4]
    e87c:	1affffd5 	bne	e7d8 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0xdc>
    e880:	eaffffa7 	b	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e884:	e5d53013 	ldrb	r3, [r5, #19]
    e888:	e3a01001 	mov	r1, #1
    e88c:	e3c3307f 	bic	r3, r3, #127	@ 0x7f
    e890:	e1842003 	orr	r2, r4, r3
    e894:	e5c52013 	strb	r2, [r5, #19]
    e898:	e1a00005 	mov	r0, r5
    e89c:	e3822c01 	orr	r2, r2, #256	@ 0x100
    e8a0:	eaffffd7 	b	e804 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x108>
    e8a4:	e3a0200b 	mov	r2, #11
    e8a8:	e3a01011 	mov	r1, #17
    e8ac:	eaffffd4 	b	e804 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x108>
    e8b0:	e5d02012 	ldrb	r2, [r0, #18]
    e8b4:	e3a01000 	mov	r1, #0
    e8b8:	e3c2207f 	bic	r2, r2, #127	@ 0x7f
    e8bc:	e1842002 	orr	r2, r4, r2
    e8c0:	e5c02012 	strb	r2, [r0, #18]
    e8c4:	e3822c01 	orr	r2, r2, #256	@ 0x100
    e8c8:	e58d3004 	str	r3, [sp, #4]
    e8cc:	ebfffe93 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e8d0:	e3500000 	cmp	r0, #0
    e8d4:	e59d3004 	ldr	r3, [sp, #4]
    e8d8:	1affffb5 	bne	e7b4 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0xb8>
    e8dc:	eaffff90 	b	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e8e0:	e1a01006 	mov	r1, r6
    e8e4:	e3842c01 	orr	r2, r4, #256	@ 0x100
    e8e8:	e58d3004 	str	r3, [sp, #4]
    e8ec:	ebfffe8b 	bl	e320 <CWM8960SoundController::WriteReg(unsigned char, unsigned short)>
    e8f0:	e3500000 	cmp	r0, #0
    e8f4:	e59d3004 	ldr	r3, [sp, #4]
    e8f8:	1affffce 	bne	e838 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x13c>
    e8fc:	eaffff88 	b	e724 <CWM8960SoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
    e900:	000001fb 	.word	0x000001fb
    e904:	1b4e81b5 	.word	0x1b4e81b5

0000e908 <CWM8960SoundController::GetOutputProperties() const>:
    e908:	e5d03010 	ldrb	r3, [r0, #16]
    e90c:	e3530000 	cmp	r3, #0
    e910:	13a00003 	movne	r0, #3
    e914:	03a00000 	moveq	r0, #0
    e918:	e12fff1e 	bx	lr

0000e91c <CWM8960SoundController::GetInputProperties() const>:
    e91c:	e5d00011 	ldrb	r0, [r0, #17]
    e920:	e12fff1e 	bx	lr

0000e924 <CWM8960SoundController::~CWM8960SoundController()>:
    e924:	e12fff1e 	bx	lr

0000e928 <CWM8960SoundController::~CWM8960SoundController()>:
    e928:	e92d4010 	push	{r4, lr}
    e92c:	e1a04000 	mov	r4, r0
    e930:	e3a01014 	mov	r1, #20
    e934:	eb002023 	bl	169c8 <operator delete(void*, unsigned int)>
    e938:	e1a00004 	mov	r0, r4
    e93c:	e8bd8010 	pop	{r4, pc}

0000e940 <CDMASoundBuffers::CDMASoundBuffers(bool, unsigned int, TDREQ, unsigned int, CInterruptSystem*)>:
    e940:	e92d4030 	push	{r4, r5, lr}
    e944:	e3a0e000 	mov	lr, #0
    e948:	e3a0500c 	mov	r5, #12
    e94c:	e3a04001 	mov	r4, #1
    e950:	e5c03008 	strb	r3, [r0, #8]
    e954:	e59d300c 	ldr	r3, [sp, #12]
    e958:	e5c01000 	strb	r1, [r0]
    e95c:	e580300c 	str	r3, [r0, #12]
    e960:	e59d3010 	ldr	r3, [sp, #16]
    e964:	e5802004 	str	r2, [r0, #4]
    e968:	e5803010 	str	r3, [r0, #16]
    e96c:	e580e014 	str	lr, [r0, #20]
    e970:	e5c0e01c 	strb	lr, [r0, #28]
    e974:	e5c0e01d 	strb	lr, [r0, #29]
    e978:	e5805020 	str	r5, [r0, #32]
    e97c:	e580e024 	str	lr, [r0, #36]	@ 0x24
    e980:	e580e028 	str	lr, [r0, #40]	@ 0x28
    e984:	e580e02c 	str	lr, [r0, #44]	@ 0x2c
    e988:	e580e030 	str	lr, [r0, #48]	@ 0x30
    e98c:	e5804038 	str	r4, [r0, #56]	@ 0x38
    e990:	e8bd8030 	pop	{r4, r5, pc}

0000e994 <CDMASoundBuffers::~CDMASoundBuffers()>:
    e994:	e5d0301d 	ldrb	r3, [r0, #29]
    e998:	e92d4010 	push	{r4, lr}
    e99c:	e3530002 	cmp	r3, #2
    e9a0:	0a000040 	beq	eaa8 <CDMASoundBuffers::~CDMASoundBuffers()+0x114>
    e9a4:	e5d0301d 	ldrb	r3, [r0, #29]
    e9a8:	e1a04000 	mov	r4, r0
    e9ac:	e3530003 	cmp	r3, #3
    e9b0:	0a00003c 	beq	eaa8 <CDMASoundBuffers::~CDMASoundBuffers()+0x114>
    e9b4:	e5d0301d 	ldrb	r3, [r0, #29]
    e9b8:	e3530004 	cmp	r3, #4
    e9bc:	0a000039 	beq	eaa8 <CDMASoundBuffers::~CDMASoundBuffers()+0x114>
    e9c0:	e5901020 	ldr	r1, [r0, #32]
    e9c4:	e351000b 	cmp	r1, #11
    e9c8:	8a000022 	bhi	ea58 <CDMASoundBuffers::~CDMASoundBuffers()+0xc4>
    e9cc:	e5d0301c 	ldrb	r3, [r0, #28]
    e9d0:	e3530000 	cmp	r3, #0
    e9d4:	0a000004 	beq	e9ec <CDMASoundBuffers::~CDMASoundBuffers()+0x58>
    e9d8:	e5900010 	ldr	r0, [r0, #16]
    e9dc:	e3500000 	cmp	r0, #0
    e9e0:	0a000034 	beq	eab8 <CDMASoundBuffers::~CDMASoundBuffers()+0x124>
    e9e4:	e2811010 	add	r1, r1, #16
    e9e8:	eb00248c 	bl	17c20 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e9ec:	e3a03000 	mov	r3, #0
    e9f0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e9f4:	e3a02102 	mov	r2, #-2147483648	@ 0x80000000
    e9f8:	e5943020 	ldr	r3, [r4, #32]
    e9fc:	e2833602 	add	r3, r3, #2097152	@ 0x200000
    ea00:	e2833070 	add	r3, r3, #112	@ 0x70
    ea04:	e1a03403 	lsl	r3, r3, #8
    ea08:	e5832000 	str	r2, [r3]
    ea0c:	e5941020 	ldr	r1, [r4, #32]
    ea10:	e2812602 	add	r2, r1, #2097152	@ 0x200000
    ea14:	e2822070 	add	r2, r2, #112	@ 0x70
    ea18:	e1a02402 	lsl	r2, r2, #8
    ea1c:	e5923000 	ldr	r3, [r2]
    ea20:	e3530000 	cmp	r3, #0
    ea24:	bafffffc 	blt	ea1c <CDMASoundBuffers::~CDMASoundBuffers()+0x88>
    ea28:	e3a0c001 	mov	ip, #1
    ea2c:	e59f2094 	ldr	r2, [pc, #148]	@ eac8 <CDMASoundBuffers::~CDMASoundBuffers()+0x134>
    ea30:	e3a00000 	mov	r0, #0
    ea34:	e5923ff0 	ldr	r3, [r2, #4080]	@ 0xff0
    ea38:	e1c3311c 	bic	r3, r3, ip, lsl r1
    ea3c:	e5823ff0 	str	r3, [r2, #4080]	@ 0xff0
    ea40:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    ea44:	eb000c8e 	bl	11c84 <CMachineInfo::Get()>
    ea48:	e5941020 	ldr	r1, [r4, #32]
    ea4c:	eb000c6a 	bl	11bfc <CMachineInfo::FreeDMAChannel(unsigned int)>
    ea50:	e3a0300c 	mov	r3, #12
    ea54:	e5843020 	str	r3, [r4, #32]
    ea58:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
    ea5c:	e3500000 	cmp	r0, #0
    ea60:	0a000001 	beq	ea6c <CDMASoundBuffers::~CDMASoundBuffers()+0xd8>
    ea64:	e3a01020 	mov	r1, #32
    ea68:	eb001fd6 	bl	169c8 <operator delete(void*, unsigned int)>
    ea6c:	e5940030 	ldr	r0, [r4, #48]	@ 0x30
    ea70:	e3500000 	cmp	r0, #0
    ea74:	0a000001 	beq	ea80 <CDMASoundBuffers::~CDMASoundBuffers()+0xec>
    ea78:	e3a01020 	mov	r1, #32
    ea7c:	eb001fd1 	bl	169c8 <operator delete(void*, unsigned int)>
    ea80:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    ea84:	e3500000 	cmp	r0, #0
    ea88:	0a000000 	beq	ea90 <CDMASoundBuffers::~CDMASoundBuffers()+0xfc>
    ea8c:	eb001fc7 	bl	169b0 <operator delete[](void*)>
    ea90:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
    ea94:	e3500000 	cmp	r0, #0
    ea98:	0a000000 	beq	eaa0 <CDMASoundBuffers::~CDMASoundBuffers()+0x10c>
    ea9c:	eb001fc3 	bl	169b0 <operator delete[](void*)>
    eaa0:	e1a00004 	mov	r0, r4
    eaa4:	e8bd8010 	pop	{r4, pc}
    eaa8:	e59f101c 	ldr	r1, [pc, #28]	@ eacc <CDMASoundBuffers::~CDMASoundBuffers()+0x138>
    eaac:	e3a02034 	mov	r2, #52	@ 0x34
    eab0:	e2810014 	add	r0, r1, #20
    eab4:	eb00031a 	bl	f724 <assertion_failed>
    eab8:	e59f100c 	ldr	r1, [pc, #12]	@ eacc <CDMASoundBuffers::~CDMASoundBuffers()+0x138>
    eabc:	e3a0203c 	mov	r2, #60	@ 0x3c
    eac0:	e2810068 	add	r0, r1, #104	@ 0x68
    eac4:	eb000316 	bl	f724 <assertion_failed>
    eac8:	20007000 	.word	0x20007000
    eacc:	0001dc28 	.word	0x0001dc28

0000ead0 <CDMASoundBuffers::Cancel()>:
    ead0:	e92d4010 	push	{r4, lr}
    ead4:	e1a04000 	mov	r4, r0
    ead8:	e5900038 	ldr	r0, [r0, #56]	@ 0x38
    eadc:	e3500000 	cmp	r0, #0
    eae0:	1a000004 	bne	eaf8 <CDMASoundBuffers::Cancel()+0x28>
    eae4:	e5d4301d 	ldrb	r3, [r4, #29]
    eae8:	e3530002 	cmp	r3, #2
    eaec:	03a03003 	moveq	r3, #3
    eaf0:	05c4301d 	strbeq	r3, [r4, #29]
    eaf4:	e8bd8010 	pop	{r4, pc}
    eaf8:	eb002364 	bl	17890 <EnterCritical>
    eafc:	e5d4301d 	ldrb	r3, [r4, #29]
    eb00:	e3530002 	cmp	r3, #2
    eb04:	03a02003 	moveq	r2, #3
    eb08:	15943038 	ldrne	r3, [r4, #56]	@ 0x38
    eb0c:	05943038 	ldreq	r3, [r4, #56]	@ 0x38
    eb10:	05c4201d 	strbeq	r2, [r4, #29]
    eb14:	e3530000 	cmp	r3, #0
    eb18:	08bd8010 	popeq	{r4, pc}
    eb1c:	e8bd4010 	pop	{r4, lr}
    eb20:	ea002384 	b	17938 <LeaveCritical>

0000eb24 <CDMASoundBuffers::IsActive() const>:
    eb24:	e5d0001d 	ldrb	r0, [r0, #29]
    eb28:	e2400002 	sub	r0, r0, #2
    eb2c:	e3500002 	cmp	r0, #2
    eb30:	83a00000 	movhi	r0, #0
    eb34:	93a00001 	movls	r0, #1
    eb38:	e12fff1e 	bx	lr

0000eb3c <CDMASoundBuffers::GetNextChunk(bool)>:
    eb3c:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
    eb40:	e92d4070 	push	{r4, r5, r6, lr}
    eb44:	e3530001 	cmp	r3, #1
    eb48:	8a000036 	bhi	ec28 <CDMASoundBuffers::GetNextChunk(bool)+0xec>
    eb4c:	e0803103 	add	r3, r0, r3, lsl #2
    eb50:	e1a04000 	mov	r4, r0
    eb54:	e5930024 	ldr	r0, [r3, #36]	@ 0x24
    eb58:	e3500000 	cmp	r0, #0
    eb5c:	0a000035 	beq	ec38 <CDMASoundBuffers::GetNextChunk(bool)+0xfc>
    eb60:	e3510000 	cmp	r1, #0
    eb64:	1a000025 	bne	ec00 <CDMASoundBuffers::GetNextChunk(bool)+0xc4>
    eb68:	e5945014 	ldr	r5, [r4, #20]
    eb6c:	e3550000 	cmp	r5, #0
    eb70:	0a000028 	beq	ec18 <CDMASoundBuffers::GetNextChunk(bool)+0xdc>
    eb74:	e1a01000 	mov	r1, r0
    eb78:	e5943018 	ldr	r3, [r4, #24]
    eb7c:	e3a00001 	mov	r0, #1
    eb80:	e594200c 	ldr	r2, [r4, #12]
    eb84:	e12fff35 	blx	r5
    eb88:	e3500000 	cmp	r0, #0
    eb8c:	11a05100 	lslne	r5, r0, #2
    eb90:	08bd8070 	popeq	{r4, r5, r6, pc}
    eb94:	e3550801 	cmp	r5, #65536	@ 0x10000
    eb98:	2a00002a 	bcs	ec48 <CDMASoundBuffers::GetNextChunk(bool)+0x10c>
    eb9c:	e5942034 	ldr	r2, [r4, #52]	@ 0x34
    eba0:	e0842102 	add	r2, r4, r2, lsl #2
    eba4:	e592302c 	ldr	r3, [r2, #44]	@ 0x2c
    eba8:	e3530000 	cmp	r3, #0
    ebac:	0a000029 	beq	ec58 <CDMASoundBuffers::GetNextChunk(bool)+0x11c>
    ebb0:	e5920024 	ldr	r0, [r2, #36]	@ 0x24
    ebb4:	e1a02825 	lsr	r2, r5, #16
    ebb8:	e1a01425 	lsr	r1, r5, #8
    ebbc:	e5c3200e 	strb	r2, [r3, #14]
    ebc0:	e1a02c25 	lsr	r2, r5, #24
    ebc4:	e5c3200f 	strb	r2, [r3, #15]
    ebc8:	e5c3500c 	strb	r5, [r3, #12]
    ebcc:	e5c3100d 	strb	r1, [r3, #13]
    ebd0:	e1a01005 	mov	r1, r5
    ebd4:	eb00236d 	bl	17990 <CleanAndInvalidateDataCacheRange>
    ebd8:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
    ebdc:	e3a01020 	mov	r1, #32
    ebe0:	e0843103 	add	r3, r4, r3, lsl #2
    ebe4:	e593002c 	ldr	r0, [r3, #44]	@ 0x2c
    ebe8:	eb002368 	bl	17990 <CleanAndInvalidateDataCacheRange>
    ebec:	e3a00001 	mov	r0, #1
    ebf0:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
    ebf4:	e0233000 	eor	r3, r3, r0
    ebf8:	e5843034 	str	r3, [r4, #52]	@ 0x34
    ebfc:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec00:	e594500c 	ldr	r5, [r4, #12]
    ec04:	e3a01000 	mov	r1, #0
    ec08:	e1a05105 	lsl	r5, r5, #2
    ec0c:	e1a02005 	mov	r2, r5
    ec10:	eb001e32 	bl	164e0 <memset>
    ec14:	eaffffde 	b	eb94 <CDMASoundBuffers::GetNextChunk(bool)+0x58>
    ec18:	e59f1048 	ldr	r1, [pc, #72]	@ ec68 <CDMASoundBuffers::GetNextChunk(bool)+0x12c>
    ec1c:	e3a020e3 	mov	r2, #227	@ 0xe3
    ec20:	e28100b8 	add	r0, r1, #184	@ 0xb8
    ec24:	eb0002be 	bl	f724 <assertion_failed>
    ec28:	e59f1038 	ldr	r1, [pc, #56]	@ ec68 <CDMASoundBuffers::GetNextChunk(bool)+0x12c>
    ec2c:	e3a020dd 	mov	r2, #221	@ 0xdd
    ec30:	e2810080 	add	r0, r1, #128	@ 0x80
    ec34:	eb0002ba 	bl	f724 <assertion_failed>
    ec38:	e59f1028 	ldr	r1, [pc, #40]	@ ec68 <CDMASoundBuffers::GetNextChunk(bool)+0x12c>
    ec3c:	e3a020de 	mov	r2, #222	@ 0xde
    ec40:	e2810094 	add	r0, r1, #148	@ 0x94
    ec44:	eb0002b6 	bl	f724 <assertion_failed>
    ec48:	e59f1018 	ldr	r1, [pc, #24]	@ ec68 <CDMASoundBuffers::GetNextChunk(bool)+0x12c>
    ec4c:	e3a020f2 	mov	r2, #242	@ 0xf2
    ec50:	e28100c8 	add	r0, r1, #200	@ 0xc8
    ec54:	eb0002b2 	bl	f724 <assertion_failed>
    ec58:	e59f1008 	ldr	r1, [pc, #8]	@ ec68 <CDMASoundBuffers::GetNextChunk(bool)+0x12c>
    ec5c:	e3a020f4 	mov	r2, #244	@ 0xf4
    ec60:	e28100f0 	add	r0, r1, #240	@ 0xf0
    ec64:	eb0002ae 	bl	f724 <assertion_failed>
    ec68:	0001dc28 	.word	0x0001dc28

0000ec6c <CDMASoundBuffers::PutChunk()>:
    ec6c:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
    ec70:	e92d4070 	push	{r4, r5, r6, lr}
    ec74:	e3530001 	cmp	r3, #1
    ec78:	8a000016 	bhi	ecd8 <CDMASoundBuffers::PutChunk()+0x6c>
    ec7c:	e0803103 	add	r3, r0, r3, lsl #2
    ec80:	e1a04000 	mov	r4, r0
    ec84:	e5930024 	ldr	r0, [r3, #36]	@ 0x24
    ec88:	e3500000 	cmp	r0, #0
    ec8c:	0a000015 	beq	ece8 <CDMASoundBuffers::PutChunk()+0x7c>
    ec90:	e594100c 	ldr	r1, [r4, #12]
    ec94:	e1a01101 	lsl	r1, r1, #2
    ec98:	eb00233c 	bl	17990 <CleanAndInvalidateDataCacheRange>
    ec9c:	e5945014 	ldr	r5, [r4, #20]
    eca0:	e3550000 	cmp	r5, #0
    eca4:	0a000013 	beq	ecf8 <CDMASoundBuffers::PutChunk()+0x8c>
    eca8:	e5941034 	ldr	r1, [r4, #52]	@ 0x34
    ecac:	e5943018 	ldr	r3, [r4, #24]
    ecb0:	e0841101 	add	r1, r4, r1, lsl #2
    ecb4:	e594200c 	ldr	r2, [r4, #12]
    ecb8:	e5911024 	ldr	r1, [r1, #36]	@ 0x24
    ecbc:	e3a00001 	mov	r0, #1
    ecc0:	e12fff35 	blx	r5
    ecc4:	e3a00001 	mov	r0, #1
    ecc8:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
    eccc:	e0233000 	eor	r3, r3, r0
    ecd0:	e5843034 	str	r3, [r4, #52]	@ 0x34
    ecd4:	e8bd8070 	pop	{r4, r5, r6, pc}
    ecd8:	e59f1028 	ldr	r1, [pc, #40]	@ ed08 <CDMASoundBuffers::PutChunk()+0x9c>
    ecdc:	e59f2028 	ldr	r2, [pc, #40]	@ ed0c <CDMASoundBuffers::PutChunk()+0xa0>
    ece0:	e2810080 	add	r0, r1, #128	@ 0x80
    ece4:	eb00028e 	bl	f724 <assertion_failed>
    ece8:	e59f1018 	ldr	r1, [pc, #24]	@ ed08 <CDMASoundBuffers::PutChunk()+0x9c>
    ecec:	e59f201c 	ldr	r2, [pc, #28]	@ ed10 <CDMASoundBuffers::PutChunk()+0xa4>
    ecf0:	e2810094 	add	r0, r1, #148	@ 0x94
    ecf4:	eb00028a 	bl	f724 <assertion_failed>
    ecf8:	e59f1008 	ldr	r1, [pc, #8]	@ ed08 <CDMASoundBuffers::PutChunk()+0x9c>
    ecfc:	e3a02f42 	mov	r2, #264	@ 0x108
    ed00:	e28100b8 	add	r0, r1, #184	@ 0xb8
    ed04:	eb000286 	bl	f724 <assertion_failed>
    ed08:	0001dc28 	.word	0x0001dc28
    ed0c:	00000101 	.word	0x00000101
    ed10:	00000102 	.word	0x00000102

0000ed14 <CDMASoundBuffers::InterruptHandler()>:
    ed14:	e5903020 	ldr	r3, [r0, #32]
    ed18:	e92d4010 	push	{r4, lr}
    ed1c:	e353000b 	cmp	r3, #11
    ed20:	8a000045 	bhi	ee3c <CDMASoundBuffers::InterruptHandler()+0x128>
    ed24:	e1a04000 	mov	r4, r0
    ed28:	e3a02000 	mov	r2, #0
    ed2c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    ed30:	e3a03001 	mov	r3, #1
    ed34:	e59f1164 	ldr	r1, [pc, #356]	@ eea0 <CDMASoundBuffers::InterruptHandler()+0x18c>
    ed38:	e594c020 	ldr	ip, [r4, #32]
    ed3c:	e5910fe0 	ldr	r0, [r1, #4064]	@ 0xfe0
    ed40:	e1a03c13 	lsl	r3, r3, ip
    ed44:	e1130000 	tst	r3, r0
    ed48:	0a00003f 	beq	ee4c <CDMASoundBuffers::InterruptHandler()+0x138>
    ed4c:	e5813fe0 	str	r3, [r1, #4064]	@ 0xfe0
    ed50:	e5943020 	ldr	r3, [r4, #32]
    ed54:	e2833602 	add	r3, r3, #2097152	@ 0x200000
    ed58:	e2833070 	add	r3, r3, #112	@ 0x70
    ed5c:	e1a03403 	lsl	r3, r3, #8
    ed60:	e5931000 	ldr	r1, [r3]
    ed64:	e3110004 	tst	r1, #4
    ed68:	0a00003b 	beq	ee5c <CDMASoundBuffers::InterruptHandler()+0x148>
    ed6c:	e5831000 	str	r1, [r3]
    ed70:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
    ed74:	e3110c01 	tst	r1, #256	@ 0x100
    ed78:	1a00001b 	bne	edec <CDMASoundBuffers::InterruptHandler()+0xd8>
    ed7c:	e5940038 	ldr	r0, [r4, #56]	@ 0x38
    ed80:	e3500000 	cmp	r0, #0
    ed84:	1a00002a 	bne	ee34 <CDMASoundBuffers::InterruptHandler()+0x120>
    ed88:	e5d4301d 	ldrb	r3, [r4, #29]
    ed8c:	e3530003 	cmp	r3, #3
    ed90:	e6ef3073 	uxtb	r3, r3
    ed94:	0a00000b 	beq	edc8 <CDMASoundBuffers::InterruptHandler()+0xb4>
    ed98:	e3530004 	cmp	r3, #4
    ed9c:	0a00001d 	beq	ee18 <CDMASoundBuffers::InterruptHandler()+0x104>
    eda0:	e3530002 	cmp	r3, #2
    eda4:	1a000039 	bne	ee90 <CDMASoundBuffers::InterruptHandler()+0x17c>
    eda8:	e5d43000 	ldrb	r3, [r4]
    edac:	e3530000 	cmp	r3, #0
    edb0:	0a00002d 	beq	ee6c <CDMASoundBuffers::InterruptHandler()+0x158>
    edb4:	e3a01000 	mov	r1, #0
    edb8:	e1a00004 	mov	r0, r4
    edbc:	ebffff5e 	bl	eb3c <CDMASoundBuffers::GetNextChunk(bool)>
    edc0:	e3500000 	cmp	r0, #0
    edc4:	1a000015 	bne	ee20 <CDMASoundBuffers::InterruptHandler()+0x10c>
    edc8:	e3a03000 	mov	r3, #0
    edcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    edd0:	e59f20cc 	ldr	r2, [pc, #204]	@ eea4 <CDMASoundBuffers::InterruptHandler()+0x190>
    edd4:	e5941020 	ldr	r1, [r4, #32]
    edd8:	e7823401 	str	r3, [r2, r1, lsl #8]
    eddc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ede0:	e3a03004 	mov	r3, #4
    ede4:	e5c4301d 	strb	r3, [r4, #29]
    ede8:	ea00000c 	b	ee20 <CDMASoundBuffers::InterruptHandler()+0x10c>
    edec:	e3a03005 	mov	r3, #5
    edf0:	e594e014 	ldr	lr, [r4, #20]
    edf4:	e5c4301d 	strb	r3, [r4, #29]
    edf8:	e35e0000 	cmp	lr, #0
    edfc:	0a00001f 	beq	ee80 <CDMASoundBuffers::InterruptHandler()+0x16c>
    ee00:	e1a0c00e 	mov	ip, lr
    ee04:	e5943018 	ldr	r3, [r4, #24]
    ee08:	e1a01002 	mov	r1, r2
    ee0c:	e8bd4010 	pop	{r4, lr}
    ee10:	e1a00002 	mov	r0, r2
    ee14:	e12fff1c 	bx	ip
    ee18:	e3a03001 	mov	r3, #1
    ee1c:	e5c4301d 	strb	r3, [r4, #29]
    ee20:	e5943038 	ldr	r3, [r4, #56]	@ 0x38
    ee24:	e3530000 	cmp	r3, #0
    ee28:	08bd8010 	popeq	{r4, pc}
    ee2c:	e8bd4010 	pop	{r4, lr}
    ee30:	ea0022c0 	b	17938 <LeaveCritical>
    ee34:	eb002295 	bl	17890 <EnterCritical>
    ee38:	eaffffd2 	b	ed88 <CDMASoundBuffers::InterruptHandler()+0x74>
    ee3c:	e59f1064 	ldr	r1, [pc, #100]	@ eea8 <CDMASoundBuffers::InterruptHandler()+0x194>
    ee40:	e59f2064 	ldr	r2, [pc, #100]	@ eeac <CDMASoundBuffers::InterruptHandler()+0x198>
    ee44:	e2810f45 	add	r0, r1, #276	@ 0x114
    ee48:	eb000235 	bl	f724 <assertion_failed>
    ee4c:	e59f1054 	ldr	r1, [pc, #84]	@ eea8 <CDMASoundBuffers::InterruptHandler()+0x194>
    ee50:	e59f2058 	ldr	r2, [pc, #88]	@ eeb0 <CDMASoundBuffers::InterruptHandler()+0x19c>
    ee54:	e2810f4e 	add	r0, r1, #312	@ 0x138
    ee58:	eb000231 	bl	f724 <assertion_failed>
    ee5c:	e59f1044 	ldr	r1, [pc, #68]	@ eea8 <CDMASoundBuffers::InterruptHandler()+0x194>
    ee60:	e59f204c 	ldr	r2, [pc, #76]	@ eeb4 <CDMASoundBuffers::InterruptHandler()+0x1a0>
    ee64:	e2810e15 	add	r0, r1, #336	@ 0x150
    ee68:	eb00022d 	bl	f724 <assertion_failed>
    ee6c:	e1a00004 	mov	r0, r4
    ee70:	ebffff7d 	bl	ec6c <CDMASoundBuffers::PutChunk()>
    ee74:	e3500000 	cmp	r0, #0
    ee78:	1affffe8 	bne	ee20 <CDMASoundBuffers::InterruptHandler()+0x10c>
    ee7c:	eaffffd1 	b	edc8 <CDMASoundBuffers::InterruptHandler()+0xb4>
    ee80:	e59f1020 	ldr	r1, [pc, #32]	@ eea8 <CDMASoundBuffers::InterruptHandler()+0x194>
    ee84:	e59f202c 	ldr	r2, [pc, #44]	@ eeb8 <CDMASoundBuffers::InterruptHandler()+0x1a4>
    ee88:	e28100b8 	add	r0, r1, #184	@ 0xb8
    ee8c:	eb000224 	bl	f724 <assertion_failed>
    ee90:	e59f1010 	ldr	r1, [pc, #16]	@ eea8 <CDMASoundBuffers::InterruptHandler()+0x194>
    ee94:	e59f2020 	ldr	r2, [pc, #32]	@ eebc <CDMASoundBuffers::InterruptHandler()+0x1a8>
    ee98:	e2810e16 	add	r0, r1, #352	@ 0x160
    ee9c:	eb000220 	bl	f724 <assertion_failed>
    eea0:	20007000 	.word	0x20007000
    eea4:	2000701c 	.word	0x2000701c
    eea8:	0001dc28 	.word	0x0001dc28
    eeac:	00000112 	.word	0x00000112
    eeb0:	0000011a 	.word	0x0000011a
    eeb4:	0000011e 	.word	0x0000011e
    eeb8:	00000127 	.word	0x00000127
    eebc:	0000014f 	.word	0x0000014f

0000eec0 <CDMASoundBuffers::InterruptStub(void*)>:
    eec0:	e3500000 	cmp	r0, #0
    eec4:	0a000000 	beq	eecc <CDMASoundBuffers::InterruptStub(void*)+0xc>
    eec8:	eaffff91 	b	ed14 <CDMASoundBuffers::InterruptHandler()>
    eecc:	e59f100c 	ldr	r1, [pc, #12]	@ eee0 <CDMASoundBuffers::InterruptStub(void*)+0x20>
    eed0:	e92d4010 	push	{r4, lr}
    eed4:	e59f2008 	ldr	r2, [pc, #8]	@ eee4 <CDMASoundBuffers::InterruptStub(void*)+0x24>
    eed8:	e2810f59 	add	r0, r1, #356	@ 0x164
    eedc:	eb000210 	bl	f724 <assertion_failed>
    eee0:	0001dc28 	.word	0x0001dc28
    eee4:	00000159 	.word	0x00000159

0000eee8 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)>:
    eee8:	e3510001 	cmp	r1, #1
    eeec:	e92d4070 	push	{r4, r5, r6, lr}
    eef0:	8a00005f 	bhi	f074 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x18c>
    eef4:	e1a05000 	mov	r5, r0
    eef8:	e590000c 	ldr	r0, [r0, #12]
    eefc:	e3500000 	cmp	r0, #0
    ef00:	0a00005f 	beq	f084 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x19c>
    ef04:	e370022e 	cmn	r0, #-536870910	@ 0xe0000002
    ef08:	83e00000 	mvnhi	r0, #0
    ef0c:	91a00100 	lslls	r0, r0, #2
    ef10:	e1a04001 	mov	r4, r1
    ef14:	e3a01000 	mov	r1, #0
    ef18:	eb001e84 	bl	16930 <operator new[](unsigned int, int)>
    ef1c:	e1a03000 	mov	r3, r0
    ef20:	e0854104 	add	r4, r5, r4, lsl #2
    ef24:	e5843024 	str	r3, [r4, #36]	@ 0x24
    ef28:	e3a01000 	mov	r1, #0
    ef2c:	e3a00020 	mov	r0, #32
    ef30:	eb001e74 	bl	16908 <operator new(unsigned int, int)>
    ef34:	e584002c 	str	r0, [r4, #44]	@ 0x2c
    ef38:	e5d52000 	ldrb	r2, [r5]
    ef3c:	e1a03000 	mov	r3, r0
    ef40:	e3520000 	cmp	r2, #0
    ef44:	1a00002d 	bne	f000 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x118>
    ef48:	e3a0c000 	mov	ip, #0
    ef4c:	e59f1140 	ldr	r1, [pc, #320]	@ f094 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x1ac>
    ef50:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
    ef54:	e5d50008 	ldrb	r0, [r5, #8]
    ef58:	e5c31000 	strb	r1, [r3]
    ef5c:	e1a01421 	lsr	r1, r1, #8
    ef60:	e5c31001 	strb	r1, [r3, #1]
    ef64:	e5951004 	ldr	r1, [r5, #4]
    ef68:	e5c30002 	strb	r0, [r3, #2]
    ef6c:	e3c114ff 	bic	r1, r1, #-16777216	@ 0xff000000
    ef70:	e595000c 	ldr	r0, [r5, #12]
    ef74:	e5c31004 	strb	r1, [r3, #4]
    ef78:	e281147e 	add	r1, r1, #2113929216	@ 0x7e000000
    ef7c:	e3c22103 	bic	r2, r2, #-1073741824	@ 0xc0000000
    ef80:	e5c3c003 	strb	ip, [r3, #3]
    ef84:	e1a0c421 	lsr	ip, r1, #8
    ef88:	e5c32008 	strb	r2, [r3, #8]
    ef8c:	e5c3c005 	strb	ip, [r3, #5]
    ef90:	e3822101 	orr	r2, r2, #1073741824	@ 0x40000000
    ef94:	e1a0c821 	lsr	ip, r1, #16
    ef98:	e5c3c006 	strb	ip, [r3, #6]
    ef9c:	e1a0c422 	lsr	ip, r2, #8
    efa0:	e1a00100 	lsl	r0, r0, #2
    efa4:	e1a01c21 	lsr	r1, r1, #24
    efa8:	e5c3c009 	strb	ip, [r3, #9]
    efac:	e1a0c822 	lsr	ip, r2, #16
    efb0:	e1a02c22 	lsr	r2, r2, #24
    efb4:	e5c3000c 	strb	r0, [r3, #12]
    efb8:	e5c31007 	strb	r1, [r3, #7]
    efbc:	e5c3200b 	strb	r2, [r3, #11]
    efc0:	e1a01420 	lsr	r1, r0, #8
    efc4:	e1a02820 	lsr	r2, r0, #16
    efc8:	e1a00c20 	lsr	r0, r0, #24
    efcc:	e5c3c00a 	strb	ip, [r3, #10]
    efd0:	e5c3100d 	strb	r1, [r3, #13]
    efd4:	e5c3200e 	strb	r2, [r3, #14]
    efd8:	e5c3000f 	strb	r0, [r3, #15]
    efdc:	e3a02000 	mov	r2, #0
    efe0:	e3a00001 	mov	r0, #1
    efe4:	e5c32010 	strb	r2, [r3, #16]
    efe8:	e5c32011 	strb	r2, [r3, #17]
    efec:	e5c32012 	strb	r2, [r3, #18]
    eff0:	e5c32013 	strb	r2, [r3, #19]
    eff4:	e5832018 	str	r2, [r3, #24]
    eff8:	e583201c 	str	r2, [r3, #28]
    effc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f000:	e3a0c000 	mov	ip, #0
    f004:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
    f008:	e5d52008 	ldrb	r2, [r5, #8]
    f00c:	e59f0084 	ldr	r0, [pc, #132]	@ f098 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x1b0>
    f010:	e3c11103 	bic	r1, r1, #-1073741824	@ 0xc0000000
    f014:	e5c32002 	strb	r2, [r3, #2]
    f018:	e5952004 	ldr	r2, [r5, #4]
    f01c:	e5c30000 	strb	r0, [r3]
    f020:	e5c31004 	strb	r1, [r3, #4]
    f024:	e1a00420 	lsr	r0, r0, #8
    f028:	e3811101 	orr	r1, r1, #1073741824	@ 0x40000000
    f02c:	e3c224ff 	bic	r2, r2, #-16777216	@ 0xff000000
    f030:	e5c30001 	strb	r0, [r3, #1]
    f034:	e1a00421 	lsr	r0, r1, #8
    f038:	e5c32008 	strb	r2, [r3, #8]
    f03c:	e5c30005 	strb	r0, [r3, #5]
    f040:	e282247e 	add	r2, r2, #2113929216	@ 0x7e000000
    f044:	e1a00821 	lsr	r0, r1, #16
    f048:	e1a01c21 	lsr	r1, r1, #24
    f04c:	e5c30006 	strb	r0, [r3, #6]
    f050:	e5c31007 	strb	r1, [r3, #7]
    f054:	e1a00422 	lsr	r0, r2, #8
    f058:	e1a01822 	lsr	r1, r2, #16
    f05c:	e1a02c22 	lsr	r2, r2, #24
    f060:	e5c30009 	strb	r0, [r3, #9]
    f064:	e5c3100a 	strb	r1, [r3, #10]
    f068:	e5c3200b 	strb	r2, [r3, #11]
    f06c:	e5c3c003 	strb	ip, [r3, #3]
    f070:	eaffffd9 	b	efdc <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0xf4>
    f074:	e59f1020 	ldr	r1, [pc, #32]	@ f09c <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x1b4>
    f078:	e3a02e16 	mov	r2, #352	@ 0x160
    f07c:	e2810e17 	add	r0, r1, #368	@ 0x170
    f080:	eb0001a7 	bl	f724 <assertion_failed>
    f084:	e59f1010 	ldr	r1, [pc, #16]	@ f09c <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x1b4>
    f088:	e59f2010 	ldr	r2, [pc, #16]	@ f0a0 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0x1b8>
    f08c:	e2810f5f 	add	r0, r1, #380	@ 0x17c
    f090:	eb0001a3 	bl	f724 <assertion_failed>
    f094:	00000439 	.word	0x00000439
    f098:	00000349 	.word	0x00000349
    f09c:	0001dc28 	.word	0x0001dc28
    f0a0:	00000162 	.word	0x00000162

0000f0a4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)>:
    f0a4:	e5d0301d 	ldrb	r3, [r0, #29]
    f0a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f0ac:	e21350ff 	ands	r5, r3, #255	@ 0xff
    f0b0:	e1a04000 	mov	r4, r0
    f0b4:	e1a06001 	mov	r6, r1
    f0b8:	e1a07002 	mov	r7, r2
    f0bc:	1a00005a 	bne	f22c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x188>
    f0c0:	e590300c 	ldr	r3, [r0, #12]
    f0c4:	e1a03103 	lsl	r3, r3, #2
    f0c8:	e3530801 	cmp	r3, #65536	@ 0x10000
    f0cc:	2a00009f 	bcs	f350 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2ac>
    f0d0:	eb000aeb 	bl	11c84 <CMachineInfo::Get()>
    f0d4:	e3a01082 	mov	r1, #130	@ 0x82
    f0d8:	eb000a91 	bl	11b24 <CMachineInfo::AllocateDMAChannel(unsigned int)>
    f0dc:	e350000b 	cmp	r0, #11
    f0e0:	e5840020 	str	r0, [r4, #32]
    f0e4:	8a000004 	bhi	f0fc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x58>
    f0e8:	e1a01005 	mov	r1, r5
    f0ec:	e1a00004 	mov	r0, r4
    f0f0:	ebffff7c 	bl	eee8 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)>
    f0f4:	e3500000 	cmp	r0, #0
    f0f8:	1a000003 	bne	f10c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x68>
    f0fc:	e3a03005 	mov	r3, #5
    f100:	e5c4301d 	strb	r3, [r4, #29]
    f104:	e3a00000 	mov	r0, #0
    f108:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f10c:	e3a01001 	mov	r1, #1
    f110:	e1a00004 	mov	r0, r4
    f114:	ebffff73 	bl	eee8 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)>
    f118:	e3500000 	cmp	r0, #0
    f11c:	0afffff6 	beq	f0fc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x58>
    f120:	e5942030 	ldr	r2, [r4, #48]	@ 0x30
    f124:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
    f128:	e3c23103 	bic	r3, r2, #-1073741824	@ 0xc0000000
    f12c:	e5c03014 	strb	r3, [r0, #20]
    f130:	e3833101 	orr	r3, r3, #1073741824	@ 0x40000000
    f134:	e3c0c103 	bic	ip, r0, #-1073741824	@ 0xc0000000
    f138:	e1a0e423 	lsr	lr, r3, #8
    f13c:	e5c0e015 	strb	lr, [r0, #21]
    f140:	e38c1101 	orr	r1, ip, #1073741824	@ 0x40000000
    f144:	e1a0e823 	lsr	lr, r3, #16
    f148:	e1a03c23 	lsr	r3, r3, #24
    f14c:	e5c03017 	strb	r3, [r0, #23]
    f150:	e1a03421 	lsr	r3, r1, #8
    f154:	e5c0e016 	strb	lr, [r0, #22]
    f158:	e5c23015 	strb	r3, [r2, #21]
    f15c:	e1a03821 	lsr	r3, r1, #16
    f160:	e1a01c21 	lsr	r1, r1, #24
    f164:	e5c21017 	strb	r1, [r2, #23]
    f168:	e5c2c014 	strb	ip, [r2, #20]
    f16c:	e5c23016 	strb	r3, [r2, #22]
    f170:	e3a01020 	mov	r1, #32
    f174:	eb002205 	bl	17990 <CleanAndInvalidateDataCacheRange>
    f178:	e3a01020 	mov	r1, #32
    f17c:	e5940030 	ldr	r0, [r4, #48]	@ 0x30
    f180:	eb002202 	bl	17990 <CleanAndInvalidateDataCacheRange>
    f184:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    f188:	e5942020 	ldr	r2, [r4, #32]
    f18c:	e352000b 	cmp	r2, #11
    f190:	8a000077 	bhi	f374 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2d0>
    f194:	e3a00001 	mov	r0, #1
    f198:	e59f1268 	ldr	r1, [pc, #616]	@ f408 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x364>
    f19c:	e5913ff0 	ldr	r3, [r1, #4080]	@ 0xff0
    f1a0:	e1833210 	orr	r3, r3, r0, lsl r2
    f1a4:	e5813ff0 	str	r3, [r1, #4080]	@ 0xff0
    f1a8:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
    f1ac:	eb001a5d 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
    f1b0:	e3a02102 	mov	r2, #-2147483648	@ 0x80000000
    f1b4:	e5943020 	ldr	r3, [r4, #32]
    f1b8:	e2833602 	add	r3, r3, #2097152	@ 0x200000
    f1bc:	e2833070 	add	r3, r3, #112	@ 0x70
    f1c0:	e1a03403 	lsl	r3, r3, #8
    f1c4:	e5832000 	str	r2, [r3]
    f1c8:	e5942020 	ldr	r2, [r4, #32]
    f1cc:	e2822602 	add	r2, r2, #2097152	@ 0x200000
    f1d0:	e2822070 	add	r2, r2, #112	@ 0x70
    f1d4:	e1a02402 	lsl	r2, r2, #8
    f1d8:	e5923000 	ldr	r3, [r2]
    f1dc:	e3530000 	cmp	r3, #0
    f1e0:	bafffffc 	blt	f1d8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x134>
    f1e4:	e3a03000 	mov	r3, #0
    f1e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f1ec:	e5d4301c 	ldrb	r3, [r4, #28]
    f1f0:	e3530000 	cmp	r3, #0
    f1f4:	1a000077 	bne	f3d8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x334>
    f1f8:	e5940010 	ldr	r0, [r4, #16]
    f1fc:	e3500000 	cmp	r0, #0
    f200:	0a000078 	beq	f3e8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x344>
    f204:	e5941020 	ldr	r1, [r4, #32]
    f208:	e351000b 	cmp	r1, #11
    f20c:	8a000079 	bhi	f3f8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x354>
    f210:	e1a03004 	mov	r3, r4
    f214:	e59f21f0 	ldr	r2, [pc, #496]	@ f40c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x368>
    f218:	e2811010 	add	r1, r1, #16
    f21c:	eb002251 	bl	17b68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    f220:	e3a03001 	mov	r3, #1
    f224:	e5c4301c 	strb	r3, [r4, #28]
    f228:	e5c4301d 	strb	r3, [r4, #29]
    f22c:	e5d4101d 	ldrb	r1, [r4, #29]
    f230:	e3510001 	cmp	r1, #1
    f234:	e6ef1071 	uxtb	r1, r1
    f238:	1a000040 	bne	f340 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x29c>
    f23c:	e3560000 	cmp	r6, #0
    f240:	0a00004f 	beq	f384 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2e0>
    f244:	e3a03000 	mov	r3, #0
    f248:	e5d42000 	ldrb	r2, [r4]
    f24c:	e1c461f4 	strd	r6, [r4, #20]
    f250:	e1520003 	cmp	r2, r3
    f254:	e5843034 	str	r3, [r4, #52]	@ 0x34
    f258:	1a000040 	bne	f360 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2bc>
    f25c:	e3a02002 	mov	r2, #2
    f260:	e3a03000 	mov	r3, #0
    f264:	e5c4201d 	strb	r2, [r4, #29]
    f268:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f26c:	e5942020 	ldr	r2, [r4, #32]
    f270:	e2823602 	add	r3, r2, #2097152	@ 0x200000
    f274:	e2833070 	add	r3, r3, #112	@ 0x70
    f278:	e1a03403 	lsl	r3, r3, #8
    f27c:	e5931000 	ldr	r1, [r3]
    f280:	e3110004 	tst	r1, #4
    f284:	1a000042 	bne	f394 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2f0>
    f288:	e3a00001 	mov	r0, #1
    f28c:	e59f1174 	ldr	r1, [pc, #372]	@ f408 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x364>
    f290:	e5911fe0 	ldr	r1, [r1, #4064]	@ 0xfe0
    f294:	e0111210 	ands	r1, r1, r0, lsl r2
    f298:	1a000041 	bne	f3a4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x300>
    f29c:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
    f2a0:	e3520000 	cmp	r2, #0
    f2a4:	0a000042 	beq	f3b4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x310>
    f2a8:	e3c22103 	bic	r2, r2, #-1073741824	@ 0xc0000000
    f2ac:	e3822101 	orr	r2, r2, #1073741824	@ 0x40000000
    f2b0:	e5832004 	str	r2, [r3, #4]
    f2b4:	e5943020 	ldr	r3, [r4, #32]
    f2b8:	e59f2150 	ldr	r2, [pc, #336]	@ f410 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x36c>
    f2bc:	e2833602 	add	r3, r3, #2097152	@ 0x200000
    f2c0:	e2833070 	add	r3, r3, #112	@ 0x70
    f2c4:	e1a03403 	lsl	r3, r3, #8
    f2c8:	e5832000 	str	r2, [r3]
    f2cc:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
    f2d0:	e5d43000 	ldrb	r3, [r4]
    f2d4:	e3530000 	cmp	r3, #0
    f2d8:	1a000001 	bne	f2e4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x240>
    f2dc:	e3a00001 	mov	r0, #1
    f2e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f2e4:	e1a00004 	mov	r0, r4
    f2e8:	ebfffe13 	bl	eb3c <CDMASoundBuffers::GetNextChunk(bool)>
    f2ec:	e3500000 	cmp	r0, #0
    f2f0:	1afffff9 	bne	f2dc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x238>
    f2f4:	e5940038 	ldr	r0, [r4, #56]	@ 0x38
    f2f8:	e3500000 	cmp	r0, #0
    f2fc:	1a000030 	bne	f3c4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x320>
    f300:	e5d4301d 	ldrb	r3, [r4, #29]
    f304:	e3530002 	cmp	r3, #2
    f308:	1afffff3 	bne	f2dc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x238>
    f30c:	e3a03000 	mov	r3, #0
    f310:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f314:	e59f20f8 	ldr	r2, [pc, #248]	@ f414 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x370>
    f318:	e5941020 	ldr	r1, [r4, #32]
    f31c:	e7823401 	str	r3, [r2, r1, lsl #8]
    f320:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    f324:	e3a03004 	mov	r3, #4
    f328:	e5c4301d 	strb	r3, [r4, #29]
    f32c:	e5943038 	ldr	r3, [r4, #56]	@ 0x38
    f330:	e3530000 	cmp	r3, #0
    f334:	0affffe8 	beq	f2dc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x238>
    f338:	eb00217e 	bl	17938 <LeaveCritical>
    f33c:	eaffffe6 	b	f2dc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x238>
    f340:	e59f10d0 	ldr	r1, [pc, #208]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f344:	e3a02090 	mov	r2, #144	@ 0x90
    f348:	e2810f76 	add	r0, r1, #472	@ 0x1d8
    f34c:	eb0000f4 	bl	f724 <assertion_failed>
    f350:	e59f10c0 	ldr	r1, [pc, #192]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f354:	e3a0205b 	mov	r2, #91	@ 0x5b
    f358:	e2810e19 	add	r0, r1, #400	@ 0x190
    f35c:	eb0000f0 	bl	f724 <assertion_failed>
    f360:	e1a00004 	mov	r0, r4
    f364:	ebfffdf4 	bl	eb3c <CDMASoundBuffers::GetNextChunk(bool)>
    f368:	e3500000 	cmp	r0, #0
    f36c:	1affffba 	bne	f25c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x1b8>
    f370:	eaffff63 	b	f104 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x60>
    f374:	e59f109c 	ldr	r1, [pc, #156]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f378:	e3a0207a 	mov	r2, #122	@ 0x7a
    f37c:	e2810f45 	add	r0, r1, #276	@ 0x114
    f380:	eb0000e7 	bl	f724 <assertion_failed>
    f384:	e59f108c 	ldr	r1, [pc, #140]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f388:	e3a02092 	mov	r2, #146	@ 0x92
    f38c:	e2810e1f 	add	r0, r1, #496	@ 0x1f0
    f390:	eb0000e3 	bl	f724 <assertion_failed>
    f394:	e59f107c 	ldr	r1, [pc, #124]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f398:	e3a020a4 	mov	r2, #164	@ 0xa4
    f39c:	e2810c02 	add	r0, r1, #512	@ 0x200
    f3a0:	eb0000df 	bl	f724 <assertion_failed>
    f3a4:	e59f106c 	ldr	r1, [pc, #108]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f3a8:	e3a020a5 	mov	r2, #165	@ 0xa5
    f3ac:	e2810f8d 	add	r0, r1, #564	@ 0x234
    f3b0:	eb0000db 	bl	f724 <assertion_failed>
    f3b4:	e59f105c 	ldr	r1, [pc, #92]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f3b8:	e3a020a7 	mov	r2, #167	@ 0xa7
    f3bc:	e2810f9b 	add	r0, r1, #620	@ 0x26c
    f3c0:	eb0000d7 	bl	f724 <assertion_failed>
    f3c4:	eb002131 	bl	17890 <EnterCritical>
    f3c8:	e5d4301d 	ldrb	r3, [r4, #29]
    f3cc:	e3530002 	cmp	r3, #2
    f3d0:	1affffd5 	bne	f32c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x288>
    f3d4:	eaffffcc 	b	f30c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x268>
    f3d8:	e59f1038 	ldr	r1, [pc, #56]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f3dc:	e3a02087 	mov	r2, #135	@ 0x87
    f3e0:	e2810f71 	add	r0, r1, #452	@ 0x1c4
    f3e4:	eb0000ce 	bl	f724 <assertion_failed>
    f3e8:	e59f1028 	ldr	r1, [pc, #40]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f3ec:	e3a02088 	mov	r2, #136	@ 0x88
    f3f0:	e2810068 	add	r0, r1, #104	@ 0x68
    f3f4:	eb0000ca 	bl	f724 <assertion_failed>
    f3f8:	e59f1018 	ldr	r1, [pc, #24]	@ f418 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x374>
    f3fc:	e3a02089 	mov	r2, #137	@ 0x89
    f400:	e2810f45 	add	r0, r1, #276	@ 0x114
    f404:	eb0000c6 	bl	f724 <assertion_failed>
    f408:	20007000 	.word	0x20007000
    f40c:	0000eec0 	.word	0x0000eec0
    f410:	10f10001 	.word	0x10f10001
    f414:	2000701c 	.word	0x2000701c
    f418:	0001dc28 	.word	0x0001dc28

0000f41c <CActLED::CActLED(bool)>:
    f41c:	e3a03000 	mov	r3, #0
    f420:	e59f20c8 	ldr	r2, [pc, #200]	@ f4f0 <CActLED::CActLED(bool)+0xd4>
    f424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f428:	e5803000 	str	r3, [r0]
    f42c:	e5803004 	str	r3, [r0, #4]
    f430:	e1a06001 	mov	r6, r1
    f434:	e5820000 	str	r0, [r2]
    f438:	e1a05000 	mov	r5, r0
    f43c:	eb000a10 	bl	11c84 <CMachineInfo::Get()>
    f440:	eb00090f 	bl	11884 <CMachineInfo::GetActLEDInfo() const>
    f444:	e2107080 	ands	r7, r0, #128	@ 0x80
    f448:	e1a04000 	mov	r4, r0
    f44c:	0a000015 	beq	f4a8 <CActLED::CActLED(bool)+0x8c>
    f450:	e3a00014 	mov	r0, #20
    f454:	eb001d43 	bl	16968 <operator new(unsigned int)>
    f458:	e1a02006 	mov	r2, r6
    f45c:	e204103f 	and	r1, r4, #63	@ 0x3f
    f460:	e1a07000 	mov	r7, r0
    f464:	eb001c9b 	bl	166d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    f468:	e2144040 	ands	r4, r4, #64	@ 0x40
    f46c:	03a03001 	moveq	r3, #1
    f470:	13a03000 	movne	r3, #0
    f474:	e5956000 	ldr	r6, [r5]
    f478:	e5857004 	str	r7, [r5, #4]
    f47c:	e3560000 	cmp	r6, #0
    f480:	e5c53008 	strb	r3, [r5, #8]
    f484:	1a000013 	bne	f4d8 <CActLED::CActLED(bool)+0xbc>
    f488:	e3570000 	cmp	r7, #0
    f48c:	0a000015 	beq	f4e8 <CActLED::CActLED(bool)+0xcc>
    f490:	e2541000 	subs	r1, r4, #0
    f494:	e1a00007 	mov	r0, r7
    f498:	13a01001 	movne	r1, #1
    f49c:	eb001c44 	bl	165b4 <CVirtualGPIOPin::Write(unsigned int)>
    f4a0:	e1a00005 	mov	r0, r5
    f4a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f4a8:	e3a00028 	mov	r0, #40	@ 0x28
    f4ac:	eb001d2d 	bl	16968 <operator new(unsigned int)>
    f4b0:	e1a03007 	mov	r3, r7
    f4b4:	e204103f 	and	r1, r4, #63	@ 0x3f
    f4b8:	e3a02002 	mov	r2, #2
    f4bc:	e1a06000 	mov	r6, r0
    f4c0:	eb0026c0 	bl	18fc8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    f4c4:	e2144040 	ands	r4, r4, #64	@ 0x40
    f4c8:	03a03001 	moveq	r3, #1
    f4cc:	13a03000 	movne	r3, #0
    f4d0:	e5856000 	str	r6, [r5]
    f4d4:	e5c53008 	strb	r3, [r5, #8]
    f4d8:	e2541000 	subs	r1, r4, #0
    f4dc:	13a01001 	movne	r1, #1
    f4e0:	e1a00006 	mov	r0, r6
    f4e4:	eb0023ed 	bl	184a0 <CGPIOPin::Write(unsigned int)>
    f4e8:	e1a00005 	mov	r0, r5
    f4ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f4f0:	00020b4c 	.word	0x00020b4c

0000f4f4 <CActLED::~CActLED()>:
    f4f4:	e3a02000 	mov	r2, #0
    f4f8:	e59f3004 	ldr	r3, [pc, #4]	@ f504 <CActLED::~CActLED()+0x10>
    f4fc:	e5832000 	str	r2, [r3]
    f500:	e12fff1e 	bx	lr
    f504:	00020b4c 	.word	0x00020b4c

0000f508 <CActLED::On()>:
    f508:	e1a03000 	mov	r3, r0
    f50c:	e5900000 	ldr	r0, [r0]
    f510:	e3500000 	cmp	r0, #0
    f514:	0a000001 	beq	f520 <CActLED::On()+0x18>
    f518:	e5d31008 	ldrb	r1, [r3, #8]
    f51c:	ea0023df 	b	184a0 <CGPIOPin::Write(unsigned int)>
    f520:	e5930004 	ldr	r0, [r3, #4]
    f524:	e3500000 	cmp	r0, #0
    f528:	012fff1e 	bxeq	lr
    f52c:	e5d31008 	ldrb	r1, [r3, #8]
    f530:	ea001c1f 	b	165b4 <CVirtualGPIOPin::Write(unsigned int)>

0000f534 <CActLED::Off()>:
    f534:	e1a03000 	mov	r3, r0
    f538:	e5900000 	ldr	r0, [r0]
    f53c:	e3500000 	cmp	r0, #0
    f540:	0a000002 	beq	f550 <CActLED::Off()+0x1c>
    f544:	e5d31008 	ldrb	r1, [r3, #8]
    f548:	e2211001 	eor	r1, r1, #1
    f54c:	ea0023d3 	b	184a0 <CGPIOPin::Write(unsigned int)>
    f550:	e5930004 	ldr	r0, [r3, #4]
    f554:	e3500000 	cmp	r0, #0
    f558:	012fff1e 	bxeq	lr
    f55c:	e5d31008 	ldrb	r1, [r3, #8]
    f560:	e2211001 	eor	r1, r1, #1
    f564:	ea001c12 	b	165b4 <CVirtualGPIOPin::Write(unsigned int)>

0000f568 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    f568:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f56c:	e2516000 	subs	r6, r1, #0
    f570:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    f574:	e1a04000 	mov	r4, r0
    f578:	e1a07002 	mov	r7, r2
    f57c:	e1a08003 	mov	r8, r3
    f580:	e3a05001 	mov	r5, #1
    f584:	ea00000e 	b	f5c4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x5c>
    f588:	e5d41008 	ldrb	r1, [r4, #8]
    f58c:	eb0023c3 	bl	184a0 <CGPIOPin::Write(unsigned int)>
    f590:	e1a00007 	mov	r0, r7
    f594:	eb001950 	bl	15adc <CTimer::SimpleMsDelay(unsigned int)>
    f598:	e5940000 	ldr	r0, [r4]
    f59c:	e3500000 	cmp	r0, #0
    f5a0:	0a000010 	beq	f5e8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x80>
    f5a4:	e5d41008 	ldrb	r1, [r4, #8]
    f5a8:	e2211001 	eor	r1, r1, #1
    f5ac:	eb0023bb 	bl	184a0 <CGPIOPin::Write(unsigned int)>
    f5b0:	e1a00008 	mov	r0, r8
    f5b4:	e2855001 	add	r5, r5, #1
    f5b8:	eb001947 	bl	15adc <CTimer::SimpleMsDelay(unsigned int)>
    f5bc:	e1560005 	cmp	r6, r5
    f5c0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    f5c4:	e5940000 	ldr	r0, [r4]
    f5c8:	e3500000 	cmp	r0, #0
    f5cc:	1affffed 	bne	f588 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    f5d0:	e5940004 	ldr	r0, [r4, #4]
    f5d4:	e3500000 	cmp	r0, #0
    f5d8:	0affffec 	beq	f590 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    f5dc:	e5d41008 	ldrb	r1, [r4, #8]
    f5e0:	eb001bf3 	bl	165b4 <CVirtualGPIOPin::Write(unsigned int)>
    f5e4:	eaffffe9 	b	f590 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    f5e8:	e5940004 	ldr	r0, [r4, #4]
    f5ec:	e3500000 	cmp	r0, #0
    f5f0:	0affffee 	beq	f5b0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>
    f5f4:	e5d41008 	ldrb	r1, [r4, #8]
    f5f8:	e2211001 	eor	r1, r1, #1
    f5fc:	eb001bec 	bl	165b4 <CVirtualGPIOPin::Write(unsigned int)>
    f600:	eaffffea 	b	f5b0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>

0000f604 <CActLED::Get()>:
    f604:	e59f3004 	ldr	r3, [pc, #4]	@ f610 <CActLED::Get()+0xc>
    f608:	e5930000 	ldr	r0, [r3]
    f60c:	e12fff1e 	bx	lr
    f610:	00020b4c 	.word	0x00020b4c

0000f614 <malloc>:
    f614:	e59f300c 	ldr	r3, [pc, #12]	@ f628 <malloc+0x14>
    f618:	e1a01000 	mov	r1, r0
    f61c:	e5930000 	ldr	r0, [r3]
    f620:	e280000c 	add	r0, r0, #12
    f624:	ea001d13 	b	16a78 <CHeapAllocator::Allocate(unsigned int)>
    f628:	00020ba0 	.word	0x00020ba0

0000f62c <memalign>:
    f62c:	e3500020 	cmp	r0, #32
    f630:	8a000003 	bhi	f644 <memalign+0x18>
    f634:	e59f301c 	ldr	r3, [pc, #28]	@ f658 <memalign+0x2c>
    f638:	e5930000 	ldr	r0, [r3]
    f63c:	e280000c 	add	r0, r0, #12
    f640:	ea001d0c 	b	16a78 <CHeapAllocator::Allocate(unsigned int)>
    f644:	e59f1010 	ldr	r1, [pc, #16]	@ f65c <memalign+0x30>
    f648:	e3a02021 	mov	r2, #33	@ 0x21
    f64c:	e92d4010 	push	{r4, lr}
    f650:	e281000c 	add	r0, r1, #12
    f654:	eb000032 	bl	f724 <assertion_failed>
    f658:	00020ba0 	.word	0x00020ba0
    f65c:	0001deac 	.word	0x0001deac

0000f660 <free>:
    f660:	e59f300c 	ldr	r3, [pc, #12]	@ f674 <free+0x14>
    f664:	e1a01000 	mov	r1, r0
    f668:	e5930000 	ldr	r0, [r3]
    f66c:	e280000c 	add	r0, r0, #12
    f670:	ea001d79 	b	16c5c <CHeapAllocator::Free(void*)>
    f674:	00020ba0 	.word	0x00020ba0

0000f678 <calloc>:
    f678:	e92d4070 	push	{r4, r5, r6, lr}
    f67c:	e0040190 	mul	r4, r0, r1
    f680:	e3540001 	cmp	r4, #1
    f684:	33a04001 	movcc	r4, #1
    f688:	e1500004 	cmp	r0, r4
    f68c:	8a00000b 	bhi	f6c0 <calloc+0x48>
    f690:	e59f3038 	ldr	r3, [pc, #56]	@ f6d0 <calloc+0x58>
    f694:	e1a01004 	mov	r1, r4
    f698:	e5930000 	ldr	r0, [r3]
    f69c:	e280000c 	add	r0, r0, #12
    f6a0:	eb001cf4 	bl	16a78 <CHeapAllocator::Allocate(unsigned int)>
    f6a4:	e2505000 	subs	r5, r0, #0
    f6a8:	0a000002 	beq	f6b8 <calloc+0x40>
    f6ac:	e1a02004 	mov	r2, r4
    f6b0:	e3a01000 	mov	r1, #0
    f6b4:	eb001b89 	bl	164e0 <memset>
    f6b8:	e1a00005 	mov	r0, r5
    f6bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f6c0:	e59f100c 	ldr	r1, [pc, #12]	@ f6d4 <calloc+0x5c>
    f6c4:	e3a02031 	mov	r2, #49	@ 0x31
    f6c8:	e2810028 	add	r0, r1, #40	@ 0x28
    f6cc:	eb000014 	bl	f724 <assertion_failed>
    f6d0:	00020ba0 	.word	0x00020ba0
    f6d4:	0001deac 	.word	0x0001deac

0000f6d8 <realloc>:
    f6d8:	e1a03000 	mov	r3, r0
    f6dc:	e1a02001 	mov	r2, r1
    f6e0:	e59f100c 	ldr	r1, [pc, #12]	@ f6f4 <realloc+0x1c>
    f6e4:	e5910000 	ldr	r0, [r1]
    f6e8:	e1a01003 	mov	r1, r3
    f6ec:	e280000c 	add	r0, r0, #12
    f6f0:	ea001d9c 	b	16d68 <CHeapAllocator::ReAllocate(void*, unsigned int)>
    f6f4:	00020ba0 	.word	0x00020ba0

0000f6f8 <palloc>:
    f6f8:	e59f3008 	ldr	r3, [pc, #8]	@ f708 <palloc+0x10>
    f6fc:	e5930000 	ldr	r0, [r3]
    f700:	e28000c8 	add	r0, r0, #200	@ 0xc8
    f704:	ea001df6 	b	16ee4 <CPageAllocator::Allocate()>
    f708:	00020ba0 	.word	0x00020ba0

0000f70c <pfree>:
    f70c:	e59f300c 	ldr	r3, [pc, #12]	@ f720 <pfree+0x14>
    f710:	e1a01000 	mov	r1, r0
    f714:	e5930000 	ldr	r0, [r3]
    f718:	e28000c8 	add	r0, r0, #200	@ 0xc8
    f71c:	ea001e22 	b	16fac <CPageAllocator::Free(void*)>
    f720:	00020ba0 	.word	0x00020ba0

0000f724 <assertion_failed>:
    f724:	e92d4080 	push	{r7, lr}
    f728:	e1a04000 	mov	r4, r0
    f72c:	e1a05001 	mov	r5, r1
    f730:	e1a06002 	mov	r6, r2
    f734:	e24dd018 	sub	sp, sp, #24
    f738:	e1a0700d 	mov	r7, sp
    f73c:	eb002206 	bl	17f5c <CInterruptSystem::DisableFIQ()>
    f740:	f1080040 	cpsie	f
    f744:	e28d0008 	add	r0, sp, #8
    f748:	eb000f29 	bl	133f4 <CString::CString()>
    f74c:	e1a02005 	mov	r2, r5
    f750:	e1a03006 	mov	r3, r6
    f754:	e59f1044 	ldr	r1, [pc, #68]	@ f7a0 <assertion_failed+0x7c>
    f758:	e28d0008 	add	r0, sp, #8
    f75c:	eb00153e 	bl	14c5c <CString::Format(char const*, ...)>
    f760:	e28d0008 	add	r0, sp, #8
    f764:	eb000f59 	bl	134d0 <CString::operator char const*() const>
    f768:	e1a01000 	mov	r1, r0
    f76c:	e1a00007 	mov	r0, r7
    f770:	eb00004f 	bl	f8b4 <debug_stacktrace(unsigned int const*, char const*)>
    f774:	eb0004ea 	bl	10b24 <CLogger::Get()>
    f778:	e1a05000 	mov	r5, r0
    f77c:	e28d0008 	add	r0, sp, #8
    f780:	eb000f52 	bl	134d0 <CString::operator char const*() const>
    f784:	e3a02000 	mov	r2, #0
    f788:	e1a01000 	mov	r1, r0
    f78c:	e59f3010 	ldr	r3, [pc, #16]	@ f7a4 <assertion_failed+0x80>
    f790:	e1a00005 	mov	r0, r5
    f794:	e58d4000 	str	r4, [sp]
    f798:	eb0006ad 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f79c:	eafffffe 	b	f79c <assertion_failed+0x78>
    f7a0:	0001d154 	.word	0x0001d154
    f7a4:	0001d15c 	.word	0x0001d15c

0000f7a8 <debug_hexdump(void const*, unsigned int, char const*)>:
    f7a8:	e3520000 	cmp	r2, #0
    f7ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7b0:	e1a05001 	mov	r5, r1
    f7b4:	e1a04000 	mov	r4, r0
    f7b8:	e59f70e8 	ldr	r7, [pc, #232]	@ f8a8 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    f7bc:	11a07002 	movne	r7, r2
    f7c0:	e24dd04c 	sub	sp, sp, #76	@ 0x4c
    f7c4:	eb0004d6 	bl	10b24 <CLogger::Get()>
    f7c8:	e3a02004 	mov	r2, #4
    f7cc:	e1a01007 	mov	r1, r7
    f7d0:	e59f30d4 	ldr	r3, [pc, #212]	@ f8ac <debug_hexdump(void const*, unsigned int, char const*)+0x104>
    f7d4:	e58d4004 	str	r4, [sp, #4]
    f7d8:	e58d5000 	str	r5, [sp]
    f7dc:	eb00069c 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f7e0:	e3550000 	cmp	r5, #0
    f7e4:	0a00002d 	beq	f8a0 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    f7e8:	e59f90c0 	ldr	r9, [pc, #192]	@ f8b0 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    f7ec:	e205800f 	and	r8, r5, #15
    f7f0:	ea000001 	b	f7fc <debug_hexdump(void const*, unsigned int, char const*)+0x54>
    f7f4:	e2555010 	subs	r5, r5, #16
    f7f8:	0a000028 	beq	f8a0 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    f7fc:	eb0004c8 	bl	10b24 <CLogger::Get()>
    f800:	e5d4600f 	ldrb	r6, [r4, #15]
    f804:	e5d4e00e 	ldrb	lr, [r4, #14]
    f808:	e5d4c00d 	ldrb	ip, [r4, #13]
    f80c:	e5d4100c 	ldrb	r1, [r4, #12]
    f810:	e5d4b00b 	ldrb	fp, [r4, #11]
    f814:	e5d4300a 	ldrb	r3, [r4, #10]
    f818:	e5d4a009 	ldrb	sl, [r4, #9]
    f81c:	e58d6040 	str	r6, [sp, #64]	@ 0x40
    f820:	e58de03c 	str	lr, [sp, #60]	@ 0x3c
    f824:	e5d46008 	ldrb	r6, [r4, #8]
    f828:	e5d4e007 	ldrb	lr, [r4, #7]
    f82c:	e58dc038 	str	ip, [sp, #56]	@ 0x38
    f830:	e58d1034 	str	r1, [sp, #52]	@ 0x34
    f834:	e5d4c006 	ldrb	ip, [r4, #6]
    f838:	e5d41005 	ldrb	r1, [r4, #5]
    f83c:	e58db030 	str	fp, [sp, #48]	@ 0x30
    f840:	e58d302c 	str	r3, [sp, #44]	@ 0x2c
    f844:	e5d43004 	ldrb	r3, [r4, #4]
    f848:	e5d4b003 	ldrb	fp, [r4, #3]
    f84c:	e58da028 	str	sl, [sp, #40]	@ 0x28
    f850:	e58d6024 	str	r6, [sp, #36]	@ 0x24
    f854:	e5d4a002 	ldrb	sl, [r4, #2]
    f858:	e5d46001 	ldrb	r6, [r4, #1]
    f85c:	e58dc01c 	str	ip, [sp, #28]
    f860:	e58de020 	str	lr, [sp, #32]
    f864:	e5d4e000 	ldrb	lr, [r4]
    f868:	e6ffc074 	uxth	ip, r4
    f86c:	e58d1018 	str	r1, [sp, #24]
    f870:	e58d3014 	str	r3, [sp, #20]
    f874:	e3a02004 	mov	r2, #4
    f878:	e1a03009 	mov	r3, r9
    f87c:	e1a01007 	mov	r1, r7
    f880:	e58db010 	str	fp, [sp, #16]
    f884:	e58da00c 	str	sl, [sp, #12]
    f888:	e58d6008 	str	r6, [sp, #8]
    f88c:	e88d5000 	stm	sp, {ip, lr}
    f890:	eb00066f 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f894:	e1580005 	cmp	r8, r5
    f898:	e2844010 	add	r4, r4, #16
    f89c:	1affffd4 	bne	f7f4 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
    f8a0:	e28dd04c 	add	sp, sp, #76	@ 0x4c
    f8a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8a8:	0001dee8 	.word	0x0001dee8
    f8ac:	0001d174 	.word	0x0001d174
    f8b0:	0001d19c 	.word	0x0001d19c

0000f8b4 <debug_stacktrace(unsigned int const*, char const*)>:
    f8b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f8b8:	e3a04000 	mov	r4, #0
    f8bc:	e1510004 	cmp	r1, r4
    f8c0:	e59f706c 	ldr	r7, [pc, #108]	@ f934 <debug_stacktrace(unsigned int const*, char const*)+0x80>
    f8c4:	e59f606c 	ldr	r6, [pc, #108]	@ f938 <debug_stacktrace(unsigned int const*, char const*)+0x84>
    f8c8:	11a07001 	movne	r7, r1
    f8cc:	e59f8068 	ldr	r8, [pc, #104]	@ f93c <debug_stacktrace(unsigned int const*, char const*)+0x88>
    f8d0:	e24dd008 	sub	sp, sp, #8
    f8d4:	e2405004 	sub	r5, r0, #4
    f8d8:	ea000002 	b	f8e8 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    f8dc:	e2844001 	add	r4, r4, #1
    f8e0:	e3540040 	cmp	r4, #64	@ 0x40
    f8e4:	0a000010 	beq	f92c <debug_stacktrace(unsigned int const*, char const*)+0x78>
    f8e8:	e5b53004 	ldr	r3, [r5, #4]!
    f8ec:	e3530902 	cmp	r3, #32768	@ 0x8000
    f8f0:	3afffff9 	bcc	f8dc <debug_stacktrace(unsigned int const*, char const*)+0x28>
    f8f4:	e1530006 	cmp	r3, r6
    f8f8:	2afffff7 	bcs	f8dc <debug_stacktrace(unsigned int const*, char const*)+0x28>
    f8fc:	e3130003 	tst	r3, #3
    f900:	1afffff5 	bne	f8dc <debug_stacktrace(unsigned int const*, char const*)+0x28>
    f904:	eb000486 	bl	10b24 <CLogger::Get()>
    f908:	e595c000 	ldr	ip, [r5]
    f90c:	e3a02004 	mov	r2, #4
    f910:	e88d1010 	stm	sp, {r4, ip}
    f914:	e1a03008 	mov	r3, r8
    f918:	e1a01007 	mov	r1, r7
    f91c:	e2844001 	add	r4, r4, #1
    f920:	eb00064b 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f924:	e3540040 	cmp	r4, #64	@ 0x40
    f928:	1affffee 	bne	f8e8 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    f92c:	e28dd008 	add	sp, sp, #8
    f930:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f934:	0001dee8 	.word	0x0001dee8
    f938:	0001afdc 	.word	0x0001afdc
    f93c:	0001d1f4 	.word	0x0001d1f4

0000f940 <CDevice::Read(void*, unsigned int)>:
    f940:	e3e00000 	mvn	r0, #0
    f944:	e12fff1e 	bx	lr

0000f948 <CDevice::Seek(unsigned long long)>:
    f948:	e3e00000 	mvn	r0, #0
    f94c:	e3e01000 	mvn	r1, #0
    f950:	e12fff1e 	bx	lr

0000f954 <CDevice::GetSize() const>:
    f954:	e3e00000 	mvn	r0, #0
    f958:	e3e01000 	mvn	r1, #0
    f95c:	e12fff1e 	bx	lr

0000f960 <CDevice::IOCtl(unsigned long, void*)>:
    f960:	e3e00000 	mvn	r0, #0
    f964:	e12fff1e 	bx	lr

0000f968 <CDevice::RemoveDevice()>:
    f968:	e3a00000 	mov	r0, #0
    f96c:	e12fff1e 	bx	lr

0000f970 <CDevice::~CDevice()>:
    f970:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f974:	e1a06000 	mov	r6, r0
    f978:	e59f3070 	ldr	r3, [pc, #112]	@ f9f0 <CDevice::~CDevice()+0x80>
    f97c:	e1a07000 	mov	r7, r0
    f980:	e4863004 	str	r3, [r6], #4
    f984:	ea000008 	b	f9ac <CDevice::~CDevice()+0x3c>
    f988:	e1a00007 	mov	r0, r7
    f98c:	e5941004 	ldr	r1, [r4, #4]
    f990:	e12fff33 	blx	r3
    f994:	e1a01005 	mov	r1, r5
    f998:	e1a00006 	mov	r0, r6
    f99c:	eb000970 	bl	11f64 <CPtrList::Remove(TPtrListElement*)>
    f9a0:	e3a01008 	mov	r1, #8
    f9a4:	e1a00004 	mov	r0, r4
    f9a8:	eb001c06 	bl	169c8 <operator delete(void*, unsigned int)>
    f9ac:	e1a00006 	mov	r0, r6
    f9b0:	eb0008cc 	bl	11ce8 <CPtrList::GetFirst() const>
    f9b4:	e2505000 	subs	r5, r0, #0
    f9b8:	0a000008 	beq	f9e0 <CDevice::~CDevice()+0x70>
    f9bc:	eb0008e0 	bl	11d44 <CPtrList::GetPtr(TPtrListElement*)>
    f9c0:	e5903000 	ldr	r3, [r0]
    f9c4:	e1a04000 	mov	r4, r0
    f9c8:	e3530000 	cmp	r3, #0
    f9cc:	1affffed 	bne	f988 <CDevice::~CDevice()+0x18>
    f9d0:	e3a02028 	mov	r2, #40	@ 0x28
    f9d4:	e59f1018 	ldr	r1, [pc, #24]	@ f9f4 <CDevice::~CDevice()+0x84>
    f9d8:	e59f0018 	ldr	r0, [pc, #24]	@ f9f8 <CDevice::~CDevice()+0x88>
    f9dc:	ebffff50 	bl	f724 <assertion_failed>
    f9e0:	e1a00006 	mov	r0, r6
    f9e4:	eb0008b5 	bl	11cc0 <CPtrList::~CPtrList()>
    f9e8:	e1a00007 	mov	r0, r7
    f9ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f9f0:	0001def8 	.word	0x0001def8
    f9f4:	0001d208 	.word	0x0001d208
    f9f8:	0001d214 	.word	0x0001d214

0000f9fc <CDevice::~CDevice()>:
    f9fc:	e92d4010 	push	{r4, lr}
    fa00:	e1a04000 	mov	r4, r0
    fa04:	ebffffd9 	bl	f970 <CDevice::~CDevice()>
    fa08:	e1a00004 	mov	r0, r4
    fa0c:	e3a01008 	mov	r1, #8
    fa10:	eb001bec 	bl	169c8 <operator delete(void*, unsigned int)>
    fa14:	e1a00004 	mov	r0, r4
    fa18:	e8bd8010 	pop	{r4, pc}

0000fa1c <CDevice::CDevice()>:
    fa1c:	e92d4010 	push	{r4, lr}
    fa20:	e1a04000 	mov	r4, r0
    fa24:	e59f300c 	ldr	r3, [pc, #12]	@ fa38 <CDevice::CDevice()+0x1c>
    fa28:	e4803004 	str	r3, [r0], #4
    fa2c:	eb0008a0 	bl	11cb4 <CPtrList::CPtrList()>
    fa30:	e1a00004 	mov	r0, r4
    fa34:	e8bd8010 	pop	{r4, pc}
    fa38:	0001def8 	.word	0x0001def8

0000fa3c <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
    fa3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fa40:	e2516000 	subs	r6, r1, #0
    fa44:	0a000012 	beq	fa94 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x58>
    fa48:	e1a04000 	mov	r4, r0
    fa4c:	e3a00008 	mov	r0, #8
    fa50:	e1a07002 	mov	r7, r2
    fa54:	eb001bc3 	bl	16968 <operator new(unsigned int)>
    fa58:	e1a05000 	mov	r5, r0
    fa5c:	e2844004 	add	r4, r4, #4
    fa60:	e1a00004 	mov	r0, r4
    fa64:	e88500c0 	stm	r5, {r6, r7}
    fa68:	eb00089e 	bl	11ce8 <CPtrList::GetFirst() const>
    fa6c:	e2501000 	subs	r1, r0, #0
    fa70:	e1a02005 	mov	r2, r5
    fa74:	e1a00004 	mov	r0, r4
    fa78:	0a000002 	beq	fa88 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x4c>
    fa7c:	eb0008c5 	bl	11d98 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    fa80:	e1a00005 	mov	r0, r5
    fa84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa88:	eb0008fc 	bl	11e80 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    fa8c:	e1a00005 	mov	r0, r5
    fa90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa94:	e3a02052 	mov	r2, #82	@ 0x52
    fa98:	e59f1004 	ldr	r1, [pc, #4]	@ faa4 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x68>
    fa9c:	e59f0004 	ldr	r0, [pc, #4]	@ faa8 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x6c>
    faa0:	ebffff1f 	bl	f724 <assertion_failed>
    faa4:	0001d208 	.word	0x0001d208
    faa8:	0001d984 	.word	0x0001d984

0000faac <CDevice::UnregisterRemovedHandler(void*)>:
    faac:	e92d4070 	push	{r4, r5, r6, lr}
    fab0:	e2515000 	subs	r5, r1, #0
    fab4:	0a00000a 	beq	fae4 <CDevice::UnregisterRemovedHandler(void*)+0x38>
    fab8:	e2804004 	add	r4, r0, #4
    fabc:	e1a00004 	mov	r0, r4
    fac0:	eb00096b 	bl	12074 <CPtrList::Find(void*) const>
    fac4:	e2501000 	subs	r1, r0, #0
    fac8:	0a000009 	beq	faf4 <CDevice::UnregisterRemovedHandler(void*)+0x48>
    facc:	e1a00004 	mov	r0, r4
    fad0:	eb000923 	bl	11f64 <CPtrList::Remove(TPtrListElement*)>
    fad4:	e1a00005 	mov	r0, r5
    fad8:	e8bd4070 	pop	{r4, r5, r6, lr}
    fadc:	e3a01008 	mov	r1, #8
    fae0:	ea001bb8 	b	169c8 <operator delete(void*, unsigned int)>
    fae4:	e3a02069 	mov	r2, #105	@ 0x69
    fae8:	e59f1014 	ldr	r1, [pc, #20]	@ fb04 <CDevice::UnregisterRemovedHandler(void*)+0x58>
    faec:	e59f0014 	ldr	r0, [pc, #20]	@ fb08 <CDevice::UnregisterRemovedHandler(void*)+0x5c>
    faf0:	ebffff0b 	bl	f724 <assertion_failed>
    faf4:	e3a0206c 	mov	r2, #108	@ 0x6c
    faf8:	e59f1004 	ldr	r1, [pc, #4]	@ fb04 <CDevice::UnregisterRemovedHandler(void*)+0x58>
    fafc:	e59f0008 	ldr	r0, [pc, #8]	@ fb0c <CDevice::UnregisterRemovedHandler(void*)+0x60>
    fb00:	ebffff07 	bl	f724 <assertion_failed>
    fb04:	0001d208 	.word	0x0001d208
    fb08:	0001d22c 	.word	0x0001d22c
    fb0c:	0001d238 	.word	0x0001d238

0000fb10 <CDeviceNameService::CDeviceNameService()>:
    fb10:	e3a02000 	mov	r2, #0
    fb14:	e59f102c 	ldr	r1, [pc, #44]	@ fb48 <CDeviceNameService::CDeviceNameService()+0x38>
    fb18:	e5802000 	str	r2, [r0]
    fb1c:	e5913000 	ldr	r3, [r1]
    fb20:	e5802004 	str	r2, [r0, #4]
    fb24:	e1530002 	cmp	r3, r2
    fb28:	1a000001 	bne	fb34 <CDeviceNameService::CDeviceNameService()+0x24>
    fb2c:	e5810000 	str	r0, [r1]
    fb30:	e12fff1e 	bx	lr
    fb34:	e3a0201f 	mov	r2, #31
    fb38:	e92d4010 	push	{r4, lr}
    fb3c:	e59f1008 	ldr	r1, [pc, #8]	@ fb4c <CDeviceNameService::CDeviceNameService()+0x3c>
    fb40:	e59f0008 	ldr	r0, [pc, #8]	@ fb50 <CDeviceNameService::CDeviceNameService()+0x40>
    fb44:	ebfffef6 	bl	f724 <assertion_failed>
    fb48:	00020b50 	.word	0x00020b50
    fb4c:	0001d248 	.word	0x0001d248
    fb50:	0001d260 	.word	0x0001d260

0000fb54 <CDeviceNameService::~CDeviceNameService()>:
    fb54:	e92d4070 	push	{r4, r5, r6, lr}
    fb58:	e5904000 	ldr	r4, [r0]
    fb5c:	e1a05000 	mov	r5, r0
    fb60:	e3540000 	cmp	r4, #0
    fb64:	0a00000b 	beq	fb98 <CDeviceNameService::~CDeviceNameService()+0x44>
    fb68:	e1a03004 	mov	r3, r4
    fb6c:	e5930004 	ldr	r0, [r3, #4]
    fb70:	e5944000 	ldr	r4, [r4]
    fb74:	e3500000 	cmp	r0, #0
    fb78:	0a000000 	beq	fb80 <CDeviceNameService::~CDeviceNameService()+0x2c>
    fb7c:	eb001b8b 	bl	169b0 <operator delete[](void*)>
    fb80:	e3a01010 	mov	r1, #16
    fb84:	e5950000 	ldr	r0, [r5]
    fb88:	eb001b8e 	bl	169c8 <operator delete(void*, unsigned int)>
    fb8c:	e3540000 	cmp	r4, #0
    fb90:	e5854000 	str	r4, [r5]
    fb94:	1afffff3 	bne	fb68 <CDeviceNameService::~CDeviceNameService()+0x14>
    fb98:	e3a02000 	mov	r2, #0
    fb9c:	e59f3008 	ldr	r3, [pc, #8]	@ fbac <CDeviceNameService::~CDeviceNameService()+0x58>
    fba0:	e1a00005 	mov	r0, r5
    fba4:	e5832000 	str	r2, [r3]
    fba8:	e8bd8070 	pop	{r4, r5, r6, pc}
    fbac:	00020b50 	.word	0x00020b50

0000fbb0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    fbb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fbb4:	e1a05000 	mov	r5, r0
    fbb8:	e5900004 	ldr	r0, [r0, #4]
    fbbc:	e1a06001 	mov	r6, r1
    fbc0:	e3500000 	cmp	r0, #0
    fbc4:	e1a07002 	mov	r7, r2
    fbc8:	e1a08003 	mov	r8, r3
    fbcc:	1a000017 	bne	fc30 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    fbd0:	e3a00010 	mov	r0, #16
    fbd4:	eb001b63 	bl	16968 <operator new(unsigned int)>
    fbd8:	e3560000 	cmp	r6, #0
    fbdc:	e1a04000 	mov	r4, r0
    fbe0:	0a000014 	beq	fc38 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    fbe4:	e1a00006 	mov	r0, r6
    fbe8:	eb001832 	bl	15cb8 <strlen>
    fbec:	e2800001 	add	r0, r0, #1
    fbf0:	eb001b62 	bl	16980 <operator new[](unsigned int)>
    fbf4:	e1a01006 	mov	r1, r6
    fbf8:	e5840004 	str	r0, [r4, #4]
    fbfc:	eb0018ce 	bl	15f3c <strcpy>
    fc00:	e3570000 	cmp	r7, #0
    fc04:	0a00000f 	beq	fc48 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
    fc08:	e5952004 	ldr	r2, [r5, #4]
    fc0c:	e5953000 	ldr	r3, [r5]
    fc10:	e3520000 	cmp	r2, #0
    fc14:	e5843000 	str	r3, [r4]
    fc18:	e5847008 	str	r7, [r4, #8]
    fc1c:	e5c4800c 	strb	r8, [r4, #12]
    fc20:	e5854000 	str	r4, [r5]
    fc24:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fc28:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    fc2c:	ea001f41 	b	17938 <LeaveCritical>
    fc30:	eb001f16 	bl	17890 <EnterCritical>
    fc34:	eaffffe5 	b	fbd0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    fc38:	e3a0203b 	mov	r2, #59	@ 0x3b
    fc3c:	e59f1014 	ldr	r1, [pc, #20]	@ fc58 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
    fc40:	e59f0014 	ldr	r0, [pc, #20]	@ fc5c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
    fc44:	ebfffeb6 	bl	f724 <assertion_failed>
    fc48:	e3a02040 	mov	r2, #64	@ 0x40
    fc4c:	e59f1004 	ldr	r1, [pc, #4]	@ fc58 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
    fc50:	e59f0008 	ldr	r0, [pc, #8]	@ fc60 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    fc54:	ebfffeb2 	bl	f724 <assertion_failed>
    fc58:	0001d248 	.word	0x0001d248
    fc5c:	0001d26c 	.word	0x0001d26c
    fc60:	0001d278 	.word	0x0001d278

0000fc64 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    fc64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fc68:	e2515000 	subs	r5, r1, #0
    fc6c:	0a000038 	beq	fd54 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
    fc70:	e1a08000 	mov	r8, r0
    fc74:	e5900004 	ldr	r0, [r0, #4]
    fc78:	e1a07002 	mov	r7, r2
    fc7c:	e3500000 	cmp	r0, #0
    fc80:	1a000017 	bne	fce4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x80>
    fc84:	e5984000 	ldr	r4, [r8]
    fc88:	e3540000 	cmp	r4, #0
    fc8c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fc90:	e3a06000 	mov	r6, #0
    fc94:	ea00000b 	b	fcc8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
    fc98:	e1a00005 	mov	r0, r5
    fc9c:	eb00180f 	bl	15ce0 <strcmp>
    fca0:	e3500000 	cmp	r0, #0
    fca4:	1a000002 	bne	fcb4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
    fca8:	e5d4300c 	ldrb	r3, [r4, #12]
    fcac:	e1530007 	cmp	r3, r7
    fcb0:	0a000014 	beq	fd08 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
    fcb4:	e5943000 	ldr	r3, [r4]
    fcb8:	e1a06004 	mov	r6, r4
    fcbc:	e3530000 	cmp	r3, #0
    fcc0:	0a00000b 	beq	fcf4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
    fcc4:	e1a04003 	mov	r4, r3
    fcc8:	e5941004 	ldr	r1, [r4, #4]
    fccc:	e3510000 	cmp	r1, #0
    fcd0:	1afffff0 	bne	fc98 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
    fcd4:	e3a0205e 	mov	r2, #94	@ 0x5e
    fcd8:	e59f1084 	ldr	r1, [pc, #132]	@ fd64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    fcdc:	e59f0084 	ldr	r0, [pc, #132]	@ fd68 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
    fce0:	ebfffe8f 	bl	f724 <assertion_failed>
    fce4:	eb001ee9 	bl	17890 <EnterCritical>
    fce8:	e5984000 	ldr	r4, [r8]
    fcec:	e3540000 	cmp	r4, #0
    fcf0:	1affffe6 	bne	fc90 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    fcf4:	e5983004 	ldr	r3, [r8, #4]
    fcf8:	e3530000 	cmp	r3, #0
    fcfc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fd00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    fd04:	ea001f0b 	b	17938 <LeaveCritical>
    fd08:	e5943000 	ldr	r3, [r4]
    fd0c:	e3560000 	cmp	r6, #0
    fd10:	15863000 	strne	r3, [r6]
    fd14:	0a00000c 	beq	fd4c <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
    fd18:	e5983004 	ldr	r3, [r8, #4]
    fd1c:	e3530000 	cmp	r3, #0
    fd20:	1a000007 	bne	fd44 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe0>
    fd24:	e5940004 	ldr	r0, [r4, #4]
    fd28:	e3500000 	cmp	r0, #0
    fd2c:	0a000000 	beq	fd34 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd0>
    fd30:	eb001b1e 	bl	169b0 <operator delete[](void*)>
    fd34:	e1a00004 	mov	r0, r4
    fd38:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    fd3c:	e3a01010 	mov	r1, #16
    fd40:	ea001b20 	b	169c8 <operator delete(void*, unsigned int)>
    fd44:	eb001efb 	bl	17938 <LeaveCritical>
    fd48:	eafffff5 	b	fd24 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    fd4c:	e5883000 	str	r3, [r8]
    fd50:	eafffff0 	b	fd18 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb4>
    fd54:	e3a02056 	mov	r2, #86	@ 0x56
    fd58:	e59f1004 	ldr	r1, [pc, #4]	@ fd64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    fd5c:	e59f0008 	ldr	r0, [pc, #8]	@ fd6c <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    fd60:	ebfffe6f 	bl	f724 <assertion_failed>
    fd64:	0001d248 	.word	0x0001d248
    fd68:	0001d288 	.word	0x0001d288
    fd6c:	0001d26c 	.word	0x0001d26c

0000fd70 <CDeviceNameService::GetDevice(char const*, bool)>:
    fd70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fd74:	e2515000 	subs	r5, r1, #0
    fd78:	e24dd00c 	sub	sp, sp, #12
    fd7c:	0a000024 	beq	fe14 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    fd80:	e1a07000 	mov	r7, r0
    fd84:	e5900004 	ldr	r0, [r0, #4]
    fd88:	e1a06002 	mov	r6, r2
    fd8c:	e3500000 	cmp	r0, #0
    fd90:	1a000014 	bne	fde8 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
    fd94:	e5974000 	ldr	r4, [r7]
    fd98:	e3540000 	cmp	r4, #0
    fd9c:	1a00000a 	bne	fdcc <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    fda0:	ea000018 	b	fe08 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    fda4:	e1a00005 	mov	r0, r5
    fda8:	eb0017cc 	bl	15ce0 <strcmp>
    fdac:	e3500000 	cmp	r0, #0
    fdb0:	1a000002 	bne	fdc0 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
    fdb4:	e5d4300c 	ldrb	r3, [r4, #12]
    fdb8:	e1530006 	cmp	r3, r6
    fdbc:	0a000018 	beq	fe24 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    fdc0:	e5944000 	ldr	r4, [r4]
    fdc4:	e3540000 	cmp	r4, #0
    fdc8:	0a00000a 	beq	fdf8 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    fdcc:	e5941004 	ldr	r1, [r4, #4]
    fdd0:	e3510000 	cmp	r1, #0
    fdd4:	1afffff2 	bne	fda4 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
    fdd8:	e3a02092 	mov	r2, #146	@ 0x92
    fddc:	e59f1078 	ldr	r1, [pc, #120]	@ fe5c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    fde0:	e59f0078 	ldr	r0, [pc, #120]	@ fe60 <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
    fde4:	ebfffe4e 	bl	f724 <assertion_failed>
    fde8:	eb001ea8 	bl	17890 <EnterCritical>
    fdec:	e5974000 	ldr	r4, [r7]
    fdf0:	e3540000 	cmp	r4, #0
    fdf4:	1afffff4 	bne	fdcc <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    fdf8:	e5973004 	ldr	r3, [r7, #4]
    fdfc:	e3530000 	cmp	r3, #0
    fe00:	0a000000 	beq	fe08 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    fe04:	eb001ecb 	bl	17938 <LeaveCritical>
    fe08:	e3a00000 	mov	r0, #0
    fe0c:	e28dd00c 	add	sp, sp, #12
    fe10:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fe14:	e3a0208b 	mov	r2, #139	@ 0x8b
    fe18:	e59f103c 	ldr	r1, [pc, #60]	@ fe5c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    fe1c:	e59f0040 	ldr	r0, [pc, #64]	@ fe64 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
    fe20:	ebfffe3f 	bl	f724 <assertion_failed>
    fe24:	e5973004 	ldr	r3, [r7, #4]
    fe28:	e5940008 	ldr	r0, [r4, #8]
    fe2c:	e3530000 	cmp	r3, #0
    fe30:	1a000005 	bne	fe4c <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
    fe34:	e3500000 	cmp	r0, #0
    fe38:	1afffff3 	bne	fe0c <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    fe3c:	e3a0209a 	mov	r2, #154	@ 0x9a
    fe40:	e59f1014 	ldr	r1, [pc, #20]	@ fe5c <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    fe44:	e59f001c 	ldr	r0, [pc, #28]	@ fe68 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    fe48:	ebfffe35 	bl	f724 <assertion_failed>
    fe4c:	e58d0004 	str	r0, [sp, #4]
    fe50:	eb001eb8 	bl	17938 <LeaveCritical>
    fe54:	e59d0004 	ldr	r0, [sp, #4]
    fe58:	eafffff5 	b	fe34 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    fe5c:	0001d248 	.word	0x0001d248
    fe60:	0001d288 	.word	0x0001d288
    fe64:	0001d26c 	.word	0x0001d26c
    fe68:	0001d29c 	.word	0x0001d29c

0000fe6c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
    fe6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fe70:	e1a07000 	mov	r7, r0
    fe74:	e5900004 	ldr	r0, [r0, #4]
    fe78:	e1a05001 	mov	r5, r1
    fe7c:	e3500000 	cmp	r0, #0
    fe80:	e1a06002 	mov	r6, r2
    fe84:	1a000013 	bne	fed8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x6c>
    fe88:	e5974000 	ldr	r4, [r7]
    fe8c:	e3540000 	cmp	r4, #0
    fe90:	1a000003 	bne	fea4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    fe94:	ea000015 	b	fef0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x84>
    fe98:	e5944000 	ldr	r4, [r4]
    fe9c:	e3540000 	cmp	r4, #0
    fea0:	0a000010 	beq	fee8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x7c>
    fea4:	e1a03006 	mov	r3, r6
    fea8:	e5d4200c 	ldrb	r2, [r4, #12]
    feac:	e5941004 	ldr	r1, [r4, #4]
    feb0:	e5940008 	ldr	r0, [r4, #8]
    feb4:	e12fff35 	blx	r5
    feb8:	e2508000 	subs	r8, r0, #0
    febc:	1afffff5 	bne	fe98 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x2c>
    fec0:	e5973004 	ldr	r3, [r7, #4]
    fec4:	e3530000 	cmp	r3, #0
    fec8:	0a000000 	beq	fed0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>
    fecc:	eb001e99 	bl	17938 <LeaveCritical>
    fed0:	e1a00008 	mov	r0, r8
    fed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fed8:	eb001e6c 	bl	17890 <EnterCritical>
    fedc:	e5974000 	ldr	r4, [r7]
    fee0:	e3540000 	cmp	r4, #0
    fee4:	1affffee 	bne	fea4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
    fee8:	e3a08001 	mov	r8, #1
    feec:	eafffff3 	b	fec0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
    fef0:	e3a08001 	mov	r8, #1
    fef4:	eafffff5 	b	fed0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>

0000fef8 <CDeviceNameService::Get()>:
    fef8:	e59f301c 	ldr	r3, [pc, #28]	@ ff1c <CDeviceNameService::Get()+0x24>
    fefc:	e5930000 	ldr	r0, [r3]
    ff00:	e3500000 	cmp	r0, #0
    ff04:	112fff1e 	bxne	lr
    ff08:	e3a020e5 	mov	r2, #229	@ 0xe5
    ff0c:	e92d4010 	push	{r4, lr}
    ff10:	e59f1008 	ldr	r1, [pc, #8]	@ ff20 <CDeviceNameService::Get()+0x28>
    ff14:	e59f0008 	ldr	r0, [pc, #8]	@ ff24 <CDeviceNameService::Get()+0x2c>
    ff18:	ebfffe01 	bl	f724 <assertion_failed>
    ff1c:	00020b50 	.word	0x00020b50
    ff20:	0001d248 	.word	0x0001d248
    ff24:	0001d2ac 	.word	0x0001d2ac

0000ff28 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    ff28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ff2c:	e1a06001 	mov	r6, r1
    ff30:	e1a07002 	mov	r7, r2
    ff34:	e24dd010 	sub	sp, sp, #16
    ff38:	e1a04000 	mov	r4, r0
    ff3c:	e1a0000d 	mov	r0, sp
    ff40:	e1a05003 	mov	r5, r3
    ff44:	e5dd8028 	ldrb	r8, [sp, #40]	@ 0x28
    ff48:	eb000d29 	bl	133f4 <CString::CString()>
    ff4c:	e1a03007 	mov	r3, r7
    ff50:	e1a02006 	mov	r2, r6
    ff54:	e1a0000d 	mov	r0, sp
    ff58:	e59f102c 	ldr	r1, [pc, #44]	@ ff8c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    ff5c:	eb00133e 	bl	14c5c <CString::Format(char const*, ...)>
    ff60:	e1a0000d 	mov	r0, sp
    ff64:	eb000d59 	bl	134d0 <CString::operator char const*() const>
    ff68:	e1a03008 	mov	r3, r8
    ff6c:	e1a01000 	mov	r1, r0
    ff70:	e1a02005 	mov	r2, r5
    ff74:	e1a00004 	mov	r0, r4
    ff78:	ebffff0c 	bl	fbb0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    ff7c:	e1a0000d 	mov	r0, sp
    ff80:	eb000ce8 	bl	13328 <CString::~CString()>
    ff84:	e28dd010 	add	sp, sp, #16
    ff88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ff8c:	0001d2b8 	.word	0x0001d2b8

0000ff90 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    ff90:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ff94:	e1a06001 	mov	r6, r1
    ff98:	e1a07002 	mov	r7, r2
    ff9c:	e24dd014 	sub	sp, sp, #20
    ffa0:	e1a04000 	mov	r4, r0
    ffa4:	e1a0000d 	mov	r0, sp
    ffa8:	e1a05003 	mov	r5, r3
    ffac:	eb000d10 	bl	133f4 <CString::CString()>
    ffb0:	e1a03007 	mov	r3, r7
    ffb4:	e1a02006 	mov	r2, r6
    ffb8:	e1a0000d 	mov	r0, sp
    ffbc:	e59f1028 	ldr	r1, [pc, #40]	@ ffec <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    ffc0:	eb001325 	bl	14c5c <CString::Format(char const*, ...)>
    ffc4:	e1a0000d 	mov	r0, sp
    ffc8:	eb000d40 	bl	134d0 <CString::operator char const*() const>
    ffcc:	e1a02005 	mov	r2, r5
    ffd0:	e1a01000 	mov	r1, r0
    ffd4:	e1a00004 	mov	r0, r4
    ffd8:	ebffff21 	bl	fc64 <CDeviceNameService::RemoveDevice(char const*, bool)>
    ffdc:	e1a0000d 	mov	r0, sp
    ffe0:	eb000cd0 	bl	13328 <CString::~CString()>
    ffe4:	e28dd014 	add	sp, sp, #20
    ffe8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ffec:	0001d2b8 	.word	0x0001d2b8

0000fff0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    fff0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fff4:	e1a06001 	mov	r6, r1
    fff8:	e1a07002 	mov	r7, r2
    fffc:	e24dd014 	sub	sp, sp, #20
   10000:	e1a04000 	mov	r4, r0
   10004:	e1a0000d 	mov	r0, sp
   10008:	e1a05003 	mov	r5, r3
   1000c:	eb000cf8 	bl	133f4 <CString::CString()>
   10010:	e1a03007 	mov	r3, r7
   10014:	e1a02006 	mov	r2, r6
   10018:	e1a0000d 	mov	r0, sp
   1001c:	e59f1030 	ldr	r1, [pc, #48]	@ 10054 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   10020:	eb00130d 	bl	14c5c <CString::Format(char const*, ...)>
   10024:	e1a0000d 	mov	r0, sp
   10028:	eb000d28 	bl	134d0 <CString::operator char const*() const>
   1002c:	e1a02005 	mov	r2, r5
   10030:	e1a01000 	mov	r1, r0
   10034:	e1a00004 	mov	r0, r4
   10038:	ebffff4c 	bl	fd70 <CDeviceNameService::GetDevice(char const*, bool)>
   1003c:	e1a04000 	mov	r4, r0
   10040:	e1a0000d 	mov	r0, sp
   10044:	eb000cb7 	bl	13328 <CString::~CString()>
   10048:	e1a00004 	mov	r0, r4
   1004c:	e28dd014 	add	sp, sp, #20
   10050:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10054:	0001d2b8 	.word	0x0001d2b8

00010058 <CDeviceNameService::ListDevices(CDevice*)>:
   10058:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1005c:	e2517000 	subs	r7, r1, #0
   10060:	e24dd018 	sub	sp, sp, #24
   10064:	0a000034 	beq	1013c <CDeviceNameService::ListDevices(CDevice*)+0xe4>
   10068:	e5904000 	ldr	r4, [r0]
   1006c:	e3540000 	cmp	r4, #0
   10070:	0a00002f 	beq	10134 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   10074:	e3a05000 	mov	r5, #0
   10078:	e59f80cc 	ldr	r8, [pc, #204]	@ 1014c <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   1007c:	ea000019 	b	100e8 <CDeviceNameService::ListDevices(CDevice*)+0x90>
   10080:	e2855001 	add	r5, r5, #1
   10084:	e2159003 	ands	r9, r5, #3
   10088:	13a0c020 	movne	ip, #32
   1008c:	03a0c00a 	moveq	ip, #10
   10090:	e5d4200c 	ldrb	r2, [r4, #12]
   10094:	e1a01008 	mov	r1, r8
   10098:	e58dc000 	str	ip, [sp]
   1009c:	e2622063 	rsb	r2, r2, #99	@ 0x63
   100a0:	e28d0008 	add	r0, sp, #8
   100a4:	eb0012ec 	bl	14c5c <CString::Format(char const*, ...)>
   100a8:	e5973000 	ldr	r3, [r7]
   100ac:	e28d0008 	add	r0, sp, #8
   100b0:	e593a00c 	ldr	sl, [r3, #12]
   100b4:	eb000d05 	bl	134d0 <CString::operator char const*() const>
   100b8:	e1a06000 	mov	r6, r0
   100bc:	e28d0008 	add	r0, sp, #8
   100c0:	eb000d46 	bl	135e0 <CString::GetLength() const>
   100c4:	e1a01006 	mov	r1, r6
   100c8:	e1a02000 	mov	r2, r0
   100cc:	e1a00007 	mov	r0, r7
   100d0:	e12fff3a 	blx	sl
   100d4:	e5944000 	ldr	r4, [r4]
   100d8:	e28d0008 	add	r0, sp, #8
   100dc:	eb000c91 	bl	13328 <CString::~CString()>
   100e0:	e3540000 	cmp	r4, #0
   100e4:	0a000008 	beq	1010c <CDeviceNameService::ListDevices(CDevice*)+0xb4>
   100e8:	e28d0008 	add	r0, sp, #8
   100ec:	eb000cc0 	bl	133f4 <CString::CString()>
   100f0:	e5943004 	ldr	r3, [r4, #4]
   100f4:	e3530000 	cmp	r3, #0
   100f8:	1affffe0 	bne	10080 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   100fc:	e3a020d2 	mov	r2, #210	@ 0xd2
   10100:	e59f1048 	ldr	r1, [pc, #72]	@ 10150 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   10104:	e59f0048 	ldr	r0, [pc, #72]	@ 10154 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   10108:	ebfffd85 	bl	f724 <assertion_failed>
   1010c:	e3590000 	cmp	r9, #0
   10110:	0a000007 	beq	10134 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   10114:	e3a02001 	mov	r2, #1
   10118:	e1a00007 	mov	r0, r7
   1011c:	e5973000 	ldr	r3, [r7]
   10120:	e59f1030 	ldr	r1, [pc, #48]	@ 10158 <CDeviceNameService::ListDevices(CDevice*)+0x100>
   10124:	e593300c 	ldr	r3, [r3, #12]
   10128:	e28dd018 	add	sp, sp, #24
   1012c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10130:	e12fff13 	bx	r3
   10134:	e28dd018 	add	sp, sp, #24
   10138:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1013c:	e3a020c9 	mov	r2, #201	@ 0xc9
   10140:	e59f1008 	ldr	r1, [pc, #8]	@ 10150 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   10144:	e59f0010 	ldr	r0, [pc, #16]	@ 1015c <CDeviceNameService::ListDevices(CDevice*)+0x104>
   10148:	ebfffd75 	bl	f724 <assertion_failed>
   1014c:	0001d2d0 	.word	0x0001d2d0
   10150:	0001d248 	.word	0x0001d248
   10154:	0001d288 	.word	0x0001d288
   10158:	0001d2dc 	.word	0x0001d2dc
   1015c:	0001d2c0 	.word	0x0001d2c0

00010160 <CKernelOptions::~CKernelOptions()>:
   10160:	e92d4070 	push	{r4, r5, r6, lr}
   10164:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
   10168:	e1a05000 	mov	r5, r0
   1016c:	e3540000 	cmp	r4, #0
   10170:	0a00000f 	beq	101b4 <CKernelOptions::~CKernelOptions()+0x54>
   10174:	e5940008 	ldr	r0, [r4, #8]
   10178:	e5943000 	ldr	r3, [r4]
   1017c:	e3500000 	cmp	r0, #0
   10180:	e5853890 	str	r3, [r5, #2192]	@ 0x890
   10184:	0a000000 	beq	1018c <CKernelOptions::~CKernelOptions()+0x2c>
   10188:	eb001a08 	bl	169b0 <operator delete[](void*)>
   1018c:	e5940004 	ldr	r0, [r4, #4]
   10190:	e3500000 	cmp	r0, #0
   10194:	0a000000 	beq	1019c <CKernelOptions::~CKernelOptions()+0x3c>
   10198:	eb001a04 	bl	169b0 <operator delete[](void*)>
   1019c:	e1a00004 	mov	r0, r4
   101a0:	e3a0100c 	mov	r1, #12
   101a4:	eb001a07 	bl	169c8 <operator delete(void*, unsigned int)>
   101a8:	e5954890 	ldr	r4, [r5, #2192]	@ 0x890
   101ac:	e3540000 	cmp	r4, #0
   101b0:	1affffef 	bne	10174 <CKernelOptions::~CKernelOptions()+0x14>
   101b4:	e3a02000 	mov	r2, #0
   101b8:	e59f3008 	ldr	r3, [pc, #8]	@ 101c8 <CKernelOptions::~CKernelOptions()+0x68>
   101bc:	e1a00005 	mov	r0, r5
   101c0:	e5832000 	str	r2, [r3]
   101c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   101c8:	00020b54 	.word	0x00020b54

000101cc <CKernelOptions::GetWidth() const>:
   101cc:	e5900810 	ldr	r0, [r0, #2064]	@ 0x810
   101d0:	e12fff1e 	bx	lr

000101d4 <CKernelOptions::GetHeight() const>:
   101d4:	e5900814 	ldr	r0, [r0, #2068]	@ 0x814
   101d8:	e12fff1e 	bx	lr

000101dc <CKernelOptions::GetLogDevice() const>:
   101dc:	e2800e81 	add	r0, r0, #2064	@ 0x810
   101e0:	e2800008 	add	r0, r0, #8
   101e4:	e12fff1e 	bx	lr

000101e8 <CKernelOptions::GetLogLevel() const>:
   101e8:	e590082c 	ldr	r0, [r0, #2092]	@ 0x82c
   101ec:	e12fff1e 	bx	lr

000101f0 <CKernelOptions::GetKeyMap() const>:
   101f0:	e2800e83 	add	r0, r0, #2096	@ 0x830
   101f4:	e12fff1e 	bx	lr

000101f8 <CKernelOptions::GetUSBPowerDelay() const>:
   101f8:	e5900834 	ldr	r0, [r0, #2100]	@ 0x834
   101fc:	e12fff1e 	bx	lr

00010200 <CKernelOptions::GetUSBFullSpeed() const>:
   10200:	e5d00838 	ldrb	r0, [r0, #2104]	@ 0x838
   10204:	e12fff1e 	bx	lr

00010208 <CKernelOptions::GetUSBBoost() const>:
   10208:	e5d00839 	ldrb	r0, [r0, #2105]	@ 0x839
   1020c:	e12fff1e 	bx	lr

00010210 <CKernelOptions::GetUSBIgnore() const>:
   10210:	e2800e83 	add	r0, r0, #2096	@ 0x830
   10214:	e280000a 	add	r0, r0, #10
   10218:	e12fff1e 	bx	lr

0001021c <CKernelOptions::GetUSBSoundChannels() const>:
   1021c:	e2800e85 	add	r0, r0, #2128	@ 0x850
   10220:	e12fff1e 	bx	lr

00010224 <CKernelOptions::GetSoundDevice() const>:
   10224:	e2800e85 	add	r0, r0, #2128	@ 0x850
   10228:	e2800008 	add	r0, r0, #8
   1022c:	e12fff1e 	bx	lr

00010230 <CKernelOptions::GetSoundOption() const>:
   10230:	e590086c 	ldr	r0, [r0, #2156]	@ 0x86c
   10234:	e12fff1e 	bx	lr

00010238 <CKernelOptions::GetCPUSpeed() const>:
   10238:	e5d00870 	ldrb	r0, [r0, #2160]	@ 0x870
   1023c:	e12fff1e 	bx	lr

00010240 <CKernelOptions::GetSoCMaxTemp() const>:
   10240:	e5900874 	ldr	r0, [r0, #2164]	@ 0x874
   10244:	e12fff1e 	bx	lr

00010248 <CKernelOptions::GetGPIOFanPin() const>:
   10248:	e5900878 	ldr	r0, [r0, #2168]	@ 0x878
   1024c:	e12fff1e 	bx	lr

00010250 <CKernelOptions::GetTouchScreen() const>:
   10250:	e5d0387c 	ldrb	r3, [r0, #2172]	@ 0x87c
   10254:	e3530000 	cmp	r3, #0
   10258:	12800d22 	addne	r0, r0, #2176	@ 0x880
   1025c:	01a00003 	moveq	r0, r3
   10260:	e12fff1e 	bx	lr

00010264 <CKernelOptions::GetBacklight() const>:
   10264:	e5900894 	ldr	r0, [r0, #2196]	@ 0x894
   10268:	e12fff1e 	bx	lr

0001026c <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
   1026c:	e92d4070 	push	{r4, r5, r6, lr}
   10270:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
   10274:	e1a06002 	mov	r6, r2
   10278:	e3540000 	cmp	r4, #0
   1027c:	0a00000b 	beq	102b0 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
   10280:	e1a05001 	mov	r5, r1
   10284:	ea000002 	b	10294 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x28>
   10288:	e5944000 	ldr	r4, [r4]
   1028c:	e3540000 	cmp	r4, #0
   10290:	0a000006 	beq	102b0 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
   10294:	e1a01005 	mov	r1, r5
   10298:	e5940004 	ldr	r0, [r4, #4]
   1029c:	eb00168f 	bl	15ce0 <strcmp>
   102a0:	e3500000 	cmp	r0, #0
   102a4:	1afffff7 	bne	10288 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x1c>
   102a8:	e5940008 	ldr	r0, [r4, #8]
   102ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   102b0:	e1a00006 	mov	r0, r6
   102b4:	e8bd8070 	pop	{r4, r5, r6, pc}

000102b8 <CKernelOptions::Get()>:
   102b8:	e59f3004 	ldr	r3, [pc, #4]	@ 102c4 <CKernelOptions::Get()+0xc>
   102bc:	e5930000 	ldr	r0, [r3]
   102c0:	e12fff1e 	bx	lr
   102c4:	00020b54 	.word	0x00020b54

000102c8 <CKernelOptions::GetToken()>:
   102c8:	e1a01000 	mov	r1, r0
   102cc:	e590080c 	ldr	r0, [r0, #2060]	@ 0x80c
   102d0:	e1d030d0 	ldrsb	r3, [r0]
   102d4:	e3530000 	cmp	r3, #0
   102d8:	1a000005 	bne	102f4 <CKernelOptions::GetToken()+0x2c>
   102dc:	ea000017 	b	10340 <CKernelOptions::GetToken()+0x78>
   102e0:	e2800001 	add	r0, r0, #1
   102e4:	e581080c 	str	r0, [r1, #2060]	@ 0x80c
   102e8:	e1d030d0 	ldrsb	r3, [r0]
   102ec:	e3530000 	cmp	r3, #0
   102f0:	0a000012 	beq	10340 <CKernelOptions::GetToken()+0x78>
   102f4:	e3530020 	cmp	r3, #32
   102f8:	0afffff8 	beq	102e0 <CKernelOptions::GetToken()+0x18>
   102fc:	e591380c 	ldr	r3, [r1, #2060]	@ 0x80c
   10300:	e1d320d0 	ldrsb	r2, [r3]
   10304:	e3520000 	cmp	r2, #0
   10308:	1a000004 	bne	10320 <CKernelOptions::GetToken()+0x58>
   1030c:	e12fff1e 	bx	lr
   10310:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
   10314:	e1d320d0 	ldrsb	r2, [r3]
   10318:	e3520000 	cmp	r2, #0
   1031c:	012fff1e 	bxeq	lr
   10320:	e3520020 	cmp	r2, #32
   10324:	e1a02003 	mov	r2, r3
   10328:	e2833001 	add	r3, r3, #1
   1032c:	1afffff7 	bne	10310 <CKernelOptions::GetToken()+0x48>
   10330:	e3a0c000 	mov	ip, #0
   10334:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
   10338:	e5c2c000 	strb	ip, [r2]
   1033c:	e12fff1e 	bx	lr
   10340:	e3a00000 	mov	r0, #0
   10344:	e12fff1e 	bx	lr

00010348 <CKernelOptions::GetOptionValue(char*)>:
   10348:	e1d030d0 	ldrsb	r3, [r0]
   1034c:	e3530000 	cmp	r3, #0
   10350:	1a000003 	bne	10364 <CKernelOptions::GetOptionValue(char*)+0x1c>
   10354:	ea000007 	b	10378 <CKernelOptions::GetOptionValue(char*)+0x30>
   10358:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1035c:	e3530000 	cmp	r3, #0
   10360:	0a000004 	beq	10378 <CKernelOptions::GetOptionValue(char*)+0x30>
   10364:	e353003d 	cmp	r3, #61	@ 0x3d
   10368:	1afffffa 	bne	10358 <CKernelOptions::GetOptionValue(char*)+0x10>
   1036c:	e3a03000 	mov	r3, #0
   10370:	e4c03001 	strb	r3, [r0], #1
   10374:	e12fff1e 	bx	lr
   10378:	e1a00003 	mov	r0, r3
   1037c:	e12fff1e 	bx	lr

00010380 <CKernelOptions::GetDecimal(char const*)>:
   10380:	e250c000 	subs	ip, r0, #0
   10384:	0a000015 	beq	103e0 <CKernelOptions::GetDecimal(char const*)+0x60>
   10388:	e1dc30d0 	ldrsb	r3, [ip]
   1038c:	e3530000 	cmp	r3, #0
   10390:	13a00000 	movne	r0, #0
   10394:	1a000008 	bne	103bc <CKernelOptions::GetDecimal(char const*)+0x3c>
   10398:	ea000010 	b	103e0 <CKernelOptions::GetDecimal(char const*)+0x60>
   1039c:	e3730001 	cmn	r3, #1
   103a0:	13a02000 	movne	r2, #0
   103a4:	03a02001 	moveq	r2, #1
   103a8:	e1500003 	cmp	r0, r3
   103ac:	83822001 	orrhi	r2, r2, #1
   103b0:	e3520000 	cmp	r2, #0
   103b4:	1a000009 	bne	103e0 <CKernelOptions::GetDecimal(char const*)+0x60>
   103b8:	e1a00003 	mov	r0, r3
   103bc:	e0dc10d1 	ldrsb	r1, [ip], #1
   103c0:	e0803100 	add	r3, r0, r0, lsl #2
   103c4:	e2412030 	sub	r2, r1, #48	@ 0x30
   103c8:	e3510000 	cmp	r1, #0
   103cc:	e0823083 	add	r3, r2, r3, lsl #1
   103d0:	e6ef2072 	uxtb	r2, r2
   103d4:	012fff1e 	bxeq	lr
   103d8:	e3520009 	cmp	r2, #9
   103dc:	9affffee 	bls	1039c <CKernelOptions::GetDecimal(char const*)+0x1c>
   103e0:	e3e00000 	mvn	r0, #0
   103e4:	e12fff1e 	bx	lr

000103e8 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
   103e8:	e92d4070 	push	{r4, r5, r6, lr}
   103ec:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
   103f0:	e1a06002 	mov	r6, r2
   103f4:	e3540000 	cmp	r4, #0
   103f8:	0a00000f 	beq	1043c <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   103fc:	e1a05001 	mov	r5, r1
   10400:	ea000002 	b	10410 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x28>
   10404:	e5944000 	ldr	r4, [r4]
   10408:	e3540000 	cmp	r4, #0
   1040c:	0a00000a 	beq	1043c <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   10410:	e1a01005 	mov	r1, r5
   10414:	e5940004 	ldr	r0, [r4, #4]
   10418:	eb001630 	bl	15ce0 <strcmp>
   1041c:	e3500000 	cmp	r0, #0
   10420:	1afffff7 	bne	10404 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x1c>
   10424:	e5940008 	ldr	r0, [r4, #8]
   10428:	e3500000 	cmp	r0, #0
   1042c:	0a000002 	beq	1043c <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   10430:	ebffffd2 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   10434:	e3700001 	cmn	r0, #1
   10438:	18bd8070 	popne	{r4, r5, r6, pc}
   1043c:	e1a00006 	mov	r0, r6
   10440:	e8bd8070 	pop	{r4, r5, r6, pc}

00010444 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
   10444:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10448:	e3520000 	cmp	r2, #0
   1044c:	e24dd00c 	sub	sp, sp, #12
   10450:	028d5004 	addeq	r5, sp, #4
   10454:	0a000022 	beq	104e4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa0>
   10458:	e1a04001 	mov	r4, r1
   1045c:	e59f60ac 	ldr	r6, [pc, #172]	@ 10510 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
   10460:	e2427001 	sub	r7, r2, #1
   10464:	e28d5004 	add	r5, sp, #4
   10468:	e1a02005 	mov	r2, r5
   1046c:	e1a01006 	mov	r1, r6
   10470:	eb001714 	bl	160c8 <strtok_r>
   10474:	e250c000 	subs	ip, r0, #0
   10478:	0a000021 	beq	10504 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc0>
   1047c:	e1dc00d0 	ldrsb	r0, [ip]
   10480:	e3500000 	cmp	r0, #0
   10484:	0a00001f 	beq	10508 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc4>
   10488:	e3a01000 	mov	r1, #0
   1048c:	ea000009 	b	104b8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x74>
   10490:	e3520009 	cmp	r2, #9
   10494:	8a00001a 	bhi	10504 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc0>
   10498:	e3730001 	cmn	r3, #1
   1049c:	13a02000 	movne	r2, #0
   104a0:	03a02001 	moveq	r2, #1
   104a4:	e1510003 	cmp	r1, r3
   104a8:	83822001 	orrhi	r2, r2, #1
   104ac:	e3520000 	cmp	r2, #0
   104b0:	1a000013 	bne	10504 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc0>
   104b4:	e1a01003 	mov	r1, r3
   104b8:	e0dc00d1 	ldrsb	r0, [ip], #1
   104bc:	e0813101 	add	r3, r1, r1, lsl #2
   104c0:	e2402030 	sub	r2, r0, #48	@ 0x30
   104c4:	e3500000 	cmp	r0, #0
   104c8:	e0823083 	add	r3, r2, r3, lsl #1
   104cc:	e6ef2072 	uxtb	r2, r2
   104d0:	1affffee 	bne	10490 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x4c>
   104d4:	e2477001 	sub	r7, r7, #1
   104d8:	e3770001 	cmn	r7, #1
   104dc:	e4841004 	str	r1, [r4], #4
   104e0:	1affffe0 	bne	10468 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x24>
   104e4:	e1a02005 	mov	r2, r5
   104e8:	e59f1020 	ldr	r1, [pc, #32]	@ 10510 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
   104ec:	e3a00000 	mov	r0, #0
   104f0:	eb0016f4 	bl	160c8 <strtok_r>
   104f4:	e16f0f10 	clz	r0, r0
   104f8:	e1a002a0 	lsr	r0, r0, #5
   104fc:	e28dd00c 	add	sp, sp, #12
   10500:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10504:	e3a00000 	mov	r0, #0
   10508:	e28dd00c 	add	sp, sp, #12
   1050c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10510:	0001df18 	.word	0x0001df18

00010514 <CKernelOptions::CKernelOptions()>:
   10514:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10518:	e3a02004 	mov	r2, #4
   1051c:	e3a05000 	mov	r5, #0
   10520:	e3a0303c 	mov	r3, #60	@ 0x3c
   10524:	e1a04000 	mov	r4, r0
   10528:	e2806e81 	add	r6, r0, #2064	@ 0x810
   1052c:	e2808e83 	add	r8, r0, #2096	@ 0x830
   10530:	e2866008 	add	r6, r6, #8
   10534:	e24dd01c 	sub	sp, sp, #28
   10538:	e59f1494 	ldr	r1, [pc, #1172]	@ 109d4 <CKernelOptions::CKernelOptions()+0x4c0>
   1053c:	e580282c 	str	r2, [r0, #2092]	@ 0x82c
   10540:	e5805810 	str	r5, [r0, #2064]	@ 0x810
   10544:	e5805814 	str	r5, [r0, #2068]	@ 0x814
   10548:	e5805834 	str	r5, [r0, #2100]	@ 0x834
   1054c:	e1c850b8 	strh	r5, [r8, #8]
   10550:	e5803874 	str	r3, [r0, #2164]	@ 0x874
   10554:	e5805850 	str	r5, [r0, #2128]	@ 0x850
   10558:	e5805854 	str	r5, [r0, #2132]	@ 0x854
   1055c:	e580586c 	str	r5, [r0, #2156]	@ 0x86c
   10560:	e5c05870 	strb	r5, [r0, #2160]	@ 0x870
   10564:	e5805878 	str	r5, [r0, #2168]	@ 0x878
   10568:	e5c0587c 	strb	r5, [r0, #2172]	@ 0x87c
   1056c:	e5805890 	str	r5, [r0, #2192]	@ 0x890
   10570:	e5805894 	str	r5, [r0, #2196]	@ 0x894
   10574:	e1a00006 	mov	r0, r6
   10578:	eb00166f 	bl	15f3c <strcpy>
   1057c:	e59f1454 	ldr	r1, [pc, #1108]	@ 109d8 <CKernelOptions::CKernelOptions()+0x4c4>
   10580:	e1a00008 	mov	r0, r8
   10584:	eb00166c 	bl	15f3c <strcpy>
   10588:	e59f344c 	ldr	r3, [pc, #1100]	@ 109dc <CKernelOptions::CKernelOptions()+0x4c8>
   1058c:	e1a01005 	mov	r1, r5
   10590:	e5c4583a 	strb	r5, [r4, #2106]	@ 0x83a
   10594:	e5c45858 	strb	r5, [r4, #2136]	@ 0x858
   10598:	e28d0010 	add	r0, sp, #16
   1059c:	e5834000 	str	r4, [r3]
   105a0:	eb002525 	bl	19a3c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   105a4:	e1a02004 	mov	r2, r4
   105a8:	e59f3430 	ldr	r3, [pc, #1072]	@ 109e0 <CKernelOptions::CKernelOptions()+0x4cc>
   105ac:	e59f1430 	ldr	r1, [pc, #1072]	@ 109e4 <CKernelOptions::CKernelOptions()+0x4d0>
   105b0:	e58d5000 	str	r5, [sp]
   105b4:	e28d0010 	add	r0, sp, #16
   105b8:	eb002570 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   105bc:	e1500005 	cmp	r0, r5
   105c0:	0a000025 	beq	1065c <CKernelOptions::CKernelOptions()+0x148>
   105c4:	e5943008 	ldr	r3, [r4, #8]
   105c8:	e3530b02 	cmp	r3, #2048	@ 0x800
   105cc:	2a000022 	bcs	1065c <CKernelOptions::CKernelOptions()+0x148>
   105d0:	e0843003 	add	r3, r4, r3
   105d4:	e5c3500c 	strb	r5, [r3, #12]
   105d8:	e59f7408 	ldr	r7, [pc, #1032]	@ 109e8 <CKernelOptions::CKernelOptions()+0x4d4>
   105dc:	e284300c 	add	r3, r4, #12
   105e0:	e59f9404 	ldr	r9, [pc, #1028]	@ 109ec <CKernelOptions::CKernelOptions()+0x4d8>
   105e4:	e584380c 	str	r3, [r4, #2060]	@ 0x80c
   105e8:	e1a00004 	mov	r0, r4
   105ec:	ebffff35 	bl	102c8 <CKernelOptions::GetToken()>
   105f0:	e250a000 	subs	sl, r0, #0
   105f4:	0a000018 	beq	1065c <CKernelOptions::CKernelOptions()+0x148>
   105f8:	e1da30d0 	ldrsb	r3, [sl]
   105fc:	e3530000 	cmp	r3, #0
   10600:	11a0100a 	movne	r1, sl
   10604:	1a000003 	bne	10618 <CKernelOptions::CKernelOptions()+0x104>
   10608:	ea000018 	b	10670 <CKernelOptions::CKernelOptions()+0x15c>
   1060c:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10610:	e3530000 	cmp	r3, #0
   10614:	0a000015 	beq	10670 <CKernelOptions::CKernelOptions()+0x15c>
   10618:	e353003d 	cmp	r3, #61	@ 0x3d
   1061c:	1afffffa 	bne	1060c <CKernelOptions::CKernelOptions()+0xf8>
   10620:	e1a0b001 	mov	fp, r1
   10624:	e4cb5001 	strb	r5, [fp], #1
   10628:	e1a01007 	mov	r1, r7
   1062c:	e1a0000a 	mov	r0, sl
   10630:	eb0015aa 	bl	15ce0 <strcmp>
   10634:	e3500000 	cmp	r0, #0
   10638:	1a00000e 	bne	10678 <CKernelOptions::CKernelOptions()+0x164>
   1063c:	e1a0000b 	mov	r0, fp
   10640:	ebffff4e 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   10644:	e3700001 	cmn	r0, #1
   10648:	15840810 	strne	r0, [r4, #2064]	@ 0x810
   1064c:	e1a00004 	mov	r0, r4
   10650:	ebffff1c 	bl	102c8 <CKernelOptions::GetToken()>
   10654:	e250a000 	subs	sl, r0, #0
   10658:	1affffe6 	bne	105f8 <CKernelOptions::CKernelOptions()+0xe4>
   1065c:	e28d0010 	add	r0, sp, #16
   10660:	eb0024fc 	bl	19a58 <CBcmPropertyTags::~CBcmPropertyTags()>
   10664:	e1a00004 	mov	r0, r4
   10668:	e28dd01c 	add	sp, sp, #28
   1066c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10670:	e1a0b003 	mov	fp, r3
   10674:	eaffffeb 	b	10628 <CKernelOptions::CKernelOptions()+0x114>
   10678:	e1a01009 	mov	r1, r9
   1067c:	e1a0000a 	mov	r0, sl
   10680:	eb001596 	bl	15ce0 <strcmp>
   10684:	e3500000 	cmp	r0, #0
   10688:	1a000004 	bne	106a0 <CKernelOptions::CKernelOptions()+0x18c>
   1068c:	e1a0000b 	mov	r0, fp
   10690:	ebffff3a 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   10694:	e3700001 	cmn	r0, #1
   10698:	15840814 	strne	r0, [r4, #2068]	@ 0x814
   1069c:	eaffffd1 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   106a0:	e1a0000a 	mov	r0, sl
   106a4:	e59f1344 	ldr	r1, [pc, #836]	@ 109f0 <CKernelOptions::CKernelOptions()+0x4dc>
   106a8:	eb00158c 	bl	15ce0 <strcmp>
   106ac:	e2503000 	subs	r3, r0, #0
   106b0:	e58d300c 	str	r3, [sp, #12]
   106b4:	0a000009 	beq	106e0 <CKernelOptions::CKernelOptions()+0x1cc>
   106b8:	e1a0000a 	mov	r0, sl
   106bc:	e59f1330 	ldr	r1, [pc, #816]	@ 109f4 <CKernelOptions::CKernelOptions()+0x4e0>
   106c0:	eb001586 	bl	15ce0 <strcmp>
   106c4:	e3500000 	cmp	r0, #0
   106c8:	1a00000b 	bne	106fc <CKernelOptions::CKernelOptions()+0x1e8>
   106cc:	e1a0000b 	mov	r0, fp
   106d0:	ebffff2a 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   106d4:	e3500004 	cmp	r0, #4
   106d8:	9584082c 	strls	r0, [r4, #2092]	@ 0x82c
   106dc:	eaffffc1 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   106e0:	e1a0100b 	mov	r1, fp
   106e4:	e3a02013 	mov	r2, #19
   106e8:	e1a00006 	mov	r0, r6
   106ec:	eb00161d 	bl	15f68 <strncpy>
   106f0:	e59d300c 	ldr	r3, [sp, #12]
   106f4:	e5c4382b 	strb	r3, [r4, #2091]	@ 0x82b
   106f8:	eaffffba 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   106fc:	e1a0000a 	mov	r0, sl
   10700:	e59f12f0 	ldr	r1, [pc, #752]	@ 109f8 <CKernelOptions::CKernelOptions()+0x4e4>
   10704:	eb001575 	bl	15ce0 <strcmp>
   10708:	e2503000 	subs	r3, r0, #0
   1070c:	e58d300c 	str	r3, [sp, #12]
   10710:	0a00000b 	beq	10744 <CKernelOptions::CKernelOptions()+0x230>
   10714:	e1a0000a 	mov	r0, sl
   10718:	e59f12dc 	ldr	r1, [pc, #732]	@ 109fc <CKernelOptions::CKernelOptions()+0x4e8>
   1071c:	eb00156f 	bl	15ce0 <strcmp>
   10720:	e3500000 	cmp	r0, #0
   10724:	1a00000d 	bne	10760 <CKernelOptions::CKernelOptions()+0x24c>
   10728:	e1a0000b 	mov	r0, fp
   1072c:	ebffff13 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   10730:	e59f22c8 	ldr	r2, [pc, #712]	@ 10a00 <CKernelOptions::CKernelOptions()+0x4ec>
   10734:	e24010c8 	sub	r1, r0, #200	@ 0xc8
   10738:	e1510002 	cmp	r1, r2
   1073c:	95840834 	strls	r0, [r4, #2100]	@ 0x834
   10740:	eaffffa8 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10744:	e1a0100b 	mov	r1, fp
   10748:	e3a02002 	mov	r2, #2
   1074c:	e1a00008 	mov	r0, r8
   10750:	eb001604 	bl	15f68 <strncpy>
   10754:	e59d300c 	ldr	r3, [sp, #12]
   10758:	e5c43832 	strb	r3, [r4, #2098]	@ 0x832
   1075c:	eaffffa1 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10760:	e1a0000a 	mov	r0, sl
   10764:	e59f1298 	ldr	r1, [pc, #664]	@ 10a04 <CKernelOptions::CKernelOptions()+0x4f0>
   10768:	eb00155c 	bl	15ce0 <strcmp>
   1076c:	e3500000 	cmp	r0, #0
   10770:	1a000006 	bne	10790 <CKernelOptions::CKernelOptions()+0x27c>
   10774:	e1a0000b 	mov	r0, fp
   10778:	e59f1288 	ldr	r1, [pc, #648]	@ 10a08 <CKernelOptions::CKernelOptions()+0x4f4>
   1077c:	eb001557 	bl	15ce0 <strcmp>
   10780:	e3500000 	cmp	r0, #0
   10784:	03a03001 	moveq	r3, #1
   10788:	05c43838 	strbeq	r3, [r4, #2104]	@ 0x838
   1078c:	eaffff95 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10790:	e1a0000a 	mov	r0, sl
   10794:	e59f1270 	ldr	r1, [pc, #624]	@ 10a0c <CKernelOptions::CKernelOptions()+0x4f8>
   10798:	eb001550 	bl	15ce0 <strcmp>
   1079c:	e3500000 	cmp	r0, #0
   107a0:	1a000006 	bne	107c0 <CKernelOptions::CKernelOptions()+0x2ac>
   107a4:	e1a0000b 	mov	r0, fp
   107a8:	e59f1260 	ldr	r1, [pc, #608]	@ 10a10 <CKernelOptions::CKernelOptions()+0x4fc>
   107ac:	eb00154b 	bl	15ce0 <strcmp>
   107b0:	e3500000 	cmp	r0, #0
   107b4:	03a03001 	moveq	r3, #1
   107b8:	05c43839 	strbeq	r3, [r4, #2105]	@ 0x839
   107bc:	eaffff89 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   107c0:	e1a0000a 	mov	r0, sl
   107c4:	e59f1248 	ldr	r1, [pc, #584]	@ 10a14 <CKernelOptions::CKernelOptions()+0x500>
   107c8:	eb001544 	bl	15ce0 <strcmp>
   107cc:	e2503000 	subs	r3, r0, #0
   107d0:	e58d300c 	str	r3, [sp, #12]
   107d4:	1a000006 	bne	107f4 <CKernelOptions::CKernelOptions()+0x2e0>
   107d8:	e1a0100b 	mov	r1, fp
   107dc:	e3a02013 	mov	r2, #19
   107e0:	e288000a 	add	r0, r8, #10
   107e4:	eb0015df 	bl	15f68 <strncpy>
   107e8:	e59d300c 	ldr	r3, [sp, #12]
   107ec:	e5c4384d 	strb	r3, [r4, #2125]	@ 0x84d
   107f0:	eaffff7c 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   107f4:	e1a0000a 	mov	r0, sl
   107f8:	e59f1218 	ldr	r1, [pc, #536]	@ 10a18 <CKernelOptions::CKernelOptions()+0x504>
   107fc:	eb001537 	bl	15ce0 <strcmp>
   10800:	e3500000 	cmp	r0, #0
   10804:	1a000007 	bne	10828 <CKernelOptions::CKernelOptions()+0x314>
   10808:	e1a0000b 	mov	r0, fp
   1080c:	e3a02002 	mov	r2, #2
   10810:	e2841e85 	add	r1, r4, #2128	@ 0x850
   10814:	ebffff0a 	bl	10444 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   10818:	e2503000 	subs	r3, r0, #0
   1081c:	05843850 	streq	r3, [r4, #2128]	@ 0x850
   10820:	05843854 	streq	r3, [r4, #2132]	@ 0x854
   10824:	eaffff6f 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10828:	e1a0000a 	mov	r0, sl
   1082c:	e59f11e8 	ldr	r1, [pc, #488]	@ 10a1c <CKernelOptions::CKernelOptions()+0x508>
   10830:	eb00152a 	bl	15ce0 <strcmp>
   10834:	e2503000 	subs	r3, r0, #0
   10838:	e58d300c 	str	r3, [sp, #12]
   1083c:	1a000007 	bne	10860 <CKernelOptions::CKernelOptions()+0x34c>
   10840:	e2840e85 	add	r0, r4, #2128	@ 0x850
   10844:	e1a0100b 	mov	r1, fp
   10848:	e3a02013 	mov	r2, #19
   1084c:	e2800008 	add	r0, r0, #8
   10850:	eb0015c4 	bl	15f68 <strncpy>
   10854:	e59d300c 	ldr	r3, [sp, #12]
   10858:	e5c4386b 	strb	r3, [r4, #2155]	@ 0x86b
   1085c:	eaffff61 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10860:	e1a0000a 	mov	r0, sl
   10864:	e59f11b4 	ldr	r1, [pc, #436]	@ 10a20 <CKernelOptions::CKernelOptions()+0x50c>
   10868:	eb00151c 	bl	15ce0 <strcmp>
   1086c:	e3500000 	cmp	r0, #0
   10870:	1a000008 	bne	10898 <CKernelOptions::CKernelOptions()+0x384>
   10874:	e1a0000b 	mov	r0, fp
   10878:	ebfffec0 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   1087c:	e3500018 	cmp	r0, #24
   10880:	8affff58 	bhi	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10884:	e59f2198 	ldr	r2, [pc, #408]	@ 10a24 <CKernelOptions::CKernelOptions()+0x510>
   10888:	e1a02032 	lsr	r2, r2, r0
   1088c:	e3120001 	tst	r2, #1
   10890:	1584086c 	strne	r0, [r4, #2156]	@ 0x86c
   10894:	eaffff53 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10898:	e1a0000a 	mov	r0, sl
   1089c:	e59f1184 	ldr	r1, [pc, #388]	@ 10a28 <CKernelOptions::CKernelOptions()+0x514>
   108a0:	eb00150e 	bl	15ce0 <strcmp>
   108a4:	e3500000 	cmp	r0, #0
   108a8:	1a000006 	bne	108c8 <CKernelOptions::CKernelOptions()+0x3b4>
   108ac:	e1a0000b 	mov	r0, fp
   108b0:	e59f1158 	ldr	r1, [pc, #344]	@ 10a10 <CKernelOptions::CKernelOptions()+0x4fc>
   108b4:	eb001509 	bl	15ce0 <strcmp>
   108b8:	e3500000 	cmp	r0, #0
   108bc:	03a03001 	moveq	r3, #1
   108c0:	05c43870 	strbeq	r3, [r4, #2160]	@ 0x870
   108c4:	eaffff47 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   108c8:	e1a0000a 	mov	r0, sl
   108cc:	e59f1158 	ldr	r1, [pc, #344]	@ 10a2c <CKernelOptions::CKernelOptions()+0x518>
   108d0:	eb001502 	bl	15ce0 <strcmp>
   108d4:	e3500000 	cmp	r0, #0
   108d8:	1a000005 	bne	108f4 <CKernelOptions::CKernelOptions()+0x3e0>
   108dc:	e1a0000b 	mov	r0, fp
   108e0:	ebfffea6 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   108e4:	e2402028 	sub	r2, r0, #40	@ 0x28
   108e8:	e3520026 	cmp	r2, #38	@ 0x26
   108ec:	95840874 	strls	r0, [r4, #2164]	@ 0x874
   108f0:	eaffff3c 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   108f4:	e1a0000a 	mov	r0, sl
   108f8:	e59f1130 	ldr	r1, [pc, #304]	@ 10a30 <CKernelOptions::CKernelOptions()+0x51c>
   108fc:	eb0014f7 	bl	15ce0 <strcmp>
   10900:	e3500000 	cmp	r0, #0
   10904:	1a000005 	bne	10920 <CKernelOptions::CKernelOptions()+0x40c>
   10908:	e1a0000b 	mov	r0, fp
   1090c:	ebfffe9b 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   10910:	e2402002 	sub	r2, r0, #2
   10914:	e3520033 	cmp	r2, #51	@ 0x33
   10918:	95840878 	strls	r0, [r4, #2168]	@ 0x878
   1091c:	eaffff31 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10920:	e1a0000a 	mov	r0, sl
   10924:	e59f1108 	ldr	r1, [pc, #264]	@ 10a34 <CKernelOptions::CKernelOptions()+0x520>
   10928:	eb0014ec 	bl	15ce0 <strcmp>
   1092c:	e3500000 	cmp	r0, #0
   10930:	1a000005 	bne	1094c <CKernelOptions::CKernelOptions()+0x438>
   10934:	e1a0000b 	mov	r0, fp
   10938:	e3a02004 	mov	r2, #4
   1093c:	e2841d22 	add	r1, r4, #2176	@ 0x880
   10940:	ebfffebf 	bl	10444 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   10944:	e5c4087c 	strb	r0, [r4, #2172]	@ 0x87c
   10948:	eaffff26 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   1094c:	e1a0000a 	mov	r0, sl
   10950:	e59f10e0 	ldr	r1, [pc, #224]	@ 10a38 <CKernelOptions::CKernelOptions()+0x524>
   10954:	eb0014e1 	bl	15ce0 <strcmp>
   10958:	e3500000 	cmp	r0, #0
   1095c:	1a000005 	bne	10978 <CKernelOptions::CKernelOptions()+0x464>
   10960:	e1a0000b 	mov	r0, fp
   10964:	ebfffe85 	bl	10380 <CKernelOptions::GetDecimal(char const*)>
   10968:	e2402001 	sub	r2, r0, #1
   1096c:	e35200fe 	cmp	r2, #254	@ 0xfe
   10970:	95840894 	strls	r0, [r4, #2196]	@ 0x894
   10974:	eaffff1b 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   10978:	e3a0000c 	mov	r0, #12
   1097c:	eb0017f9 	bl	16968 <operator new(unsigned int)>
   10980:	e58d000c 	str	r0, [sp, #12]
   10984:	e1a0000a 	mov	r0, sl
   10988:	eb0014ca 	bl	15cb8 <strlen>
   1098c:	e2800001 	add	r0, r0, #1
   10990:	eb0017fa 	bl	16980 <operator new[](unsigned int)>
   10994:	e59d300c 	ldr	r3, [sp, #12]
   10998:	e1a0100a 	mov	r1, sl
   1099c:	e5830004 	str	r0, [r3, #4]
   109a0:	eb001565 	bl	15f3c <strcpy>
   109a4:	e1a0000b 	mov	r0, fp
   109a8:	eb0014c2 	bl	15cb8 <strlen>
   109ac:	e2800001 	add	r0, r0, #1
   109b0:	eb0017f2 	bl	16980 <operator new[](unsigned int)>
   109b4:	e59da00c 	ldr	sl, [sp, #12]
   109b8:	e1a0100b 	mov	r1, fp
   109bc:	e58a0008 	str	r0, [sl, #8]
   109c0:	eb00155d 	bl	15f3c <strcpy>
   109c4:	e5943890 	ldr	r3, [r4, #2192]	@ 0x890
   109c8:	e584a890 	str	sl, [r4, #2192]	@ 0x890
   109cc:	e58a3000 	str	r3, [sl]
   109d0:	eaffff04 	b	105e8 <CKernelOptions::CKernelOptions()+0xd4>
   109d4:	0001d2e0 	.word	0x0001d2e0
   109d8:	0001d2e8 	.word	0x0001d2e8
   109dc:	00020b54 	.word	0x00020b54
   109e0:	0000080c 	.word	0x0000080c
   109e4:	00050001 	.word	0x00050001
   109e8:	0001d2ec 	.word	0x0001d2ec
   109ec:	0001d2f4 	.word	0x0001d2f4
   109f0:	0001d2fc 	.word	0x0001d2fc
   109f4:	0001d304 	.word	0x0001d304
   109f8:	0001d310 	.word	0x0001d310
   109fc:	0001d318 	.word	0x0001d318
   10a00:	00001e78 	.word	0x00001e78
   10a04:	0001d328 	.word	0x0001d328
   10a08:	0001d334 	.word	0x0001d334
   10a0c:	0001d33c 	.word	0x0001d33c
   10a10:	0001d348 	.word	0x0001d348
   10a14:	0001d350 	.word	0x0001d350
   10a18:	0001d35c 	.word	0x0001d35c
   10a1c:	0001d370 	.word	0x0001d370
   10a20:	0001d37c 	.word	0x0001d37c
   10a24:	01010007 	.word	0x01010007
   10a28:	0001d388 	.word	0x0001d388
   10a2c:	0001d390 	.word	0x0001d390
   10a30:	0001d39c 	.word	0x0001d39c
   10a34:	0001d3a8 	.word	0x0001d3a8
   10a38:	0001d3b4 	.word	0x0001d3b4

00010a3c <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   10a3c:	e92d4010 	push	{r4, lr}
   10a40:	e3a0c000 	mov	ip, #0
   10a44:	e1a04000 	mov	r4, r0
   10a48:	e3a0e001 	mov	lr, #1
   10a4c:	e8840006 	stm	r4, {r1, r2}
   10a50:	e5c43008 	strb	r3, [r4, #8]
   10a54:	e584c00c 	str	ip, [r4, #12]
   10a58:	e584c010 	str	ip, [r4, #16]
   10a5c:	e584c014 	str	ip, [r4, #20]
   10a60:	e584c018 	str	ip, [r4, #24]
   10a64:	e584e01c 	str	lr, [r4, #28]
   10a68:	e584c0e8 	str	ip, [r4, #232]	@ 0xe8
   10a6c:	e584c0ec 	str	ip, [r4, #236]	@ 0xec
   10a70:	e584e0f0 	str	lr, [r4, #240]	@ 0xf0
   10a74:	e584c0f4 	str	ip, [r4, #244]	@ 0xf4
   10a78:	e584c0f8 	str	ip, [r4, #248]	@ 0xf8
   10a7c:	e3a00901 	mov	r0, #16384	@ 0x4000
   10a80:	eb0017be 	bl	16980 <operator new[](unsigned int)>
   10a84:	e1a02000 	mov	r2, r0
   10a88:	e59f300c 	ldr	r3, [pc, #12]	@ 10a9c <CLogger::CLogger(unsigned int, CTimer*, bool)+0x60>
   10a8c:	e1a00004 	mov	r0, r4
   10a90:	e5842010 	str	r2, [r4, #16]
   10a94:	e5834000 	str	r4, [r3]
   10a98:	e8bd8010 	pop	{r4, pc}
   10a9c:	00020b58 	.word	0x00020b58

00010aa0 <CLogger::~CLogger()>:
   10aa0:	e3a02000 	mov	r2, #0
   10aa4:	e59f306c 	ldr	r3, [pc, #108]	@ 10b18 <CLogger::~CLogger()+0x78>
   10aa8:	e92d4010 	push	{r4, lr}
   10aac:	e59010e8 	ldr	r1, [r0, #232]	@ 0xe8
   10ab0:	e5832000 	str	r2, [r3]
   10ab4:	e1a04000 	mov	r4, r0
   10ab8:	e59030ec 	ldr	r3, [r0, #236]	@ 0xec
   10abc:	ea00000c 	b	10af4 <CLogger::~CLogger()+0x54>
   10ac0:	e7940102 	ldr	r0, [r4, r2, lsl #2]
   10ac4:	e3500000 	cmp	r0, #0
   10ac8:	0a000003 	beq	10adc <CLogger::~CLogger()+0x3c>
   10acc:	e3a01f42 	mov	r1, #264	@ 0x108
   10ad0:	eb0017bc 	bl	169c8 <operator delete(void*, unsigned int)>
   10ad4:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
   10ad8:	e59410e8 	ldr	r1, [r4, #232]	@ 0xe8
   10adc:	e2833001 	add	r3, r3, #1
   10ae0:	e3530032 	cmp	r3, #50	@ 0x32
   10ae4:	03a02000 	moveq	r2, #0
   10ae8:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   10aec:	01a03002 	moveq	r3, r2
   10af0:	058420ec 	streq	r2, [r4, #236]	@ 0xec
   10af4:	e1530001 	cmp	r3, r1
   10af8:	e2832008 	add	r2, r3, #8
   10afc:	1affffef 	bne	10ac0 <CLogger::~CLogger()+0x20>
   10b00:	e5940010 	ldr	r0, [r4, #16]
   10b04:	e3500000 	cmp	r0, #0
   10b08:	0a000000 	beq	10b10 <CLogger::~CLogger()+0x70>
   10b0c:	eb0017a7 	bl	169b0 <operator delete[](void*)>
   10b10:	e1a00004 	mov	r0, r4
   10b14:	e8bd8010 	pop	{r4, pc}
   10b18:	00020b58 	.word	0x00020b58

00010b1c <CLogger::SetNewTarget(CDevice*)>:
   10b1c:	e580100c 	str	r1, [r0, #12]
   10b20:	e12fff1e 	bx	lr

00010b24 <CLogger::Get()>:
   10b24:	e92d4070 	push	{r4, r5, r6, lr}
   10b28:	e59f5070 	ldr	r5, [pc, #112]	@ 10ba0 <CLogger::Get()+0x7c>
   10b2c:	e5954000 	ldr	r4, [r5]
   10b30:	e3540000 	cmp	r4, #0
   10b34:	0a000001 	beq	10b40 <CLogger::Get()+0x1c>
   10b38:	e1a00004 	mov	r0, r4
   10b3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b40:	e3a000fc 	mov	r0, #252	@ 0xfc
   10b44:	eb001787 	bl	16968 <operator new(unsigned int)>
   10b48:	e3a03000 	mov	r3, #0
   10b4c:	e1a04000 	mov	r4, r0
   10b50:	e3a02001 	mov	r2, #1
   10b54:	e5843000 	str	r3, [r4]
   10b58:	e5843004 	str	r3, [r4, #4]
   10b5c:	e5c42008 	strb	r2, [r4, #8]
   10b60:	e584300c 	str	r3, [r4, #12]
   10b64:	e5843010 	str	r3, [r4, #16]
   10b68:	e5843014 	str	r3, [r4, #20]
   10b6c:	e5843018 	str	r3, [r4, #24]
   10b70:	e584201c 	str	r2, [r4, #28]
   10b74:	e58430e8 	str	r3, [r4, #232]	@ 0xe8
   10b78:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   10b7c:	e58420f0 	str	r2, [r4, #240]	@ 0xf0
   10b80:	e58430f4 	str	r3, [r4, #244]	@ 0xf4
   10b84:	e58430f8 	str	r3, [r4, #248]	@ 0xf8
   10b88:	e3a00901 	mov	r0, #16384	@ 0x4000
   10b8c:	eb00177b 	bl	16980 <operator new[](unsigned int)>
   10b90:	e5854000 	str	r4, [r5]
   10b94:	e5840010 	str	r0, [r4, #16]
   10b98:	e1a00004 	mov	r0, r4
   10b9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ba0:	00020b58 	.word	0x00020b58

00010ba4 <CLogger::Write(char const*)>:
   10ba4:	e92d4070 	push	{r4, r5, r6, lr}
   10ba8:	e1a04000 	mov	r4, r0
   10bac:	e1a00001 	mov	r0, r1
   10bb0:	e1a05001 	mov	r5, r1
   10bb4:	eb00143f 	bl	15cb8 <strlen>
   10bb8:	e594300c 	ldr	r3, [r4, #12]
   10bbc:	e1a06000 	mov	r6, r0
   10bc0:	e3530000 	cmp	r3, #0
   10bc4:	0a000005 	beq	10be0 <CLogger::Write(char const*)+0x3c>
   10bc8:	e5932000 	ldr	r2, [r3]
   10bcc:	e1a00003 	mov	r0, r3
   10bd0:	e1a01005 	mov	r1, r5
   10bd4:	e592300c 	ldr	r3, [r2, #12]
   10bd8:	e1a02006 	mov	r2, r6
   10bdc:	e12fff33 	blx	r3
   10be0:	e594001c 	ldr	r0, [r4, #28]
   10be4:	e3500000 	cmp	r0, #0
   10be8:	1a000022 	bne	10c78 <CLogger::Write(char const*)+0xd4>
   10bec:	e3560000 	cmp	r6, #0
   10bf0:	08bd8070 	popeq	{r4, r5, r6, pc}
   10bf4:	e1a0c005 	mov	ip, r5
   10bf8:	e59f0098 	ldr	r0, [pc, #152]	@ 10c98 <CLogger::Write(char const*)+0xf4>
   10bfc:	ea000002 	b	10c0c <CLogger::Write(char const*)+0x68>
   10c00:	e045300c 	sub	r3, r5, ip
   10c04:	e1730006 	cmn	r3, r6
   10c08:	0a000015 	beq	10c64 <CLogger::Write(char const*)+0xc0>
   10c0c:	e0dc30d1 	ldrsb	r3, [ip], #1
   10c10:	e353000d 	cmp	r3, #13
   10c14:	0afffff9 	beq	10c00 <CLogger::Write(char const*)+0x5c>
   10c18:	e5942014 	ldr	r2, [r4, #20]
   10c1c:	e5941010 	ldr	r1, [r4, #16]
   10c20:	e7c13002 	strb	r3, [r1, r2]
   10c24:	e5943014 	ldr	r3, [r4, #20]
   10c28:	e594e018 	ldr	lr, [r4, #24]
   10c2c:	e2833001 	add	r3, r3, #1
   10c30:	e0033000 	and	r3, r3, r0
   10c34:	e153000e 	cmp	r3, lr
   10c38:	e5843014 	str	r3, [r4, #20]
   10c3c:	1affffef 	bne	10c00 <CLogger::Write(char const*)+0x5c>
   10c40:	e5d41008 	ldrb	r1, [r4, #8]
   10c44:	e2832001 	add	r2, r3, #1
   10c48:	e3510000 	cmp	r1, #0
   10c4c:	e0022000 	and	r2, r2, r0
   10c50:	0a00000c 	beq	10c88 <CLogger::Write(char const*)+0xe4>
   10c54:	e045300c 	sub	r3, r5, ip
   10c58:	e1730006 	cmn	r3, r6
   10c5c:	e5842018 	str	r2, [r4, #24]
   10c60:	1affffe9 	bne	10c0c <CLogger::Write(char const*)+0x68>
   10c64:	e594301c 	ldr	r3, [r4, #28]
   10c68:	e3530000 	cmp	r3, #0
   10c6c:	08bd8070 	popeq	{r4, r5, r6, pc}
   10c70:	e8bd4070 	pop	{r4, r5, r6, lr}
   10c74:	ea001b2f 	b	17938 <LeaveCritical>
   10c78:	eb001b04 	bl	17890 <EnterCritical>
   10c7c:	e3560000 	cmp	r6, #0
   10c80:	1affffdb 	bne	10bf4 <CLogger::Write(char const*)+0x50>
   10c84:	eafffff6 	b	10c64 <CLogger::Write(char const*)+0xc0>
   10c88:	e2433001 	sub	r3, r3, #1
   10c8c:	e0033000 	and	r3, r3, r0
   10c90:	e5843014 	str	r3, [r4, #20]
   10c94:	eafffff2 	b	10c64 <CLogger::Write(char const*)+0xc0>
   10c98:	00003fff 	.word	0x00003fff

00010c9c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   10c9c:	e92d4070 	push	{r4, r5, r6, lr}
   10ca0:	e1a05003 	mov	r5, r3
   10ca4:	e5903000 	ldr	r3, [r0]
   10ca8:	e24dd0c8 	sub	sp, sp, #200	@ 0xc8
   10cac:	e1520003 	cmp	r2, r3
   10cb0:	8a000012 	bhi	10d00 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   10cb4:	e3a03000 	mov	r3, #0
   10cb8:	e3520000 	cmp	r2, #0
   10cbc:	e1a04000 	mov	r4, r0
   10cc0:	e5cd3000 	strb	r3, [sp]
   10cc4:	0a00000f 	beq	10d08 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   10cc8:	e1a0000d 	mov	r0, sp
   10ccc:	eb0014b2 	bl	15f9c <strcat>
   10cd0:	e59f1094 	ldr	r1, [pc, #148]	@ 10d6c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   10cd4:	e1a0000d 	mov	r0, sp
   10cd8:	eb0014af 	bl	15f9c <strcat>
   10cdc:	e1a01005 	mov	r1, r5
   10ce0:	e1a0000d 	mov	r0, sp
   10ce4:	eb0014ac 	bl	15f9c <strcat>
   10ce8:	e59f1080 	ldr	r1, [pc, #128]	@ 10d70 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   10cec:	e1a0000d 	mov	r0, sp
   10cf0:	eb0014a9 	bl	15f9c <strcat>
   10cf4:	e1a0100d 	mov	r1, sp
   10cf8:	e1a00004 	mov	r0, r4
   10cfc:	ebffffa8 	bl	10ba4 <CLogger::Write(char const*)>
   10d00:	e28dd0c8 	add	sp, sp, #200	@ 0xc8
   10d04:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d08:	e1a06001 	mov	r6, r1
   10d0c:	e1a0000d 	mov	r0, sp
   10d10:	e59f105c 	ldr	r1, [pc, #92]	@ 10d74 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   10d14:	eb001488 	bl	15f3c <strcpy>
   10d18:	e1a01006 	mov	r1, r6
   10d1c:	e1a0000d 	mov	r0, sp
   10d20:	eb00149d 	bl	15f9c <strcat>
   10d24:	e59f1040 	ldr	r1, [pc, #64]	@ 10d6c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   10d28:	e1a0000d 	mov	r0, sp
   10d2c:	eb00149a 	bl	15f9c <strcat>
   10d30:	e1a01005 	mov	r1, r5
   10d34:	e1a0000d 	mov	r0, sp
   10d38:	eb001497 	bl	15f9c <strcat>
   10d3c:	e59f1034 	ldr	r1, [pc, #52]	@ 10d78 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   10d40:	e1a0000d 	mov	r0, sp
   10d44:	eb001494 	bl	15f9c <strcat>
   10d48:	e59f1020 	ldr	r1, [pc, #32]	@ 10d70 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   10d4c:	e1a0000d 	mov	r0, sp
   10d50:	eb001491 	bl	15f9c <strcat>
   10d54:	e1a0100d 	mov	r1, sp
   10d58:	e1a00004 	mov	r0, r4
   10d5c:	ebffff90 	bl	10ba4 <CLogger::Write(char const*)>
   10d60:	e3a000ff 	mov	r0, #255	@ 0xff
   10d64:	eb000fcb 	bl	14c98 <set_qemu_exit_status>
   10d68:	eb000fcb 	bl	14c9c <halt>
   10d6c:	0001df24 	.word	0x0001df24
   10d70:	0001df30 	.word	0x0001df30
   10d74:	0001df1c 	.word	0x0001df1c
   10d78:	0001df28 	.word	0x0001df28

00010d7c <CLogger::Read(void*, unsigned int, bool)>:
   10d7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d80:	e1a04000 	mov	r4, r0
   10d84:	e590001c 	ldr	r0, [r0, #28]
   10d88:	e1a05001 	mov	r5, r1
   10d8c:	e3500000 	cmp	r0, #0
   10d90:	e1a07002 	mov	r7, r2
   10d94:	e1a08003 	mov	r8, r3
   10d98:	1a00001b 	bne	10e0c <CLogger::Read(void*, unsigned int, bool)+0x90>
   10d9c:	e594c018 	ldr	ip, [r4, #24]
   10da0:	e5943014 	ldr	r3, [r4, #20]
   10da4:	e153000c 	cmp	r3, ip
   10da8:	0a000020 	beq	10e30 <CLogger::Read(void*, unsigned int, bool)+0xb4>
   10dac:	e1a09007 	mov	r9, r7
   10db0:	e3a0e000 	mov	lr, #0
   10db4:	e59f2088 	ldr	r2, [pc, #136]	@ 10e44 <CLogger::Read(void*, unsigned int, bool)+0xc8>
   10db8:	ea000007 	b	10ddc <CLogger::Read(void*, unsigned int, bool)+0x60>
   10dbc:	e5946010 	ldr	r6, [r4, #16]
   10dc0:	e28ee001 	add	lr, lr, #1
   10dc4:	e19660dc 	ldrsb	r6, [r6, ip]
   10dc8:	e001c002 	and	ip, r1, r2
   10dcc:	e4c56001 	strb	r6, [r5], #1
   10dd0:	e5941014 	ldr	r1, [r4, #20]
   10dd4:	e151000c 	cmp	r1, ip
   10dd8:	0a000009 	beq	10e04 <CLogger::Read(void*, unsigned int, bool)+0x88>
   10ddc:	e15e0007 	cmp	lr, r7
   10de0:	e28c1001 	add	r1, ip, #1
   10de4:	1afffff4 	bne	10dbc <CLogger::Read(void*, unsigned int, bool)+0x40>
   10de8:	e594301c 	ldr	r3, [r4, #28]
   10dec:	e3580000 	cmp	r8, #0
   10df0:	1584c018 	strne	ip, [r4, #24]
   10df4:	e3530000 	cmp	r3, #0
   10df8:	1a00000e 	bne	10e38 <CLogger::Read(void*, unsigned int, bool)+0xbc>
   10dfc:	e1a00009 	mov	r0, r9
   10e00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e04:	e1a0900e 	mov	r9, lr
   10e08:	eafffff6 	b	10de8 <CLogger::Read(void*, unsigned int, bool)+0x6c>
   10e0c:	eb001a9f 	bl	17890 <EnterCritical>
   10e10:	e594c018 	ldr	ip, [r4, #24]
   10e14:	e5943014 	ldr	r3, [r4, #20]
   10e18:	e153000c 	cmp	r3, ip
   10e1c:	1affffe2 	bne	10dac <CLogger::Read(void*, unsigned int, bool)+0x30>
   10e20:	e594301c 	ldr	r3, [r4, #28]
   10e24:	e3530000 	cmp	r3, #0
   10e28:	0a000000 	beq	10e30 <CLogger::Read(void*, unsigned int, bool)+0xb4>
   10e2c:	eb001ac1 	bl	17938 <LeaveCritical>
   10e30:	e3e09000 	mvn	r9, #0
   10e34:	eafffff0 	b	10dfc <CLogger::Read(void*, unsigned int, bool)+0x80>
   10e38:	eb001abe 	bl	17938 <LeaveCritical>
   10e3c:	e1a00009 	mov	r0, r9
   10e40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e44:	00003fff 	.word	0x00003fff

00010e48 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   10e48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10e4c:	e1a05000 	mov	r5, r0
   10e50:	e24dd008 	sub	sp, sp, #8
   10e54:	e3a00f42 	mov	r0, #264	@ 0x108
   10e58:	e1a07002 	mov	r7, r2
   10e5c:	e1a06003 	mov	r6, r3
   10e60:	e1a08001 	mov	r8, r1
   10e64:	eb0016bf 	bl	16968 <operator new(unsigned int)>
   10e68:	e1a04000 	mov	r4, r0
   10e6c:	e4c07001 	strb	r7, [r0], #1
   10e70:	e3a07000 	mov	r7, #0
   10e74:	e3a02032 	mov	r2, #50	@ 0x32
   10e78:	e1a01008 	mov	r1, r8
   10e7c:	eb001439 	bl	15f68 <strncpy>
   10e80:	e3a020c8 	mov	r2, #200	@ 0xc8
   10e84:	e1a01006 	mov	r1, r6
   10e88:	e5c47032 	strb	r7, [r4, #50]	@ 0x32
   10e8c:	e2840033 	add	r0, r4, #51	@ 0x33
   10e90:	eb001434 	bl	15f68 <strncpy>
   10e94:	e5950004 	ldr	r0, [r5, #4]
   10e98:	e5c470fa 	strb	r7, [r4, #250]	@ 0xfa
   10e9c:	e1500007 	cmp	r0, r7
   10ea0:	0a000004 	beq	10eb8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   10ea4:	e1a0100d 	mov	r1, sp
   10ea8:	e28d2004 	add	r2, sp, #4
   10eac:	eb001087 	bl	150d0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   10eb0:	e1500007 	cmp	r0, r7
   10eb4:	1a000037 	bne	10f98 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x150>
   10eb8:	e3a03000 	mov	r3, #0
   10ebc:	e1a00003 	mov	r0, r3
   10ec0:	e58430fc 	str	r3, [r4, #252]	@ 0xfc
   10ec4:	e5843100 	str	r3, [r4, #256]	@ 0x100
   10ec8:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
   10ecc:	e5840104 	str	r0, [r4, #260]	@ 0x104
   10ed0:	e3520000 	cmp	r2, #0
   10ed4:	1a00002b 	bne	10f88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
   10ed8:	e59530e8 	ldr	r3, [r5, #232]	@ 0xe8
   10edc:	e0850103 	add	r0, r5, r3, lsl #2
   10ee0:	e5804020 	str	r4, [r0, #32]
   10ee4:	e3530031 	cmp	r3, #49	@ 0x31
   10ee8:	e595c0ec 	ldr	ip, [r5, #236]	@ 0xec
   10eec:	e2831001 	add	r1, r3, #1
   10ef0:	0a000019 	beq	10f5c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
   10ef4:	e151000c 	cmp	r1, ip
   10ef8:	e58510e8 	str	r1, [r5, #232]	@ 0xe8
   10efc:	0a000007 	beq	10f20 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
   10f00:	e3520000 	cmp	r2, #0
   10f04:	1a000012 	bne	10f54 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
   10f08:	e59530f4 	ldr	r3, [r5, #244]	@ 0xf4
   10f0c:	e3530000 	cmp	r3, #0
   10f10:	0a000000 	beq	10f18 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   10f14:	e12fff33 	blx	r3
   10f18:	e28dd008 	add	sp, sp, #8
   10f1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10f20:	e3530030 	cmp	r3, #48	@ 0x30
   10f24:	12833002 	addne	r3, r3, #2
   10f28:	03a03000 	moveq	r3, #0
   10f2c:	e3520000 	cmp	r2, #0
   10f30:	e5904024 	ldr	r4, [r0, #36]	@ 0x24
   10f34:	e58530ec 	str	r3, [r5, #236]	@ 0xec
   10f38:	1a000010 	bne	10f80 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   10f3c:	e3540000 	cmp	r4, #0
   10f40:	0afffff0 	beq	10f08 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   10f44:	e3a01f42 	mov	r1, #264	@ 0x108
   10f48:	e1a00004 	mov	r0, r4
   10f4c:	eb00169d 	bl	169c8 <operator delete(void*, unsigned int)>
   10f50:	eaffffec 	b	10f08 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   10f54:	eb001a77 	bl	17938 <LeaveCritical>
   10f58:	eaffffea 	b	10f08 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   10f5c:	e3a03000 	mov	r3, #0
   10f60:	e15c0003 	cmp	ip, r3
   10f64:	e58530e8 	str	r3, [r5, #232]	@ 0xe8
   10f68:	1affffe4 	bne	10f00 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb8>
   10f6c:	e3a03001 	mov	r3, #1
   10f70:	e3520000 	cmp	r2, #0
   10f74:	e5954020 	ldr	r4, [r5, #32]
   10f78:	e58530ec 	str	r3, [r5, #236]	@ 0xec
   10f7c:	0affffee 	beq	10f3c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   10f80:	eb001a6c 	bl	17938 <LeaveCritical>
   10f84:	eaffffec 	b	10f3c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   10f88:	e1a00002 	mov	r0, r2
   10f8c:	eb001a3f 	bl	17890 <EnterCritical>
   10f90:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
   10f94:	eaffffcf 	b	10ed8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x90>
   10f98:	e59d3004 	ldr	r3, [sp, #4]
   10f9c:	e59f201c 	ldr	r2, [pc, #28]	@ 10fc0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x178>
   10fa0:	e59d1000 	ldr	r1, [sp]
   10fa4:	e0832392 	umull	r2, r3, r2, r3
   10fa8:	e1a036a3 	lsr	r3, r3, #13
   10fac:	e5950004 	ldr	r0, [r5, #4]
   10fb0:	e58410fc 	str	r1, [r4, #252]	@ 0xfc
   10fb4:	e5843100 	str	r3, [r4, #256]	@ 0x100
   10fb8:	eb001001 	bl	14fc4 <CTimer::GetTimeZone() const>
   10fbc:	eaffffc1 	b	10ec8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
   10fc0:	d1b71759 	.word	0xd1b71759

00010fc4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   10fc4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10fc8:	e1a04000 	mov	r4, r0
   10fcc:	e59000f0 	ldr	r0, [r0, #240]	@ 0xf0
   10fd0:	e1a06001 	mov	r6, r1
   10fd4:	e3500000 	cmp	r0, #0
   10fd8:	e1a08002 	mov	r8, r2
   10fdc:	e1a07003 	mov	r7, r3
   10fe0:	1a00001e 	bne	11060 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x9c>
   10fe4:	e594c0ec 	ldr	ip, [r4, #236]	@ 0xec
   10fe8:	e59430e8 	ldr	r3, [r4, #232]	@ 0xe8
   10fec:	e153000c 	cmp	r3, ip
   10ff0:	0a00002e 	beq	110b0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
   10ff4:	e35c0031 	cmp	ip, #49	@ 0x31
   10ff8:	128c0001 	addne	r0, ip, #1
   10ffc:	e28cc008 	add	ip, ip, #8
   11000:	e794510c 	ldr	r5, [r4, ip, lsl #2]
   11004:	e58400ec 	str	r0, [r4, #236]	@ 0xec
   11008:	e1a01005 	mov	r1, r5
   1100c:	e4d13001 	ldrb	r3, [r1], #1
   11010:	e1a00008 	mov	r0, r8
   11014:	e5c63000 	strb	r3, [r6]
   11018:	eb0013c7 	bl	15f3c <strcpy>
   1101c:	e2851033 	add	r1, r5, #51	@ 0x33
   11020:	e1a00007 	mov	r0, r7
   11024:	eb0013c4 	bl	15f3c <strcpy>
   11028:	e59520fc 	ldr	r2, [r5, #252]	@ 0xfc
   1102c:	e59d0018 	ldr	r0, [sp, #24]
   11030:	e5953100 	ldr	r3, [r5, #256]	@ 0x100
   11034:	e5802000 	str	r2, [r0]
   11038:	e59d201c 	ldr	r2, [sp, #28]
   1103c:	e1a00005 	mov	r0, r5
   11040:	e5823000 	str	r3, [r2]
   11044:	e5953104 	ldr	r3, [r5, #260]	@ 0x104
   11048:	e59d2020 	ldr	r2, [sp, #32]
   1104c:	e3a01f42 	mov	r1, #264	@ 0x108
   11050:	e5823000 	str	r3, [r2]
   11054:	eb00165b 	bl	169c8 <operator delete(void*, unsigned int)>
   11058:	e3a00001 	mov	r0, #1
   1105c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11060:	eb001a0a 	bl	17890 <EnterCritical>
   11064:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
   11068:	e59420e8 	ldr	r2, [r4, #232]	@ 0xe8
   1106c:	e1520003 	cmp	r2, r3
   11070:	0a00000a 	beq	110a0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   11074:	e3530031 	cmp	r3, #49	@ 0x31
   11078:	12832001 	addne	r2, r3, #1
   1107c:	03a02000 	moveq	r2, #0
   11080:	e2833008 	add	r3, r3, #8
   11084:	e7945103 	ldr	r5, [r4, r3, lsl #2]
   11088:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
   1108c:	e58420ec 	str	r2, [r4, #236]	@ 0xec
   11090:	e3530000 	cmp	r3, #0
   11094:	0affffdb 	beq	11008 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
   11098:	eb001a26 	bl	17938 <LeaveCritical>
   1109c:	eaffffd9 	b	11008 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
   110a0:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
   110a4:	e3530000 	cmp	r3, #0
   110a8:	0a000000 	beq	110b0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
   110ac:	eb001a21 	bl	17938 <LeaveCritical>
   110b0:	e3a00000 	mov	r0, #0
   110b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000110b8 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   110b8:	e58010f4 	str	r1, [r0, #244]	@ 0xf4
   110bc:	e12fff1e 	bx	lr

000110c0 <CLogger::RegisterPanicHandler(void (*)())>:
   110c0:	e58010f8 	str	r1, [r0, #248]	@ 0xf8
   110c4:	e12fff1e 	bx	lr

000110c8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   110c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   110cc:	e1a06003 	mov	r6, r3
   110d0:	e24dd024 	sub	sp, sp, #36	@ 0x24
   110d4:	e1a04000 	mov	r4, r0
   110d8:	e1a0000d 	mov	r0, sp
   110dc:	e1a05002 	mov	r5, r2
   110e0:	e1a07001 	mov	r7, r1
   110e4:	eb0008c2 	bl	133f4 <CString::CString()>
   110e8:	e1a01006 	mov	r1, r6
   110ec:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
   110f0:	e1a0000d 	mov	r0, sp
   110f4:	eb000b5b 	bl	13e68 <CString::FormatV(char const*, std::__va_list)>
   110f8:	e1a0000d 	mov	r0, sp
   110fc:	eb0008f3 	bl	134d0 <CString::operator char const*() const>
   11100:	e1a02005 	mov	r2, r5
   11104:	e1a03000 	mov	r3, r0
   11108:	e1a01007 	mov	r1, r7
   1110c:	e1a00004 	mov	r0, r4
   11110:	ebffff4c 	bl	10e48 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   11114:	e5943000 	ldr	r3, [r4]
   11118:	e1550003 	cmp	r5, r3
   1111c:	8a00002b 	bhi	111d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x108>
   11120:	e28d0010 	add	r0, sp, #16
   11124:	eb0008b2 	bl	133f4 <CString::CString()>
   11128:	e3550000 	cmp	r5, #0
   1112c:	0a00002b 	beq	111e0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x118>
   11130:	e5940004 	ldr	r0, [r4, #4]
   11134:	e3500000 	cmp	r0, #0
   11138:	0a00000d 	beq	11174 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   1113c:	eb001054 	bl	15294 <CTimer::GetTimeString()>
   11140:	e2506000 	subs	r6, r0, #0
   11144:	0a00000a 	beq	11174 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   11148:	eb0008e0 	bl	134d0 <CString::operator char const*() const>
   1114c:	e1a01000 	mov	r1, r0
   11150:	e28d0010 	add	r0, sp, #16
   11154:	eb000925 	bl	135f0 <CString::Append(char const*)>
   11158:	e28d0010 	add	r0, sp, #16
   1115c:	e59f10dc 	ldr	r1, [pc, #220]	@ 11240 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x178>
   11160:	eb000922 	bl	135f0 <CString::Append(char const*)>
   11164:	e5963000 	ldr	r3, [r6]
   11168:	e1a00006 	mov	r0, r6
   1116c:	e5933004 	ldr	r3, [r3, #4]
   11170:	e12fff33 	blx	r3
   11174:	e1a01007 	mov	r1, r7
   11178:	e28d0010 	add	r0, sp, #16
   1117c:	eb00091b 	bl	135f0 <CString::Append(char const*)>
   11180:	e59f10bc 	ldr	r1, [pc, #188]	@ 11244 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x17c>
   11184:	e28d0010 	add	r0, sp, #16
   11188:	eb000918 	bl	135f0 <CString::Append(char const*)>
   1118c:	e1a0000d 	mov	r0, sp
   11190:	eb0008ce 	bl	134d0 <CString::operator char const*() const>
   11194:	e1a01000 	mov	r1, r0
   11198:	e28d0010 	add	r0, sp, #16
   1119c:	eb000913 	bl	135f0 <CString::Append(char const*)>
   111a0:	e3550000 	cmp	r5, #0
   111a4:	e28d0010 	add	r0, sp, #16
   111a8:	0a000013 	beq	111fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   111ac:	e59f1094 	ldr	r1, [pc, #148]	@ 11248 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x180>
   111b0:	eb00090e 	bl	135f0 <CString::Append(char const*)>
   111b4:	e28d0010 	add	r0, sp, #16
   111b8:	eb0008c4 	bl	134d0 <CString::operator char const*() const>
   111bc:	e1a01000 	mov	r1, r0
   111c0:	e1a00004 	mov	r0, r4
   111c4:	ebfffe76 	bl	10ba4 <CLogger::Write(char const*)>
   111c8:	e28d0010 	add	r0, sp, #16
   111cc:	eb000855 	bl	13328 <CString::~CString()>
   111d0:	e1a0000d 	mov	r0, sp
   111d4:	eb000853 	bl	13328 <CString::~CString()>
   111d8:	e28dd024 	add	sp, sp, #36	@ 0x24
   111dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   111e0:	e59f1064 	ldr	r1, [pc, #100]	@ 1124c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x184>
   111e4:	e28d0010 	add	r0, sp, #16
   111e8:	eb0008be 	bl	134e8 <CString::operator=(char const*)>
   111ec:	e5940004 	ldr	r0, [r4, #4]
   111f0:	e3500000 	cmp	r0, #0
   111f4:	1affffd0 	bne	1113c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   111f8:	eaffffdd 	b	11174 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   111fc:	e59f104c 	ldr	r1, [pc, #76]	@ 11250 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   11200:	eb0008fa 	bl	135f0 <CString::Append(char const*)>
   11204:	e59f103c 	ldr	r1, [pc, #60]	@ 11248 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x180>
   11208:	e28d0010 	add	r0, sp, #16
   1120c:	eb0008f7 	bl	135f0 <CString::Append(char const*)>
   11210:	e28d0010 	add	r0, sp, #16
   11214:	eb0008ad 	bl	134d0 <CString::operator char const*() const>
   11218:	e1a01000 	mov	r1, r0
   1121c:	e1a00004 	mov	r0, r4
   11220:	ebfffe5f 	bl	10ba4 <CLogger::Write(char const*)>
   11224:	e59430f8 	ldr	r3, [r4, #248]	@ 0xf8
   11228:	e3530000 	cmp	r3, #0
   1122c:	0a000000 	beq	11234 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x16c>
   11230:	e12fff33 	blx	r3
   11234:	e3a000ff 	mov	r0, #255	@ 0xff
   11238:	eb000e96 	bl	14c98 <set_qemu_exit_status>
   1123c:	eb000e96 	bl	14c9c <halt>
   11240:	0001df34 	.word	0x0001df34
   11244:	0001df24 	.word	0x0001df24
   11248:	0001df30 	.word	0x0001df30
   1124c:	0001df1c 	.word	0x0001df1c
   11250:	0001df28 	.word	0x0001df28

00011254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   11254:	e52d3004 	push	{r3}		@ (str r3, [sp, #-4]!)
   11258:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1125c:	e24dd010 	sub	sp, sp, #16
   11260:	e28dc018 	add	ip, sp, #24
   11264:	e59d3014 	ldr	r3, [sp, #20]
   11268:	e58dc000 	str	ip, [sp]
   1126c:	e58dc00c 	str	ip, [sp, #12]
   11270:	ebffff94 	bl	110c8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   11274:	e28dd010 	add	sp, sp, #16
   11278:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   1127c:	e28dd004 	add	sp, sp, #4
   11280:	e12fff1e 	bx	lr

00011284 <CLogger::Initialize(CDevice*)>:
   11284:	e92d4070 	push	{r4, r5, r6, lr}
   11288:	e24dd030 	sub	sp, sp, #48	@ 0x30
   1128c:	e580100c 	str	r1, [r0, #12]
   11290:	e1a04000 	mov	r4, r0
   11294:	eb00027a 	bl	11c84 <CMachineInfo::Get()>
   11298:	eb00016f 	bl	1185c <CMachineInfo::GetRAMSize() const>
   1129c:	e1a05000 	mov	r5, r0
   112a0:	e3a06001 	mov	r6, #1
   112a4:	e28d0010 	add	r0, sp, #16
   112a8:	eb000851 	bl	133f4 <CString::CString()>
   112ac:	e3550b01 	cmp	r5, #1024	@ 0x400
   112b0:	31a02005 	movcc	r2, r5
   112b4:	21a02525 	lsrcs	r2, r5, #10
   112b8:	359f10b4 	ldrcc	r1, [pc, #180]	@ 11374 <CLogger::Initialize(CDevice*)+0xf0>
   112bc:	259f10b4 	ldrcs	r1, [pc, #180]	@ 11378 <CLogger::Initialize(CDevice*)+0xf4>
   112c0:	328d0010 	addcc	r0, sp, #16
   112c4:	228d0010 	addcs	r0, sp, #16
   112c8:	eb000e63 	bl	14c5c <CString::Format(char const*, ...)>
   112cc:	e59f10a8 	ldr	r1, [pc, #168]	@ 1137c <CLogger::Initialize(CDevice*)+0xf8>
   112d0:	e28d0020 	add	r0, sp, #32
   112d4:	eb00084c 	bl	1340c <CString::CString(char const*)>
   112d8:	e3a03003 	mov	r3, #3
   112dc:	e3a0200d 	mov	r2, #13
   112e0:	e59f1098 	ldr	r1, [pc, #152]	@ 11380 <CLogger::Initialize(CDevice*)+0xfc>
   112e4:	e28d0020 	add	r0, sp, #32
   112e8:	e58d6000 	str	r6, [sp]
   112ec:	eb000e5a 	bl	14c5c <CString::Format(char const*, ...)>
   112f0:	eb000263 	bl	11c84 <CMachineInfo::Get()>
   112f4:	eb00014b 	bl	11828 <CMachineInfo::GetMachineName() const>
   112f8:	e1a05000 	mov	r5, r0
   112fc:	e28d0010 	add	r0, sp, #16
   11300:	eb000872 	bl	134d0 <CString::operator char const*() const>
   11304:	e59f3078 	ldr	r3, [pc, #120]	@ 11384 <CLogger::Initialize(CDevice*)+0x100>
   11308:	e3a02003 	mov	r2, #3
   1130c:	e58d3000 	str	r3, [sp]
   11310:	e59f3070 	ldr	r3, [pc, #112]	@ 11388 <CLogger::Initialize(CDevice*)+0x104>
   11314:	e58d5004 	str	r5, [sp, #4]
   11318:	e283101c 	add	r1, r3, #28
   1131c:	e58d0008 	str	r0, [sp, #8]
   11320:	e1a00004 	mov	r0, r4
   11324:	ebffffca 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11328:	eb000255 	bl	11c84 <CMachineInfo::Get()>
   1132c:	eb000152 	bl	1187c <CMachineInfo::GetRevisionRaw() const>
   11330:	e1a05000 	mov	r5, r0
   11334:	e28d0020 	add	r0, sp, #32
   11338:	eb000864 	bl	134d0 <CString::operator char const*() const>
   1133c:	e59f3048 	ldr	r3, [pc, #72]	@ 1138c <CLogger::Initialize(CDevice*)+0x108>
   11340:	e3a02004 	mov	r2, #4
   11344:	e2431008 	sub	r1, r3, #8
   11348:	e58d0004 	str	r0, [sp, #4]
   1134c:	e58d5000 	str	r5, [sp]
   11350:	e1a00004 	mov	r0, r4
   11354:	ebffffbe 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11358:	e28d0020 	add	r0, sp, #32
   1135c:	eb0007f1 	bl	13328 <CString::~CString()>
   11360:	e28d0010 	add	r0, sp, #16
   11364:	eb0007ef 	bl	13328 <CString::~CString()>
   11368:	e1a00006 	mov	r0, r6
   1136c:	e28dd030 	add	sp, sp, #48	@ 0x30
   11370:	e8bd8070 	pop	{r4, r5, r6, pc}
   11374:	0001df38 	.word	0x0001df38
   11378:	0001df40 	.word	0x0001df40
   1137c:	0001df48 	.word	0x0001df48
   11380:	0001df50 	.word	0x0001df50
   11384:	00020b78 	.word	0x00020b78
   11388:	0001df60 	.word	0x0001df60
   1138c:	0001df84 	.word	0x0001df84

00011390 <CMachineInfo::CMachineInfo()>:
   11390:	e92d4830 	push	{r4, r5, fp, lr}
   11394:	e28db00c 	add	fp, sp, #12
   11398:	e24dd048 	sub	sp, sp, #72	@ 0x48
   1139c:	e50b0048 	str	r0, [fp, #-72]	@ 0xffffffb8
   113a0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113a4:	e3a02000 	mov	r2, #0
   113a8:	e5832000 	str	r2, [r3]
   113ac:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113b0:	e3a02015 	mov	r2, #21
   113b4:	e5c32008 	strb	r2, [r3, #8]
   113b8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113bc:	e3a02000 	mov	r2, #0
   113c0:	e5832010 	str	r2, [r3, #16]
   113c4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113c8:	e3a02000 	mov	r2, #0
   113cc:	e5832018 	str	r2, [r3, #24]
   113d0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113d4:	e3a02005 	mov	r2, #5
   113d8:	e5c32020 	strb	r2, [r3, #32]
   113dc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113e0:	e3e02000 	mvn	r2, #0
   113e4:	e5c32028 	strb	r2, [r3, #40]	@ 0x28
   113e8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113ec:	e3a02000 	mov	r2, #0
   113f0:	e5832030 	str	r2, [r3, #48]	@ 0x30
   113f4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   113f8:	e59f23ec 	ldr	r2, [pc, #1004]	@ 117ec <CMachineInfo::CMachineInfo()+0x45c>
   113fc:	e1c323b8 	strh	r2, [r3, #56]	@ 0x38
   11400:	e59f33e8 	ldr	r3, [pc, #1000]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   11404:	e5933000 	ldr	r3, [r3]
   11408:	e3530000 	cmp	r3, #0
   1140c:	0a000024 	beq	114a4 <CMachineInfo::CMachineInfo()+0x114>
   11410:	e59f33d8 	ldr	r3, [pc, #984]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   11414:	e5933000 	ldr	r3, [r3]
   11418:	e5932000 	ldr	r2, [r3]
   1141c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11420:	e5832000 	str	r2, [r3]
   11424:	e59f33c4 	ldr	r3, [pc, #964]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   11428:	e5933000 	ldr	r3, [r3]
   1142c:	e5d32008 	ldrb	r2, [r3, #8]
   11430:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11434:	e5c32008 	strb	r2, [r3, #8]
   11438:	e59f33b0 	ldr	r3, [pc, #944]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   1143c:	e5933000 	ldr	r3, [r3]
   11440:	e5932010 	ldr	r2, [r3, #16]
   11444:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11448:	e5832010 	str	r2, [r3, #16]
   1144c:	e59f339c 	ldr	r3, [pc, #924]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   11450:	e5933000 	ldr	r3, [r3]
   11454:	e5932018 	ldr	r2, [r3, #24]
   11458:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   1145c:	e5832018 	str	r2, [r3, #24]
   11460:	e59f3388 	ldr	r3, [pc, #904]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   11464:	e5933000 	ldr	r3, [r3]
   11468:	e5d32020 	ldrb	r2, [r3, #32]
   1146c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11470:	e5c32020 	strb	r2, [r3, #32]
   11474:	e59f3374 	ldr	r3, [pc, #884]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   11478:	e5933000 	ldr	r3, [r3]
   1147c:	e5d32028 	ldrb	r2, [r3, #40]	@ 0x28
   11480:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11484:	e5c32028 	strb	r2, [r3, #40]	@ 0x28
   11488:	e59f3360 	ldr	r3, [pc, #864]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   1148c:	e5933000 	ldr	r3, [r3]
   11490:	e5932030 	ldr	r2, [r3, #48]	@ 0x30
   11494:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11498:	e5832030 	str	r2, [r3, #48]	@ 0x30
   1149c:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   114a0:	ea0000cd 	b	117dc <CMachineInfo::CMachineInfo()+0x44c>
   114a4:	e59f2344 	ldr	r2, [pc, #836]	@ 117f0 <CMachineInfo::CMachineInfo()+0x460>
   114a8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   114ac:	e5823000 	str	r3, [r2]
   114b0:	e24b3020 	sub	r3, fp, #32
   114b4:	e3a01000 	mov	r1, #0
   114b8:	e1a00003 	mov	r0, r3
   114bc:	eb00215e 	bl	19a3c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   114c0:	e24b2030 	sub	r2, fp, #48	@ 0x30
   114c4:	e24b0020 	sub	r0, fp, #32
   114c8:	e3a03000 	mov	r3, #0
   114cc:	e58d3000 	str	r3, [sp]
   114d0:	e3a03010 	mov	r3, #16
   114d4:	e59f1318 	ldr	r1, [pc, #792]	@ 117f4 <CMachineInfo::CMachineInfo()+0x464>
   114d8:	eb0021a8 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   114dc:	e1a03000 	mov	r3, r0
   114e0:	e3530000 	cmp	r3, #0
   114e4:	0a000003 	beq	114f8 <CMachineInfo::CMachineInfo()+0x168>
   114e8:	e51b3024 	ldr	r3, [fp, #-36]	@ 0xffffffdc
   114ec:	e6ff2073 	uxth	r2, r3
   114f0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   114f4:	e1c323b8 	strh	r2, [r3, #56]	@ 0x38
   114f8:	e24b2040 	sub	r2, fp, #64	@ 0x40
   114fc:	e24b0020 	sub	r0, fp, #32
   11500:	e3a03000 	mov	r3, #0
   11504:	e58d3000 	str	r3, [sp]
   11508:	e3a03010 	mov	r3, #16
   1150c:	e59f12e4 	ldr	r1, [pc, #740]	@ 117f8 <CMachineInfo::CMachineInfo()+0x468>
   11510:	eb00219a 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11514:	e1a03000 	mov	r3, r0
   11518:	e2233001 	eor	r3, r3, #1
   1151c:	e6ef3073 	uxtb	r3, r3
   11520:	e3530000 	cmp	r3, #0
   11524:	0a000002 	beq	11534 <CMachineInfo::CMachineInfo()+0x1a4>
   11528:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   1152c:	e3a05000 	mov	r5, #0
   11530:	ea0000a2 	b	117c0 <CMachineInfo::CMachineInfo()+0x430>
   11534:	e51b2034 	ldr	r2, [fp, #-52]	@ 0xffffffcc
   11538:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   1153c:	e5832000 	str	r2, [r3]
   11540:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11544:	e5933000 	ldr	r3, [r3]
   11548:	e2033502 	and	r3, r3, #8388608	@ 0x800000
   1154c:	e3530000 	cmp	r3, #0
   11550:	0a000066 	beq	116f0 <CMachineInfo::CMachineInfo()+0x360>
   11554:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11558:	e5933000 	ldr	r3, [r3]
   1155c:	e1a03223 	lsr	r3, r3, #4
   11560:	e6ef3073 	uxtb	r3, r3
   11564:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
   11568:	e3a03000 	mov	r3, #0
   1156c:	e50b3010 	str	r3, [fp, #-16]
   11570:	ea00000d 	b	115ac <CMachineInfo::CMachineInfo()+0x21c>
   11574:	e59f1280 	ldr	r1, [pc, #640]	@ 117fc <CMachineInfo::CMachineInfo()+0x46c>
   11578:	e51b2010 	ldr	r2, [fp, #-16]
   1157c:	e1a03002 	mov	r3, r2
   11580:	e1a03083 	lsl	r3, r3, #1
   11584:	e0833002 	add	r3, r3, r2
   11588:	e1a03103 	lsl	r3, r3, #2
   1158c:	e0813003 	add	r3, r1, r3
   11590:	e5933000 	ldr	r3, [r3]
   11594:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   11598:	e1520003 	cmp	r2, r3
   1159c:	0a000006 	beq	115bc <CMachineInfo::CMachineInfo()+0x22c>
   115a0:	e51b3010 	ldr	r3, [fp, #-16]
   115a4:	e2833001 	add	r3, r3, #1
   115a8:	e50b3010 	str	r3, [fp, #-16]
   115ac:	e51b3010 	ldr	r3, [fp, #-16]
   115b0:	e3530012 	cmp	r3, #18
   115b4:	9affffee 	bls	11574 <CMachineInfo::CMachineInfo()+0x1e4>
   115b8:	ea000000 	b	115c0 <CMachineInfo::CMachineInfo()+0x230>
   115bc:	e320f000 	nop	{0}
   115c0:	e51b3010 	ldr	r3, [fp, #-16]
   115c4:	e3530012 	cmp	r3, #18
   115c8:	9a000002 	bls	115d8 <CMachineInfo::CMachineInfo()+0x248>
   115cc:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   115d0:	e3a05000 	mov	r5, #0
   115d4:	ea000079 	b	117c0 <CMachineInfo::CMachineInfo()+0x430>
   115d8:	e59f121c 	ldr	r1, [pc, #540]	@ 117fc <CMachineInfo::CMachineInfo()+0x46c>
   115dc:	e51b2010 	ldr	r2, [fp, #-16]
   115e0:	e1a03002 	mov	r3, r2
   115e4:	e1a03083 	lsl	r3, r3, #1
   115e8:	e0833002 	add	r3, r3, r2
   115ec:	e1a03103 	lsl	r3, r3, #2
   115f0:	e0813003 	add	r3, r1, r3
   115f4:	e2833004 	add	r3, r3, #4
   115f8:	e5d32000 	ldrb	r2, [r3]
   115fc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11600:	e5c32008 	strb	r2, [r3, #8]
   11604:	e59f11f0 	ldr	r1, [pc, #496]	@ 117fc <CMachineInfo::CMachineInfo()+0x46c>
   11608:	e51b2010 	ldr	r2, [fp, #-16]
   1160c:	e1a03002 	mov	r3, r2
   11610:	e1a03083 	lsl	r3, r3, #1
   11614:	e0833002 	add	r3, r3, r2
   11618:	e1a03103 	lsl	r3, r3, #2
   1161c:	e0813003 	add	r3, r1, r3
   11620:	e2833008 	add	r3, r3, #8
   11624:	e5932000 	ldr	r2, [r3]
   11628:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   1162c:	e5832010 	str	r2, [r3, #16]
   11630:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11634:	e5933000 	ldr	r3, [r3]
   11638:	e203300f 	and	r3, r3, #15
   1163c:	e2832001 	add	r2, r3, #1
   11640:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11644:	e5832018 	str	r2, [r3, #24]
   11648:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   1164c:	e5933000 	ldr	r3, [r3]
   11650:	e1a03623 	lsr	r3, r3, #12
   11654:	e6ef3073 	uxtb	r3, r3
   11658:	e203300f 	and	r3, r3, #15
   1165c:	e6ef2073 	uxtb	r2, r3
   11660:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11664:	e5c32020 	strb	r2, [r3, #32]
   11668:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   1166c:	e5933000 	ldr	r3, [r3]
   11670:	e1a03a23 	lsr	r3, r3, #20
   11674:	e2033007 	and	r3, r3, #7
   11678:	e3a02c01 	mov	r2, #256	@ 0x100
   1167c:	e1a03312 	lsl	r3, r2, r3
   11680:	e1a02003 	mov	r2, r3
   11684:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11688:	e5832030 	str	r2, [r3, #48]	@ 0x30
   1168c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11690:	e5d33020 	ldrb	r3, [r3, #32]
   11694:	e3530004 	cmp	r3, #4
   11698:	9a000002 	bls	116a8 <CMachineInfo::CMachineInfo()+0x318>
   1169c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   116a0:	e3a02005 	mov	r2, #5
   116a4:	e5c32020 	strb	r2, [r3, #32]
   116a8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   116ac:	e5d33008 	ldrb	r3, [r3, #8]
   116b0:	e3530003 	cmp	r3, #3
   116b4:	1a000040 	bne	117bc <CMachineInfo::CMachineInfo()+0x42c>
   116b8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   116bc:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
   116c0:	e3530c01 	cmp	r3, #256	@ 0x100
   116c4:	1a00003c 	bne	117bc <CMachineInfo::CMachineInfo()+0x42c>
   116c8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   116cc:	e5933018 	ldr	r3, [r3, #24]
   116d0:	e3530001 	cmp	r3, #1
   116d4:	1a000001 	bne	116e0 <CMachineInfo::CMachineInfo()+0x350>
   116d8:	e3a02001 	mov	r2, #1
   116dc:	ea000000 	b	116e4 <CMachineInfo::CMachineInfo()+0x354>
   116e0:	e3a02002 	mov	r2, #2
   116e4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   116e8:	e5c32008 	strb	r2, [r3, #8]
   116ec:	ea000032 	b	117bc <CMachineInfo::CMachineInfo()+0x42c>
   116f0:	e3a03000 	mov	r3, #0
   116f4:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
   116f8:	ea000009 	b	11724 <CMachineInfo::CMachineInfo()+0x394>
   116fc:	e59f20fc 	ldr	r2, [pc, #252]	@ 11800 <CMachineInfo::CMachineInfo()+0x470>
   11700:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   11704:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   11708:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   1170c:	e5933000 	ldr	r3, [r3]
   11710:	e1520003 	cmp	r2, r3
   11714:	0a000006 	beq	11734 <CMachineInfo::CMachineInfo()+0x3a4>
   11718:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   1171c:	e2833001 	add	r3, r3, #1
   11720:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
   11724:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   11728:	e3530010 	cmp	r3, #16
   1172c:	9afffff2 	bls	116fc <CMachineInfo::CMachineInfo()+0x36c>
   11730:	ea000000 	b	11738 <CMachineInfo::CMachineInfo()+0x3a8>
   11734:	e320f000 	nop	{0}
   11738:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   1173c:	e3530010 	cmp	r3, #16
   11740:	9a000002 	bls	11750 <CMachineInfo::CMachineInfo()+0x3c0>
   11744:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   11748:	e3a05000 	mov	r5, #0
   1174c:	ea00001b 	b	117c0 <CMachineInfo::CMachineInfo()+0x430>
   11750:	e59f20a8 	ldr	r2, [pc, #168]	@ 11800 <CMachineInfo::CMachineInfo()+0x470>
   11754:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   11758:	e1a03203 	lsl	r3, r3, #4
   1175c:	e0823003 	add	r3, r2, r3
   11760:	e5d32004 	ldrb	r2, [r3, #4]
   11764:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11768:	e5c32008 	strb	r2, [r3, #8]
   1176c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11770:	e3a02001 	mov	r2, #1
   11774:	e5832010 	str	r2, [r3, #16]
   11778:	e59f2080 	ldr	r2, [pc, #128]	@ 11800 <CMachineInfo::CMachineInfo()+0x470>
   1177c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   11780:	e1a03203 	lsl	r3, r3, #4
   11784:	e0823003 	add	r3, r2, r3
   11788:	e5932008 	ldr	r2, [r3, #8]
   1178c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11790:	e5832018 	str	r2, [r3, #24]
   11794:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   11798:	e3a02000 	mov	r2, #0
   1179c:	e5c32020 	strb	r2, [r3, #32]
   117a0:	e59f2058 	ldr	r2, [pc, #88]	@ 11800 <CMachineInfo::CMachineInfo()+0x470>
   117a4:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   117a8:	e1a03203 	lsl	r3, r3, #4
   117ac:	e0823003 	add	r3, r2, r3
   117b0:	e593200c 	ldr	r2, [r3, #12]
   117b4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   117b8:	e5832030 	str	r2, [r3, #48]	@ 0x30
   117bc:	e3a05001 	mov	r5, #1
   117c0:	e24b3020 	sub	r3, fp, #32
   117c4:	e1a00003 	mov	r0, r3
   117c8:	eb0020a2 	bl	19a58 <CBcmPropertyTags::~CBcmPropertyTags()>
   117cc:	e3550001 	cmp	r5, #1
   117d0:	1a000001 	bne	117dc <CMachineInfo::CMachineInfo()+0x44c>
   117d4:	e320f000 	nop	{0}
   117d8:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   117dc:	e1a03004 	mov	r3, r4
   117e0:	e1a00003 	mov	r0, r3
   117e4:	e24bd00c 	sub	sp, fp, #12
   117e8:	e8bd8830 	pop	{r4, r5, fp, pc}
   117ec:	00001f35 	.word	0x00001f35
   117f0:	00020b5c 	.word	0x00020b5c
   117f4:	00060001 	.word	0x00060001
   117f8:	00010002 	.word	0x00010002
   117fc:	0001dfb0 	.word	0x0001dfb0
   11800:	0001e094 	.word	0x0001e094

00011804 <CMachineInfo::~CMachineInfo()>:
   11804:	e59f3010 	ldr	r3, [pc, #16]	@ 1181c <CMachineInfo::~CMachineInfo()+0x18>
   11808:	e5932000 	ldr	r2, [r3]
   1180c:	e1520000 	cmp	r2, r0
   11810:	03a02000 	moveq	r2, #0
   11814:	05832000 	streq	r2, [r3]
   11818:	e12fff1e 	bx	lr
   1181c:	00020b5c 	.word	0x00020b5c

00011820 <CMachineInfo::GetMachineModel() const>:
   11820:	e5d00008 	ldrb	r0, [r0, #8]
   11824:	e12fff1e 	bx	lr

00011828 <CMachineInfo::GetMachineName() const>:
   11828:	e59f3008 	ldr	r3, [pc, #8]	@ 11838 <CMachineInfo::GetMachineName() const+0x10>
   1182c:	e5d02008 	ldrb	r2, [r0, #8]
   11830:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   11834:	e12fff1e 	bx	lr
   11838:	0001e1a4 	.word	0x0001e1a4

0001183c <CMachineInfo::GetModelMajor() const>:
   1183c:	e5900010 	ldr	r0, [r0, #16]
   11840:	e12fff1e 	bx	lr

00011844 <CMachineInfo::GetModelRevision() const>:
   11844:	e5900018 	ldr	r0, [r0, #24]
   11848:	e12fff1e 	bx	lr

0001184c <CMachineInfo::GetSoCType() const>:
   1184c:	e5d00020 	ldrb	r0, [r0, #32]
   11850:	e12fff1e 	bx	lr

00011854 <CMachineInfo::GetSoCStepping() const>:
   11854:	e5d00028 	ldrb	r0, [r0, #40]	@ 0x28
   11858:	e12fff1e 	bx	lr

0001185c <CMachineInfo::GetRAMSize() const>:
   1185c:	e5900030 	ldr	r0, [r0, #48]	@ 0x30
   11860:	e12fff1e 	bx	lr

00011864 <CMachineInfo::GetSoCName() const>:
   11864:	e5d02020 	ldrb	r2, [r0, #32]
   11868:	e59f3008 	ldr	r3, [pc, #8]	@ 11878 <CMachineInfo::GetSoCName() const+0x14>
   1186c:	e0833102 	add	r3, r3, r2, lsl #2
   11870:	e5930058 	ldr	r0, [r3, #88]	@ 0x58
   11874:	e12fff1e 	bx	lr
   11878:	0001e1a4 	.word	0x0001e1a4

0001187c <CMachineInfo::GetRevisionRaw() const>:
   1187c:	e5900000 	ldr	r0, [r0]
   11880:	e12fff1e 	bx	lr

00011884 <CMachineInfo::GetActLEDInfo() const>:
   11884:	e5d02008 	ldrb	r2, [r0, #8]
   11888:	e59f3008 	ldr	r3, [pc, #8]	@ 11898 <CMachineInfo::GetActLEDInfo() const+0x14>
   1188c:	e0833102 	add	r3, r3, r2, lsl #2
   11890:	e5930070 	ldr	r0, [r3, #112]	@ 0x70
   11894:	e12fff1e 	bx	lr
   11898:	0001e1a4 	.word	0x0001e1a4

0001189c <CMachineInfo::GetClockRate(unsigned int) const>:
   1189c:	e92d4070 	push	{r4, r5, r6, lr}
   118a0:	e24dd028 	sub	sp, sp, #40	@ 0x28
   118a4:	e1a04001 	mov	r4, r1
   118a8:	e1a06000 	mov	r6, r0
   118ac:	e3a01000 	mov	r1, #0
   118b0:	e28d000c 	add	r0, sp, #12
   118b4:	eb002060 	bl	19a3c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   118b8:	e3a02004 	mov	r2, #4
   118bc:	e3a03014 	mov	r3, #20
   118c0:	e58d2000 	str	r2, [sp]
   118c4:	e59f10ec 	ldr	r1, [pc, #236]	@ 119b8 <CMachineInfo::GetClockRate(unsigned int) const+0x11c>
   118c8:	e08d2003 	add	r2, sp, r3
   118cc:	e28d000c 	add	r0, sp, #12
   118d0:	e58d4020 	str	r4, [sp, #32]
   118d4:	eb0020a9 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   118d8:	e3500000 	cmp	r0, #0
   118dc:	0a000002 	beq	118ec <CMachineInfo::GetClockRate(unsigned int) const+0x50>
   118e0:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
   118e4:	e3550000 	cmp	r5, #0
   118e8:	1a000023 	bne	1197c <CMachineInfo::GetClockRate(unsigned int) const+0xe0>
   118ec:	e3a0c004 	mov	ip, #4
   118f0:	e3a03014 	mov	r3, #20
   118f4:	e59f10c0 	ldr	r1, [pc, #192]	@ 119bc <CMachineInfo::GetClockRate(unsigned int) const+0x120>
   118f8:	e08d2003 	add	r2, sp, r3
   118fc:	e28d000c 	add	r0, sp, #12
   11900:	e58dc000 	str	ip, [sp]
   11904:	e58d4020 	str	r4, [sp, #32]
   11908:	eb00209c 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1190c:	e3500000 	cmp	r0, #0
   11910:	0a000002 	beq	11920 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   11914:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
   11918:	e3550000 	cmp	r5, #0
   1191c:	1a000016 	bne	1197c <CMachineInfo::GetClockRate(unsigned int) const+0xe0>
   11920:	e2444001 	sub	r4, r4, #1
   11924:	e354000d 	cmp	r4, #13
   11928:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   1192c:	ea00001d 	b	119a8 <CMachineInfo::GetClockRate(unsigned int) const+0x10c>
   11930:	00011990 	.word	0x00011990
   11934:	000119a0 	.word	0x000119a0
   11938:	000119a8 	.word	0x000119a8
   1193c:	00011968 	.word	0x00011968
   11940:	000119a8 	.word	0x000119a8
   11944:	000119a8 	.word	0x000119a8
   11948:	000119a8 	.word	0x000119a8
   1194c:	000119a8 	.word	0x000119a8
   11950:	000119a8 	.word	0x000119a8
   11954:	000119a8 	.word	0x000119a8
   11958:	000119a8 	.word	0x000119a8
   1195c:	00011990 	.word	0x00011990
   11960:	000119a8 	.word	0x000119a8
   11964:	00011998 	.word	0x00011998
   11968:	e5962010 	ldr	r2, [r6, #16]
   1196c:	e59f304c 	ldr	r3, [pc, #76]	@ 119c0 <CMachineInfo::GetClockRate(unsigned int) const+0x124>
   11970:	e3520002 	cmp	r2, #2
   11974:	e59f5048 	ldr	r5, [pc, #72]	@ 119c4 <CMachineInfo::GetClockRate(unsigned int) const+0x128>
   11978:	91a05003 	movls	r5, r3
   1197c:	e28d000c 	add	r0, sp, #12
   11980:	eb002034 	bl	19a58 <CBcmPropertyTags::~CBcmPropertyTags()>
   11984:	e1a00005 	mov	r0, r5
   11988:	e28dd028 	add	sp, sp, #40	@ 0x28
   1198c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11990:	e59f5030 	ldr	r5, [pc, #48]	@ 119c8 <CMachineInfo::GetClockRate(unsigned int) const+0x12c>
   11994:	eafffff8 	b	1197c <CMachineInfo::GetClockRate(unsigned int) const+0xe0>
   11998:	e59f502c 	ldr	r5, [pc, #44]	@ 119cc <CMachineInfo::GetClockRate(unsigned int) const+0x130>
   1199c:	eafffff6 	b	1197c <CMachineInfo::GetClockRate(unsigned int) const+0xe0>
   119a0:	e59f5028 	ldr	r5, [pc, #40]	@ 119d0 <CMachineInfo::GetClockRate(unsigned int) const+0x134>
   119a4:	eafffff4 	b	1197c <CMachineInfo::GetClockRate(unsigned int) const+0xe0>
   119a8:	e59f1024 	ldr	r1, [pc, #36]	@ 119d4 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
   119ac:	e3a02f6b 	mov	r2, #428	@ 0x1ac
   119b0:	e2810010 	add	r0, r1, #16
   119b4:	ebfff75a 	bl	f724 <assertion_failed>
   119b8:	00030002 	.word	0x00030002
   119bc:	00030047 	.word	0x00030047
   119c0:	0ee6b280 	.word	0x0ee6b280
   119c4:	11e1a300 	.word	0x11e1a300
   119c8:	05f5e100 	.word	0x05f5e100
   119cc:	047868c0 	.word	0x047868c0
   119d0:	02dc6c00 	.word	0x02dc6c00
   119d4:	0001e26c 	.word	0x0001e26c

000119d8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   119d8:	e3510036 	cmp	r1, #54	@ 0x36
   119dc:	0a00000a 	beq	11a0c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x34>
   119e0:	e3510037 	cmp	r1, #55	@ 0x37
   119e4:	1a00001a 	bne	11a54 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x7c>
   119e8:	e5d03008 	ldrb	r3, [r0, #8]
   119ec:	e2432006 	sub	r2, r3, #6
   119f0:	e3530014 	cmp	r3, #20
   119f4:	13520002 	cmpne	r2, #2
   119f8:	9a000013 	bls	11a4c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x74>
   119fc:	e3530004 	cmp	r3, #4
   11a00:	33a0002d 	movcc	r0, #45	@ 0x2d
   11a04:	23a00028 	movcs	r0, #40	@ 0x28
   11a08:	e12fff1e 	bx	lr
   11a0c:	e5d03008 	ldrb	r3, [r0, #8]
   11a10:	e2432006 	sub	r2, r3, #6
   11a14:	e3530014 	cmp	r3, #20
   11a18:	13520002 	cmpne	r2, #2
   11a1c:	9a000008 	bls	11a44 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
   11a20:	e3530003 	cmp	r3, #3
   11a24:	8a000001 	bhi	11a30 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x58>
   11a28:	e3a00028 	mov	r0, #40	@ 0x28
   11a2c:	e12fff1e 	bx	lr
   11a30:	e5903010 	ldr	r3, [r0, #16]
   11a34:	e3530003 	cmp	r3, #3
   11a38:	33a0002d 	movcc	r0, #45	@ 0x2d
   11a3c:	23a00029 	movcs	r0, #41	@ 0x29
   11a40:	e12fff1e 	bx	lr
   11a44:	e3a0000c 	mov	r0, #12
   11a48:	e12fff1e 	bx	lr
   11a4c:	e3a0000d 	mov	r0, #13
   11a50:	e12fff1e 	bx	lr
   11a54:	e59f100c 	ldr	r1, [pc, #12]	@ 11a68 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x90>
   11a58:	e92d4010 	push	{r4, lr}
   11a5c:	e59f2008 	ldr	r2, [pc, #8]	@ 11a6c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x94>
   11a60:	e2810010 	add	r0, r1, #16
   11a64:	ebfff72e 	bl	f724 <assertion_failed>
   11a68:	0001e26c 	.word	0x0001e26c
   11a6c:	000001f1 	.word	0x000001f1

00011a70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   11a70:	e5903010 	ldr	r3, [r0, #16]
   11a74:	e3530003 	cmp	r3, #3
   11a78:	8a000005 	bhi	11a94 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   11a7c:	e3510001 	cmp	r1, #1
   11a80:	0a000009 	beq	11aac <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   11a84:	e3510006 	cmp	r1, #6
   11a88:	e59f002c 	ldr	r0, [pc, #44]	@ 11abc <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   11a8c:	13a00000 	movne	r0, #0
   11a90:	e12fff1e 	bx	lr
   11a94:	e3510001 	cmp	r1, #1
   11a98:	0a000005 	beq	11ab4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   11a9c:	e3510006 	cmp	r1, #6
   11aa0:	e59f0018 	ldr	r0, [pc, #24]	@ 11ac0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   11aa4:	13a00000 	movne	r0, #0
   11aa8:	e12fff1e 	bx	lr
   11aac:	e59f0010 	ldr	r0, [pc, #16]	@ 11ac4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   11ab0:	e12fff1e 	bx	lr
   11ab4:	e59f000c 	ldr	r0, [pc, #12]	@ 11ac8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   11ab8:	e12fff1e 	bx	lr
   11abc:	1dcd6500 	.word	0x1dcd6500
   11ac0:	2cb41780 	.word	0x2cb41780
   11ac4:	0124f800 	.word	0x0124f800
   11ac8:	0337f980 	.word	0x0337f980

00011acc <CMachineInfo::GetDevice(TDeviceId) const>:
   11acc:	e3510000 	cmp	r1, #0
   11ad0:	1a000003 	bne	11ae4 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   11ad4:	e5d00008 	ldrb	r0, [r0, #8]
   11ad8:	e2500001 	subs	r0, r0, #1
   11adc:	13a00001 	movne	r0, #1
   11ae0:	e12fff1e 	bx	lr
   11ae4:	e59f100c 	ldr	r1, [pc, #12]	@ 11af8 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   11ae8:	e3a02f8f 	mov	r2, #572	@ 0x23c
   11aec:	e92d4010 	push	{r4, lr}
   11af0:	e2810010 	add	r0, r1, #16
   11af4:	ebfff70a 	bl	f724 <assertion_failed>
   11af8:	0001e26c 	.word	0x0001e26c

00011afc <CMachineInfo::ArePWMChannelsSwapped() const>:
   11afc:	e5d03008 	ldrb	r3, [r0, #8]
   11b00:	e3530014 	cmp	r3, #20
   11b04:	13530003 	cmpne	r3, #3
   11b08:	83a00001 	movhi	r0, #1
   11b0c:	93a00000 	movls	r0, #0
   11b10:	e2433006 	sub	r3, r3, #6
   11b14:	e3530002 	cmp	r3, #2
   11b18:	93a00000 	movls	r0, #0
   11b1c:	82000001 	andhi	r0, r0, #1
   11b20:	e12fff1e 	bx	lr

00011b24 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   11b24:	e59f30c4 	ldr	r3, [pc, #196]	@ 11bf0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xcc>
   11b28:	e92d4010 	push	{r4, lr}
   11b2c:	e5932000 	ldr	r2, [r3]
   11b30:	e3520000 	cmp	r2, #0
   11b34:	11a03000 	movne	r3, r0
   11b38:	1a000001 	bne	11b44 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
   11b3c:	ea00000f 	b	11b80 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   11b40:	e1a03002 	mov	r3, r2
   11b44:	e1520003 	cmp	r2, r3
   11b48:	1afffffc 	bne	11b40 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   11b4c:	e351000f 	cmp	r1, #15
   11b50:	8a00000e 	bhi	11b90 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x6c>
   11b54:	e351000b 	cmp	r1, #11
   11b58:	8a000020 	bhi	11be0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   11b5c:	e1d233b8 	ldrh	r3, [r2, #56]	@ 0x38
   11b60:	e1a00153 	asr	r0, r3, r1
   11b64:	e3100001 	tst	r0, #1
   11b68:	0a000015 	beq	11bc4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa0>
   11b6c:	e3a0c001 	mov	ip, #1
   11b70:	e1c3311c 	bic	r3, r3, ip, lsl r1
   11b74:	e1a00001 	mov	r0, r1
   11b78:	e1c233b8 	strh	r3, [r2, #56]	@ 0x38
   11b7c:	e8bd8010 	pop	{r4, pc}
   11b80:	e59f106c 	ldr	r1, [pc, #108]	@ 11bf4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
   11b84:	e59f206c 	ldr	r2, [pc, #108]	@ 11bf8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd4>
   11b88:	e2810014 	add	r0, r1, #20
   11b8c:	ebfff6e4 	bl	f724 <assertion_failed>
   11b90:	e3510081 	cmp	r1, #129	@ 0x81
   11b94:	13a0200b 	movne	r2, #11
   11b98:	03a02006 	moveq	r2, #6
   11b9c:	e1d3c3b8 	ldrh	ip, [r3, #56]	@ 0x38
   11ba0:	e1a0125c 	asr	r1, ip, r2
   11ba4:	e3110001 	tst	r1, #1
   11ba8:	0a000003 	beq	11bbc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x98>
   11bac:	ea000006 	b	11bcc <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   11bb0:	e1a0125c 	asr	r1, ip, r2
   11bb4:	e3110001 	tst	r1, #1
   11bb8:	1a000003 	bne	11bcc <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   11bbc:	e2522001 	subs	r2, r2, #1
   11bc0:	2afffffa 	bcs	11bb0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
   11bc4:	e3a00080 	mov	r0, #128	@ 0x80
   11bc8:	e8bd8010 	pop	{r4, pc}
   11bcc:	e3a01001 	mov	r1, #1
   11bd0:	e1ccc211 	bic	ip, ip, r1, lsl r2
   11bd4:	e1a00002 	mov	r0, r2
   11bd8:	e1c3c3b8 	strh	ip, [r3, #56]	@ 0x38
   11bdc:	e8bd8010 	pop	{r4, pc}
   11be0:	e59f100c 	ldr	r1, [pc, #12]	@ 11bf4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
   11be4:	e3a02f96 	mov	r2, #600	@ 0x258
   11be8:	e2810024 	add	r0, r1, #36	@ 0x24
   11bec:	ebfff6cc 	bl	f724 <assertion_failed>
   11bf0:	00020b5c 	.word	0x00020b5c
   11bf4:	0001e26c 	.word	0x0001e26c
   11bf8:	0000024e 	.word	0x0000024e

00011bfc <CMachineInfo::FreeDMAChannel(unsigned int)>:
   11bfc:	e59f3074 	ldr	r3, [pc, #116]	@ 11c78 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   11c00:	e92d4010 	push	{r4, lr}
   11c04:	e5933000 	ldr	r3, [r3]
   11c08:	e3530000 	cmp	r3, #0
   11c0c:	1a000001 	bne	11c18 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   11c10:	ea00000c 	b	11c48 <CMachineInfo::FreeDMAChannel(unsigned int)+0x4c>
   11c14:	e1a00003 	mov	r0, r3
   11c18:	e1530000 	cmp	r3, r0
   11c1c:	1afffffc 	bne	11c14 <CMachineInfo::FreeDMAChannel(unsigned int)+0x18>
   11c20:	e351000b 	cmp	r1, #11
   11c24:	8a00000b 	bhi	11c58 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   11c28:	e1d323b8 	ldrh	r2, [r3, #56]	@ 0x38
   11c2c:	e1e00152 	mvn	r0, r2, asr r1
   11c30:	e3100001 	tst	r0, #1
   11c34:	0a00000b 	beq	11c68 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   11c38:	e3a00001 	mov	r0, #1
   11c3c:	e1822110 	orr	r2, r2, r0, lsl r1
   11c40:	e1c323b8 	strh	r2, [r3, #56]	@ 0x38
   11c44:	e8bd8010 	pop	{r4, pc}
   11c48:	e59f102c 	ldr	r1, [pc, #44]	@ 11c7c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   11c4c:	e59f202c 	ldr	r2, [pc, #44]	@ 11c80 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   11c50:	e2810014 	add	r0, r1, #20
   11c54:	ebfff6b2 	bl	f724 <assertion_failed>
   11c58:	e59f101c 	ldr	r1, [pc, #28]	@ 11c7c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   11c5c:	e3a02fa3 	mov	r2, #652	@ 0x28c
   11c60:	e2810024 	add	r0, r1, #36	@ 0x24
   11c64:	ebfff6ae 	bl	f724 <assertion_failed>
   11c68:	e59f100c 	ldr	r1, [pc, #12]	@ 11c7c <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   11c6c:	e3a02e29 	mov	r2, #656	@ 0x290
   11c70:	e2810040 	add	r0, r1, #64	@ 0x40
   11c74:	ebfff6aa 	bl	f724 <assertion_failed>
   11c78:	00020b5c 	.word	0x00020b5c
   11c7c:	0001e26c 	.word	0x0001e26c
   11c80:	00000283 	.word	0x00000283

00011c84 <CMachineInfo::Get()>:
   11c84:	e59f301c 	ldr	r3, [pc, #28]	@ 11ca8 <CMachineInfo::Get()+0x24>
   11c88:	e5930000 	ldr	r0, [r3]
   11c8c:	e3500000 	cmp	r0, #0
   11c90:	112fff1e 	bxne	lr
   11c94:	e59f1010 	ldr	r1, [pc, #16]	@ 11cac <CMachineInfo::Get()+0x28>
   11c98:	e92d4010 	push	{r4, lr}
   11c9c:	e59f200c 	ldr	r2, [pc, #12]	@ 11cb0 <CMachineInfo::Get()+0x2c>
   11ca0:	e2810014 	add	r0, r1, #20
   11ca4:	ebfff69e 	bl	f724 <assertion_failed>
   11ca8:	00020b5c 	.word	0x00020b5c
   11cac:	0001e26c 	.word	0x0001e26c
   11cb0:	000002eb 	.word	0x000002eb

00011cb4 <CPtrList::CPtrList()>:
   11cb4:	e3a02000 	mov	r2, #0
   11cb8:	e5802000 	str	r2, [r0]
   11cbc:	e12fff1e 	bx	lr

00011cc0 <CPtrList::~CPtrList()>:
   11cc0:	e5903000 	ldr	r3, [r0]
   11cc4:	e3530000 	cmp	r3, #0
   11cc8:	012fff1e 	bxeq	lr
   11ccc:	e3a0202a 	mov	r2, #42	@ 0x2a
   11cd0:	e92d4010 	push	{r4, lr}
   11cd4:	e59f1004 	ldr	r1, [pc, #4]	@ 11ce0 <CPtrList::~CPtrList()+0x20>
   11cd8:	e59f0004 	ldr	r0, [pc, #4]	@ 11ce4 <CPtrList::~CPtrList()+0x24>
   11cdc:	ebfff690 	bl	f724 <assertion_failed>
   11ce0:	0001d3c0 	.word	0x0001d3c0
   11ce4:	0001d3cc 	.word	0x0001d3cc

00011ce8 <CPtrList::GetFirst() const>:
   11ce8:	e5900000 	ldr	r0, [r0]
   11cec:	e12fff1e 	bx	lr

00011cf0 <CPtrList::GetNext(TPtrListElement*) const>:
   11cf0:	e3510000 	cmp	r1, #0
   11cf4:	e92d4010 	push	{r4, lr}
   11cf8:	0a000005 	beq	11d14 <CPtrList::GetNext(TPtrListElement*) const+0x24>
   11cfc:	e59f3030 	ldr	r3, [pc, #48]	@ 11d34 <CPtrList::GetNext(TPtrListElement*) const+0x44>
   11d00:	e5912000 	ldr	r2, [r1]
   11d04:	e1520003 	cmp	r2, r3
   11d08:	1a000005 	bne	11d24 <CPtrList::GetNext(TPtrListElement*) const+0x34>
   11d0c:	e5910008 	ldr	r0, [r1, #8]
   11d10:	e8bd8010 	pop	{r4, pc}
   11d14:	e3a02034 	mov	r2, #52	@ 0x34
   11d18:	e59f1018 	ldr	r1, [pc, #24]	@ 11d38 <CPtrList::GetNext(TPtrListElement*) const+0x48>
   11d1c:	e59f0018 	ldr	r0, [pc, #24]	@ 11d3c <CPtrList::GetNext(TPtrListElement*) const+0x4c>
   11d20:	ebfff67f 	bl	f724 <assertion_failed>
   11d24:	e3a02035 	mov	r2, #53	@ 0x35
   11d28:	e59f1008 	ldr	r1, [pc, #8]	@ 11d38 <CPtrList::GetNext(TPtrListElement*) const+0x48>
   11d2c:	e59f000c 	ldr	r0, [pc, #12]	@ 11d40 <CPtrList::GetNext(TPtrListElement*) const+0x50>
   11d30:	ebfff67b 	bl	f724 <assertion_failed>
   11d34:	504c4d43 	.word	0x504c4d43
   11d38:	0001d3c0 	.word	0x0001d3c0
   11d3c:	0001d238 	.word	0x0001d238
   11d40:	0001d3dc 	.word	0x0001d3dc

00011d44 <CPtrList::GetPtr(TPtrListElement*)>:
   11d44:	e3500000 	cmp	r0, #0
   11d48:	e92d4010 	push	{r4, lr}
   11d4c:	0a000005 	beq	11d68 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   11d50:	e59f3030 	ldr	r3, [pc, #48]	@ 11d88 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   11d54:	e5902000 	ldr	r2, [r0]
   11d58:	e1520003 	cmp	r2, r3
   11d5c:	1a000005 	bne	11d78 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   11d60:	e590000c 	ldr	r0, [r0, #12]
   11d64:	e8bd8010 	pop	{r4, pc}
   11d68:	e3a0203c 	mov	r2, #60	@ 0x3c
   11d6c:	e59f1018 	ldr	r1, [pc, #24]	@ 11d8c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   11d70:	e59f0018 	ldr	r0, [pc, #24]	@ 11d90 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   11d74:	ebfff66a 	bl	f724 <assertion_failed>
   11d78:	e3a0203d 	mov	r2, #61	@ 0x3d
   11d7c:	e59f1008 	ldr	r1, [pc, #8]	@ 11d8c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   11d80:	e59f000c 	ldr	r0, [pc, #12]	@ 11d94 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   11d84:	ebfff666 	bl	f724 <assertion_failed>
   11d88:	504c4d43 	.word	0x504c4d43
   11d8c:	0001d3c0 	.word	0x0001d3c0
   11d90:	0001d238 	.word	0x0001d238
   11d94:	0001d3dc 	.word	0x0001d3dc

00011d98 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   11d98:	e92d4070 	push	{r4, r5, r6, lr}
   11d9c:	e1a05000 	mov	r5, r0
   11da0:	e3a00010 	mov	r0, #16
   11da4:	e1a06002 	mov	r6, r2
   11da8:	e1a04001 	mov	r4, r1
   11dac:	eb0012ed 	bl	16968 <operator new(unsigned int)>
   11db0:	e5953000 	ldr	r3, [r5]
   11db4:	e59f20ac 	ldr	r2, [pc, #172]	@ 11e68 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   11db8:	e3530000 	cmp	r3, #0
   11dbc:	e5802000 	str	r2, [r0]
   11dc0:	e580600c 	str	r6, [r0, #12]
   11dc4:	0a000017 	beq	11e28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   11dc8:	e3540000 	cmp	r4, #0
   11dcc:	0a000019 	beq	11e38 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   11dd0:	e5941000 	ldr	r1, [r4]
   11dd4:	e1510002 	cmp	r1, r2
   11dd8:	1a00001a 	bne	11e48 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   11ddc:	e1530004 	cmp	r3, r4
   11de0:	0a00000a 	beq	11e10 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   11de4:	e5943004 	ldr	r3, [r4, #4]
   11de8:	e5804008 	str	r4, [r0, #8]
   11dec:	e3530000 	cmp	r3, #0
   11df0:	e5803004 	str	r3, [r0, #4]
   11df4:	0a000003 	beq	11e08 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   11df8:	e5932000 	ldr	r2, [r3]
   11dfc:	e1520001 	cmp	r2, r1
   11e00:	05830008 	streq	r0, [r3, #8]
   11e04:	1a000013 	bne	11e58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   11e08:	e5840004 	str	r0, [r4, #4]
   11e0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e10:	e3a02000 	mov	r2, #0
   11e14:	e5830004 	str	r0, [r3, #4]
   11e18:	e5803008 	str	r3, [r0, #8]
   11e1c:	e5850000 	str	r0, [r5]
   11e20:	e5802004 	str	r2, [r0, #4]
   11e24:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e28:	e3a0204c 	mov	r2, #76	@ 0x4c
   11e2c:	e59f1038 	ldr	r1, [pc, #56]	@ 11e6c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   11e30:	e59f0038 	ldr	r0, [pc, #56]	@ 11e70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   11e34:	ebfff63a 	bl	f724 <assertion_failed>
   11e38:	e3a0204d 	mov	r2, #77	@ 0x4d
   11e3c:	e59f1028 	ldr	r1, [pc, #40]	@ 11e6c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   11e40:	e59f002c 	ldr	r0, [pc, #44]	@ 11e74 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   11e44:	ebfff636 	bl	f724 <assertion_failed>
   11e48:	e3a0204e 	mov	r2, #78	@ 0x4e
   11e4c:	e59f1018 	ldr	r1, [pc, #24]	@ 11e6c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   11e50:	e59f0020 	ldr	r0, [pc, #32]	@ 11e78 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   11e54:	ebfff632 	bl	f724 <assertion_failed>
   11e58:	e3a02060 	mov	r2, #96	@ 0x60
   11e5c:	e59f1008 	ldr	r1, [pc, #8]	@ 11e6c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   11e60:	e59f0014 	ldr	r0, [pc, #20]	@ 11e7c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe4>
   11e64:	ebfff62e 	bl	f724 <assertion_failed>
   11e68:	504c4d43 	.word	0x504c4d43
   11e6c:	0001d3c0 	.word	0x0001d3c0
   11e70:	0001d400 	.word	0x0001d400
   11e74:	0001d410 	.word	0x0001d410
   11e78:	0001d41c 	.word	0x0001d41c
   11e7c:	0001d440 	.word	0x0001d440

00011e80 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   11e80:	e92d4070 	push	{r4, r5, r6, lr}
   11e84:	e1a04001 	mov	r4, r1
   11e88:	e1a05000 	mov	r5, r0
   11e8c:	e3a00010 	mov	r0, #16
   11e90:	e1a06002 	mov	r6, r2
   11e94:	eb0012b3 	bl	16968 <operator new(unsigned int)>
   11e98:	e59f30ac 	ldr	r3, [pc, #172]	@ 11f4c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   11e9c:	e3540000 	cmp	r4, #0
   11ea0:	e5803000 	str	r3, [r0]
   11ea4:	e580600c 	str	r6, [r0, #12]
   11ea8:	0a000010 	beq	11ef0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   11eac:	e5952000 	ldr	r2, [r5]
   11eb0:	e3520000 	cmp	r2, #0
   11eb4:	0a000014 	beq	11f0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   11eb8:	e5942000 	ldr	r2, [r4]
   11ebc:	e1520003 	cmp	r2, r3
   11ec0:	1a000015 	bne	11f1c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   11ec4:	e5943008 	ldr	r3, [r4, #8]
   11ec8:	e5804004 	str	r4, [r0, #4]
   11ecc:	e3530000 	cmp	r3, #0
   11ed0:	e5803008 	str	r3, [r0, #8]
   11ed4:	0a000003 	beq	11ee8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   11ed8:	e5931000 	ldr	r1, [r3]
   11edc:	e1510002 	cmp	r1, r2
   11ee0:	05830004 	streq	r0, [r3, #4]
   11ee4:	1a000010 	bne	11f2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   11ee8:	e5840008 	str	r0, [r4, #8]
   11eec:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ef0:	e5953000 	ldr	r3, [r5]
   11ef4:	e3530000 	cmp	r3, #0
   11ef8:	1a00000f 	bne	11f3c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   11efc:	e5803004 	str	r3, [r0, #4]
   11f00:	e5803008 	str	r3, [r0, #8]
   11f04:	e5850000 	str	r0, [r5]
   11f08:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f0c:	e3a0207d 	mov	r2, #125	@ 0x7d
   11f10:	e59f1038 	ldr	r1, [pc, #56]	@ 11f50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   11f14:	e59f0038 	ldr	r0, [pc, #56]	@ 11f54 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   11f18:	ebfff601 	bl	f724 <assertion_failed>
   11f1c:	e3a0207e 	mov	r2, #126	@ 0x7e
   11f20:	e59f1028 	ldr	r1, [pc, #40]	@ 11f50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   11f24:	e59f002c 	ldr	r0, [pc, #44]	@ 11f58 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   11f28:	ebfff5fd 	bl	f724 <assertion_failed>
   11f2c:	e3a02085 	mov	r2, #133	@ 0x85
   11f30:	e59f1018 	ldr	r1, [pc, #24]	@ 11f50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   11f34:	e59f0020 	ldr	r0, [pc, #32]	@ 11f5c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   11f38:	ebfff5f9 	bl	f724 <assertion_failed>
   11f3c:	e3a02074 	mov	r2, #116	@ 0x74
   11f40:	e59f1008 	ldr	r1, [pc, #8]	@ 11f50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   11f44:	e59f0014 	ldr	r0, [pc, #20]	@ 11f60 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   11f48:	ebfff5f5 	bl	f724 <assertion_failed>
   11f4c:	504c4d43 	.word	0x504c4d43
   11f50:	0001d3c0 	.word	0x0001d3c0
   11f54:	0001d400 	.word	0x0001d400
   11f58:	0001d468 	.word	0x0001d468
   11f5c:	0001d48c 	.word	0x0001d48c
   11f60:	0001d3cc 	.word	0x0001d3cc

00011f64 <CPtrList::Remove(TPtrListElement*)>:
   11f64:	e2513000 	subs	r3, r1, #0
   11f68:	e92d4010 	push	{r4, lr}
   11f6c:	0a000029 	beq	12018 <CPtrList::Remove(TPtrListElement*)+0xb4>
   11f70:	e59f10e0 	ldr	r1, [pc, #224]	@ 12058 <CPtrList::Remove(TPtrListElement*)+0xf4>
   11f74:	e5932000 	ldr	r2, [r3]
   11f78:	e1520001 	cmp	r2, r1
   11f7c:	1a000029 	bne	12028 <CPtrList::Remove(TPtrListElement*)+0xc4>
   11f80:	e5901000 	ldr	r1, [r0]
   11f84:	e1510003 	cmp	r1, r3
   11f88:	0a000011 	beq	11fd4 <CPtrList::Remove(TPtrListElement*)+0x70>
   11f8c:	e5931004 	ldr	r1, [r3, #4]
   11f90:	e3510000 	cmp	r1, #0
   11f94:	0a000027 	beq	12038 <CPtrList::Remove(TPtrListElement*)+0xd4>
   11f98:	e5910000 	ldr	r0, [r1]
   11f9c:	e1500002 	cmp	r0, r2
   11fa0:	1a000018 	bne	12008 <CPtrList::Remove(TPtrListElement*)+0xa4>
   11fa4:	e5932008 	ldr	r2, [r3, #8]
   11fa8:	e3520000 	cmp	r2, #0
   11fac:	e5812008 	str	r2, [r1, #8]
   11fb0:	0a000003 	beq	11fc4 <CPtrList::Remove(TPtrListElement*)+0x60>
   11fb4:	e592c000 	ldr	ip, [r2]
   11fb8:	e15c0000 	cmp	ip, r0
   11fbc:	05821004 	streq	r1, [r2, #4]
   11fc0:	1a000020 	bne	12048 <CPtrList::Remove(TPtrListElement*)+0xe4>
   11fc4:	e8bd4010 	pop	{r4, lr}
   11fc8:	e3a01010 	mov	r1, #16
   11fcc:	e1a00003 	mov	r0, r3
   11fd0:	ea00127c 	b	169c8 <operator delete(void*, unsigned int)>
   11fd4:	e5911008 	ldr	r1, [r1, #8]
   11fd8:	e3510000 	cmp	r1, #0
   11fdc:	e5801000 	str	r1, [r0]
   11fe0:	0afffff7 	beq	11fc4 <CPtrList::Remove(TPtrListElement*)+0x60>
   11fe4:	e5910000 	ldr	r0, [r1]
   11fe8:	e1500002 	cmp	r0, r2
   11fec:	03a02000 	moveq	r2, #0
   11ff0:	05812004 	streq	r2, [r1, #4]
   11ff4:	0afffff2 	beq	11fc4 <CPtrList::Remove(TPtrListElement*)+0x60>
   11ff8:	e3a02098 	mov	r2, #152	@ 0x98
   11ffc:	e59f1058 	ldr	r1, [pc, #88]	@ 1205c <CPtrList::Remove(TPtrListElement*)+0xf8>
   12000:	e59f0058 	ldr	r0, [pc, #88]	@ 12060 <CPtrList::Remove(TPtrListElement*)+0xfc>
   12004:	ebfff5c6 	bl	f724 <assertion_failed>
   12008:	e3a0209f 	mov	r2, #159	@ 0x9f
   1200c:	e59f1048 	ldr	r1, [pc, #72]	@ 1205c <CPtrList::Remove(TPtrListElement*)+0xf8>
   12010:	e59f004c 	ldr	r0, [pc, #76]	@ 12064 <CPtrList::Remove(TPtrListElement*)+0x100>
   12014:	ebfff5c2 	bl	f724 <assertion_failed>
   12018:	e3a0208f 	mov	r2, #143	@ 0x8f
   1201c:	e59f1038 	ldr	r1, [pc, #56]	@ 1205c <CPtrList::Remove(TPtrListElement*)+0xf8>
   12020:	e59f0040 	ldr	r0, [pc, #64]	@ 12068 <CPtrList::Remove(TPtrListElement*)+0x104>
   12024:	ebfff5be 	bl	f724 <assertion_failed>
   12028:	e3a02090 	mov	r2, #144	@ 0x90
   1202c:	e59f1028 	ldr	r1, [pc, #40]	@ 1205c <CPtrList::Remove(TPtrListElement*)+0xf8>
   12030:	e59f0034 	ldr	r0, [pc, #52]	@ 1206c <CPtrList::Remove(TPtrListElement*)+0x108>
   12034:	ebfff5ba 	bl	f724 <assertion_failed>
   12038:	e3a0209e 	mov	r2, #158	@ 0x9e
   1203c:	e59f1018 	ldr	r1, [pc, #24]	@ 1205c <CPtrList::Remove(TPtrListElement*)+0xf8>
   12040:	e59f0028 	ldr	r0, [pc, #40]	@ 12070 <CPtrList::Remove(TPtrListElement*)+0x10c>
   12044:	ebfff5b6 	bl	f724 <assertion_failed>
   12048:	e3a020a4 	mov	r2, #164	@ 0xa4
   1204c:	e59f1008 	ldr	r1, [pc, #8]	@ 1205c <CPtrList::Remove(TPtrListElement*)+0xf8>
   12050:	e59f0008 	ldr	r0, [pc, #8]	@ 12060 <CPtrList::Remove(TPtrListElement*)+0xfc>
   12054:	ebfff5b2 	bl	f724 <assertion_failed>
   12058:	504c4d43 	.word	0x504c4d43
   1205c:	0001d3c0 	.word	0x0001d3c0
   12060:	0001d4b8 	.word	0x0001d4b8
   12064:	0001d4fc 	.word	0x0001d4fc
   12068:	0001d238 	.word	0x0001d238
   1206c:	0001d3dc 	.word	0x0001d3dc
   12070:	0001d4e4 	.word	0x0001d4e4

00012074 <CPtrList::Find(void*) const>:
   12074:	e5900000 	ldr	r0, [r0]
   12078:	e3500000 	cmp	r0, #0
   1207c:	012fff1e 	bxeq	lr
   12080:	e59f2038 	ldr	r2, [pc, #56]	@ 120c0 <CPtrList::Find(void*) const+0x4c>
   12084:	ea000005 	b	120a0 <CPtrList::Find(void*) const+0x2c>
   12088:	e590300c 	ldr	r3, [r0, #12]
   1208c:	e1530001 	cmp	r3, r1
   12090:	012fff1e 	bxeq	lr
   12094:	e5900008 	ldr	r0, [r0, #8]
   12098:	e3500000 	cmp	r0, #0
   1209c:	012fff1e 	bxeq	lr
   120a0:	e5903000 	ldr	r3, [r0]
   120a4:	e1530002 	cmp	r3, r2
   120a8:	0afffff6 	beq	12088 <CPtrList::Find(void*) const+0x14>
   120ac:	e3a020b3 	mov	r2, #179	@ 0xb3
   120b0:	e92d4010 	push	{r4, lr}
   120b4:	e59f1008 	ldr	r1, [pc, #8]	@ 120c4 <CPtrList::Find(void*) const+0x50>
   120b8:	e59f0008 	ldr	r0, [pc, #8]	@ 120c8 <CPtrList::Find(void*) const+0x54>
   120bc:	ebfff598 	bl	f724 <assertion_failed>
   120c0:	504c4d43 	.word	0x504c4d43
   120c4:	0001d3c0 	.word	0x0001d3c0
   120c8:	0001d3dc 	.word	0x0001d3dc

000120cc <CSerialDevice::Read(void*, unsigned int)>:
   120cc:	e5d03018 	ldrb	r3, [r0, #24]
   120d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   120d4:	e3530000 	cmp	r3, #0
   120d8:	0a000050 	beq	12220 <CSerialDevice::Read(void*, unsigned int)+0x154>
   120dc:	e3510000 	cmp	r1, #0
   120e0:	e1a06001 	mov	r6, r1
   120e4:	0a000051 	beq	12230 <CSerialDevice::Read(void*, unsigned int)+0x164>
   120e8:	e5905008 	ldr	r5, [r0, #8]
   120ec:	e1a04000 	mov	r4, r0
   120f0:	e3550000 	cmp	r5, #0
   120f4:	e1a07002 	mov	r7, r2
   120f8:	0a00002a 	beq	121a8 <CSerialDevice::Read(void*, unsigned int)+0xdc>
   120fc:	e2808a01 	add	r8, r0, #4096	@ 0x1000
   12100:	e59800e8 	ldr	r0, [r8, #232]	@ 0xe8
   12104:	e3500000 	cmp	r0, #0
   12108:	1a00003f 	bne	1220c <CSerialDevice::Read(void*, unsigned int)+0x140>
   1210c:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   12110:	e3530000 	cmp	r3, #0
   12114:	ba00001b 	blt	12188 <CSerialDevice::Read(void*, unsigned int)+0xbc>
   12118:	e3570000 	cmp	r7, #0
   1211c:	01a05007 	moveq	r5, r7
   12120:	0a00001b 	beq	12194 <CSerialDevice::Read(void*, unsigned int)+0xc8>
   12124:	e3a05000 	mov	r5, #0
   12128:	e59f1138 	ldr	r1, [pc, #312]	@ 12268 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   1212c:	ea00000b 	b	12160 <CSerialDevice::Read(void*, unsigned int)+0x94>
   12130:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   12134:	e2855001 	add	r5, r5, #1
   12138:	e2832001 	add	r2, r3, #1
   1213c:	e58428c0 	str	r2, [r4, #2240]	@ 0x8c0
   12140:	e0843003 	add	r3, r4, r3
   12144:	e5d330bc 	ldrb	r3, [r3, #188]	@ 0xbc
   12148:	e1570005 	cmp	r7, r5
   1214c:	e4c63001 	strb	r3, [r6], #1
   12150:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   12154:	e0033001 	and	r3, r3, r1
   12158:	e58438c0 	str	r3, [r4, #2240]	@ 0x8c0
   1215c:	0a00000c 	beq	12194 <CSerialDevice::Read(void*, unsigned int)+0xc8>
   12160:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   12164:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   12168:	e1520003 	cmp	r2, r3
   1216c:	1affffef 	bne	12130 <CSerialDevice::Read(void*, unsigned int)+0x64>
   12170:	e59830e8 	ldr	r3, [r8, #232]	@ 0xe8
   12174:	e3530000 	cmp	r3, #0
   12178:	0a000008 	beq	121a0 <CSerialDevice::Read(void*, unsigned int)+0xd4>
   1217c:	eb0015ed 	bl	17938 <LeaveCritical>
   12180:	e1a00005 	mov	r0, r5
   12184:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12188:	e3a03000 	mov	r3, #0
   1218c:	e59458c4 	ldr	r5, [r4, #2244]	@ 0x8c4
   12190:	e58438c4 	str	r3, [r4, #2244]	@ 0x8c4
   12194:	e59830e8 	ldr	r3, [r8, #232]	@ 0xe8
   12198:	e3530000 	cmp	r3, #0
   1219c:	1afffff6 	bne	1217c <CSerialDevice::Read(void*, unsigned int)+0xb0>
   121a0:	e1a00005 	mov	r0, r5
   121a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   121a8:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   121ac:	e3520000 	cmp	r2, #0
   121b0:	1a00000d 	bne	121ec <CSerialDevice::Read(void*, unsigned int)+0x120>
   121b4:	ea000029 	b	12260 <CSerialDevice::Read(void*, unsigned int)+0x194>
   121b8:	e5933000 	ldr	r3, [r3]
   121bc:	e3130b01 	tst	r3, #1024	@ 0x400
   121c0:	1a00001e 	bne	12240 <CSerialDevice::Read(void*, unsigned int)+0x174>
   121c4:	e3130b02 	tst	r3, #2048	@ 0x800
   121c8:	1a00001e 	bne	12248 <CSerialDevice::Read(void*, unsigned int)+0x17c>
   121cc:	e3130c01 	tst	r3, #256	@ 0x100
   121d0:	1a00001e 	bne	12250 <CSerialDevice::Read(void*, unsigned int)+0x184>
   121d4:	e3130c02 	tst	r3, #512	@ 0x200
   121d8:	1a00001e 	bne	12258 <CSerialDevice::Read(void*, unsigned int)+0x18c>
   121dc:	e2855001 	add	r5, r5, #1
   121e0:	e1570005 	cmp	r7, r5
   121e4:	e4c63001 	strb	r3, [r6], #1
   121e8:	0a000003 	beq	121fc <CSerialDevice::Read(void*, unsigned int)+0x130>
   121ec:	e5943014 	ldr	r3, [r4, #20]
   121f0:	e5932018 	ldr	r2, [r3, #24]
   121f4:	e3120010 	tst	r2, #16
   121f8:	0affffee 	beq	121b8 <CSerialDevice::Read(void*, unsigned int)+0xec>
   121fc:	e3a03000 	mov	r3, #0
   12200:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12204:	e1a00005 	mov	r0, r5
   12208:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1220c:	eb00159f 	bl	17890 <EnterCritical>
   12210:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   12214:	e3530000 	cmp	r3, #0
   12218:	aaffffbe 	bge	12118 <CSerialDevice::Read(void*, unsigned int)+0x4c>
   1221c:	eaffffd9 	b	12188 <CSerialDevice::Read(void*, unsigned int)+0xbc>
   12220:	e59f1044 	ldr	r1, [pc, #68]	@ 1226c <CSerialDevice::Read(void*, unsigned int)+0x1a0>
   12224:	e59f2044 	ldr	r2, [pc, #68]	@ 12270 <CSerialDevice::Read(void*, unsigned int)+0x1a4>
   12228:	e281000c 	add	r0, r1, #12
   1222c:	ebfff53c 	bl	f724 <assertion_failed>
   12230:	e59f1034 	ldr	r1, [pc, #52]	@ 1226c <CSerialDevice::Read(void*, unsigned int)+0x1a0>
   12234:	e3a02f92 	mov	r2, #584	@ 0x248
   12238:	e2810018 	add	r0, r1, #24
   1223c:	ebfff538 	bl	f724 <assertion_failed>
   12240:	e3e05000 	mvn	r5, #0
   12244:	eaffffec 	b	121fc <CSerialDevice::Read(void*, unsigned int)+0x130>
   12248:	e3e05001 	mvn	r5, #1
   1224c:	eaffffea 	b	121fc <CSerialDevice::Read(void*, unsigned int)+0x130>
   12250:	e3e05002 	mvn	r5, #2
   12254:	eaffffe8 	b	121fc <CSerialDevice::Read(void*, unsigned int)+0x130>
   12258:	e3e05003 	mvn	r5, #3
   1225c:	eaffffe6 	b	121fc <CSerialDevice::Read(void*, unsigned int)+0x130>
   12260:	e1a05002 	mov	r5, r2
   12264:	eaffffe4 	b	121fc <CSerialDevice::Read(void*, unsigned int)+0x130>
   12268:	000007ff 	.word	0x000007ff
   1226c:	0001e4b8 	.word	0x0001e4b8
   12270:	00000245 	.word	0x00000245

00012274 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   12274:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12278:	e1a04000 	mov	r4, r0
   1227c:	e3a09000 	mov	r9, #0
   12280:	e1a08001 	mov	r8, r1
   12284:	e1a06003 	mov	r6, r3
   12288:	e1a05002 	mov	r5, r2
   1228c:	e59f71a4 	ldr	r7, [pc, #420]	@ 12438 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1c4>
   12290:	e24dd00c 	sub	sp, sp, #12
   12294:	ebfff5e0 	bl	fa1c <CDevice::CDevice()>
   12298:	e284b01c 	add	fp, r4, #28
   1229c:	e287202c 	add	r2, r7, #44	@ 0x2c
   122a0:	e5842000 	str	r2, [r4]
   122a4:	e5848008 	str	r8, [r4, #8]
   122a8:	e5c4500c 	strb	r5, [r4, #12]
   122ac:	e1a0000b 	mov	r0, fp
   122b0:	e5846010 	str	r6, [r4, #16]
   122b4:	e5849014 	str	r9, [r4, #20]
   122b8:	e5c49018 	strb	r9, [r4, #24]
   122bc:	e284a044 	add	sl, r4, #68	@ 0x44
   122c0:	eb001847 	bl	183e4 <CGPIOPin::CGPIOPin()>
   122c4:	e1a0000a 	mov	r0, sl
   122c8:	eb001845 	bl	183e4 <CGPIOPin::CGPIOPin()>
   122cc:	e284306c 	add	r3, r4, #108	@ 0x6c
   122d0:	e1a00003 	mov	r0, r3
   122d4:	e2848094 	add	r8, r4, #148	@ 0x94
   122d8:	e58d3000 	str	r3, [sp]
   122dc:	eb001840 	bl	183e4 <CGPIOPin::CGPIOPin()>
   122e0:	e1a00008 	mov	r0, r8
   122e4:	eb00183e 	bl	183e4 <CGPIOPin::CGPIOPin()>
   122e8:	e3a02001 	mov	r2, #1
   122ec:	e2841a01 	add	r1, r4, #4096	@ 0x1000
   122f0:	e0855002 	add	r5, r5, r2
   122f4:	e58498bc 	str	r9, [r4, #2236]	@ 0x8bc
   122f8:	e58498c0 	str	r9, [r4, #2240]	@ 0x8c0
   122fc:	e58498c4 	str	r9, [r4, #2244]	@ 0x8c4
   12300:	e58190c8 	str	r9, [r1, #200]	@ 0xc8
   12304:	e58150e8 	str	r5, [r1, #232]	@ 0xe8
   12308:	e58120d0 	str	r2, [r1, #208]	@ 0xd0
   1230c:	e58190cc 	str	r9, [r1, #204]	@ 0xcc
   12310:	e58120ec 	str	r2, [r1, #236]	@ 0xec
   12314:	e5943010 	ldr	r3, [r4, #16]
   12318:	e58190d4 	str	r9, [r1, #212]	@ 0xd4
   1231c:	e1530009 	cmp	r3, r9
   12320:	e58190dc 	str	r9, [r1, #220]	@ 0xdc
   12324:	1a000020 	bne	123ac <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x138>
   12328:	e0873206 	add	r3, r7, r6, lsl #4
   1232c:	e593504c 	ldr	r5, [r3, #76]	@ 0x4c
   12330:	e1a03206 	lsl	r3, r6, #4
   12334:	e3550036 	cmp	r5, #54	@ 0x36
   12338:	8a00001b 	bhi	123ac <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x138>
   1233c:	e59f10f8 	ldr	r1, [pc, #248]	@ 1243c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1c8>
   12340:	e5910000 	ldr	r0, [r1]
   12344:	e1500009 	cmp	r0, r9
   12348:	1a000036 	bne	12428 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b4>
   1234c:	e5814000 	str	r4, [r1]
   12350:	e59f10e8 	ldr	r1, [pc, #232]	@ 12440 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
   12354:	e3560000 	cmp	r6, #0
   12358:	e5841014 	str	r1, [r4, #20]
   1235c:	0a000015 	beq	123b8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x144>
   12360:	e0872003 	add	r2, r7, r3
   12364:	e5926050 	ldr	r6, [r2, #80]	@ 0x50
   12368:	e2866005 	add	r6, r6, #5
   1236c:	e6ef6076 	uxtb	r6, r6
   12370:	e356000a 	cmp	r6, #10
   12374:	9a000020 	bls	123fc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   12378:	e0877003 	add	r7, r7, r3
   1237c:	e1a00008 	mov	r0, r8
   12380:	e5971054 	ldr	r1, [r7, #84]	@ 0x54
   12384:	eb001824 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
   12388:	e3a02001 	mov	r2, #1
   1238c:	e3a01005 	mov	r1, #5
   12390:	e1a00008 	mov	r0, r8
   12394:	eb001a9d 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   12398:	e3a01002 	mov	r1, #2
   1239c:	e1a00008 	mov	r0, r8
   123a0:	eb001a40 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   123a4:	e3a03001 	mov	r3, #1
   123a8:	e5c43018 	strb	r3, [r4, #24]
   123ac:	e1a00004 	mov	r0, r4
   123b0:	e28dd00c 	add	sp, sp, #12
   123b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123b8:	e3a01020 	mov	r1, #32
   123bc:	e1a0000b 	mov	r0, fp
   123c0:	e58d3004 	str	r3, [sp, #4]
   123c4:	eb001814 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
   123c8:	e3a02001 	mov	r2, #1
   123cc:	e1a0000b 	mov	r0, fp
   123d0:	e1a01002 	mov	r1, r2
   123d4:	eb001a8d 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   123d8:	e3a01021 	mov	r1, #33	@ 0x21
   123dc:	e1a0000a 	mov	r0, sl
   123e0:	eb00180d 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
   123e4:	e3a02001 	mov	r2, #1
   123e8:	e1a0000a 	mov	r0, sl
   123ec:	e1a01002 	mov	r1, r2
   123f0:	eb001a86 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   123f4:	e59d3004 	ldr	r3, [sp, #4]
   123f8:	eaffffd8 	b	12360 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xec>
   123fc:	e1a01005 	mov	r1, r5
   12400:	e59d5000 	ldr	r5, [sp]
   12404:	e58d3004 	str	r3, [sp, #4]
   12408:	e1a00005 	mov	r0, r5
   1240c:	eb001802 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
   12410:	e3a02001 	mov	r2, #1
   12414:	e1a01006 	mov	r1, r6
   12418:	e1a00005 	mov	r0, r5
   1241c:	eb001a7b 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   12420:	e59d3004 	ldr	r3, [sp, #4]
   12424:	eaffffd3 	b	12378 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x104>
   12428:	e3a020f1 	mov	r2, #241	@ 0xf1
   1242c:	e1a01007 	mov	r1, r7
   12430:	e287005c 	add	r0, r7, #92	@ 0x5c
   12434:	ebfff4ba 	bl	f724 <assertion_failed>
   12438:	0001e4b8 	.word	0x0001e4b8
   1243c:	00020b60 	.word	0x00020b60
   12440:	20201000 	.word	0x20201000

00012444 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
   12444:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12448:	e5d09018 	ldrb	r9, [r0, #24]
   1244c:	e24dd00c 	sub	sp, sp, #12
   12450:	e3590000 	cmp	r9, #0
   12454:	e5dd7030 	ldrb	r7, [sp, #48]	@ 0x30
   12458:	1a000003 	bne	1246c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28>
   1245c:	e3a09000 	mov	r9, #0
   12460:	e1a00009 	mov	r0, r9
   12464:	e28dd00c 	add	sp, sp, #12
   12468:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1246c:	e1a05001 	mov	r5, r1
   12470:	e1a06002 	mov	r6, r2
   12474:	e1a08003 	mov	r8, r3
   12478:	e1a04000 	mov	r4, r0
   1247c:	ebfffe00 	bl	11c84 <CMachineInfo::Get()>
   12480:	e3a01002 	mov	r1, #2
   12484:	ebfffd04 	bl	1189c <CMachineInfo::GetClockRate(unsigned int) const>
   12488:	e3500000 	cmp	r0, #0
   1248c:	0a000086 	beq	126ac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x268>
   12490:	e59f3274 	ldr	r3, [pc, #628]	@ 1270c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c8>
   12494:	e2452f4b 	sub	r2, r5, #300	@ 0x12c
   12498:	e1520003 	cmp	r2, r3
   1249c:	8a000086 	bhi	126bc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x278>
   124a0:	e1a01205 	lsl	r1, r5, #4
   124a4:	eb001fba 	bl	1a394 <__aeabi_uidivmod>
   124a8:	e1a0a000 	mov	sl, r0
   124ac:	e59f325c 	ldr	r3, [pc, #604]	@ 12710 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2cc>
   124b0:	e24a2001 	sub	r2, sl, #1
   124b4:	e1520003 	cmp	r2, r3
   124b8:	e1a00001 	mov	r0, r1
   124bc:	8a000082 	bhi	126cc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x288>
   124c0:	e1a01005 	mov	r1, r5
   124c4:	e1a00180 	lsl	r0, r0, #3
   124c8:	eb001f36 	bl	1a1a8 <__udivsi3>
   124cc:	e2005001 	and	r5, r0, #1
   124d0:	e08550a0 	add	r5, r5, r0, lsr #1
   124d4:	e355003f 	cmp	r5, #63	@ 0x3f
   124d8:	8a00007f 	bhi	126dc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x298>
   124dc:	e5940008 	ldr	r0, [r4, #8]
   124e0:	e3500000 	cmp	r0, #0
   124e4:	0a000011 	beq	12530 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xec>
   124e8:	e59fb224 	ldr	fp, [pc, #548]	@ 12714 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d0>
   124ec:	e59b3004 	ldr	r3, [fp, #4]
   124f0:	e3530000 	cmp	r3, #0
   124f4:	1a00002a 	bne	125a4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x160>
   124f8:	e5d4200c 	ldrb	r2, [r4, #12]
   124fc:	e58b0008 	str	r0, [fp, #8]
   12500:	e3520000 	cmp	r2, #0
   12504:	e5cb200c 	strb	r2, [fp, #12]
   12508:	1a000051 	bne	12654 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x210>
   1250c:	e1a03002 	mov	r3, r2
   12510:	e3a01039 	mov	r1, #57	@ 0x39
   12514:	e59f21fc 	ldr	r2, [pc, #508]	@ 12718 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
   12518:	eb001592 	bl	17b68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   1251c:	e59b3004 	ldr	r3, [fp, #4]
   12520:	e3530000 	cmp	r3, #0
   12524:	1a000052 	bne	12674 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x230>
   12528:	e3a03001 	mov	r3, #1
   1252c:	e58b3004 	str	r3, [fp, #4]
   12530:	e3a03000 	mov	r3, #0
   12534:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12538:	e5942014 	ldr	r2, [r4, #20]
   1253c:	e5823038 	str	r3, [r2, #56]	@ 0x38
   12540:	e5943014 	ldr	r3, [r4, #20]
   12544:	e59f21d0 	ldr	r2, [pc, #464]	@ 1271c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d8>
   12548:	e5832044 	str	r2, [r3, #68]	@ 0x44
   1254c:	e5943014 	ldr	r3, [r4, #20]
   12550:	e583a024 	str	sl, [r3, #36]	@ 0x24
   12554:	e5943014 	ldr	r3, [r4, #20]
   12558:	e5835028 	str	r5, [r3, #40]	@ 0x28
   1255c:	e2463005 	sub	r3, r6, #5
   12560:	e3530003 	cmp	r3, #3
   12564:	8a000060 	bhi	126ec <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a8>
   12568:	e2483001 	sub	r3, r8, #1
   1256c:	e1a02286 	lsl	r2, r6, #5
   12570:	e3530001 	cmp	r3, #1
   12574:	e2422090 	sub	r2, r2, #144	@ 0x90
   12578:	8a000047 	bhi	1269c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x258>
   1257c:	e3580002 	cmp	r8, #2
   12580:	03822008 	orreq	r2, r2, #8
   12584:	e3570004 	cmp	r7, #4
   12588:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
   1258c:	ea00005a 	b	126fc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2b8>
   12590:	000125c8 	.word	0x000125c8
   12594:	00012694 	.word	0x00012694
   12598:	0001268c 	.word	0x0001268c
   1259c:	000125c4 	.word	0x000125c4
   125a0:	00012684 	.word	0x00012684
   125a4:	e59b3008 	ldr	r3, [fp, #8]
   125a8:	e1500003 	cmp	r0, r3
   125ac:	0a00002c 	beq	12664 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x220>
   125b0:	e3a03000 	mov	r3, #0
   125b4:	e5942010 	ldr	r2, [r4, #16]
   125b8:	e5c43018 	strb	r3, [r4, #24]
   125bc:	e78b3102 	str	r3, [fp, r2, lsl #2]
   125c0:	eaffffa5 	b	1245c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
   125c4:	e3822086 	orr	r2, r2, #134	@ 0x86
   125c8:	e5943008 	ldr	r3, [r4, #8]
   125cc:	e5940014 	ldr	r0, [r4, #20]
   125d0:	e3530000 	cmp	r3, #0
   125d4:	0580202c 	streq	r2, [r0, #44]	@ 0x2c
   125d8:	0a00000e 	beq	12618 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1d4>
   125dc:	e3a03009 	mov	r3, #9
   125e0:	e3a05e45 	mov	r5, #1104	@ 0x450
   125e4:	e3a0e001 	mov	lr, #1
   125e8:	e5803034 	str	r3, [r0, #52]	@ 0x34
   125ec:	e5943014 	ldr	r3, [r4, #20]
   125f0:	e59f111c 	ldr	r1, [pc, #284]	@ 12714 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d0>
   125f4:	e583202c 	str	r2, [r3, #44]	@ 0x2c
   125f8:	e5943014 	ldr	r3, [r4, #20]
   125fc:	e3a0c000 	mov	ip, #0
   12600:	e5835038 	str	r5, [r3, #56]	@ 0x38
   12604:	e5913010 	ldr	r3, [r1, #16]
   12608:	e5942010 	ldr	r2, [r4, #16]
   1260c:	e183321e 	orr	r3, r3, lr, lsl r2
   12610:	e5813010 	str	r3, [r1, #16]
   12614:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   12618:	e5943014 	ldr	r3, [r4, #20]
   1261c:	e59f20fc 	ldr	r2, [pc, #252]	@ 12720 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
   12620:	e3a05000 	mov	r5, #0
   12624:	e5832030 	str	r2, [r3, #48]	@ 0x30
   12628:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   1262c:	ebfff631 	bl	fef8 <CDeviceNameService::Get()>
   12630:	e5942010 	ldr	r2, [r4, #16]
   12634:	e1a03004 	mov	r3, r4
   12638:	e59f10e4 	ldr	r1, [pc, #228]	@ 12724 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e0>
   1263c:	e58d5000 	str	r5, [sp]
   12640:	e2822001 	add	r2, r2, #1
   12644:	ebfff637 	bl	ff28 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   12648:	e1a00009 	mov	r0, r9
   1264c:	e28dd00c 	add	sp, sp, #12
   12650:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12654:	e3a01039 	mov	r1, #57	@ 0x39
   12658:	e59f20b8 	ldr	r2, [pc, #184]	@ 12718 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
   1265c:	eb00159e 	bl	17cdc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   12660:	eaffffad 	b	1251c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xd8>
   12664:	e5d4200c 	ldrb	r2, [r4, #12]
   12668:	e5db300c 	ldrb	r3, [fp, #12]
   1266c:	e1520003 	cmp	r2, r3
   12670:	1affffce 	bne	125b0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x16c>
   12674:	e59f10ac 	ldr	r1, [pc, #172]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   12678:	e59f20ac 	ldr	r2, [pc, #172]	@ 1272c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e8>
   1267c:	e28100e8 	add	r0, r1, #232	@ 0xe8
   12680:	ebfff427 	bl	f724 <assertion_failed>
   12684:	e3822082 	orr	r2, r2, #130	@ 0x82
   12688:	eaffffce 	b	125c8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x184>
   1268c:	e3822006 	orr	r2, r2, #6
   12690:	eaffffcc 	b	125c8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x184>
   12694:	e3822002 	orr	r2, r2, #2
   12698:	eaffffca 	b	125c8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x184>
   1269c:	e59f1084 	ldr	r1, [pc, #132]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   126a0:	e3a02d07 	mov	r2, #448	@ 0x1c0
   126a4:	e2810f45 	add	r0, r1, #276	@ 0x114
   126a8:	ebfff41d 	bl	f724 <assertion_failed>
   126ac:	e59f1074 	ldr	r1, [pc, #116]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   126b0:	e3a02f5a 	mov	r2, #360	@ 0x168
   126b4:	e2810074 	add	r0, r1, #116	@ 0x74
   126b8:	ebfff419 	bl	f724 <assertion_failed>
   126bc:	e59f1064 	ldr	r1, [pc, #100]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   126c0:	e59f2068 	ldr	r2, [pc, #104]	@ 12730 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2ec>
   126c4:	e2810084 	add	r0, r1, #132	@ 0x84
   126c8:	ebfff415 	bl	f724 <assertion_failed>
   126cc:	e59f1054 	ldr	r1, [pc, #84]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   126d0:	e59f205c 	ldr	r2, [pc, #92]	@ 12734 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2f0>
   126d4:	e28100b0 	add	r0, r1, #176	@ 0xb0
   126d8:	ebfff411 	bl	f724 <assertion_failed>
   126dc:	e59f1044 	ldr	r1, [pc, #68]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   126e0:	e3a02e17 	mov	r2, #368	@ 0x170
   126e4:	e28100d4 	add	r0, r1, #212	@ 0xd4
   126e8:	ebfff40d 	bl	f724 <assertion_failed>
   126ec:	e59f1034 	ldr	r1, [pc, #52]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   126f0:	e3a02f6f 	mov	r2, #444	@ 0x1bc
   126f4:	e2810e11 	add	r0, r1, #272	@ 0x110
   126f8:	ebfff409 	bl	f724 <assertion_failed>
   126fc:	e59f1024 	ldr	r1, [pc, #36]	@ 12728 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
   12700:	e3a02f77 	mov	r2, #476	@ 0x1dc
   12704:	e2810e11 	add	r0, r1, #272	@ 0x110
   12708:	ebfff405 	bl	f724 <assertion_failed>
   1270c:	003d07d4 	.word	0x003d07d4
   12710:	0000fffe 	.word	0x0000fffe
   12714:	00020b60 	.word	0x00020b60
   12718:	000130d0 	.word	0x000130d0
   1271c:	000007ff 	.word	0x000007ff
   12720:	00000301 	.word	0x00000301
   12724:	0001e5f0 	.word	0x0001e5f0
   12728:	0001e4b8 	.word	0x0001e4b8
   1272c:	000001a7 	.word	0x000001a7
   12730:	0000016a 	.word	0x0000016a
   12734:	0000016d 	.word	0x0000016d

00012738 <CSerialDevice::GetOptions() const>:
   12738:	e2800a01 	add	r0, r0, #4096	@ 0x1000
   1273c:	e59000d0 	ldr	r0, [r0, #208]	@ 0xd0
   12740:	e12fff1e 	bx	lr

00012744 <CSerialDevice::SetOptions(unsigned int)>:
   12744:	e2800a01 	add	r0, r0, #4096	@ 0x1000
   12748:	e58010d0 	str	r1, [r0, #208]	@ 0xd0
   1274c:	e12fff1e 	bx	lr

00012750 <CSerialDevice::SetParity(CSerialDevice::TParity)>:
   12750:	e92d4010 	push	{r4, lr}
   12754:	e3a0e000 	mov	lr, #0
   12758:	e5902008 	ldr	r2, [r0, #8]
   1275c:	e280ca01 	add	ip, r0, #4096	@ 0x1000
   12760:	e3520000 	cmp	r2, #0
   12764:	0a000003 	beq	12778 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x28>
   12768:	e59c40c8 	ldr	r4, [ip, #200]	@ 0xc8
   1276c:	e59c30cc 	ldr	r3, [ip, #204]	@ 0xcc
   12770:	e1540003 	cmp	r4, r3
   12774:	1afffff9 	bne	12760 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x10>
   12778:	ee07ef9a 	mcr	15, 0, lr, cr7, cr10, {4}
   1277c:	e5903014 	ldr	r3, [r0, #20]
   12780:	e5933018 	ldr	r3, [r3, #24]
   12784:	ee07efba 	mcr	15, 0, lr, cr7, cr10, {5}
   12788:	e2133008 	ands	r3, r3, #8
   1278c:	0a000003 	beq	127a0 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x50>
   12790:	e5902008 	ldr	r2, [r0, #8]
   12794:	e3520000 	cmp	r2, #0
   12798:	1afffff2 	bne	12768 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x18>
   1279c:	eafffff5 	b	12778 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x28>
   127a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   127a4:	e590c014 	ldr	ip, [r0, #20]
   127a8:	e59c2030 	ldr	r2, [ip, #48]	@ 0x30
   127ac:	e3c22001 	bic	r2, r2, #1
   127b0:	e58c2030 	str	r2, [ip, #48]	@ 0x30
   127b4:	e5902008 	ldr	r2, [r0, #8]
   127b8:	e280ca01 	add	ip, r0, #4096	@ 0x1000
   127bc:	e3520000 	cmp	r2, #0
   127c0:	0a000003 	beq	127d4 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x84>
   127c4:	e59c40c8 	ldr	r4, [ip, #200]	@ 0xc8
   127c8:	e59ce0cc 	ldr	lr, [ip, #204]	@ 0xcc
   127cc:	e154000e 	cmp	r4, lr
   127d0:	1afffff9 	bne	127bc <CSerialDevice::SetParity(CSerialDevice::TParity)+0x6c>
   127d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   127d8:	e5902014 	ldr	r2, [r0, #20]
   127dc:	e5922018 	ldr	r2, [r2, #24]
   127e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   127e4:	e3120008 	tst	r2, #8
   127e8:	0a000003 	beq	127fc <CSerialDevice::SetParity(CSerialDevice::TParity)+0xac>
   127ec:	e5902008 	ldr	r2, [r0, #8]
   127f0:	e3520000 	cmp	r2, #0
   127f4:	1afffff2 	bne	127c4 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x74>
   127f8:	eafffff5 	b	127d4 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x84>
   127fc:	e5902014 	ldr	r2, [r0, #20]
   12800:	e592302c 	ldr	r3, [r2, #44]	@ 0x2c
   12804:	e3c33086 	bic	r3, r3, #134	@ 0x86
   12808:	e3510004 	cmp	r1, #4
   1280c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   12810:	ea000013 	b	12864 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x114>
   12814:	0001282c 	.word	0x0001282c
   12818:	00012854 	.word	0x00012854
   1281c:	0001285c 	.word	0x0001285c
   12820:	00012828 	.word	0x00012828
   12824:	0001284c 	.word	0x0001284c
   12828:	e3833086 	orr	r3, r3, #134	@ 0x86
   1282c:	e582302c 	str	r3, [r2, #44]	@ 0x2c
   12830:	e5902014 	ldr	r2, [r0, #20]
   12834:	e3a01000 	mov	r1, #0
   12838:	e5923030 	ldr	r3, [r2, #48]	@ 0x30
   1283c:	e3833001 	orr	r3, r3, #1
   12840:	e5823030 	str	r3, [r2, #48]	@ 0x30
   12844:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   12848:	e8bd8010 	pop	{r4, pc}
   1284c:	e3833082 	orr	r3, r3, #130	@ 0x82
   12850:	eafffff5 	b	1282c <CSerialDevice::SetParity(CSerialDevice::TParity)+0xdc>
   12854:	e3833002 	orr	r3, r3, #2
   12858:	eafffff3 	b	1282c <CSerialDevice::SetParity(CSerialDevice::TParity)+0xdc>
   1285c:	e3833006 	orr	r3, r3, #6
   12860:	eafffff1 	b	1282c <CSerialDevice::SetParity(CSerialDevice::TParity)+0xdc>
   12864:	e59f1008 	ldr	r1, [pc, #8]	@ 12874 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x124>
   12868:	e3a02fb3 	mov	r2, #716	@ 0x2cc
   1286c:	e2810e11 	add	r0, r1, #272	@ 0x110
   12870:	ebfff3ab 	bl	f724 <assertion_failed>
   12874:	0001e4b8 	.word	0x0001e4b8

00012878 <CSerialDevice::IsTransmitting() const>:
   12878:	e5903008 	ldr	r3, [r0, #8]
   1287c:	e3530000 	cmp	r3, #0
   12880:	0a000006 	beq	128a0 <CSerialDevice::IsTransmitting() const+0x28>
   12884:	e2803a01 	add	r3, r0, #4096	@ 0x1000
   12888:	e59320c8 	ldr	r2, [r3, #200]	@ 0xc8
   1288c:	e59330cc 	ldr	r3, [r3, #204]	@ 0xcc
   12890:	e1520003 	cmp	r2, r3
   12894:	0a000001 	beq	128a0 <CSerialDevice::IsTransmitting() const+0x28>
   12898:	e3a00001 	mov	r0, #1
   1289c:	e12fff1e 	bx	lr
   128a0:	e3a03000 	mov	r3, #0
   128a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   128a8:	e5902014 	ldr	r2, [r0, #20]
   128ac:	e5920018 	ldr	r0, [r2, #24]
   128b0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   128b4:	e1a001a0 	lsr	r0, r0, #3
   128b8:	e2000001 	and	r0, r0, #1
   128bc:	e12fff1e 	bx	lr

000128c0 <CSerialDevice::RegisterCharReceivedHandler(void (*)(unsigned char, int, void*), void*)>:
   128c0:	e5903008 	ldr	r3, [r0, #8]
   128c4:	e3530000 	cmp	r3, #0
   128c8:	0a000003 	beq	128dc <CSerialDevice::RegisterCharReceivedHandler(void (*)(unsigned char, int, void*), void*)+0x1c>
   128cc:	e2800a01 	add	r0, r0, #4096	@ 0x1000
   128d0:	e58020d8 	str	r2, [r0, #216]	@ 0xd8
   128d4:	e58010d4 	str	r1, [r0, #212]	@ 0xd4
   128d8:	e12fff1e 	bx	lr
   128dc:	e59f100c 	ldr	r1, [pc, #12]	@ 128f0 <CSerialDevice::RegisterCharReceivedHandler(void (*)(unsigned char, int, void*), void*)+0x30>
   128e0:	e92d4010 	push	{r4, lr}
   128e4:	e59f2008 	ldr	r2, [pc, #8]	@ 128f4 <CSerialDevice::RegisterCharReceivedHandler(void (*)(unsigned char, int, void*), void*)+0x34>
   128e8:	e2810d05 	add	r0, r1, #320	@ 0x140
   128ec:	ebfff38c 	bl	f724 <assertion_failed>
   128f0:	0001e4b8 	.word	0x0001e4b8
   128f4:	000002ea 	.word	0x000002ea

000128f8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   128f8:	e5903008 	ldr	r3, [r0, #8]
   128fc:	e92d4010 	push	{r4, lr}
   12900:	e3530000 	cmp	r3, #0
   12904:	0a00000e 	beq	12944 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   12908:	e2800a01 	add	r0, r0, #4096	@ 0x1000
   1290c:	e59030dc 	ldr	r3, [r0, #220]	@ 0xdc
   12910:	e3530000 	cmp	r3, #0
   12914:	1a00000e 	bne	12954 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   12918:	e3510000 	cmp	r1, #0
   1291c:	0a000010 	beq	12964 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   12920:	e1d130d0 	ldrsb	r3, [r1]
   12924:	e3530000 	cmp	r3, #0
   12928:	0a000011 	beq	12974 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   1292c:	e3520000 	cmp	r2, #0
   12930:	0a000013 	beq	12984 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   12934:	e58020e4 	str	r2, [r0, #228]	@ 0xe4
   12938:	e58010e0 	str	r1, [r0, #224]	@ 0xe0
   1293c:	e58010dc 	str	r1, [r0, #220]	@ 0xdc
   12940:	e8bd8010 	pop	{r4, pc}
   12944:	e59f1048 	ldr	r1, [pc, #72]	@ 12994 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   12948:	e59f2048 	ldr	r2, [pc, #72]	@ 12998 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   1294c:	e2810d05 	add	r0, r1, #320	@ 0x140
   12950:	ebfff373 	bl	f724 <assertion_failed>
   12954:	e59f1038 	ldr	r1, [pc, #56]	@ 12994 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   12958:	e59f203c 	ldr	r2, [pc, #60]	@ 1299c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   1295c:	e2810f56 	add	r0, r1, #344	@ 0x158
   12960:	ebfff36f 	bl	f724 <assertion_failed>
   12964:	e59f1028 	ldr	r1, [pc, #40]	@ 12994 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   12968:	e59f2030 	ldr	r2, [pc, #48]	@ 129a0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   1296c:	e2810f5a 	add	r0, r1, #360	@ 0x168
   12970:	ebfff36b 	bl	f724 <assertion_failed>
   12974:	e59f1018 	ldr	r1, [pc, #24]	@ 12994 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   12978:	e59f2024 	ldr	r2, [pc, #36]	@ 129a4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   1297c:	e2810f5d 	add	r0, r1, #372	@ 0x174
   12980:	ebfff367 	bl	f724 <assertion_failed>
   12984:	e59f1008 	ldr	r1, [pc, #8]	@ 12994 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   12988:	e59f2018 	ldr	r2, [pc, #24]	@ 129a8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xb0>
   1298c:	e2810f61 	add	r0, r1, #388	@ 0x184
   12990:	ebfff363 	bl	f724 <assertion_failed>
   12994:	0001e4b8 	.word	0x0001e4b8
   12998:	000002f2 	.word	0x000002f2
   1299c:	000002f3 	.word	0x000002f3
   129a0:	000002f5 	.word	0x000002f5
   129a4:	000002f6 	.word	0x000002f6
   129a8:	000002f7 	.word	0x000002f7

000129ac <CSerialDevice::AvailableForWrite()>:
   129ac:	e5d03018 	ldrb	r3, [r0, #24]
   129b0:	e92d4010 	push	{r4, lr}
   129b4:	e3530000 	cmp	r3, #0
   129b8:	0a000019 	beq	12a24 <CSerialDevice::AvailableForWrite()+0x78>
   129bc:	e5903008 	ldr	r3, [r0, #8]
   129c0:	e3530000 	cmp	r3, #0
   129c4:	0a00001a 	beq	12a34 <CSerialDevice::AvailableForWrite()+0x88>
   129c8:	e2804a01 	add	r4, r0, #4096	@ 0x1000
   129cc:	e59400e8 	ldr	r0, [r4, #232]	@ 0xe8
   129d0:	e3500000 	cmp	r0, #0
   129d4:	1a00000c 	bne	12a0c <CSerialDevice::AvailableForWrite()+0x60>
   129d8:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
   129dc:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   129e0:	e1520003 	cmp	r2, r3
   129e4:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
   129e8:	e59420c8 	ldr	r2, [r4, #200]	@ 0xc8
   129ec:	92834e7f 	addls	r4, r3, #2032	@ 0x7f0
   129f0:	9284400f 	addls	r4, r4, #15
   129f4:	82434001 	subhi	r4, r3, #1
   129f8:	e3500000 	cmp	r0, #0
   129fc:	e0444002 	sub	r4, r4, r2
   12a00:	1a000004 	bne	12a18 <CSerialDevice::AvailableForWrite()+0x6c>
   12a04:	e1a00004 	mov	r0, r4
   12a08:	e8bd8010 	pop	{r4, pc}
   12a0c:	eb00139f 	bl	17890 <EnterCritical>
   12a10:	e59400e8 	ldr	r0, [r4, #232]	@ 0xe8
   12a14:	eaffffef 	b	129d8 <CSerialDevice::AvailableForWrite()+0x2c>
   12a18:	eb0013c6 	bl	17938 <LeaveCritical>
   12a1c:	e1a00004 	mov	r0, r4
   12a20:	e8bd8010 	pop	{r4, pc}
   12a24:	e59f1018 	ldr	r1, [pc, #24]	@ 12a44 <CSerialDevice::AvailableForWrite()+0x98>
   12a28:	e59f2018 	ldr	r2, [pc, #24]	@ 12a48 <CSerialDevice::AvailableForWrite()+0x9c>
   12a2c:	e281000c 	add	r0, r1, #12
   12a30:	ebfff33b 	bl	f724 <assertion_failed>
   12a34:	e59f1008 	ldr	r1, [pc, #8]	@ 12a44 <CSerialDevice::AvailableForWrite()+0x98>
   12a38:	e59f200c 	ldr	r2, [pc, #12]	@ 12a4c <CSerialDevice::AvailableForWrite()+0xa0>
   12a3c:	e2810d05 	add	r0, r1, #320	@ 0x140
   12a40:	ebfff337 	bl	f724 <assertion_failed>
   12a44:	0001e4b8 	.word	0x0001e4b8
   12a48:	00000301 	.word	0x00000301
   12a4c:	00000302 	.word	0x00000302

00012a50 <CSerialDevice::AvailableForRead()>:
   12a50:	e5d03018 	ldrb	r3, [r0, #24]
   12a54:	e92d4070 	push	{r4, r5, r6, lr}
   12a58:	e3530000 	cmp	r3, #0
   12a5c:	0a000019 	beq	12ac8 <CSerialDevice::AvailableForRead()+0x78>
   12a60:	e5903008 	ldr	r3, [r0, #8]
   12a64:	e1a04000 	mov	r4, r0
   12a68:	e3530000 	cmp	r3, #0
   12a6c:	0a000019 	beq	12ad8 <CSerialDevice::AvailableForRead()+0x88>
   12a70:	e2805a01 	add	r5, r0, #4096	@ 0x1000
   12a74:	e59500e8 	ldr	r0, [r5, #232]	@ 0xe8
   12a78:	e3500000 	cmp	r0, #0
   12a7c:	1a00000b 	bne	12ab0 <CSerialDevice::AvailableForRead()+0x60>
   12a80:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   12a84:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   12a88:	e1520003 	cmp	r2, r3
   12a8c:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
   12a90:	e59428c0 	ldr	r2, [r4, #2240]	@ 0x8c0
   12a94:	32834b02 	addcc	r4, r3, #2048	@ 0x800
   12a98:	30444002 	subcc	r4, r4, r2
   12a9c:	20434002 	subcs	r4, r3, r2
   12aa0:	e3500000 	cmp	r0, #0
   12aa4:	1a000004 	bne	12abc <CSerialDevice::AvailableForRead()+0x6c>
   12aa8:	e1a00004 	mov	r0, r4
   12aac:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ab0:	eb001376 	bl	17890 <EnterCritical>
   12ab4:	e59500e8 	ldr	r0, [r5, #232]	@ 0xe8
   12ab8:	eafffff0 	b	12a80 <CSerialDevice::AvailableForRead()+0x30>
   12abc:	eb00139d 	bl	17938 <LeaveCritical>
   12ac0:	e1a00004 	mov	r0, r4
   12ac4:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ac8:	e59f1018 	ldr	r1, [pc, #24]	@ 12ae8 <CSerialDevice::AvailableForRead()+0x98>
   12acc:	e59f2018 	ldr	r2, [pc, #24]	@ 12aec <CSerialDevice::AvailableForRead()+0x9c>
   12ad0:	e281000c 	add	r0, r1, #12
   12ad4:	ebfff312 	bl	f724 <assertion_failed>
   12ad8:	e59f1008 	ldr	r1, [pc, #8]	@ 12ae8 <CSerialDevice::AvailableForRead()+0x98>
   12adc:	e3a02fc6 	mov	r2, #792	@ 0x318
   12ae0:	e2810d05 	add	r0, r1, #320	@ 0x140
   12ae4:	ebfff30e 	bl	f724 <assertion_failed>
   12ae8:	0001e4b8 	.word	0x0001e4b8
   12aec:	00000317 	.word	0x00000317

00012af0 <CSerialDevice::Peek()>:
   12af0:	e5d03018 	ldrb	r3, [r0, #24]
   12af4:	e92d4070 	push	{r4, r5, r6, lr}
   12af8:	e3530000 	cmp	r3, #0
   12afc:	0a00001f 	beq	12b80 <CSerialDevice::Peek()+0x90>
   12b00:	e5903008 	ldr	r3, [r0, #8]
   12b04:	e1a04000 	mov	r4, r0
   12b08:	e3530000 	cmp	r3, #0
   12b0c:	0a00001f 	beq	12b90 <CSerialDevice::Peek()+0xa0>
   12b10:	e2805a01 	add	r5, r0, #4096	@ 0x1000
   12b14:	e59500e8 	ldr	r0, [r5, #232]	@ 0xe8
   12b18:	e3500000 	cmp	r0, #0
   12b1c:	1a000008 	bne	12b44 <CSerialDevice::Peek()+0x54>
   12b20:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   12b24:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   12b28:	e1520003 	cmp	r2, r3
   12b2c:	0a00001b 	beq	12ba0 <CSerialDevice::Peek()+0xb0>
   12b30:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   12b34:	e0844003 	add	r4, r4, r3
   12b38:	e5d440bc 	ldrb	r4, [r4, #188]	@ 0xbc
   12b3c:	e1a00004 	mov	r0, r4
   12b40:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b44:	eb001351 	bl	17890 <EnterCritical>
   12b48:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   12b4c:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   12b50:	e1520003 	cmp	r2, r3
   12b54:	159438c0 	ldrne	r3, [r4, #2240]	@ 0x8c0
   12b58:	059520e8 	ldreq	r2, [r5, #232]	@ 0xe8
   12b5c:	159520e8 	ldrne	r2, [r5, #232]	@ 0xe8
   12b60:	10843003 	addne	r3, r4, r3
   12b64:	03e04000 	mvneq	r4, #0
   12b68:	15d340bc 	ldrbne	r4, [r3, #188]	@ 0xbc
   12b6c:	e3520000 	cmp	r2, #0
   12b70:	0afffff1 	beq	12b3c <CSerialDevice::Peek()+0x4c>
   12b74:	eb00136f 	bl	17938 <LeaveCritical>
   12b78:	e1a00004 	mov	r0, r4
   12b7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b80:	e59f1020 	ldr	r1, [pc, #32]	@ 12ba8 <CSerialDevice::Peek()+0xb8>
   12b84:	e59f2020 	ldr	r2, [pc, #32]	@ 12bac <CSerialDevice::Peek()+0xbc>
   12b88:	e281000c 	add	r0, r1, #12
   12b8c:	ebfff2e4 	bl	f724 <assertion_failed>
   12b90:	e59f1010 	ldr	r1, [pc, #16]	@ 12ba8 <CSerialDevice::Peek()+0xb8>
   12b94:	e59f2014 	ldr	r2, [pc, #20]	@ 12bb0 <CSerialDevice::Peek()+0xc0>
   12b98:	e2810d05 	add	r0, r1, #320	@ 0x140
   12b9c:	ebfff2e0 	bl	f724 <assertion_failed>
   12ba0:	e3e04000 	mvn	r4, #0
   12ba4:	eaffffe4 	b	12b3c <CSerialDevice::Peek()+0x4c>
   12ba8:	0001e4b8 	.word	0x0001e4b8
   12bac:	0000032d 	.word	0x0000032d
   12bb0:	0000032e 	.word	0x0000032e

00012bb4 <CSerialDevice::Flush()>:
   12bb4:	e3a03000 	mov	r3, #0
   12bb8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12bbc:	e5902014 	ldr	r2, [r0, #20]
   12bc0:	e2822018 	add	r2, r2, #24
   12bc4:	e5923000 	ldr	r3, [r2]
   12bc8:	e2133008 	ands	r3, r3, #8
   12bcc:	1afffffc 	bne	12bc4 <CSerialDevice::Flush()+0x10>
   12bd0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12bd4:	e12fff1e 	bx	lr

00012bd8 <CSerialDevice::Write(unsigned char)>:
   12bd8:	e5903008 	ldr	r3, [r0, #8]
   12bdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12be0:	e3530000 	cmp	r3, #0
   12be4:	e1a04000 	mov	r4, r0
   12be8:	e1a05001 	mov	r5, r1
   12bec:	0a000025 	beq	12c88 <CSerialDevice::Write(unsigned char)+0xb0>
   12bf0:	e2806a01 	add	r6, r0, #4096	@ 0x1000
   12bf4:	e59600e8 	ldr	r0, [r6, #232]	@ 0xe8
   12bf8:	e3500000 	cmp	r0, #0
   12bfc:	1a000015 	bne	12c58 <CSerialDevice::Write(unsigned char)+0x80>
   12c00:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   12c04:	e59610cc 	ldr	r1, [r6, #204]	@ 0xcc
   12c08:	e2833001 	add	r3, r3, #1
   12c0c:	e1a03a83 	lsl	r3, r3, #21
   12c10:	e1a03aa3 	lsr	r3, r3, #21
   12c14:	e1530001 	cmp	r3, r1
   12c18:	0a000025 	beq	12cb4 <CSerialDevice::Write(unsigned char)+0xdc>
   12c1c:	e3a07001 	mov	r7, #1
   12c20:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   12c24:	e0844003 	add	r4, r4, r3
   12c28:	e2833001 	add	r3, r3, #1
   12c2c:	e58630c8 	str	r3, [r6, #200]	@ 0xc8
   12c30:	e5c458c8 	strb	r5, [r4, #2248]	@ 0x8c8
   12c34:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   12c38:	e1a03a83 	lsl	r3, r3, #21
   12c3c:	e1a03aa3 	lsr	r3, r3, #21
   12c40:	e58630c8 	str	r3, [r6, #200]	@ 0xc8
   12c44:	e3500000 	cmp	r0, #0
   12c48:	0a000000 	beq	12c50 <CSerialDevice::Write(unsigned char)+0x78>
   12c4c:	eb001339 	bl	17938 <LeaveCritical>
   12c50:	e1a00007 	mov	r0, r7
   12c54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12c58:	eb00130c 	bl	17890 <EnterCritical>
   12c5c:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   12c60:	e59620cc 	ldr	r2, [r6, #204]	@ 0xcc
   12c64:	e2833001 	add	r3, r3, #1
   12c68:	e1a03a83 	lsl	r3, r3, #21
   12c6c:	e1a03aa3 	lsr	r3, r3, #21
   12c70:	e1530002 	cmp	r3, r2
   12c74:	159600e8 	ldrne	r0, [r6, #232]	@ 0xe8
   12c78:	1affffe7 	bne	12c1c <CSerialDevice::Write(unsigned char)+0x44>
   12c7c:	e3a07000 	mov	r7, #0
   12c80:	e59600e8 	ldr	r0, [r6, #232]	@ 0xe8
   12c84:	eaffffee 	b	12c44 <CSerialDevice::Write(unsigned char)+0x6c>
   12c88:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12c8c:	e5901014 	ldr	r1, [r0, #20]
   12c90:	e2812018 	add	r2, r1, #24
   12c94:	e5923000 	ldr	r3, [r2]
   12c98:	e2133020 	ands	r3, r3, #32
   12c9c:	1afffffc 	bne	12c94 <CSerialDevice::Write(unsigned char)+0xbc>
   12ca0:	e5815000 	str	r5, [r1]
   12ca4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12ca8:	e3a07001 	mov	r7, #1
   12cac:	e1a00007 	mov	r0, r7
   12cb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12cb4:	e1a07000 	mov	r7, r0
   12cb8:	e1a00007 	mov	r0, r7
   12cbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00012cc0 <CSerialDevice::Write(void const*, unsigned int)>:
   12cc0:	e5d03018 	ldrb	r3, [r0, #24]
   12cc4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12cc8:	e3530000 	cmp	r3, #0
   12ccc:	0a00005e 	beq	12e4c <CSerialDevice::Write(void const*, unsigned int)+0x18c>
   12cd0:	e2806a01 	add	r6, r0, #4096	@ 0x1000
   12cd4:	e1a07000 	mov	r7, r0
   12cd8:	e59600ec 	ldr	r0, [r6, #236]	@ 0xec
   12cdc:	e1a04001 	mov	r4, r1
   12ce0:	e3500000 	cmp	r0, #0
   12ce4:	e1a08002 	mov	r8, r2
   12ce8:	1a00004a 	bne	12e18 <CSerialDevice::Write(void const*, unsigned int)+0x158>
   12cec:	e3540000 	cmp	r4, #0
   12cf0:	0a000059 	beq	12e5c <CSerialDevice::Write(void const*, unsigned int)+0x19c>
   12cf4:	e2589000 	subs	r9, r8, #0
   12cf8:	13a05000 	movne	r5, #0
   12cfc:	12444001 	subne	r4, r4, #1
   12d00:	1a000003 	bne	12d14 <CSerialDevice::Write(void const*, unsigned int)+0x54>
   12d04:	ea000013 	b	12d58 <CSerialDevice::Write(void const*, unsigned int)+0x98>
   12d08:	e2855001 	add	r5, r5, #1
   12d0c:	e1550008 	cmp	r5, r8
   12d10:	0a000010 	beq	12d58 <CSerialDevice::Write(void const*, unsigned int)+0x98>
   12d14:	e1a00007 	mov	r0, r7
   12d18:	e5f41001 	ldrb	r1, [r4, #1]!
   12d1c:	ebffffad 	bl	12bd8 <CSerialDevice::Write(unsigned char)>
   12d20:	e3500000 	cmp	r0, #0
   12d24:	0a00000a 	beq	12d54 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   12d28:	e5d43000 	ldrb	r3, [r4]
   12d2c:	e353000a 	cmp	r3, #10
   12d30:	1afffff4 	bne	12d08 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   12d34:	e59630d0 	ldr	r3, [r6, #208]	@ 0xd0
   12d38:	e3130001 	tst	r3, #1
   12d3c:	0afffff1 	beq	12d08 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   12d40:	e3a0100d 	mov	r1, #13
   12d44:	e1a00007 	mov	r0, r7
   12d48:	ebffffa2 	bl	12bd8 <CSerialDevice::Write(unsigned char)>
   12d4c:	e3500000 	cmp	r0, #0
   12d50:	1affffec 	bne	12d08 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   12d54:	e1a09005 	mov	r9, r5
   12d58:	e59630ec 	ldr	r3, [r6, #236]	@ 0xec
   12d5c:	e3530000 	cmp	r3, #0
   12d60:	1a00002e 	bne	12e20 <CSerialDevice::Write(void const*, unsigned int)+0x160>
   12d64:	e5973008 	ldr	r3, [r7, #8]
   12d68:	e3530000 	cmp	r3, #0
   12d6c:	0a000027 	beq	12e10 <CSerialDevice::Write(void const*, unsigned int)+0x150>
   12d70:	e59600e8 	ldr	r0, [r6, #232]	@ 0xe8
   12d74:	e3500000 	cmp	r0, #0
   12d78:	1a00002d 	bne	12e34 <CSerialDevice::Write(void const*, unsigned int)+0x174>
   12d7c:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   12d80:	e59620cc 	ldr	r2, [r6, #204]	@ 0xcc
   12d84:	e1520003 	cmp	r2, r3
   12d88:	0a000020 	beq	12e10 <CSerialDevice::Write(void const*, unsigned int)+0x150>
   12d8c:	e3a03000 	mov	r3, #0
   12d90:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12d94:	e59620c8 	ldr	r2, [r6, #200]	@ 0xc8
   12d98:	e59630cc 	ldr	r3, [r6, #204]	@ 0xcc
   12d9c:	e1520003 	cmp	r2, r3
   12da0:	0a000015 	beq	12dfc <CSerialDevice::Write(void const*, unsigned int)+0x13c>
   12da4:	e59f00c0 	ldr	r0, [pc, #192]	@ 12e6c <CSerialDevice::Write(void const*, unsigned int)+0x1ac>
   12da8:	ea00000c 	b	12de0 <CSerialDevice::Write(void const*, unsigned int)+0x120>
   12dac:	e59630cc 	ldr	r3, [r6, #204]	@ 0xcc
   12db0:	e2831001 	add	r1, r3, #1
   12db4:	e58610cc 	str	r1, [r6, #204]	@ 0xcc
   12db8:	e0873003 	add	r3, r7, r3
   12dbc:	e5d338c8 	ldrb	r3, [r3, #2248]	@ 0x8c8
   12dc0:	e5823000 	str	r3, [r2]
   12dc4:	e59630cc 	ldr	r3, [r6, #204]	@ 0xcc
   12dc8:	e0033000 	and	r3, r3, r0
   12dcc:	e58630cc 	str	r3, [r6, #204]	@ 0xcc
   12dd0:	e59620c8 	ldr	r2, [r6, #200]	@ 0xc8
   12dd4:	e59630cc 	ldr	r3, [r6, #204]	@ 0xcc
   12dd8:	e1520003 	cmp	r2, r3
   12ddc:	0a000006 	beq	12dfc <CSerialDevice::Write(void const*, unsigned int)+0x13c>
   12de0:	e5972014 	ldr	r2, [r7, #20]
   12de4:	e5923018 	ldr	r3, [r2, #24]
   12de8:	e3130020 	tst	r3, #32
   12dec:	0affffee 	beq	12dac <CSerialDevice::Write(void const*, unsigned int)+0xec>
   12df0:	e5923038 	ldr	r3, [r2, #56]	@ 0x38
   12df4:	e3833020 	orr	r3, r3, #32
   12df8:	e5823038 	str	r3, [r2, #56]	@ 0x38
   12dfc:	e3a03000 	mov	r3, #0
   12e00:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12e04:	e59630e8 	ldr	r3, [r6, #232]	@ 0xe8
   12e08:	e3530000 	cmp	r3, #0
   12e0c:	1a000005 	bne	12e28 <CSerialDevice::Write(void const*, unsigned int)+0x168>
   12e10:	e1a00009 	mov	r0, r9
   12e14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e18:	eb00129c 	bl	17890 <EnterCritical>
   12e1c:	eaffffb2 	b	12cec <CSerialDevice::Write(void const*, unsigned int)+0x2c>
   12e20:	eb0012c4 	bl	17938 <LeaveCritical>
   12e24:	eaffffce 	b	12d64 <CSerialDevice::Write(void const*, unsigned int)+0xa4>
   12e28:	eb0012c2 	bl	17938 <LeaveCritical>
   12e2c:	e1a00009 	mov	r0, r9
   12e30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e34:	eb001295 	bl	17890 <EnterCritical>
   12e38:	e59620c8 	ldr	r2, [r6, #200]	@ 0xc8
   12e3c:	e59630cc 	ldr	r3, [r6, #204]	@ 0xcc
   12e40:	e1520003 	cmp	r2, r3
   12e44:	1affffd0 	bne	12d8c <CSerialDevice::Write(void const*, unsigned int)+0xcc>
   12e48:	eaffffed 	b	12e04 <CSerialDevice::Write(void const*, unsigned int)+0x144>
   12e4c:	e59f101c 	ldr	r1, [pc, #28]	@ 12e70 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
   12e50:	e59f201c 	ldr	r2, [pc, #28]	@ 12e74 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
   12e54:	e281000c 	add	r0, r1, #12
   12e58:	ebfff231 	bl	f724 <assertion_failed>
   12e5c:	e59f100c 	ldr	r1, [pc, #12]	@ 12e70 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
   12e60:	e3a02f82 	mov	r2, #520	@ 0x208
   12e64:	e2810018 	add	r0, r1, #24
   12e68:	ebfff22d 	bl	f724 <assertion_failed>
   12e6c:	000007ff 	.word	0x000007ff
   12e70:	0001e4b8 	.word	0x0001e4b8
   12e74:	000001fb 	.word	0x000001fb

00012e78 <CSerialDevice::InterruptHandler()>:
   12e78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e7c:	e3a06000 	mov	r6, #0
   12e80:	e2805a01 	add	r5, r0, #4096	@ 0x1000
   12e84:	e1a04000 	mov	r4, r0
   12e88:	e59500e8 	ldr	r0, [r5, #232]	@ 0xe8
   12e8c:	e24dd00c 	sub	sp, sp, #12
   12e90:	e1500006 	cmp	r0, r6
   12e94:	1a000086 	bne	130b4 <CSerialDevice::InterruptHandler()+0x23c>
   12e98:	e3a09000 	mov	r9, #0
   12e9c:	ee079f9a 	mcr	15, 0, r9, cr7, cr10, {4}
   12ea0:	e5943014 	ldr	r3, [r4, #20]
   12ea4:	e5932040 	ldr	r2, [r3, #64]	@ 0x40
   12ea8:	e5832044 	str	r2, [r3, #68]	@ 0x44
   12eac:	e5943014 	ldr	r3, [r4, #20]
   12eb0:	e5937018 	ldr	r7, [r3, #24]
   12eb4:	e2838018 	add	r8, r3, #24
   12eb8:	e2177010 	ands	r7, r7, #16
   12ebc:	1a000080 	bne	130c4 <CSerialDevice::InterruptHandler()+0x24c>
   12ec0:	e3e0a001 	mvn	sl, #1
   12ec4:	e3e0b000 	mvn	fp, #0
   12ec8:	e595e0dc 	ldr	lr, [r5, #220]	@ 0xdc
   12ecc:	e59590d4 	ldr	r9, [r5, #212]	@ 0xd4
   12ed0:	e59fc1f4 	ldr	ip, [pc, #500]	@ 130cc <CSerialDevice::InterruptHandler()+0x254>
   12ed4:	e58d6000 	str	r6, [sp]
   12ed8:	ea000022 	b	12f68 <CSerialDevice::InterruptHandler()+0xf0>
   12edc:	e59418c4 	ldr	r1, [r4, #2244]	@ 0x8c4
   12ee0:	e3510000 	cmp	r1, #0
   12ee4:	0584b8c4 	streq	fp, [r4, #2244]	@ 0x8c4
   12ee8:	e35e0000 	cmp	lr, #0
   12eec:	0a00000a 	beq	12f1c <CSerialDevice::InterruptHandler()+0xa4>
   12ef0:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
   12ef4:	e6af1072 	sxtb	r1, r2
   12ef8:	e1d060d0 	ldrsb	r6, [r0]
   12efc:	e1560001 	cmp	r6, r1
   12f00:	1585e0e0 	strne	lr, [r5, #224]	@ 0xe0
   12f04:	1a000004 	bne	12f1c <CSerialDevice::InterruptHandler()+0xa4>
   12f08:	e2801001 	add	r1, r0, #1
   12f0c:	e58510e0 	str	r1, [r5, #224]	@ 0xe0
   12f10:	e1d010d1 	ldrsb	r1, [r0, #1]
   12f14:	e3510000 	cmp	r1, #0
   12f18:	03a07001 	moveq	r7, #1
   12f1c:	e3590000 	cmp	r9, #0
   12f20:	1a000030 	bne	12fe8 <CSerialDevice::InterruptHandler()+0x170>
   12f24:	e59418bc 	ldr	r1, [r4, #2236]	@ 0x8bc
   12f28:	e59408c0 	ldr	r0, [r4, #2240]	@ 0x8c0
   12f2c:	e2811001 	add	r1, r1, #1
   12f30:	e001100c 	and	r1, r1, ip
   12f34:	e1510000 	cmp	r1, r0
   12f38:	0a000013 	beq	12f8c <CSerialDevice::InterruptHandler()+0x114>
   12f3c:	e59418bc 	ldr	r1, [r4, #2236]	@ 0x8bc
   12f40:	e2810001 	add	r0, r1, #1
   12f44:	e0841001 	add	r1, r4, r1
   12f48:	e58408bc 	str	r0, [r4, #2236]	@ 0x8bc
   12f4c:	e5c120bc 	strb	r2, [r1, #188]	@ 0xbc
   12f50:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   12f54:	e002200c 	and	r2, r2, ip
   12f58:	e58428bc 	str	r2, [r4, #2236]	@ 0x8bc
   12f5c:	e5982000 	ldr	r2, [r8]
   12f60:	e3120010 	tst	r2, #16
   12f64:	1a00000e 	bne	12fa4 <CSerialDevice::InterruptHandler()+0x12c>
   12f68:	e5932000 	ldr	r2, [r3]
   12f6c:	e3120b01 	tst	r2, #1024	@ 0x400
   12f70:	1affffd9 	bne	12edc <CSerialDevice::InterruptHandler()+0x64>
   12f74:	e3120b02 	tst	r2, #2048	@ 0x800
   12f78:	0a00000c 	beq	12fb0 <CSerialDevice::InterruptHandler()+0x138>
   12f7c:	e59418c4 	ldr	r1, [r4, #2244]	@ 0x8c4
   12f80:	e3510000 	cmp	r1, #0
   12f84:	0584a8c4 	streq	sl, [r4, #2244]	@ 0x8c4
   12f88:	eaffffd6 	b	12ee8 <CSerialDevice::InterruptHandler()+0x70>
   12f8c:	e59428c4 	ldr	r2, [r4, #2244]	@ 0x8c4
   12f90:	e3520000 	cmp	r2, #0
   12f94:	0584a8c4 	streq	sl, [r4, #2244]	@ 0x8c4
   12f98:	e5982000 	ldr	r2, [r8]
   12f9c:	e3120010 	tst	r2, #16
   12fa0:	0afffff0 	beq	12f68 <CSerialDevice::InterruptHandler()+0xf0>
   12fa4:	e3a09000 	mov	r9, #0
   12fa8:	e59d6000 	ldr	r6, [sp]
   12fac:	ea000013 	b	13000 <CSerialDevice::InterruptHandler()+0x188>
   12fb0:	e3120c01 	tst	r2, #256	@ 0x100
   12fb4:	0a000004 	beq	12fcc <CSerialDevice::InterruptHandler()+0x154>
   12fb8:	e59418c4 	ldr	r1, [r4, #2244]	@ 0x8c4
   12fbc:	e3510000 	cmp	r1, #0
   12fc0:	03e01002 	mvneq	r1, #2
   12fc4:	058418c4 	streq	r1, [r4, #2244]	@ 0x8c4
   12fc8:	eaffffc6 	b	12ee8 <CSerialDevice::InterruptHandler()+0x70>
   12fcc:	e3120c02 	tst	r2, #512	@ 0x200
   12fd0:	0affffc4 	beq	12ee8 <CSerialDevice::InterruptHandler()+0x70>
   12fd4:	e59418c4 	ldr	r1, [r4, #2244]	@ 0x8c4
   12fd8:	e3510000 	cmp	r1, #0
   12fdc:	03e01003 	mvneq	r1, #3
   12fe0:	058418c4 	streq	r1, [r4, #2244]	@ 0x8c4
   12fe4:	eaffffbf 	b	12ee8 <CSerialDevice::InterruptHandler()+0x70>
   12fe8:	e6ef6072 	uxtb	r6, r2
   12fec:	e3a02000 	mov	r2, #0
   12ff0:	e3a09001 	mov	r9, #1
   12ff4:	e59418c4 	ldr	r1, [r4, #2244]	@ 0x8c4
   12ff8:	e58428c4 	str	r2, [r4, #2244]	@ 0x8c4
   12ffc:	e58d1004 	str	r1, [sp, #4]
   13000:	e5982000 	ldr	r2, [r8]
   13004:	e3120020 	tst	r2, #32
   13008:	1a000015 	bne	13064 <CSerialDevice::InterruptHandler()+0x1ec>
   1300c:	e59f00b8 	ldr	r0, [pc, #184]	@ 130cc <CSerialDevice::InterruptHandler()+0x254>
   13010:	ea00000c 	b	13048 <CSerialDevice::InterruptHandler()+0x1d0>
   13014:	e59520cc 	ldr	r2, [r5, #204]	@ 0xcc
   13018:	e2821001 	add	r1, r2, #1
   1301c:	e58510cc 	str	r1, [r5, #204]	@ 0xcc
   13020:	e0842002 	add	r2, r4, r2
   13024:	e5d228c8 	ldrb	r2, [r2, #2248]	@ 0x8c8
   13028:	e5832000 	str	r2, [r3]
   1302c:	e59530cc 	ldr	r3, [r5, #204]	@ 0xcc
   13030:	e0033000 	and	r3, r3, r0
   13034:	e58530cc 	str	r3, [r5, #204]	@ 0xcc
   13038:	e5943014 	ldr	r3, [r4, #20]
   1303c:	e5932018 	ldr	r2, [r3, #24]
   13040:	e3120020 	tst	r2, #32
   13044:	1a000006 	bne	13064 <CSerialDevice::InterruptHandler()+0x1ec>
   13048:	e59510c8 	ldr	r1, [r5, #200]	@ 0xc8
   1304c:	e59520cc 	ldr	r2, [r5, #204]	@ 0xcc
   13050:	e1510002 	cmp	r1, r2
   13054:	1affffee 	bne	13014 <CSerialDevice::InterruptHandler()+0x19c>
   13058:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   1305c:	e3c22020 	bic	r2, r2, #32
   13060:	e5832038 	str	r2, [r3, #56]	@ 0x38
   13064:	e3a03000 	mov	r3, #0
   13068:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1306c:	e59530e8 	ldr	r3, [r5, #232]	@ 0xe8
   13070:	e3530000 	cmp	r3, #0
   13074:	1a000010 	bne	130bc <CSerialDevice::InterruptHandler()+0x244>
   13078:	e3570000 	cmp	r7, #0
   1307c:	0a000001 	beq	13088 <CSerialDevice::InterruptHandler()+0x210>
   13080:	e59530e4 	ldr	r3, [r5, #228]	@ 0xe4
   13084:	e12fff33 	blx	r3
   13088:	e3590000 	cmp	r9, #0
   1308c:	0a000006 	beq	130ac <CSerialDevice::InterruptHandler()+0x234>
   13090:	e1a00006 	mov	r0, r6
   13094:	e59d1004 	ldr	r1, [sp, #4]
   13098:	e59530d4 	ldr	r3, [r5, #212]	@ 0xd4
   1309c:	e59520d8 	ldr	r2, [r5, #216]	@ 0xd8
   130a0:	e28dd00c 	add	sp, sp, #12
   130a4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a8:	e12fff13 	bx	r3
   130ac:	e28dd00c 	add	sp, sp, #12
   130b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b4:	eb0011f5 	bl	17890 <EnterCritical>
   130b8:	eaffff76 	b	12e98 <CSerialDevice::InterruptHandler()+0x20>
   130bc:	eb00121d 	bl	17938 <LeaveCritical>
   130c0:	eaffffec 	b	13078 <CSerialDevice::InterruptHandler()+0x200>
   130c4:	e1a07009 	mov	r7, r9
   130c8:	eaffffcc 	b	13000 <CSerialDevice::InterruptHandler()+0x188>
   130cc:	000007ff 	.word	0x000007ff

000130d0 <CSerialDevice::InterruptStub(void*)>:
   130d0:	e3a03000 	mov	r3, #0
   130d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   130d8:	e59f302c 	ldr	r3, [pc, #44]	@ 1310c <CSerialDevice::InterruptStub(void*)+0x3c>
   130dc:	e5932010 	ldr	r2, [r3, #16]
   130e0:	e3120001 	tst	r2, #1
   130e4:	012fff1e 	bxeq	lr
   130e8:	e5930000 	ldr	r0, [r3]
   130ec:	e3500000 	cmp	r0, #0
   130f0:	0a000000 	beq	130f8 <CSerialDevice::InterruptStub(void*)+0x28>
   130f4:	eaffff5f 	b	12e78 <CSerialDevice::InterruptHandler()>
   130f8:	e59f1010 	ldr	r1, [pc, #16]	@ 13110 <CSerialDevice::InterruptStub(void*)+0x40>
   130fc:	e3a02ffd 	mov	r2, #1012	@ 0x3f4
   13100:	e92d4010 	push	{r4, lr}
   13104:	e2810f65 	add	r0, r1, #404	@ 0x194
   13108:	ebfff185 	bl	f724 <assertion_failed>
   1310c:	00020b60 	.word	0x00020b60
   13110:	0001e4b8 	.word	0x0001e4b8

00013114 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>:
   13114:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13118:	e1a04000 	mov	r4, r0
   1311c:	e59f6138 	ldr	r6, [pc, #312]	@ 1325c <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x148>
   13120:	ebfff374 	bl	fef8 <CDeviceNameService::Get()>
   13124:	e5942010 	ldr	r2, [r4, #16]
   13128:	e2861f4e 	add	r1, r6, #312	@ 0x138
   1312c:	e3a03000 	mov	r3, #0
   13130:	e2822001 	add	r2, r2, #1
   13134:	ebfff395 	bl	ff90 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   13138:	e3a00001 	mov	r0, #1
   1313c:	e59f511c 	ldr	r5, [pc, #284]	@ 13260 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x14c>
   13140:	e5941010 	ldr	r1, [r4, #16]
   13144:	e5952010 	ldr	r2, [r5, #16]
   13148:	e3a03000 	mov	r3, #0
   1314c:	e1c22110 	bic	r2, r2, r0, lsl r1
   13150:	e5852010 	str	r2, [r5, #16]
   13154:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   13158:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1315c:	e5942014 	ldr	r2, [r4, #20]
   13160:	e5823038 	str	r3, [r2, #56]	@ 0x38
   13164:	e5942014 	ldr	r2, [r4, #20]
   13168:	e5823030 	str	r3, [r2, #48]	@ 0x30
   1316c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   13170:	e5943008 	ldr	r3, [r4, #8]
   13174:	e3530000 	cmp	r3, #0
   13178:	0a00000e 	beq	131b8 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0xa4>
   1317c:	e5953004 	ldr	r3, [r5, #4]
   13180:	e2433001 	sub	r3, r3, #1
   13184:	e3530000 	cmp	r3, #0
   13188:	e5853004 	str	r3, [r5, #4]
   1318c:	1a000009 	bne	131b8 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0xa4>
   13190:	e5950008 	ldr	r0, [r5, #8]
   13194:	e3500000 	cmp	r0, #0
   13198:	0a00002b 	beq	1324c <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x138>
   1319c:	e5d5300c 	ldrb	r3, [r5, #12]
   131a0:	e3530000 	cmp	r3, #0
   131a4:	0a000025 	beq	13240 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x12c>
   131a8:	eb0012ff 	bl	17dac <CInterruptSystem::DisconnectFIQ()>
   131ac:	e3a03000 	mov	r3, #0
   131b0:	e5853008 	str	r3, [r5, #8]
   131b4:	e5c5300c 	strb	r3, [r5, #12]
   131b8:	e5943010 	ldr	r3, [r4, #16]
   131bc:	e0866203 	add	r6, r6, r3, lsl #4
   131c0:	e5963050 	ldr	r3, [r6, #80]	@ 0x50
   131c4:	e2833005 	add	r3, r3, #5
   131c8:	e6ef3073 	uxtb	r3, r3
   131cc:	e353000a 	cmp	r3, #10
   131d0:	8284706c 	addhi	r7, r4, #108	@ 0x6c
   131d4:	9a000013 	bls	13228 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x114>
   131d8:	e3a02001 	mov	r2, #1
   131dc:	e2846094 	add	r6, r4, #148	@ 0x94
   131e0:	e1a01002 	mov	r1, r2
   131e4:	e1a00006 	mov	r0, r6
   131e8:	eb001708 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   131ec:	e3a03000 	mov	r3, #0
   131f0:	e5942010 	ldr	r2, [r4, #16]
   131f4:	e5c43018 	strb	r3, [r4, #24]
   131f8:	e1a00006 	mov	r0, r6
   131fc:	e7853102 	str	r3, [r5, r2, lsl #2]
   13200:	eb001470 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   13204:	e1a00007 	mov	r0, r7
   13208:	eb00146e 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   1320c:	e2840044 	add	r0, r4, #68	@ 0x44
   13210:	eb00146c 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   13214:	e284001c 	add	r0, r4, #28
   13218:	eb00146a 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   1321c:	e1a00004 	mov	r0, r4
   13220:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13224:	eafff1d1 	b	f970 <CDevice::~CDevice()>
   13228:	e3a02001 	mov	r2, #1
   1322c:	e284706c 	add	r7, r4, #108	@ 0x6c
   13230:	e1a00007 	mov	r0, r7
   13234:	e1a01002 	mov	r1, r2
   13238:	eb0016f4 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   1323c:	eaffffe5 	b	131d8 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0xc4>
   13240:	e3a01039 	mov	r1, #57	@ 0x39
   13244:	eb001275 	bl	17c20 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13248:	eaffffd7 	b	131ac <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x98>
   1324c:	e3a02f4b 	mov	r2, #300	@ 0x12c
   13250:	e1a01006 	mov	r1, r6
   13254:	e2860f69 	add	r0, r6, #420	@ 0x1a4
   13258:	ebfff131 	bl	f724 <assertion_failed>
   1325c:	0001e4b8 	.word	0x0001e4b8
   13260:	00020b60 	.word	0x00020b60

00013264 <CSerialDevice::~CSerialDevice()>:
   13264:	e5d03018 	ldrb	r3, [r0, #24]
   13268:	e59f204c 	ldr	r2, [pc, #76]	@ 132bc <CSerialDevice::~CSerialDevice()+0x58>
   1326c:	e3530000 	cmp	r3, #0
   13270:	e92d4010 	push	{r4, lr}
   13274:	e1a04000 	mov	r4, r0
   13278:	e5802000 	str	r2, [r0]
   1327c:	0a000002 	beq	1328c <CSerialDevice::~CSerialDevice()+0x28>
   13280:	ebffffa3 	bl	13114 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>
   13284:	e1a00004 	mov	r0, r4
   13288:	e8bd8010 	pop	{r4, pc}
   1328c:	e2800094 	add	r0, r0, #148	@ 0x94
   13290:	eb00144c 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   13294:	e284006c 	add	r0, r4, #108	@ 0x6c
   13298:	eb00144a 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   1329c:	e2840044 	add	r0, r4, #68	@ 0x44
   132a0:	eb001448 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   132a4:	e284001c 	add	r0, r4, #28
   132a8:	eb001446 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   132ac:	e1a00004 	mov	r0, r4
   132b0:	ebfff1ae 	bl	f970 <CDevice::~CDevice()>
   132b4:	e1a00004 	mov	r0, r4
   132b8:	e8bd8010 	pop	{r4, pc}
   132bc:	0001e4e4 	.word	0x0001e4e4

000132c0 <CSerialDevice::~CSerialDevice()>:
   132c0:	e5d03018 	ldrb	r3, [r0, #24]
   132c4:	e59f2054 	ldr	r2, [pc, #84]	@ 13320 <CSerialDevice::~CSerialDevice()+0x60>
   132c8:	e3530000 	cmp	r3, #0
   132cc:	e92d4010 	push	{r4, lr}
   132d0:	e1a04000 	mov	r4, r0
   132d4:	e5802000 	str	r2, [r0]
   132d8:	0a000005 	beq	132f4 <CSerialDevice::~CSerialDevice()+0x34>
   132dc:	ebffff8c 	bl	13114 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>
   132e0:	e1a00004 	mov	r0, r4
   132e4:	e59f1038 	ldr	r1, [pc, #56]	@ 13324 <CSerialDevice::~CSerialDevice()+0x64>
   132e8:	eb000db6 	bl	169c8 <operator delete(void*, unsigned int)>
   132ec:	e1a00004 	mov	r0, r4
   132f0:	e8bd8010 	pop	{r4, pc}
   132f4:	e2800094 	add	r0, r0, #148	@ 0x94
   132f8:	eb001432 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   132fc:	e284006c 	add	r0, r4, #108	@ 0x6c
   13300:	eb001430 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   13304:	e2840044 	add	r0, r4, #68	@ 0x44
   13308:	eb00142e 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   1330c:	e284001c 	add	r0, r4, #28
   13310:	eb00142c 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   13314:	e1a00004 	mov	r0, r4
   13318:	ebfff194 	bl	f970 <CDevice::~CDevice()>
   1331c:	eaffffef 	b	132e0 <CSerialDevice::~CSerialDevice()+0x20>
   13320:	0001e4e4 	.word	0x0001e4e4
   13324:	000010f0 	.word	0x000010f0

00013328 <CString::~CString()>:
   13328:	e92d4010 	push	{r4, lr}
   1332c:	e1a04000 	mov	r4, r0
   13330:	e5900004 	ldr	r0, [r0, #4]
   13334:	e59f3014 	ldr	r3, [pc, #20]	@ 13350 <CString::~CString()+0x28>
   13338:	e3500000 	cmp	r0, #0
   1333c:	e5843000 	str	r3, [r4]
   13340:	0a000000 	beq	13348 <CString::~CString()+0x20>
   13344:	eb000d99 	bl	169b0 <operator delete[](void*)>
   13348:	e1a00004 	mov	r0, r4
   1334c:	e8bd8010 	pop	{r4, pc}
   13350:	0001e67c 	.word	0x0001e67c

00013354 <CString::~CString()>:
   13354:	e92d4010 	push	{r4, lr}
   13358:	e1a04000 	mov	r4, r0
   1335c:	e5900004 	ldr	r0, [r0, #4]
   13360:	e59f3020 	ldr	r3, [pc, #32]	@ 13388 <CString::~CString()+0x34>
   13364:	e3500000 	cmp	r0, #0
   13368:	e5843000 	str	r3, [r4]
   1336c:	0a000000 	beq	13374 <CString::~CString()+0x20>
   13370:	eb000d8e 	bl	169b0 <operator delete[](void*)>
   13374:	e1a00004 	mov	r0, r4
   13378:	e3a01010 	mov	r1, #16
   1337c:	eb000d91 	bl	169c8 <operator delete(void*, unsigned int)>
   13380:	e1a00004 	mov	r0, r4
   13384:	e8bd8010 	pop	{r4, pc}
   13388:	0001e67c 	.word	0x0001e67c

0001338c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   1338c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13390:	e990004c 	ldmib	r0, {r2, r3, r6}
   13394:	e0466002 	sub	r6, r6, r2
   13398:	e0861001 	add	r1, r6, r1
   1339c:	e2812001 	add	r2, r1, #1
   133a0:	e1520003 	cmp	r2, r3
   133a4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   133a8:	e1a04000 	mov	r4, r0
   133ac:	e2815041 	add	r5, r1, #65	@ 0x41
   133b0:	e1a00005 	mov	r0, r5
   133b4:	eb000d71 	bl	16980 <operator new[](unsigned int)>
   133b8:	e3a02000 	mov	r2, #0
   133bc:	e594300c 	ldr	r3, [r4, #12]
   133c0:	e1a07000 	mov	r7, r0
   133c4:	e5c32000 	strb	r2, [r3]
   133c8:	e5941004 	ldr	r1, [r4, #4]
   133cc:	eb000ada 	bl	15f3c <strcpy>
   133d0:	e5940004 	ldr	r0, [r4, #4]
   133d4:	e3500000 	cmp	r0, #0
   133d8:	0a000000 	beq	133e0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   133dc:	eb000d73 	bl	169b0 <operator delete[](void*)>
   133e0:	e0876006 	add	r6, r7, r6
   133e4:	e5847004 	str	r7, [r4, #4]
   133e8:	e5845008 	str	r5, [r4, #8]
   133ec:	e584600c 	str	r6, [r4, #12]
   133f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000133f4 <CString::CString()>:
   133f4:	e3a02000 	mov	r2, #0
   133f8:	e59f1008 	ldr	r1, [pc, #8]	@ 13408 <CString::CString()+0x14>
   133fc:	e5802008 	str	r2, [r0, #8]
   13400:	e8800006 	stm	r0, {r1, r2}
   13404:	e12fff1e 	bx	lr
   13408:	0001e67c 	.word	0x0001e67c

0001340c <CString::CString(char const*)>:
   1340c:	e59f3034 	ldr	r3, [pc, #52]	@ 13448 <CString::CString(char const*)+0x3c>
   13410:	e92d4070 	push	{r4, r5, r6, lr}
   13414:	e1a04000 	mov	r4, r0
   13418:	e5803000 	str	r3, [r0]
   1341c:	e1a00001 	mov	r0, r1
   13420:	e1a05001 	mov	r5, r1
   13424:	eb000a23 	bl	15cb8 <strlen>
   13428:	e2800001 	add	r0, r0, #1
   1342c:	e5840008 	str	r0, [r4, #8]
   13430:	eb000d52 	bl	16980 <operator new[](unsigned int)>
   13434:	e1a01005 	mov	r1, r5
   13438:	e5840004 	str	r0, [r4, #4]
   1343c:	eb000abe 	bl	15f3c <strcpy>
   13440:	e1a00004 	mov	r0, r4
   13444:	e8bd8070 	pop	{r4, r5, r6, pc}
   13448:	0001e67c 	.word	0x0001e67c

0001344c <CString::CString(CString const&)>:
   1344c:	e92d4070 	push	{r4, r5, r6, lr}
   13450:	e1a04000 	mov	r4, r0
   13454:	e5910004 	ldr	r0, [r1, #4]
   13458:	e59f303c 	ldr	r3, [pc, #60]	@ 1349c <CString::CString(CString const&)+0x50>
   1345c:	e59f603c 	ldr	r6, [pc, #60]	@ 134a0 <CString::CString(CString const&)+0x54>
   13460:	e3500000 	cmp	r0, #0
   13464:	01a00006 	moveq	r0, r6
   13468:	e5843000 	str	r3, [r4]
   1346c:	e1a05001 	mov	r5, r1
   13470:	eb000a10 	bl	15cb8 <strlen>
   13474:	e2800001 	add	r0, r0, #1
   13478:	e5840008 	str	r0, [r4, #8]
   1347c:	eb000d3f 	bl	16980 <operator new[](unsigned int)>
   13480:	e5951004 	ldr	r1, [r5, #4]
   13484:	e5840004 	str	r0, [r4, #4]
   13488:	e3510000 	cmp	r1, #0
   1348c:	01a01006 	moveq	r1, r6
   13490:	eb000aa9 	bl	15f3c <strcpy>
   13494:	e1a00004 	mov	r0, r4
   13498:	e8bd8070 	pop	{r4, r5, r6, pc}
   1349c:	0001e67c 	.word	0x0001e67c
   134a0:	0001d8b0 	.word	0x0001d8b0

000134a4 <CString::CString(CString&&)>:
   134a4:	e3a02000 	mov	r2, #0
   134a8:	e59fc01c 	ldr	ip, [pc, #28]	@ 134cc <CString::CString(CString&&)+0x28>
   134ac:	e580c000 	str	ip, [r0]
   134b0:	e591c008 	ldr	ip, [r1, #8]
   134b4:	e5812008 	str	r2, [r1, #8]
   134b8:	e580c008 	str	ip, [r0, #8]
   134bc:	e591c004 	ldr	ip, [r1, #4]
   134c0:	e5812004 	str	r2, [r1, #4]
   134c4:	e580c004 	str	ip, [r0, #4]
   134c8:	e12fff1e 	bx	lr
   134cc:	0001e67c 	.word	0x0001e67c

000134d0 <CString::operator char const*() const>:
   134d0:	e5900004 	ldr	r0, [r0, #4]
   134d4:	e59f3008 	ldr	r3, [pc, #8]	@ 134e4 <CString::operator char const*() const+0x14>
   134d8:	e3500000 	cmp	r0, #0
   134dc:	01a00003 	moveq	r0, r3
   134e0:	e12fff1e 	bx	lr
   134e4:	0001d8b0 	.word	0x0001d8b0

000134e8 <CString::operator=(char const*)>:
   134e8:	e92d4070 	push	{r4, r5, r6, lr}
   134ec:	e1a04000 	mov	r4, r0
   134f0:	e5900004 	ldr	r0, [r0, #4]
   134f4:	e1a05001 	mov	r5, r1
   134f8:	e3500000 	cmp	r0, #0
   134fc:	0a000000 	beq	13504 <CString::operator=(char const*)+0x1c>
   13500:	eb000d2a 	bl	169b0 <operator delete[](void*)>
   13504:	e1a00005 	mov	r0, r5
   13508:	eb0009ea 	bl	15cb8 <strlen>
   1350c:	e2800001 	add	r0, r0, #1
   13510:	e5840008 	str	r0, [r4, #8]
   13514:	eb000d19 	bl	16980 <operator new[](unsigned int)>
   13518:	e1a01005 	mov	r1, r5
   1351c:	e5840004 	str	r0, [r4, #4]
   13520:	eb000a85 	bl	15f3c <strcpy>
   13524:	e5940004 	ldr	r0, [r4, #4]
   13528:	e8bd8070 	pop	{r4, r5, r6, pc}

0001352c <CString::operator=(CString const&)>:
   1352c:	e92d4070 	push	{r4, r5, r6, lr}
   13530:	e1a04000 	mov	r4, r0
   13534:	e5900004 	ldr	r0, [r0, #4]
   13538:	e1a05001 	mov	r5, r1
   1353c:	e3500000 	cmp	r0, #0
   13540:	0a000000 	beq	13548 <CString::operator=(CString const&)+0x1c>
   13544:	eb000d19 	bl	169b0 <operator delete[](void*)>
   13548:	e5950004 	ldr	r0, [r5, #4]
   1354c:	e59f6030 	ldr	r6, [pc, #48]	@ 13584 <CString::operator=(CString const&)+0x58>
   13550:	e3500000 	cmp	r0, #0
   13554:	01a00006 	moveq	r0, r6
   13558:	eb0009d6 	bl	15cb8 <strlen>
   1355c:	e2800001 	add	r0, r0, #1
   13560:	e5840008 	str	r0, [r4, #8]
   13564:	eb000d05 	bl	16980 <operator new[](unsigned int)>
   13568:	e5840004 	str	r0, [r4, #4]
   1356c:	e5951004 	ldr	r1, [r5, #4]
   13570:	e3510000 	cmp	r1, #0
   13574:	01a01006 	moveq	r1, r6
   13578:	eb000a6f 	bl	15f3c <strcpy>
   1357c:	e1a00004 	mov	r0, r4
   13580:	e8bd8070 	pop	{r4, r5, r6, pc}
   13584:	0001d8b0 	.word	0x0001d8b0

00013588 <CString::operator=(CString&&)>:
   13588:	e92d4070 	push	{r4, r5, r6, lr}
   1358c:	e1a05000 	mov	r5, r0
   13590:	e5900004 	ldr	r0, [r0, #4]
   13594:	e1a04001 	mov	r4, r1
   13598:	e3500000 	cmp	r0, #0
   1359c:	0a000000 	beq	135a4 <CString::operator=(CString&&)+0x1c>
   135a0:	eb000d02 	bl	169b0 <operator delete[](void*)>
   135a4:	e3a03000 	mov	r3, #0
   135a8:	e5941008 	ldr	r1, [r4, #8]
   135ac:	e5942004 	ldr	r2, [r4, #4]
   135b0:	e1a00005 	mov	r0, r5
   135b4:	e5851008 	str	r1, [r5, #8]
   135b8:	e5852004 	str	r2, [r5, #4]
   135bc:	e5843008 	str	r3, [r4, #8]
   135c0:	e5843004 	str	r3, [r4, #4]
   135c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000135c8 <CString::c_str() const>:
   135c8:	e5900004 	ldr	r0, [r0, #4]
   135cc:	e59f3008 	ldr	r3, [pc, #8]	@ 135dc <CString::c_str() const+0x14>
   135d0:	e3500000 	cmp	r0, #0
   135d4:	01a00003 	moveq	r0, r3
   135d8:	e12fff1e 	bx	lr
   135dc:	0001d8b0 	.word	0x0001d8b0

000135e0 <CString::GetLength() const>:
   135e0:	e5900004 	ldr	r0, [r0, #4]
   135e4:	e3500000 	cmp	r0, #0
   135e8:	012fff1e 	bxeq	lr
   135ec:	ea0009b1 	b	15cb8 <strlen>

000135f0 <CString::Append(char const*)>:
   135f0:	e92d4070 	push	{r4, r5, r6, lr}
   135f4:	e3a03001 	mov	r3, #1
   135f8:	e1a04000 	mov	r4, r0
   135fc:	e5900004 	ldr	r0, [r0, #4]
   13600:	e1a06001 	mov	r6, r1
   13604:	e3500000 	cmp	r0, #0
   13608:	e5843008 	str	r3, [r4, #8]
   1360c:	0a000003 	beq	13620 <CString::Append(char const*)+0x30>
   13610:	eb0009a8 	bl	15cb8 <strlen>
   13614:	e5943008 	ldr	r3, [r4, #8]
   13618:	e0833000 	add	r3, r3, r0
   1361c:	e5843008 	str	r3, [r4, #8]
   13620:	e1a00006 	mov	r0, r6
   13624:	eb0009a3 	bl	15cb8 <strlen>
   13628:	e5943008 	ldr	r3, [r4, #8]
   1362c:	e0800003 	add	r0, r0, r3
   13630:	e5840008 	str	r0, [r4, #8]
   13634:	eb000cd1 	bl	16980 <operator new[](unsigned int)>
   13638:	e5941004 	ldr	r1, [r4, #4]
   1363c:	e1a05000 	mov	r5, r0
   13640:	e3510000 	cmp	r1, #0
   13644:	05c01000 	strbeq	r1, [r0]
   13648:	0a000004 	beq	13660 <CString::Append(char const*)+0x70>
   1364c:	eb000a3a 	bl	15f3c <strcpy>
   13650:	e5940004 	ldr	r0, [r4, #4]
   13654:	e3500000 	cmp	r0, #0
   13658:	0a000000 	beq	13660 <CString::Append(char const*)+0x70>
   1365c:	eb000cd3 	bl	169b0 <operator delete[](void*)>
   13660:	e1a01006 	mov	r1, r6
   13664:	e1a00005 	mov	r0, r5
   13668:	eb000a4b 	bl	15f9c <strcat>
   1366c:	e5845004 	str	r5, [r4, #4]
   13670:	e8bd8070 	pop	{r4, r5, r6, pc}

00013674 <CString::operator+=(char const*)>:
   13674:	e92d4010 	push	{r4, lr}
   13678:	e1a04000 	mov	r4, r0
   1367c:	ebffffdb 	bl	135f0 <CString::Append(char const*)>
   13680:	e1a00004 	mov	r0, r4
   13684:	e8bd8010 	pop	{r4, pc}

00013688 <CString::operator+=(CString const&)>:
   13688:	e92d4010 	push	{r4, lr}
   1368c:	e1a04000 	mov	r4, r0
   13690:	e5911004 	ldr	r1, [r1, #4]
   13694:	e59f3010 	ldr	r3, [pc, #16]	@ 136ac <CString::operator+=(CString const&)+0x24>
   13698:	e3510000 	cmp	r1, #0
   1369c:	01a01003 	moveq	r1, r3
   136a0:	ebffffd2 	bl	135f0 <CString::Append(char const*)>
   136a4:	e1a00004 	mov	r0, r4
   136a8:	e8bd8010 	pop	{r4, pc}
   136ac:	0001d8b0 	.word	0x0001d8b0

000136b0 <CString::Append(char)>:
   136b0:	e1a02001 	mov	r2, r1
   136b4:	e3a03000 	mov	r3, #0
   136b8:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   136bc:	e24dd00c 	sub	sp, sp, #12
   136c0:	e28d1004 	add	r1, sp, #4
   136c4:	e5cd2004 	strb	r2, [sp, #4]
   136c8:	e5cd3005 	strb	r3, [sp, #5]
   136cc:	ebffffc7 	bl	135f0 <CString::Append(char const*)>
   136d0:	e28dd00c 	add	sp, sp, #12
   136d4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

000136d8 <CString::operator+=(char)>:
   136d8:	e92d4010 	push	{r4, lr}
   136dc:	e1a02001 	mov	r2, r1
   136e0:	e3a03000 	mov	r3, #0
   136e4:	e1a04000 	mov	r4, r0
   136e8:	e24dd008 	sub	sp, sp, #8
   136ec:	e28d1004 	add	r1, sp, #4
   136f0:	e5cd2004 	strb	r2, [sp, #4]
   136f4:	e5cd3005 	strb	r3, [sp, #5]
   136f8:	ebffffbc 	bl	135f0 <CString::Append(char const*)>
   136fc:	e1a00004 	mov	r0, r4
   13700:	e28dd008 	add	sp, sp, #8
   13704:	e8bd8010 	pop	{r4, pc}

00013708 <CString::Compare(char const*) const>:
   13708:	e5900004 	ldr	r0, [r0, #4]
   1370c:	ea000973 	b	15ce0 <strcmp>

00013710 <CString::Find(char) const>:
   13710:	e5902004 	ldr	r2, [r0, #4]
   13714:	e1d230d0 	ldrsb	r3, [r2]
   13718:	e3530000 	cmp	r3, #0
   1371c:	0a000006 	beq	1373c <CString::Find(char) const+0x2c>
   13720:	e3a00000 	mov	r0, #0
   13724:	e1510003 	cmp	r1, r3
   13728:	012fff1e 	bxeq	lr
   1372c:	e1f230d1 	ldrsb	r3, [r2, #1]!
   13730:	e2800001 	add	r0, r0, #1
   13734:	e3530000 	cmp	r3, #0
   13738:	1afffff9 	bne	13724 <CString::Find(char) const+0x14>
   1373c:	e3e00000 	mvn	r0, #0
   13740:	e12fff1e 	bx	lr

00013744 <CString::Replace(char const*, char const*)>:
   13744:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13748:	e1d160d0 	ldrsb	r6, [r1]
   1374c:	e3560000 	cmp	r6, #0
   13750:	1a000001 	bne	1375c <CString::Replace(char const*, char const*)+0x18>
   13754:	e1a00006 	mov	r0, r6
   13758:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1375c:	e5904004 	ldr	r4, [r0, #4]
   13760:	e1a0a000 	mov	sl, r0
   13764:	e1a00004 	mov	r0, r4
   13768:	e1a05001 	mov	r5, r1
   1376c:	e1a07002 	mov	r7, r2
   13770:	eb000950 	bl	15cb8 <strlen>
   13774:	e2800001 	add	r0, r0, #1
   13778:	eb000c80 	bl	16980 <operator new[](unsigned int)>
   1377c:	e1a01004 	mov	r1, r4
   13780:	e1a08000 	mov	r8, r0
   13784:	eb0009ec 	bl	15f3c <strcpy>
   13788:	e59a0004 	ldr	r0, [sl, #4]
   1378c:	e3500000 	cmp	r0, #0
   13790:	0a000000 	beq	13798 <CString::Replace(char const*, char const*)+0x54>
   13794:	eb000c85 	bl	169b0 <operator delete[](void*)>
   13798:	e3a00040 	mov	r0, #64	@ 0x40
   1379c:	e58a0008 	str	r0, [sl, #8]
   137a0:	eb000c76 	bl	16980 <operator new[](unsigned int)>
   137a4:	e3a06000 	mov	r6, #0
   137a8:	e1a04008 	mov	r4, r8
   137ac:	e58a0004 	str	r0, [sl, #4]
   137b0:	e58a000c 	str	r0, [sl, #12]
   137b4:	e1a00004 	mov	r0, r4
   137b8:	e1d510d0 	ldrsb	r1, [r5]
   137bc:	eb000a1e 	bl	1603c <strchr>
   137c0:	e2509000 	subs	r9, r0, #0
   137c4:	0a000032 	beq	13894 <CString::Replace(char const*, char const*)+0x150>
   137c8:	e1540009 	cmp	r4, r9
   137cc:	21a00004 	movcs	r0, r4
   137d0:	2a00000a 	bcs	13800 <CString::Replace(char const*, char const*)+0xbc>
   137d4:	e3a01001 	mov	r1, #1
   137d8:	e1a0000a 	mov	r0, sl
   137dc:	e0d4b0d1 	ldrsb	fp, [r4], #1
   137e0:	ebfffee9 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   137e4:	e59a300c 	ldr	r3, [sl, #12]
   137e8:	e1590004 	cmp	r9, r4
   137ec:	e2832001 	add	r2, r3, #1
   137f0:	e58a200c 	str	r2, [sl, #12]
   137f4:	e5c3b000 	strb	fp, [r3]
   137f8:	1afffff5 	bne	137d4 <CString::Replace(char const*, char const*)+0x90>
   137fc:	e1a00009 	mov	r0, r9
   13800:	e1d530d1 	ldrsb	r3, [r5, #1]
   13804:	e2851001 	add	r1, r5, #1
   13808:	e3530000 	cmp	r3, #0
   1380c:	e2894001 	add	r4, r9, #1
   13810:	1a000003 	bne	13824 <CString::Replace(char const*, char const*)+0xe0>
   13814:	ea00000f 	b	13858 <CString::Replace(char const*, char const*)+0x114>
   13818:	e1f130d1 	ldrsb	r3, [r1, #1]!
   1381c:	e3530000 	cmp	r3, #0
   13820:	0a00000c 	beq	13858 <CString::Replace(char const*, char const*)+0x114>
   13824:	e0d420d1 	ldrsb	r2, [r4], #1
   13828:	e1520003 	cmp	r2, r3
   1382c:	0afffff9 	beq	13818 <CString::Replace(char const*, char const*)+0xd4>
   13830:	e1a04000 	mov	r4, r0
   13834:	e3a01001 	mov	r1, #1
   13838:	e1a0000a 	mov	r0, sl
   1383c:	e0d490d1 	ldrsb	r9, [r4], #1
   13840:	ebfffed1 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   13844:	e59a300c 	ldr	r3, [sl, #12]
   13848:	e2832001 	add	r2, r3, #1
   1384c:	e58a200c 	str	r2, [sl, #12]
   13850:	e5c39000 	strb	r9, [r3]
   13854:	eaffffd6 	b	137b4 <CString::Replace(char const*, char const*)+0x70>
   13858:	e1a00007 	mov	r0, r7
   1385c:	eb000915 	bl	15cb8 <strlen>
   13860:	e2509000 	subs	r9, r0, #0
   13864:	0a000002 	beq	13874 <CString::Replace(char const*, char const*)+0x130>
   13868:	e1a01009 	mov	r1, r9
   1386c:	e1a0000a 	mov	r0, sl
   13870:	ebfffec5 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   13874:	e1a01007 	mov	r1, r7
   13878:	e59a000c 	ldr	r0, [sl, #12]
   1387c:	eb0009ae 	bl	15f3c <strcpy>
   13880:	e59a300c 	ldr	r3, [sl, #12]
   13884:	e2866001 	add	r6, r6, #1
   13888:	e0833009 	add	r3, r3, r9
   1388c:	e58a300c 	str	r3, [sl, #12]
   13890:	eaffffc7 	b	137b4 <CString::Replace(char const*, char const*)+0x70>
   13894:	e1a00004 	mov	r0, r4
   13898:	eb000906 	bl	15cb8 <strlen>
   1389c:	e2505000 	subs	r5, r0, #0
   138a0:	0a000002 	beq	138b0 <CString::Replace(char const*, char const*)+0x16c>
   138a4:	e1a01005 	mov	r1, r5
   138a8:	e1a0000a 	mov	r0, sl
   138ac:	ebfffeb6 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   138b0:	e1a01004 	mov	r1, r4
   138b4:	e59a000c 	ldr	r0, [sl, #12]
   138b8:	eb00099f 	bl	15f3c <strcpy>
   138bc:	e3a02000 	mov	r2, #0
   138c0:	e59a300c 	ldr	r3, [sl, #12]
   138c4:	e1a00008 	mov	r0, r8
   138c8:	e0831005 	add	r1, r3, r5
   138cc:	e58a100c 	str	r1, [sl, #12]
   138d0:	e7c32005 	strb	r2, [r3, r5]
   138d4:	eb000c35 	bl	169b0 <operator delete[](void*)>
   138d8:	e1a00006 	mov	r0, r6
   138dc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000138e0 <CString::PutChar(char, unsigned int)>:
   138e0:	e92d4070 	push	{r4, r5, r6, lr}
   138e4:	e2524000 	subs	r4, r2, #0
   138e8:	08bd8070 	popeq	{r4, r5, r6, pc}
   138ec:	e1a06001 	mov	r6, r1
   138f0:	e1a01004 	mov	r1, r4
   138f4:	e1a05000 	mov	r5, r0
   138f8:	ebfffea3 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   138fc:	e2442001 	sub	r2, r4, #1
   13900:	e595300c 	ldr	r3, [r5, #12]
   13904:	e2422001 	sub	r2, r2, #1
   13908:	e2830001 	add	r0, r3, #1
   1390c:	e3720001 	cmn	r2, #1
   13910:	e585000c 	str	r0, [r5, #12]
   13914:	e5c36000 	strb	r6, [r3]
   13918:	1afffff8 	bne	13900 <CString::PutChar(char, unsigned int)+0x20>
   1391c:	e8bd8070 	pop	{r4, r5, r6, pc}

00013920 <CString::PutString(char const*)>:
   13920:	e92d4070 	push	{r4, r5, r6, lr}
   13924:	e1a04000 	mov	r4, r0
   13928:	e1a00001 	mov	r0, r1
   1392c:	e1a06001 	mov	r6, r1
   13930:	eb0008e0 	bl	15cb8 <strlen>
   13934:	e2505000 	subs	r5, r0, #0
   13938:	0a000002 	beq	13948 <CString::PutString(char const*)+0x28>
   1393c:	e1a01005 	mov	r1, r5
   13940:	e1a00004 	mov	r0, r4
   13944:	ebfffe90 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   13948:	e1a01006 	mov	r1, r6
   1394c:	e594000c 	ldr	r0, [r4, #12]
   13950:	eb000979 	bl	15f3c <strcpy>
   13954:	e594300c 	ldr	r3, [r4, #12]
   13958:	e0833005 	add	r3, r3, r5
   1395c:	e584300c 	str	r3, [r4, #12]
   13960:	e8bd8070 	pop	{r4, r5, r6, pc}

00013964 <CString::ReserveSpace(unsigned int)>:
   13964:	e3510000 	cmp	r1, #0
   13968:	012fff1e 	bxeq	lr
   1396c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13970:	e990004c 	ldmib	r0, {r2, r3, r6}
   13974:	e0466002 	sub	r6, r6, r2
   13978:	e0811006 	add	r1, r1, r6
   1397c:	e2812001 	add	r2, r1, #1
   13980:	e1520003 	cmp	r2, r3
   13984:	e1a05000 	mov	r5, r0
   13988:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1398c:	e2814041 	add	r4, r1, #65	@ 0x41
   13990:	e1a00004 	mov	r0, r4
   13994:	eb000bf9 	bl	16980 <operator new[](unsigned int)>
   13998:	e3a02000 	mov	r2, #0
   1399c:	e595300c 	ldr	r3, [r5, #12]
   139a0:	e1a07000 	mov	r7, r0
   139a4:	e5c32000 	strb	r2, [r3]
   139a8:	e5951004 	ldr	r1, [r5, #4]
   139ac:	eb000962 	bl	15f3c <strcpy>
   139b0:	e5950004 	ldr	r0, [r5, #4]
   139b4:	e3500000 	cmp	r0, #0
   139b8:	0a000000 	beq	139c0 <CString::ReserveSpace(unsigned int)+0x5c>
   139bc:	eb000bfb 	bl	169b0 <operator delete[](void*)>
   139c0:	e0876006 	add	r6, r7, r6
   139c4:	e5857004 	str	r7, [r5, #4]
   139c8:	e5854008 	str	r4, [r5, #8]
   139cc:	e585600c 	str	r6, [r5, #12]
   139d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000139d4 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   139d4:	e1510002 	cmp	r1, r2
   139d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139dc:	e1a05001 	mov	r5, r1
   139e0:	e1a06002 	mov	r6, r2
   139e4:	e1a09000 	mov	r9, r0
   139e8:	e1a08003 	mov	r8, r3
   139ec:	23a0a001 	movcs	sl, #1
   139f0:	3a000025 	bcc	13a8c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb8>
   139f4:	e00a0a96 	mul	sl, r6, sl
   139f8:	e1a00005 	mov	r0, r5
   139fc:	e1a0100a 	mov	r1, sl
   13a00:	eb0019e8 	bl	1a1a8 <__udivsi3>
   13a04:	e1500006 	cmp	r0, r6
   13a08:	e1a04000 	mov	r4, r0
   13a0c:	2afffff8 	bcs	139f4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   13a10:	e2288001 	eor	r8, r8, #1
   13a14:	e1a08288 	lsl	r8, r8, #5
   13a18:	e2888037 	add	r8, r8, #55	@ 0x37
   13a1c:	e1a07009 	mov	r7, r9
   13a20:	e6ef8078 	uxtb	r8, r8
   13a24:	ea000003 	b	13a38 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x64>
   13a28:	e1a00005 	mov	r0, r5
   13a2c:	e1a0100a 	mov	r1, sl
   13a30:	eb0019dc 	bl	1a1a8 <__udivsi3>
   13a34:	e1a04000 	mov	r4, r0
   13a38:	e1a0100a 	mov	r1, sl
   13a3c:	e1a00005 	mov	r0, r5
   13a40:	eb001a53 	bl	1a394 <__aeabi_uidivmod>
   13a44:	e3540009 	cmp	r4, #9
   13a48:	e6ef4074 	uxtb	r4, r4
   13a4c:	e2843030 	add	r3, r4, #48	@ 0x30
   13a50:	80884004 	addhi	r4, r8, r4
   13a54:	96af4073 	sxtbls	r4, r3
   13a58:	86af4074 	sxtbhi	r4, r4
   13a5c:	e1a0000a 	mov	r0, sl
   13a60:	e1a05001 	mov	r5, r1
   13a64:	e4c74001 	strb	r4, [r7], #1
   13a68:	e1a01006 	mov	r1, r6
   13a6c:	eb0019cd 	bl	1a1a8 <__udivsi3>
   13a70:	e15a0006 	cmp	sl, r6
   13a74:	e1a0a000 	mov	sl, r0
   13a78:	2affffea 	bcs	13a28 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x54>
   13a7c:	e3a03000 	mov	r3, #0
   13a80:	e1a00009 	mov	r0, r9
   13a84:	e5c73000 	strb	r3, [r7]
   13a88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a8c:	e1a04001 	mov	r4, r1
   13a90:	e3a0a001 	mov	sl, #1
   13a94:	eaffffdd 	b	13a10 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00013a98 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   13a98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a9c:	e24dd014 	sub	sp, sp, #20
   13aa0:	e59d8038 	ldr	r8, [sp, #56]	@ 0x38
   13aa4:	e58d3004 	str	r3, [sp, #4]
   13aa8:	e1520008 	cmp	r2, r8
   13aac:	e2d33000 	sbcs	r3, r3, #0
   13ab0:	e3a05000 	mov	r5, #0
   13ab4:	e1a09002 	mov	r9, r2
   13ab8:	e1a0a000 	mov	sl, r0
   13abc:	23a06001 	movcs	r6, #1
   13ac0:	e5ddb03c 	ldrb	fp, [sp, #60]	@ 0x3c
   13ac4:	259d4004 	ldrcs	r4, [sp, #4]
   13ac8:	3a00003f 	bcc	13bcc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x134>
   13acc:	e0030598 	mul	r3, r8, r5
   13ad0:	e0856896 	umull	r6, r5, r6, r8
   13ad4:	e0835005 	add	r5, r3, r5
   13ad8:	e1a03005 	mov	r3, r5
   13adc:	e1a00009 	mov	r0, r9
   13ae0:	e1a01004 	mov	r1, r4
   13ae4:	e1a02006 	mov	r2, r6
   13ae8:	eb001a32 	bl	1a3b8 <__aeabi_uldivmod>
   13aec:	e1500008 	cmp	r0, r8
   13af0:	e2d13000 	sbcs	r3, r1, #0
   13af4:	2afffff4 	bcs	13acc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x34>
   13af8:	e1a04000 	mov	r4, r0
   13afc:	e1a07001 	mov	r7, r1
   13b00:	e22bb001 	eor	fp, fp, #1
   13b04:	e1a0b28b 	lsl	fp, fp, #5
   13b08:	e28bb037 	add	fp, fp, #55	@ 0x37
   13b0c:	e6ef307b 	uxtb	r3, fp
   13b10:	e58d3008 	str	r3, [sp, #8]
   13b14:	e1a0b00a 	mov	fp, sl
   13b18:	e58da00c 	str	sl, [sp, #12]
   13b1c:	e58d8038 	str	r8, [sp, #56]	@ 0x38
   13b20:	ea000006 	b	13b40 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xa8>
   13b24:	e1a0000a 	mov	r0, sl
   13b28:	e1a01008 	mov	r1, r8
   13b2c:	e1a02006 	mov	r2, r6
   13b30:	e1a03005 	mov	r3, r5
   13b34:	eb001a1f 	bl	1a3b8 <__aeabi_uldivmod>
   13b38:	e1a04000 	mov	r4, r0
   13b3c:	e1a07001 	mov	r7, r1
   13b40:	e1a03005 	mov	r3, r5
   13b44:	e1a02006 	mov	r2, r6
   13b48:	e1a00009 	mov	r0, r9
   13b4c:	e59d1004 	ldr	r1, [sp, #4]
   13b50:	eb001a18 	bl	1a3b8 <__aeabi_uldivmod>
   13b54:	e1a08003 	mov	r8, r3
   13b58:	e59d3008 	ldr	r3, [sp, #8]
   13b5c:	e354000a 	cmp	r4, #10
   13b60:	e6ef4074 	uxtb	r4, r4
   13b64:	e2d77000 	sbcs	r7, r7, #0
   13b68:	e2841030 	add	r1, r4, #48	@ 0x30
   13b6c:	e0834004 	add	r4, r3, r4
   13b70:	e6af1071 	sxtb	r1, r1
   13b74:	26af1074 	sxtbcs	r1, r4
   13b78:	e1a0a002 	mov	sl, r2
   13b7c:	e3a03000 	mov	r3, #0
   13b80:	e1a00006 	mov	r0, r6
   13b84:	e4cb1001 	strb	r1, [fp], #1
   13b88:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
   13b8c:	e1a01005 	mov	r1, r5
   13b90:	e58d8004 	str	r8, [sp, #4]
   13b94:	eb001a07 	bl	1a3b8 <__aeabi_uldivmod>
   13b98:	e59d3038 	ldr	r3, [sp, #56]	@ 0x38
   13b9c:	e1a0900a 	mov	r9, sl
   13ba0:	e1560003 	cmp	r6, r3
   13ba4:	e2d55000 	sbcs	r5, r5, #0
   13ba8:	e1a06000 	mov	r6, r0
   13bac:	e1a05001 	mov	r5, r1
   13bb0:	2affffdb 	bcs	13b24 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x8c>
   13bb4:	e59da00c 	ldr	sl, [sp, #12]
   13bb8:	e3a03000 	mov	r3, #0
   13bbc:	e1a0000a 	mov	r0, sl
   13bc0:	e5cb3000 	strb	r3, [fp]
   13bc4:	e28dd014 	add	sp, sp, #20
   13bc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bcc:	e1a04002 	mov	r4, r2
   13bd0:	e3a06001 	mov	r6, #1
   13bd4:	e59d7004 	ldr	r7, [sp, #4]
   13bd8:	eaffffc8 	b	13b00 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x68>

00013bdc <CString::ftoa(char*, double, unsigned int)>:
   13bdc:	eeb50bc0 	vcmpe.f64	d0, #0.0
   13be0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   13be4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be8:	ed9f7b98 	vldr	d7, [pc, #608]	@ 13e50 <CString::ftoa(char*, double, unsigned int)+0x274>
   13bec:	ed2d8b02 	vpush	{d8}
   13bf0:	eeb08b40 	vmov.f64	d8, d0
   13bf4:	4eb18b40 	vnegmi.f64	d8, d0
   13bf8:	43a0302d 	movmi	r3, #45	@ 0x2d
   13bfc:	e1a0a000 	mov	sl, r0
   13c00:	eeb48bc7 	vcmpe.f64	d8, d7
   13c04:	e24dd01c 	sub	sp, sp, #28
   13c08:	44ca3001 	strbmi	r3, [sl], #1
   13c0c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   13c10:	e1a08000 	mov	r8, r0
   13c14:	e58d1004 	str	r1, [sp, #4]
   13c18:	ca00007b 	bgt	13e0c <CString::ftoa(char*, double, unsigned int)+0x230>
   13c1c:	eefc7bc8 	vcvt.u32.f64	s15, d8
   13c20:	ee176a90 	vmov	r6, s15
   13c24:	e3560009 	cmp	r6, #9
   13c28:	83a0b001 	movhi	fp, #1
   13c2c:	9a00007d 	bls	13e28 <CString::ftoa(char*, double, unsigned int)+0x24c>
   13c30:	e08bb10b 	add	fp, fp, fp, lsl #2
   13c34:	e1a0b08b 	lsl	fp, fp, #1
   13c38:	e1a0100b 	mov	r1, fp
   13c3c:	e1a00006 	mov	r0, r6
   13c40:	eb001958 	bl	1a1a8 <__udivsi3>
   13c44:	e3500009 	cmp	r0, #9
   13c48:	e1a04000 	mov	r4, r0
   13c4c:	8afffff7 	bhi	13c30 <CString::ftoa(char*, double, unsigned int)+0x54>
   13c50:	e1a0500a 	mov	r5, sl
   13c54:	e1a09006 	mov	r9, r6
   13c58:	e59f7200 	ldr	r7, [pc, #512]	@ 13e60 <CString::ftoa(char*, double, unsigned int)+0x284>
   13c5c:	ea000003 	b	13c70 <CString::ftoa(char*, double, unsigned int)+0x94>
   13c60:	e1a0100b 	mov	r1, fp
   13c64:	e1a00009 	mov	r0, r9
   13c68:	eb00194e 	bl	1a1a8 <__udivsi3>
   13c6c:	e1a04000 	mov	r4, r0
   13c70:	e1a0100b 	mov	r1, fp
   13c74:	e1a00009 	mov	r0, r9
   13c78:	eb0019c5 	bl	1a394 <__aeabi_uidivmod>
   13c7c:	e3540009 	cmp	r4, #9
   13c80:	e6ef4074 	uxtb	r4, r4
   13c84:	e2842030 	add	r2, r4, #48	@ 0x30
   13c88:	96af4072 	sxtbls	r4, r2
   13c8c:	e1a09001 	mov	r9, r1
   13c90:	e0812b97 	umull	r2, r1, r7, fp
   13c94:	82844057 	addhi	r4, r4, #87	@ 0x57
   13c98:	86af4074 	sxtbhi	r4, r4
   13c9c:	e35b0009 	cmp	fp, #9
   13ca0:	e4c54001 	strb	r4, [r5], #1
   13ca4:	e1a0b1a1 	lsr	fp, r1, #3
   13ca8:	8affffec 	bhi	13c60 <CString::ftoa(char*, double, unsigned int)+0x84>
   13cac:	e3a03000 	mov	r3, #0
   13cb0:	e59d4004 	ldr	r4, [sp, #4]
   13cb4:	e5c53000 	strb	r3, [r5]
   13cb8:	e3540000 	cmp	r4, #0
   13cbc:	1a000003 	bne	13cd0 <CString::ftoa(char*, double, unsigned int)+0xf4>
   13cc0:	e1a00008 	mov	r0, r8
   13cc4:	e28dd01c 	add	sp, sp, #28
   13cc8:	ecbd8b02 	vpop	{d8}
   13ccc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cd0:	e1a0000a 	mov	r0, sl
   13cd4:	eb0007f7 	bl	15cb8 <strlen>
   13cd8:	e3a0302e 	mov	r3, #46	@ 0x2e
   13cdc:	e3540009 	cmp	r4, #9
   13ce0:	e7ca3000 	strb	r3, [sl, r0]
   13ce4:	e08a3000 	add	r3, sl, r0
   13ce8:	31a0a004 	movcc	sl, r4
   13cec:	23a0a009 	movcs	sl, #9
   13cf0:	e3540001 	cmp	r4, #1
   13cf4:	e58d3004 	str	r3, [sp, #4]
   13cf8:	e2835001 	add	r5, r3, #1
   13cfc:	0a00004e 	beq	13e3c <CString::ftoa(char*, double, unsigned int)+0x260>
   13d00:	e3a02002 	mov	r2, #2
   13d04:	e3a0300a 	mov	r3, #10
   13d08:	e2822001 	add	r2, r2, #1
   13d0c:	e0833103 	add	r3, r3, r3, lsl #2
   13d10:	e15a0002 	cmp	sl, r2
   13d14:	e1a03083 	lsl	r3, r3, #1
   13d18:	2afffffa 	bcs	13d08 <CString::ftoa(char*, double, unsigned int)+0x12c>
   13d1c:	ee073a90 	vmov	s15, r3
   13d20:	eeb87b67 	vcvt.f64.u32	d7, s15
   13d24:	ee066a90 	vmov	s13, r6
   13d28:	eeb86b66 	vcvt.f64.u32	d6, s13
   13d2c:	ee388b46 	vsub.f64	d8, d8, d6
   13d30:	ee288b07 	vmul.f64	d8, d8, d7
   13d34:	eefc7bc8 	vcvt.u32.f64	s15, d8
   13d38:	ee177a90 	vmov	r7, s15
   13d3c:	e3570009 	cmp	r7, #9
   13d40:	83a0b001 	movhi	fp, #1
   13d44:	9a00003e 	bls	13e44 <CString::ftoa(char*, double, unsigned int)+0x268>
   13d48:	e08bb10b 	add	fp, fp, fp, lsl #2
   13d4c:	e1a0b08b 	lsl	fp, fp, #1
   13d50:	e1a0100b 	mov	r1, fp
   13d54:	e1a00007 	mov	r0, r7
   13d58:	eb001912 	bl	1a1a8 <__udivsi3>
   13d5c:	e3500009 	cmp	r0, #9
   13d60:	e1a04000 	mov	r4, r0
   13d64:	8afffff7 	bhi	13d48 <CString::ftoa(char*, double, unsigned int)+0x16c>
   13d68:	e59f90f0 	ldr	r9, [pc, #240]	@ 13e60 <CString::ftoa(char*, double, unsigned int)+0x284>
   13d6c:	e28d600c 	add	r6, sp, #12
   13d70:	ea000003 	b	13d84 <CString::ftoa(char*, double, unsigned int)+0x1a8>
   13d74:	e1a0100b 	mov	r1, fp
   13d78:	e1a00007 	mov	r0, r7
   13d7c:	eb001909 	bl	1a1a8 <__udivsi3>
   13d80:	e1a04000 	mov	r4, r0
   13d84:	e1a0100b 	mov	r1, fp
   13d88:	e1a00007 	mov	r0, r7
   13d8c:	eb001980 	bl	1a394 <__aeabi_uidivmod>
   13d90:	e3540009 	cmp	r4, #9
   13d94:	e6ef4074 	uxtb	r4, r4
   13d98:	e2842030 	add	r2, r4, #48	@ 0x30
   13d9c:	96af4072 	sxtbls	r4, r2
   13da0:	e1a07001 	mov	r7, r1
   13da4:	e0812b99 	umull	r2, r1, r9, fp
   13da8:	82844057 	addhi	r4, r4, #87	@ 0x57
   13dac:	86af4074 	sxtbhi	r4, r4
   13db0:	e35b0009 	cmp	fp, #9
   13db4:	e4c64001 	strb	r4, [r6], #1
   13db8:	e1a0b1a1 	lsr	fp, r1, #3
   13dbc:	8affffec 	bhi	13d74 <CString::ftoa(char*, double, unsigned int)+0x198>
   13dc0:	e3a03000 	mov	r3, #0
   13dc4:	e28d000c 	add	r0, sp, #12
   13dc8:	e5c63000 	strb	r3, [r6]
   13dcc:	eb0007b9 	bl	15cb8 <strlen>
   13dd0:	e05aa000 	subs	sl, sl, r0
   13dd4:	0a000016 	beq	13e34 <CString::ftoa(char*, double, unsigned int)+0x258>
   13dd8:	e59d3004 	ldr	r3, [sp, #4]
   13ddc:	e28aa001 	add	sl, sl, #1
   13de0:	e083000a 	add	r0, r3, sl
   13de4:	e3a03030 	mov	r3, #48	@ 0x30
   13de8:	e4c53001 	strb	r3, [r5], #1
   13dec:	e1500005 	cmp	r0, r5
   13df0:	1afffffc 	bne	13de8 <CString::ftoa(char*, double, unsigned int)+0x20c>
   13df4:	e28d100c 	add	r1, sp, #12
   13df8:	eb00084f 	bl	15f3c <strcpy>
   13dfc:	e1a00008 	mov	r0, r8
   13e00:	e28dd01c 	add	sp, sp, #28
   13e04:	ecbd8b02 	vpop	{d8}
   13e08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e0c:	e1a0000a 	mov	r0, sl
   13e10:	e59f104c 	ldr	r1, [pc, #76]	@ 13e64 <CString::ftoa(char*, double, unsigned int)+0x288>
   13e14:	eb000848 	bl	15f3c <strcpy>
   13e18:	e1a00008 	mov	r0, r8
   13e1c:	e28dd01c 	add	sp, sp, #28
   13e20:	ecbd8b02 	vpop	{d8}
   13e24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	e1a04006 	mov	r4, r6
   13e2c:	e3a0b001 	mov	fp, #1
   13e30:	eaffff86 	b	13c50 <CString::ftoa(char*, double, unsigned int)+0x74>
   13e34:	e1a00005 	mov	r0, r5
   13e38:	eaffffed 	b	13df4 <CString::ftoa(char*, double, unsigned int)+0x218>
   13e3c:	ed9f7b05 	vldr	d7, [pc, #20]	@ 13e58 <CString::ftoa(char*, double, unsigned int)+0x27c>
   13e40:	eaffffb7 	b	13d24 <CString::ftoa(char*, double, unsigned int)+0x148>
   13e44:	e1a04007 	mov	r4, r7
   13e48:	e3a0b001 	mov	fp, #1
   13e4c:	eaffffc5 	b	13d68 <CString::ftoa(char*, double, unsigned int)+0x18c>
   13e50:	ffe00000 	.word	0xffe00000
   13e54:	41efffff 	.word	0x41efffff
   13e58:	00000000 	.word	0x00000000
   13e5c:	40240000 	.word	0x40240000
   13e60:	cccccccd 	.word	0xcccccccd
   13e64:	0001d528 	.word	0x0001d528

00013e68 <CString::FormatV(char const*, std::__va_list)>:
   13e68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e6c:	e24dd05c 	sub	sp, sp, #92	@ 0x5c
   13e70:	e58d0020 	str	r0, [sp, #32]
   13e74:	e5900004 	ldr	r0, [r0, #4]
   13e78:	e1a0b001 	mov	fp, r1
   13e7c:	e3500000 	cmp	r0, #0
   13e80:	e58d2014 	str	r2, [sp, #20]
   13e84:	0a000000 	beq	13e8c <CString::FormatV(char const*, std::__va_list)+0x24>
   13e88:	eb000ac8 	bl	169b0 <operator delete[](void*)>
   13e8c:	e3a00040 	mov	r0, #64	@ 0x40
   13e90:	e59da020 	ldr	sl, [sp, #32]
   13e94:	e58a0008 	str	r0, [sl, #8]
   13e98:	eb000ab8 	bl	16980 <operator new[](unsigned int)>
   13e9c:	e58a0004 	str	r0, [sl, #4]
   13ea0:	e58a000c 	str	r0, [sl, #12]
   13ea4:	e1db40d0 	ldrsb	r4, [fp]
   13ea8:	e3540000 	cmp	r4, #0
   13eac:	0a000064 	beq	14044 <CString::FormatV(char const*, std::__va_list)+0x1dc>
   13eb0:	e3540025 	cmp	r4, #37	@ 0x25
   13eb4:	1a000055 	bne	14010 <CString::FormatV(char const*, std::__va_list)+0x1a8>
   13eb8:	e1db30d1 	ldrsb	r3, [fp, #1]
   13ebc:	e3530025 	cmp	r3, #37	@ 0x25
   13ec0:	0a000063 	beq	14054 <CString::FormatV(char const*, std::__va_list)+0x1ec>
   13ec4:	e3530023 	cmp	r3, #35	@ 0x23
   13ec8:	01db30d2 	ldrsbeq	r3, [fp, #2]
   13ecc:	13a00000 	movne	r0, #0
   13ed0:	028bb002 	addeq	fp, fp, #2
   13ed4:	03a00001 	moveq	r0, #1
   13ed8:	128bb001 	addne	fp, fp, #1
   13edc:	e353002d 	cmp	r3, #45	@ 0x2d
   13ee0:	03a02001 	moveq	r2, #1
   13ee4:	13a02000 	movne	r2, #0
   13ee8:	01db30d1 	ldrsbeq	r3, [fp, #1]
   13eec:	058d2018 	streq	r2, [sp, #24]
   13ef0:	008bb002 	addeq	fp, fp, r2
   13ef4:	158d2018 	strne	r2, [sp, #24]
   13ef8:	e3530030 	cmp	r3, #48	@ 0x30
   13efc:	03a02001 	moveq	r2, #1
   13f00:	13a02000 	movne	r2, #0
   13f04:	01db30d1 	ldrsbeq	r3, [fp, #1]
   13f08:	e58d201c 	str	r2, [sp, #28]
   13f0c:	e2432030 	sub	r2, r3, #48	@ 0x30
   13f10:	e6ef2072 	uxtb	r2, r2
   13f14:	028bb001 	addeq	fp, fp, #1
   13f18:	e3520009 	cmp	r2, #9
   13f1c:	e3a04000 	mov	r4, #0
   13f20:	8a000007 	bhi	13f44 <CString::FormatV(char const*, std::__va_list)+0xdc>
   13f24:	e0844104 	add	r4, r4, r4, lsl #2
   13f28:	e0834084 	add	r4, r3, r4, lsl #1
   13f2c:	e1fb30d1 	ldrsb	r3, [fp, #1]!
   13f30:	e2444030 	sub	r4, r4, #48	@ 0x30
   13f34:	e2432030 	sub	r2, r3, #48	@ 0x30
   13f38:	e6ef2072 	uxtb	r2, r2
   13f3c:	e3520009 	cmp	r2, #9
   13f40:	9afffff7 	bls	13f24 <CString::FormatV(char const*, std::__va_list)+0xbc>
   13f44:	e353002e 	cmp	r3, #46	@ 0x2e
   13f48:	0a0001cb 	beq	1467c <CString::FormatV(char const*, std::__va_list)+0x814>
   13f4c:	e3a01006 	mov	r1, #6
   13f50:	e1db20d0 	ldrsb	r2, [fp]
   13f54:	e352006c 	cmp	r2, #108	@ 0x6c
   13f58:	13a03000 	movne	r3, #0
   13f5c:	1a000006 	bne	13f7c <CString::FormatV(char const*, std::__va_list)+0x114>
   13f60:	e1db20d1 	ldrsb	r2, [fp, #1]
   13f64:	e352006c 	cmp	r2, #108	@ 0x6c
   13f68:	03a03001 	moveq	r3, #1
   13f6c:	13a03000 	movne	r3, #0
   13f70:	01db20d2 	ldrsbeq	r2, [fp, #2]
   13f74:	028bb001 	addeq	fp, fp, #1
   13f78:	e28bb001 	add	fp, fp, #1
   13f7c:	e242c058 	sub	ip, r2, #88	@ 0x58
   13f80:	e35c0020 	cmp	ip, #32
   13f84:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   13f88:	ea00003a 	b	14078 <CString::FormatV(char const*, std::__va_list)+0x210>
   13f8c:	000140a8 	.word	0x000140a8
   13f90:	00014078 	.word	0x00014078
   13f94:	00014078 	.word	0x00014078
   13f98:	00014078 	.word	0x00014078
   13f9c:	00014078 	.word	0x00014078
   13fa0:	00014078 	.word	0x00014078
   13fa4:	00014078 	.word	0x00014078
   13fa8:	00014078 	.word	0x00014078
   13fac:	00014078 	.word	0x00014078
   13fb0:	00014078 	.word	0x00014078
   13fb4:	00014078 	.word	0x00014078
   13fb8:	00014440 	.word	0x00014440
   13fbc:	000142ac 	.word	0x000142ac
   13fc0:	00014078 	.word	0x00014078
   13fc4:	00014488 	.word	0x00014488
   13fc8:	00014078 	.word	0x00014078
   13fcc:	00014078 	.word	0x00014078
   13fd0:	000142ac 	.word	0x000142ac
   13fd4:	00014078 	.word	0x00014078
   13fd8:	00014078 	.word	0x00014078
   13fdc:	00014078 	.word	0x00014078
   13fe0:	00014078 	.word	0x00014078
   13fe4:	00014078 	.word	0x00014078
   13fe8:	0001456c 	.word	0x0001456c
   13fec:	000140a8 	.word	0x000140a8
   13ff0:	00014078 	.word	0x00014078
   13ff4:	00014078 	.word	0x00014078
   13ff8:	0001450c 	.word	0x0001450c
   13ffc:	00014078 	.word	0x00014078
   14000:	000148f0 	.word	0x000148f0
   14004:	00014078 	.word	0x00014078
   14008:	00014078 	.word	0x00014078
   1400c:	000140a8 	.word	0x000140a8
   14010:	e3a01001 	mov	r1, #1
   14014:	e1a0000a 	mov	r0, sl
   14018:	ebfffcdb 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1401c:	e59a300c 	ldr	r3, [sl, #12]
   14020:	e2832001 	add	r2, r3, #1
   14024:	e58a200c 	str	r2, [sl, #12]
   14028:	e5c34000 	strb	r4, [r3]
   1402c:	e28bb001 	add	fp, fp, #1
   14030:	e1db40d0 	ldrsb	r4, [fp]
   14034:	e3540000 	cmp	r4, #0
   14038:	1affff9c 	bne	13eb0 <CString::FormatV(char const*, std::__va_list)+0x48>
   1403c:	e59d3020 	ldr	r3, [sp, #32]
   14040:	e593000c 	ldr	r0, [r3, #12]
   14044:	e3a03000 	mov	r3, #0
   14048:	e5c03000 	strb	r3, [r0]
   1404c:	e28dd05c 	add	sp, sp, #92	@ 0x5c
   14050:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14054:	e3a01001 	mov	r1, #1
   14058:	e1a0000a 	mov	r0, sl
   1405c:	ebfffcca 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14060:	e59a300c 	ldr	r3, [sl, #12]
   14064:	e28bb002 	add	fp, fp, #2
   14068:	e2832001 	add	r2, r3, #1
   1406c:	e58a200c 	str	r2, [sl, #12]
   14070:	e5c34000 	strb	r4, [r3]
   14074:	eaffffed 	b	14030 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   14078:	e3a01001 	mov	r1, #1
   1407c:	e1a0000a 	mov	r0, sl
   14080:	ebfffcc1 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14084:	e3a01001 	mov	r1, #1
   14088:	e3a02025 	mov	r2, #37	@ 0x25
   1408c:	e59a300c 	ldr	r3, [sl, #12]
   14090:	e1a0000a 	mov	r0, sl
   14094:	e083c001 	add	ip, r3, r1
   14098:	e58ac00c 	str	ip, [sl, #12]
   1409c:	e5c32000 	strb	r2, [r3]
   140a0:	e1db40d0 	ldrsb	r4, [fp]
   140a4:	eaffffdb 	b	14018 <CString::FormatV(char const*, std::__va_list)+0x1b0>
   140a8:	e3500000 	cmp	r0, #0
   140ac:	03a09010 	moveq	r9, #16
   140b0:	1a0001f5 	bne	1488c <CString::FormatV(char const*, std::__va_list)+0xa24>
   140b4:	e3530000 	cmp	r3, #0
   140b8:	e59d3014 	ldr	r3, [sp, #20]
   140bc:	0a00013c 	beq	145b4 <CString::FormatV(char const*, std::__va_list)+0x74c>
   140c0:	e2833007 	add	r3, r3, #7
   140c4:	e3c33007 	bic	r3, r3, #7
   140c8:	e5938004 	ldr	r8, [r3, #4]
   140cc:	e4935008 	ldr	r5, [r3], #8
   140d0:	e3a06000 	mov	r6, #0
   140d4:	e1550009 	cmp	r5, r9
   140d8:	e58d3014 	str	r3, [sp, #20]
   140dc:	e2d83000 	sbcs	r3, r8, #0
   140e0:	e58d8008 	str	r8, [sp, #8]
   140e4:	e58d5004 	str	r5, [sp, #4]
   140e8:	3a0002c1 	bcc	14bf4 <CString::FormatV(char const*, std::__va_list)+0xd8c>
   140ec:	e3a07001 	mov	r7, #1
   140f0:	e58d400c 	str	r4, [sp, #12]
   140f4:	e1a04007 	mov	r4, r7
   140f8:	e1a07002 	mov	r7, r2
   140fc:	e0030699 	mul	r3, r9, r6
   14100:	e0864994 	umull	r4, r6, r4, r9
   14104:	e0836006 	add	r6, r3, r6
   14108:	e1a03006 	mov	r3, r6
   1410c:	e1a02004 	mov	r2, r4
   14110:	e1a00005 	mov	r0, r5
   14114:	e1a01008 	mov	r1, r8
   14118:	eb0018a6 	bl	1a3b8 <__aeabi_uldivmod>
   1411c:	e1500009 	cmp	r0, r9
   14120:	e2d13000 	sbcs	r3, r1, #0
   14124:	2afffff4 	bcs	140fc <CString::FormatV(char const*, std::__va_list)+0x294>
   14128:	e1a05000 	mov	r5, r0
   1412c:	e1a08001 	mov	r8, r1
   14130:	e1a02007 	mov	r2, r7
   14134:	e1a07004 	mov	r7, r4
   14138:	e59d400c 	ldr	r4, [sp, #12]
   1413c:	e2522058 	subs	r2, r2, #88	@ 0x58
   14140:	13a02001 	movne	r2, #1
   14144:	e28d3034 	add	r3, sp, #52	@ 0x34
   14148:	e1a0c003 	mov	ip, r3
   1414c:	e1a02282 	lsl	r2, r2, #5
   14150:	e58d300c 	str	r3, [sp, #12]
   14154:	e2823037 	add	r3, r2, #55	@ 0x37
   14158:	e58da028 	str	sl, [sp, #40]	@ 0x28
   1415c:	e58db02c 	str	fp, [sp, #44]	@ 0x2c
   14160:	e1a0a009 	mov	sl, r9
   14164:	e1a0b00c 	mov	fp, ip
   14168:	e58d3010 	str	r3, [sp, #16]
   1416c:	e58d4024 	str	r4, [sp, #36]	@ 0x24
   14170:	ea000006 	b	14190 <CString::FormatV(char const*, std::__va_list)+0x328>
   14174:	e1a00009 	mov	r0, r9
   14178:	e1a01004 	mov	r1, r4
   1417c:	e1a02007 	mov	r2, r7
   14180:	e1a03006 	mov	r3, r6
   14184:	eb00188b 	bl	1a3b8 <__aeabi_uldivmod>
   14188:	e1a05000 	mov	r5, r0
   1418c:	e1a08001 	mov	r8, r1
   14190:	e99d0003 	ldmib	sp, {r0, r1}
   14194:	e1a03006 	mov	r3, r6
   14198:	e1a02007 	mov	r2, r7
   1419c:	eb001885 	bl	1a3b8 <__aeabi_uldivmod>
   141a0:	e1a09002 	mov	r9, r2
   141a4:	e1a04003 	mov	r4, r3
   141a8:	e59d3010 	ldr	r3, [sp, #16]
   141ac:	e355000a 	cmp	r5, #10
   141b0:	e6ef5075 	uxtb	r5, r5
   141b4:	e2d88000 	sbcs	r8, r8, #0
   141b8:	e2851030 	add	r1, r5, #48	@ 0x30
   141bc:	e0835005 	add	r5, r3, r5
   141c0:	e6af1071 	sxtb	r1, r1
   141c4:	26af1075 	sxtbcs	r1, r5
   141c8:	e1a00007 	mov	r0, r7
   141cc:	e4cb1001 	strb	r1, [fp], #1
   141d0:	e3a03000 	mov	r3, #0
   141d4:	e1a01006 	mov	r1, r6
   141d8:	e1a0200a 	mov	r2, sl
   141dc:	e58d9004 	str	r9, [sp, #4]
   141e0:	e58d4008 	str	r4, [sp, #8]
   141e4:	eb001873 	bl	1a3b8 <__aeabi_uldivmod>
   141e8:	e157000a 	cmp	r7, sl
   141ec:	e2d66000 	sbcs	r6, r6, #0
   141f0:	e1a07000 	mov	r7, r0
   141f4:	e1a06001 	mov	r6, r1
   141f8:	2affffdd 	bcs	14174 <CString::FormatV(char const*, std::__va_list)+0x30c>
   141fc:	e1a0c00b 	mov	ip, fp
   14200:	e3a03000 	mov	r3, #0
   14204:	e59d4024 	ldr	r4, [sp, #36]	@ 0x24
   14208:	e59da028 	ldr	sl, [sp, #40]	@ 0x28
   1420c:	e59db02c 	ldr	fp, [sp, #44]	@ 0x2c
   14210:	e5cc3000 	strb	r3, [ip]
   14214:	e59d000c 	ldr	r0, [sp, #12]
   14218:	eb0006a6 	bl	15cb8 <strlen>
   1421c:	e59d3018 	ldr	r3, [sp, #24]
   14220:	e1a05000 	mov	r5, r0
   14224:	e3530000 	cmp	r3, #0
   14228:	1a000123 	bne	146bc <CString::FormatV(char const*, std::__va_list)+0x854>
   1422c:	e1540000 	cmp	r4, r0
   14230:	9a00000f 	bls	14274 <CString::FormatV(char const*, std::__va_list)+0x40c>
   14234:	e59d301c 	ldr	r3, [sp, #28]
   14238:	e0444000 	sub	r4, r4, r0
   1423c:	e3530000 	cmp	r3, #0
   14240:	e1a01004 	mov	r1, r4
   14244:	e1a0000a 	mov	r0, sl
   14248:	13a05030 	movne	r5, #48	@ 0x30
   1424c:	03a05020 	moveq	r5, #32
   14250:	ebfffc4d 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14254:	e2443001 	sub	r3, r4, #1
   14258:	e59a200c 	ldr	r2, [sl, #12]
   1425c:	e2433001 	sub	r3, r3, #1
   14260:	e2821001 	add	r1, r2, #1
   14264:	e3730001 	cmn	r3, #1
   14268:	e58a100c 	str	r1, [sl, #12]
   1426c:	e5c25000 	strb	r5, [r2]
   14270:	1afffff8 	bne	14258 <CString::FormatV(char const*, std::__va_list)+0x3f0>
   14274:	e59d000c 	ldr	r0, [sp, #12]
   14278:	eb00068e 	bl	15cb8 <strlen>
   1427c:	e2504000 	subs	r4, r0, #0
   14280:	0a000002 	beq	14290 <CString::FormatV(char const*, std::__va_list)+0x428>
   14284:	e1a01004 	mov	r1, r4
   14288:	e1a0000a 	mov	r0, sl
   1428c:	ebfffc3e 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14290:	e59d100c 	ldr	r1, [sp, #12]
   14294:	e59a000c 	ldr	r0, [sl, #12]
   14298:	eb000727 	bl	15f3c <strcpy>
   1429c:	e59a300c 	ldr	r3, [sl, #12]
   142a0:	e0833004 	add	r3, r3, r4
   142a4:	e58a300c 	str	r3, [sl, #12]
   142a8:	eaffff5f 	b	1402c <CString::FormatV(char const*, std::__va_list)+0x1c4>
   142ac:	e3530000 	cmp	r3, #0
   142b0:	e59d2014 	ldr	r2, [sp, #20]
   142b4:	0a00011d 	beq	14730 <CString::FormatV(char const*, std::__va_list)+0x8c8>
   142b8:	e2822007 	add	r2, r2, #7
   142bc:	e3c22007 	bic	r2, r2, #7
   142c0:	e5921004 	ldr	r1, [r2, #4]
   142c4:	e4928008 	ldr	r8, [r2], #8
   142c8:	e3510000 	cmp	r1, #0
   142cc:	a3a03000 	movge	r3, #0
   142d0:	e58d2014 	str	r2, [sp, #20]
   142d4:	aa000001 	bge	142e0 <CString::FormatV(char const*, std::__va_list)+0x478>
   142d8:	e2788000 	rsbs	r8, r8, #0
   142dc:	e2e11000 	rsc	r1, r1, #0
   142e0:	e358000a 	cmp	r8, #10
   142e4:	e2d12000 	sbcs	r2, r1, #0
   142e8:	a3a09001 	movge	r9, #1
   142ec:	a3a05000 	movge	r5, #0
   142f0:	a1a07003 	movge	r7, r3
   142f4:	a1a06001 	movge	r6, r1
   142f8:	e58d8004 	str	r8, [sp, #4]
   142fc:	e58d1008 	str	r1, [sp, #8]
   14300:	ba000249 	blt	14c2c <CString::FormatV(char const*, std::__va_list)+0xdc4>
   14304:	e1a01109 	lsl	r1, r9, #2
   14308:	e1a03105 	lsl	r3, r5, #2
   1430c:	e0911009 	adds	r1, r1, r9
   14310:	e1833f29 	orr	r3, r3, r9, lsr #30
   14314:	e0a53003 	adc	r3, r5, r3
   14318:	e0911001 	adds	r1, r1, r1
   1431c:	e1a09001 	mov	r9, r1
   14320:	e0a33003 	adc	r3, r3, r3
   14324:	e1a00008 	mov	r0, r8
   14328:	e1a01006 	mov	r1, r6
   1432c:	e1a02009 	mov	r2, r9
   14330:	e1a05003 	mov	r5, r3
   14334:	eb00181f 	bl	1a3b8 <__aeabi_uldivmod>
   14338:	e350000a 	cmp	r0, #10
   1433c:	e2d13000 	sbcs	r3, r1, #0
   14340:	2affffef 	bcs	14304 <CString::FormatV(char const*, std::__va_list)+0x49c>
   14344:	e1a03007 	mov	r3, r7
   14348:	e1a06000 	mov	r6, r0
   1434c:	e1a07001 	mov	r7, r1
   14350:	e28d2034 	add	r2, sp, #52	@ 0x34
   14354:	e58d4010 	str	r4, [sp, #16]
   14358:	e58da028 	str	sl, [sp, #40]	@ 0x28
   1435c:	e58db02c 	str	fp, [sp, #44]	@ 0x2c
   14360:	e1a04002 	mov	r4, r2
   14364:	e99d0c00 	ldmib	sp, {sl, fp}
   14368:	e59f88dc 	ldr	r8, [pc, #2268]	@ 14c4c <CString::FormatV(char const*, std::__va_list)+0xde4>
   1436c:	e58d200c 	str	r2, [sp, #12]
   14370:	e58d3024 	str	r3, [sp, #36]	@ 0x24
   14374:	ea000005 	b	14390 <CString::FormatV(char const*, std::__va_list)+0x528>
   14378:	e1a03006 	mov	r3, r6
   1437c:	e1a02009 	mov	r2, r9
   14380:	eb00180c 	bl	1a3b8 <__aeabi_uldivmod>
   14384:	e1a05006 	mov	r5, r6
   14388:	e1a07001 	mov	r7, r1
   1438c:	e1a06000 	mov	r6, r0
   14390:	e1a03005 	mov	r3, r5
   14394:	e1a02009 	mov	r2, r9
   14398:	e1a0000a 	mov	r0, sl
   1439c:	e1a0100b 	mov	r1, fp
   143a0:	eb001804 	bl	1a3b8 <__aeabi_uldivmod>
   143a4:	e1a01003 	mov	r1, r3
   143a8:	e356000a 	cmp	r6, #10
   143ac:	e6ef6076 	uxtb	r6, r6
   143b0:	e2d77000 	sbcs	r7, r7, #0
   143b4:	e2863030 	add	r3, r6, #48	@ 0x30
   143b8:	e2866057 	add	r6, r6, #87	@ 0x57
   143bc:	e6af3073 	sxtb	r3, r3
   143c0:	26af3076 	sxtbcs	r3, r6
   143c4:	e099c005 	adds	ip, r9, r5
   143c8:	e2acc000 	adc	ip, ip, #0
   143cc:	e4c43001 	strb	r3, [r4], #1
   143d0:	e1a00002 	mov	r0, r2
   143d4:	e1a0a002 	mov	sl, r2
   143d8:	e0823c98 	umull	r3, r2, r8, ip
   143dc:	e3c23003 	bic	r3, r2, #3
   143e0:	e0833122 	add	r3, r3, r2, lsr #2
   143e4:	e04cc003 	sub	ip, ip, r3
   143e8:	e59f3860 	ldr	r3, [pc, #2144]	@ 14c50 <CString::FormatV(char const*, std::__va_list)+0xde8>
   143ec:	e059c00c 	subs	ip, r9, ip
   143f0:	e00e0c93 	mul	lr, r3, ip
   143f4:	e2c53000 	sbc	r3, r5, #0
   143f8:	e359000a 	cmp	r9, #10
   143fc:	e02ee398 	mla	lr, r8, r3, lr
   14400:	e2d55000 	sbcs	r5, r5, #0
   14404:	e083589c 	umull	r5, r3, ip, r8
   14408:	e08ee003 	add	lr, lr, r3
   1440c:	e1a090a5 	lsr	r9, r5, #1
   14410:	e1a0b001 	mov	fp, r1
   14414:	e1899f8e 	orr	r9, r9, lr, lsl #31
   14418:	e1a060ae 	lsr	r6, lr, #1
   1441c:	2affffd5 	bcs	14378 <CString::FormatV(char const*, std::__va_list)+0x510>
   14420:	e1a02004 	mov	r2, r4
   14424:	e3a01000 	mov	r1, #0
   14428:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   1442c:	e59d4010 	ldr	r4, [sp, #16]
   14430:	e59da028 	ldr	sl, [sp, #40]	@ 0x28
   14434:	e59db02c 	ldr	fp, [sp, #44]	@ 0x2c
   14438:	e5c21000 	strb	r1, [r2]
   1443c:	ea0000f1 	b	14808 <CString::FormatV(char const*, std::__va_list)+0x9a0>
   14440:	e59d3018 	ldr	r3, [sp, #24]
   14444:	e3530000 	cmp	r3, #0
   14448:	e59d3014 	ldr	r3, [sp, #20]
   1444c:	e1d350d0 	ldrsb	r5, [r3]
   14450:	1a0001b1 	bne	14b1c <CString::FormatV(char const*, std::__va_list)+0xcb4>
   14454:	e3540001 	cmp	r4, #1
   14458:	8a000126 	bhi	148f8 <CString::FormatV(char const*, std::__va_list)+0xa90>
   1445c:	e3a01001 	mov	r1, #1
   14460:	e1a0000a 	mov	r0, sl
   14464:	ebfffbc8 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14468:	e59a300c 	ldr	r3, [sl, #12]
   1446c:	e2832001 	add	r2, r3, #1
   14470:	e58a200c 	str	r2, [sl, #12]
   14474:	e5c35000 	strb	r5, [r3]
   14478:	e59d3014 	ldr	r3, [sp, #20]
   1447c:	e2833004 	add	r3, r3, #4
   14480:	e58d3014 	str	r3, [sp, #20]
   14484:	eafffee8 	b	1402c <CString::FormatV(char const*, std::__va_list)+0x1c4>
   14488:	e59d3014 	ldr	r3, [sp, #20]
   1448c:	e2835007 	add	r5, r3, #7
   14490:	e28d3034 	add	r3, sp, #52	@ 0x34
   14494:	e1a06003 	mov	r6, r3
   14498:	e3c55007 	bic	r5, r5, #7
   1449c:	e1a00003 	mov	r0, r3
   144a0:	ed950b00 	vldr	d0, [r5]
   144a4:	e58d300c 	str	r3, [sp, #12]
   144a8:	ebfffdcb 	bl	13bdc <CString::ftoa(char*, double, unsigned int)>
   144ac:	e1a00006 	mov	r0, r6
   144b0:	eb000600 	bl	15cb8 <strlen>
   144b4:	e59d3018 	ldr	r3, [sp, #24]
   144b8:	e1a06000 	mov	r6, r0
   144bc:	e3530000 	cmp	r3, #0
   144c0:	1a0001ab 	bne	14b74 <CString::FormatV(char const*, std::__va_list)+0xd0c>
   144c4:	e1540000 	cmp	r4, r0
   144c8:	8a000125 	bhi	14964 <CString::FormatV(char const*, std::__va_list)+0xafc>
   144cc:	e59d000c 	ldr	r0, [sp, #12]
   144d0:	eb0005f8 	bl	15cb8 <strlen>
   144d4:	e2504000 	subs	r4, r0, #0
   144d8:	0a000002 	beq	144e8 <CString::FormatV(char const*, std::__va_list)+0x680>
   144dc:	e1a01004 	mov	r1, r4
   144e0:	e1a0000a 	mov	r0, sl
   144e4:	ebfffba8 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   144e8:	e59d100c 	ldr	r1, [sp, #12]
   144ec:	e59a000c 	ldr	r0, [sl, #12]
   144f0:	eb000691 	bl	15f3c <strcpy>
   144f4:	e59a300c 	ldr	r3, [sl, #12]
   144f8:	e0833004 	add	r3, r3, r4
   144fc:	e58a300c 	str	r3, [sl, #12]
   14500:	e2853008 	add	r3, r5, #8
   14504:	e58d3014 	str	r3, [sp, #20]
   14508:	eafffec7 	b	1402c <CString::FormatV(char const*, std::__va_list)+0x1c4>
   1450c:	e59d3014 	ldr	r3, [sp, #20]
   14510:	e5936000 	ldr	r6, [r3]
   14514:	e1a00006 	mov	r0, r6
   14518:	eb0005e6 	bl	15cb8 <strlen>
   1451c:	e59d3018 	ldr	r3, [sp, #24]
   14520:	e1a05000 	mov	r5, r0
   14524:	e3530000 	cmp	r3, #0
   14528:	1a00015e 	bne	14aa8 <CString::FormatV(char const*, std::__va_list)+0xc40>
   1452c:	e1540000 	cmp	r4, r0
   14530:	8a0000fd 	bhi	1492c <CString::FormatV(char const*, std::__va_list)+0xac4>
   14534:	e1a00006 	mov	r0, r6
   14538:	eb0005de 	bl	15cb8 <strlen>
   1453c:	e2504000 	subs	r4, r0, #0
   14540:	0a000002 	beq	14550 <CString::FormatV(char const*, std::__va_list)+0x6e8>
   14544:	e1a01004 	mov	r1, r4
   14548:	e1a0000a 	mov	r0, sl
   1454c:	ebfffb8e 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14550:	e1a01006 	mov	r1, r6
   14554:	e59a000c 	ldr	r0, [sl, #12]
   14558:	eb000677 	bl	15f3c <strcpy>
   1455c:	e59a300c 	ldr	r3, [sl, #12]
   14560:	e0833004 	add	r3, r3, r4
   14564:	e58a300c 	str	r3, [sl, #12]
   14568:	eaffffc2 	b	14478 <CString::FormatV(char const*, std::__va_list)+0x610>
   1456c:	e3500000 	cmp	r0, #0
   14570:	03a09008 	moveq	r9, #8
   14574:	0afffece 	beq	140b4 <CString::FormatV(char const*, std::__va_list)+0x24c>
   14578:	e3a01001 	mov	r1, #1
   1457c:	e1a0000a 	mov	r0, sl
   14580:	e58d3004 	str	r3, [sp, #4]
   14584:	ebfffb80 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14588:	e3a01030 	mov	r1, #48	@ 0x30
   1458c:	e59a200c 	ldr	r2, [sl, #12]
   14590:	e59d3004 	ldr	r3, [sp, #4]
   14594:	e2820001 	add	r0, r2, #1
   14598:	e58a000c 	str	r0, [sl, #12]
   1459c:	e3530000 	cmp	r3, #0
   145a0:	e5c21000 	strb	r1, [r2]
   145a4:	e3a09008 	mov	r9, #8
   145a8:	e1db20d0 	ldrsb	r2, [fp]
   145ac:	e59d3014 	ldr	r3, [sp, #20]
   145b0:	1afffec2 	bne	140c0 <CString::FormatV(char const*, std::__va_list)+0x258>
   145b4:	e4938004 	ldr	r8, [r3], #4
   145b8:	e1590008 	cmp	r9, r8
   145bc:	e58d3014 	str	r3, [sp, #20]
   145c0:	8a000188 	bhi	14be8 <CString::FormatV(char const*, std::__va_list)+0xd80>
   145c4:	e3a07001 	mov	r7, #1
   145c8:	e1a05002 	mov	r5, r2
   145cc:	e0070799 	mul	r7, r9, r7
   145d0:	e1a00008 	mov	r0, r8
   145d4:	e1a01007 	mov	r1, r7
   145d8:	eb0016f2 	bl	1a1a8 <__udivsi3>
   145dc:	e1590000 	cmp	r9, r0
   145e0:	9afffff9 	bls	145cc <CString::FormatV(char const*, std::__va_list)+0x764>
   145e4:	e1a06000 	mov	r6, r0
   145e8:	e1a02005 	mov	r2, r5
   145ec:	e2523058 	subs	r3, r2, #88	@ 0x58
   145f0:	13a03001 	movne	r3, #1
   145f4:	e1a03283 	lsl	r3, r3, #5
   145f8:	e28d2034 	add	r2, sp, #52	@ 0x34
   145fc:	e2833037 	add	r3, r3, #55	@ 0x37
   14600:	e58d4004 	str	r4, [sp, #4]
   14604:	e1a05002 	mov	r5, r2
   14608:	e1a04006 	mov	r4, r6
   1460c:	e58d200c 	str	r2, [sp, #12]
   14610:	e1a06003 	mov	r6, r3
   14614:	ea000003 	b	14628 <CString::FormatV(char const*, std::__va_list)+0x7c0>
   14618:	e1a00008 	mov	r0, r8
   1461c:	e1a01007 	mov	r1, r7
   14620:	eb0016e0 	bl	1a1a8 <__udivsi3>
   14624:	e1a04000 	mov	r4, r0
   14628:	e1a01007 	mov	r1, r7
   1462c:	e1a00008 	mov	r0, r8
   14630:	eb001757 	bl	1a394 <__aeabi_uidivmod>
   14634:	e6ef3074 	uxtb	r3, r4
   14638:	e3540009 	cmp	r4, #9
   1463c:	e2832030 	add	r2, r3, #48	@ 0x30
   14640:	80863003 	addhi	r3, r6, r3
   14644:	96af3072 	sxtbls	r3, r2
   14648:	86af3073 	sxtbhi	r3, r3
   1464c:	e1a00007 	mov	r0, r7
   14650:	e1a08001 	mov	r8, r1
   14654:	e4c53001 	strb	r3, [r5], #1
   14658:	e1a01009 	mov	r1, r9
   1465c:	eb0016d1 	bl	1a1a8 <__udivsi3>
   14660:	e1590007 	cmp	r9, r7
   14664:	e1a07000 	mov	r7, r0
   14668:	9affffea 	bls	14618 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   1466c:	e3a02000 	mov	r2, #0
   14670:	e59d4004 	ldr	r4, [sp, #4]
   14674:	e5c52000 	strb	r2, [r5]
   14678:	eafffee5 	b	14214 <CString::FormatV(char const*, std::__va_list)+0x3ac>
   1467c:	e1db20d1 	ldrsb	r2, [fp, #1]
   14680:	e3a01000 	mov	r1, #0
   14684:	e2423030 	sub	r3, r2, #48	@ 0x30
   14688:	e6ef3073 	uxtb	r3, r3
   1468c:	e3530009 	cmp	r3, #9
   14690:	e28bb001 	add	fp, fp, #1
   14694:	8afffe2e 	bhi	13f54 <CString::FormatV(char const*, std::__va_list)+0xec>
   14698:	e0811101 	add	r1, r1, r1, lsl #2
   1469c:	e0821081 	add	r1, r2, r1, lsl #1
   146a0:	e1fb20d1 	ldrsb	r2, [fp, #1]!
   146a4:	e2411030 	sub	r1, r1, #48	@ 0x30
   146a8:	e2423030 	sub	r3, r2, #48	@ 0x30
   146ac:	e6ef3073 	uxtb	r3, r3
   146b0:	e3530009 	cmp	r3, #9
   146b4:	9afffff7 	bls	14698 <CString::FormatV(char const*, std::__va_list)+0x830>
   146b8:	eafffe25 	b	13f54 <CString::FormatV(char const*, std::__va_list)+0xec>
   146bc:	e59d000c 	ldr	r0, [sp, #12]
   146c0:	eb00057c 	bl	15cb8 <strlen>
   146c4:	e2506000 	subs	r6, r0, #0
   146c8:	0a000002 	beq	146d8 <CString::FormatV(char const*, std::__va_list)+0x870>
   146cc:	e1a01006 	mov	r1, r6
   146d0:	e1a0000a 	mov	r0, sl
   146d4:	ebfffb2c 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   146d8:	e59d100c 	ldr	r1, [sp, #12]
   146dc:	e59a000c 	ldr	r0, [sl, #12]
   146e0:	eb000615 	bl	15f3c <strcpy>
   146e4:	e59a300c 	ldr	r3, [sl, #12]
   146e8:	e1540005 	cmp	r4, r5
   146ec:	e0833006 	add	r3, r3, r6
   146f0:	e58a300c 	str	r3, [sl, #12]
   146f4:	9afffe4c 	bls	1402c <CString::FormatV(char const*, std::__va_list)+0x1c4>
   146f8:	e0445005 	sub	r5, r4, r5
   146fc:	e1a0000a 	mov	r0, sl
   14700:	e1a01005 	mov	r1, r5
   14704:	ebfffb20 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14708:	e3a00020 	mov	r0, #32
   1470c:	e2453001 	sub	r3, r5, #1
   14710:	e59a200c 	ldr	r2, [sl, #12]
   14714:	e2433001 	sub	r3, r3, #1
   14718:	e2821001 	add	r1, r2, #1
   1471c:	e3730001 	cmn	r3, #1
   14720:	e58a100c 	str	r1, [sl, #12]
   14724:	e5c20000 	strb	r0, [r2]
   14728:	1afffff8 	bne	14710 <CString::FormatV(char const*, std::__va_list)+0x8a8>
   1472c:	eafffe3e 	b	1402c <CString::FormatV(char const*, std::__va_list)+0x1c4>
   14730:	e4926004 	ldr	r6, [r2], #4
   14734:	e3560000 	cmp	r6, #0
   14738:	b3a03001 	movlt	r3, #1
   1473c:	b2666000 	rsblt	r6, r6, #0
   14740:	e3560009 	cmp	r6, #9
   14744:	e1a08006 	mov	r8, r6
   14748:	c3a05001 	movgt	r5, #1
   1474c:	c1a09003 	movgt	r9, r3
   14750:	c1a07002 	movgt	r7, r2
   14754:	da000139 	ble	14c40 <CString::FormatV(char const*, std::__va_list)+0xdd8>
   14758:	e0855105 	add	r5, r5, r5, lsl #2
   1475c:	e1a05085 	lsl	r5, r5, #1
   14760:	e1a01005 	mov	r1, r5
   14764:	e1a00006 	mov	r0, r6
   14768:	eb00168e 	bl	1a1a8 <__udivsi3>
   1476c:	e3500009 	cmp	r0, #9
   14770:	8afffff8 	bhi	14758 <CString::FormatV(char const*, std::__va_list)+0x8f0>
   14774:	e1a02007 	mov	r2, r7
   14778:	e1a03009 	mov	r3, r9
   1477c:	e1a07000 	mov	r7, r0
   14780:	e28d1034 	add	r1, sp, #52	@ 0x34
   14784:	e58d4004 	str	r4, [sp, #4]
   14788:	e1a09001 	mov	r9, r1
   1478c:	e1a04005 	mov	r4, r5
   14790:	e59f64b4 	ldr	r6, [pc, #1204]	@ 14c4c <CString::FormatV(char const*, std::__va_list)+0xde4>
   14794:	e1a05008 	mov	r5, r8
   14798:	e58d100c 	str	r1, [sp, #12]
   1479c:	e1a08002 	mov	r8, r2
   147a0:	e58d3008 	str	r3, [sp, #8]
   147a4:	ea000003 	b	147b8 <CString::FormatV(char const*, std::__va_list)+0x950>
   147a8:	e1a01004 	mov	r1, r4
   147ac:	e1a00005 	mov	r0, r5
   147b0:	eb00167c 	bl	1a1a8 <__udivsi3>
   147b4:	e1a07000 	mov	r7, r0
   147b8:	e1a01004 	mov	r1, r4
   147bc:	e1a00005 	mov	r0, r5
   147c0:	eb0016f3 	bl	1a394 <__aeabi_uidivmod>
   147c4:	e3570009 	cmp	r7, #9
   147c8:	e6ef7077 	uxtb	r7, r7
   147cc:	e2870030 	add	r0, r7, #48	@ 0x30
   147d0:	96af7070 	sxtbls	r7, r0
   147d4:	e1a05001 	mov	r5, r1
   147d8:	e0810496 	umull	r0, r1, r6, r4
   147dc:	82877057 	addhi	r7, r7, #87	@ 0x57
   147e0:	86af7077 	sxtbhi	r7, r7
   147e4:	e3540009 	cmp	r4, #9
   147e8:	e4c97001 	strb	r7, [r9], #1
   147ec:	e1a041a1 	lsr	r4, r1, #3
   147f0:	8affffec 	bhi	147a8 <CString::FormatV(char const*, std::__va_list)+0x940>
   147f4:	e3a02000 	mov	r2, #0
   147f8:	e59d4004 	ldr	r4, [sp, #4]
   147fc:	e59d3008 	ldr	r3, [sp, #8]
   14800:	e58d8014 	str	r8, [sp, #20]
   14804:	e5c92000 	strb	r2, [r9]
   14808:	e59d000c 	ldr	r0, [sp, #12]
   1480c:	e58d3004 	str	r3, [sp, #4]
   14810:	eb000528 	bl	15cb8 <strlen>
   14814:	e59d3004 	ldr	r3, [sp, #4]
   14818:	e1a05000 	mov	r5, r0
   1481c:	e3530000 	cmp	r3, #0
   14820:	e59d2018 	ldr	r2, [sp, #24]
   14824:	1a000077 	bne	14a08 <CString::FormatV(char const*, std::__va_list)+0xba0>
   14828:	e3520000 	cmp	r2, #0
   1482c:	1a000080 	bne	14a34 <CString::FormatV(char const*, std::__va_list)+0xbcc>
   14830:	e59d201c 	ldr	r2, [sp, #28]
   14834:	e3520000 	cmp	r2, #0
   14838:	1a000062 	bne	149c8 <CString::FormatV(char const*, std::__va_list)+0xb60>
   1483c:	e1500004 	cmp	r0, r4
   14840:	2afffe8b 	bcs	14274 <CString::FormatV(char const*, std::__va_list)+0x40c>
   14844:	e0444005 	sub	r4, r4, r5
   14848:	e1a01004 	mov	r1, r4
   1484c:	e1a0000a 	mov	r0, sl
   14850:	e58d3004 	str	r3, [sp, #4]
   14854:	ebfffacc 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14858:	e3a0c020 	mov	ip, #32
   1485c:	e59d3004 	ldr	r3, [sp, #4]
   14860:	e2442001 	sub	r2, r4, #1
   14864:	e59a100c 	ldr	r1, [sl, #12]
   14868:	e2422001 	sub	r2, r2, #1
   1486c:	e2810001 	add	r0, r1, #1
   14870:	e3720001 	cmn	r2, #1
   14874:	e58a000c 	str	r0, [sl, #12]
   14878:	e5c1c000 	strb	ip, [r1]
   1487c:	1afffff8 	bne	14864 <CString::FormatV(char const*, std::__va_list)+0x9fc>
   14880:	e3530000 	cmp	r3, #0
   14884:	0afffe7a 	beq	14274 <CString::FormatV(char const*, std::__va_list)+0x40c>
   14888:	ea0000de 	b	14c08 <CString::FormatV(char const*, std::__va_list)+0xda0>
   1488c:	e59f13c0 	ldr	r1, [pc, #960]	@ 14c54 <CString::FormatV(char const*, std::__va_list)+0xdec>
   14890:	e3520058 	cmp	r2, #88	@ 0x58
   14894:	e59f63bc 	ldr	r6, [pc, #956]	@ 14c58 <CString::FormatV(char const*, std::__va_list)+0xdf0>
   14898:	01a06001 	moveq	r6, r1
   1489c:	e1a00006 	mov	r0, r6
   148a0:	e58d3004 	str	r3, [sp, #4]
   148a4:	eb000503 	bl	15cb8 <strlen>
   148a8:	e2505000 	subs	r5, r0, #0
   148ac:	e59d3004 	ldr	r3, [sp, #4]
   148b0:	0a000003 	beq	148c4 <CString::FormatV(char const*, std::__va_list)+0xa5c>
   148b4:	e1a01005 	mov	r1, r5
   148b8:	e1a0000a 	mov	r0, sl
   148bc:	ebfffab2 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   148c0:	e59d3004 	ldr	r3, [sp, #4]
   148c4:	e1a01006 	mov	r1, r6
   148c8:	e59a000c 	ldr	r0, [sl, #12]
   148cc:	e58d3004 	str	r3, [sp, #4]
   148d0:	eb000599 	bl	15f3c <strcpy>
   148d4:	e59a200c 	ldr	r2, [sl, #12]
   148d8:	e3a09010 	mov	r9, #16
   148dc:	e0822005 	add	r2, r2, r5
   148e0:	e58a200c 	str	r2, [sl, #12]
   148e4:	e1db20d0 	ldrsb	r2, [fp]
   148e8:	e59d3004 	ldr	r3, [sp, #4]
   148ec:	eafffdf0 	b	140b4 <CString::FormatV(char const*, std::__va_list)+0x24c>
   148f0:	e3a0900a 	mov	r9, #10
   148f4:	eafffdee 	b	140b4 <CString::FormatV(char const*, std::__va_list)+0x24c>
   148f8:	e2441001 	sub	r1, r4, #1
   148fc:	e1a0000a 	mov	r0, sl
   14900:	ebfffaa1 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14904:	e3a01020 	mov	r1, #32
   14908:	e2444002 	sub	r4, r4, #2
   1490c:	e59a300c 	ldr	r3, [sl, #12]
   14910:	e2444001 	sub	r4, r4, #1
   14914:	e2832001 	add	r2, r3, #1
   14918:	e3740001 	cmn	r4, #1
   1491c:	e58a200c 	str	r2, [sl, #12]
   14920:	e5c31000 	strb	r1, [r3]
   14924:	1afffff8 	bne	1490c <CString::FormatV(char const*, std::__va_list)+0xaa4>
   14928:	eafffecb 	b	1445c <CString::FormatV(char const*, std::__va_list)+0x5f4>
   1492c:	e0445000 	sub	r5, r4, r0
   14930:	e1a01005 	mov	r1, r5
   14934:	e1a0000a 	mov	r0, sl
   14938:	ebfffa93 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1493c:	e3a00020 	mov	r0, #32
   14940:	e2453001 	sub	r3, r5, #1
   14944:	e59a200c 	ldr	r2, [sl, #12]
   14948:	e2433001 	sub	r3, r3, #1
   1494c:	e2821001 	add	r1, r2, #1
   14950:	e3730001 	cmn	r3, #1
   14954:	e58a100c 	str	r1, [sl, #12]
   14958:	e5c20000 	strb	r0, [r2]
   1495c:	1afffff8 	bne	14944 <CString::FormatV(char const*, std::__va_list)+0xadc>
   14960:	eafffef3 	b	14534 <CString::FormatV(char const*, std::__va_list)+0x6cc>
   14964:	e0446000 	sub	r6, r4, r0
   14968:	e1a01006 	mov	r1, r6
   1496c:	e1a0000a 	mov	r0, sl
   14970:	ebfffa85 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14974:	e3a00020 	mov	r0, #32
   14978:	e2463001 	sub	r3, r6, #1
   1497c:	e59a200c 	ldr	r2, [sl, #12]
   14980:	e2433001 	sub	r3, r3, #1
   14984:	e2821001 	add	r1, r2, #1
   14988:	e3730001 	cmn	r3, #1
   1498c:	e58a100c 	str	r1, [sl, #12]
   14990:	e5c20000 	strb	r0, [r2]
   14994:	1afffff8 	bne	1497c <CString::FormatV(char const*, std::__va_list)+0xb14>
   14998:	eafffecb 	b	144cc <CString::FormatV(char const*, std::__va_list)+0x664>
   1499c:	e59d201c 	ldr	r2, [sp, #28]
   149a0:	e3520000 	cmp	r2, #0
   149a4:	0a000095 	beq	14c00 <CString::FormatV(char const*, std::__va_list)+0xd98>
   149a8:	e3a01001 	mov	r1, #1
   149ac:	e1a0000a 	mov	r0, sl
   149b0:	ebfffa75 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   149b4:	e3a0202d 	mov	r2, #45	@ 0x2d
   149b8:	e59a300c 	ldr	r3, [sl, #12]
   149bc:	e2831001 	add	r1, r3, #1
   149c0:	e58a100c 	str	r1, [sl, #12]
   149c4:	e5c32000 	strb	r2, [r3]
   149c8:	e1540005 	cmp	r4, r5
   149cc:	9afffe28 	bls	14274 <CString::FormatV(char const*, std::__va_list)+0x40c>
   149d0:	e0444005 	sub	r4, r4, r5
   149d4:	e1a0000a 	mov	r0, sl
   149d8:	e1a01004 	mov	r1, r4
   149dc:	ebfffa6a 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   149e0:	e3a00030 	mov	r0, #48	@ 0x30
   149e4:	e2443001 	sub	r3, r4, #1
   149e8:	e59a200c 	ldr	r2, [sl, #12]
   149ec:	e2433001 	sub	r3, r3, #1
   149f0:	e2821001 	add	r1, r2, #1
   149f4:	e3730001 	cmn	r3, #1
   149f8:	e58a100c 	str	r1, [sl, #12]
   149fc:	e5c20000 	strb	r0, [r2]
   14a00:	1afffff8 	bne	149e8 <CString::FormatV(char const*, std::__va_list)+0xb80>
   14a04:	eafffe1a 	b	14274 <CString::FormatV(char const*, std::__va_list)+0x40c>
   14a08:	e3520000 	cmp	r2, #0
   14a0c:	e2805001 	add	r5, r0, #1
   14a10:	0affffe1 	beq	1499c <CString::FormatV(char const*, std::__va_list)+0xb34>
   14a14:	e3a01001 	mov	r1, #1
   14a18:	e1a0000a 	mov	r0, sl
   14a1c:	ebfffa5a 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14a20:	e3a0202d 	mov	r2, #45	@ 0x2d
   14a24:	e59a300c 	ldr	r3, [sl, #12]
   14a28:	e2831001 	add	r1, r3, #1
   14a2c:	e58a100c 	str	r1, [sl, #12]
   14a30:	e5c32000 	strb	r2, [r3]
   14a34:	e59d000c 	ldr	r0, [sp, #12]
   14a38:	eb00049e 	bl	15cb8 <strlen>
   14a3c:	e2506000 	subs	r6, r0, #0
   14a40:	0a000002 	beq	14a50 <CString::FormatV(char const*, std::__va_list)+0xbe8>
   14a44:	e1a01006 	mov	r1, r6
   14a48:	e1a0000a 	mov	r0, sl
   14a4c:	ebfffa4e 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14a50:	e59d100c 	ldr	r1, [sp, #12]
   14a54:	e59a000c 	ldr	r0, [sl, #12]
   14a58:	eb000537 	bl	15f3c <strcpy>
   14a5c:	e59a300c 	ldr	r3, [sl, #12]
   14a60:	e1540005 	cmp	r4, r5
   14a64:	e0833006 	add	r3, r3, r6
   14a68:	e58a300c 	str	r3, [sl, #12]
   14a6c:	9afffd6e 	bls	1402c <CString::FormatV(char const*, std::__va_list)+0x1c4>
   14a70:	e0444005 	sub	r4, r4, r5
   14a74:	e1a0000a 	mov	r0, sl
   14a78:	e1a01004 	mov	r1, r4
   14a7c:	ebfffa42 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14a80:	e3a00020 	mov	r0, #32
   14a84:	e2443001 	sub	r3, r4, #1
   14a88:	e59a200c 	ldr	r2, [sl, #12]
   14a8c:	e2433001 	sub	r3, r3, #1
   14a90:	e2821001 	add	r1, r2, #1
   14a94:	e3730001 	cmn	r3, #1
   14a98:	e58a100c 	str	r1, [sl, #12]
   14a9c:	e5c20000 	strb	r0, [r2]
   14aa0:	1afffff8 	bne	14a88 <CString::FormatV(char const*, std::__va_list)+0xc20>
   14aa4:	eafffd60 	b	1402c <CString::FormatV(char const*, std::__va_list)+0x1c4>
   14aa8:	e1a00006 	mov	r0, r6
   14aac:	eb000481 	bl	15cb8 <strlen>
   14ab0:	e2507000 	subs	r7, r0, #0
   14ab4:	0a000002 	beq	14ac4 <CString::FormatV(char const*, std::__va_list)+0xc5c>
   14ab8:	e1a01007 	mov	r1, r7
   14abc:	e1a0000a 	mov	r0, sl
   14ac0:	ebfffa31 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14ac4:	e1a01006 	mov	r1, r6
   14ac8:	e59a000c 	ldr	r0, [sl, #12]
   14acc:	eb00051a 	bl	15f3c <strcpy>
   14ad0:	e59a300c 	ldr	r3, [sl, #12]
   14ad4:	e1540005 	cmp	r4, r5
   14ad8:	e0833007 	add	r3, r3, r7
   14adc:	e58a300c 	str	r3, [sl, #12]
   14ae0:	9afffe64 	bls	14478 <CString::FormatV(char const*, std::__va_list)+0x610>
   14ae4:	e0445005 	sub	r5, r4, r5
   14ae8:	e1a0000a 	mov	r0, sl
   14aec:	e1a01005 	mov	r1, r5
   14af0:	ebfffa25 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14af4:	e3a00020 	mov	r0, #32
   14af8:	e2453001 	sub	r3, r5, #1
   14afc:	e59a200c 	ldr	r2, [sl, #12]
   14b00:	e2433001 	sub	r3, r3, #1
   14b04:	e2821001 	add	r1, r2, #1
   14b08:	e3730001 	cmn	r3, #1
   14b0c:	e58a100c 	str	r1, [sl, #12]
   14b10:	e5c20000 	strb	r0, [r2]
   14b14:	1afffff8 	bne	14afc <CString::FormatV(char const*, std::__va_list)+0xc94>
   14b18:	eafffe56 	b	14478 <CString::FormatV(char const*, std::__va_list)+0x610>
   14b1c:	e3a01001 	mov	r1, #1
   14b20:	e1a0000a 	mov	r0, sl
   14b24:	ebfffa18 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14b28:	e59a300c 	ldr	r3, [sl, #12]
   14b2c:	e3540001 	cmp	r4, #1
   14b30:	e2832001 	add	r2, r3, #1
   14b34:	e58a200c 	str	r2, [sl, #12]
   14b38:	e5c35000 	strb	r5, [r3]
   14b3c:	9afffe4d 	bls	14478 <CString::FormatV(char const*, std::__va_list)+0x610>
   14b40:	e2441001 	sub	r1, r4, #1
   14b44:	e1a0000a 	mov	r0, sl
   14b48:	ebfffa0f 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14b4c:	e3a01020 	mov	r1, #32
   14b50:	e2444002 	sub	r4, r4, #2
   14b54:	e59a300c 	ldr	r3, [sl, #12]
   14b58:	e2444001 	sub	r4, r4, #1
   14b5c:	e2832001 	add	r2, r3, #1
   14b60:	e3740001 	cmn	r4, #1
   14b64:	e58a200c 	str	r2, [sl, #12]
   14b68:	e5c31000 	strb	r1, [r3]
   14b6c:	1afffff8 	bne	14b54 <CString::FormatV(char const*, std::__va_list)+0xcec>
   14b70:	eafffe40 	b	14478 <CString::FormatV(char const*, std::__va_list)+0x610>
   14b74:	e59d000c 	ldr	r0, [sp, #12]
   14b78:	eb00044e 	bl	15cb8 <strlen>
   14b7c:	e2507000 	subs	r7, r0, #0
   14b80:	0a000002 	beq	14b90 <CString::FormatV(char const*, std::__va_list)+0xd28>
   14b84:	e1a01007 	mov	r1, r7
   14b88:	e1a0000a 	mov	r0, sl
   14b8c:	ebfff9fe 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14b90:	e59d100c 	ldr	r1, [sp, #12]
   14b94:	e59a000c 	ldr	r0, [sl, #12]
   14b98:	eb0004e7 	bl	15f3c <strcpy>
   14b9c:	e59a300c 	ldr	r3, [sl, #12]
   14ba0:	e1540006 	cmp	r4, r6
   14ba4:	e0833007 	add	r3, r3, r7
   14ba8:	e58a300c 	str	r3, [sl, #12]
   14bac:	9afffe53 	bls	14500 <CString::FormatV(char const*, std::__va_list)+0x698>
   14bb0:	e0446006 	sub	r6, r4, r6
   14bb4:	e1a0000a 	mov	r0, sl
   14bb8:	e1a01006 	mov	r1, r6
   14bbc:	ebfff9f2 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14bc0:	e3a00020 	mov	r0, #32
   14bc4:	e2463001 	sub	r3, r6, #1
   14bc8:	e59a200c 	ldr	r2, [sl, #12]
   14bcc:	e2433001 	sub	r3, r3, #1
   14bd0:	e2821001 	add	r1, r2, #1
   14bd4:	e3730001 	cmn	r3, #1
   14bd8:	e58a100c 	str	r1, [sl, #12]
   14bdc:	e5c20000 	strb	r0, [r2]
   14be0:	1afffff8 	bne	14bc8 <CString::FormatV(char const*, std::__va_list)+0xd60>
   14be4:	eafffe45 	b	14500 <CString::FormatV(char const*, std::__va_list)+0x698>
   14be8:	e1a06008 	mov	r6, r8
   14bec:	e3a07001 	mov	r7, #1
   14bf0:	eafffe7d 	b	145ec <CString::FormatV(char const*, std::__va_list)+0x784>
   14bf4:	e3a07001 	mov	r7, #1
   14bf8:	e99d0120 	ldmib	sp, {r5, r8}
   14bfc:	eafffd4e 	b	1413c <CString::FormatV(char const*, std::__va_list)+0x2d4>
   14c00:	e1540005 	cmp	r4, r5
   14c04:	8affff0e 	bhi	14844 <CString::FormatV(char const*, std::__va_list)+0x9dc>
   14c08:	e3a01001 	mov	r1, #1
   14c0c:	e1a0000a 	mov	r0, sl
   14c10:	ebfff9dd 	bl	1338c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   14c14:	e3a0202d 	mov	r2, #45	@ 0x2d
   14c18:	e59a300c 	ldr	r3, [sl, #12]
   14c1c:	e2831001 	add	r1, r3, #1
   14c20:	e58a100c 	str	r1, [sl, #12]
   14c24:	e5c32000 	strb	r2, [r3]
   14c28:	eafffd91 	b	14274 <CString::FormatV(char const*, std::__va_list)+0x40c>
   14c2c:	e1a06008 	mov	r6, r8
   14c30:	e1a07001 	mov	r7, r1
   14c34:	e3a09001 	mov	r9, #1
   14c38:	e3a05000 	mov	r5, #0
   14c3c:	eafffdc3 	b	14350 <CString::FormatV(char const*, std::__va_list)+0x4e8>
   14c40:	e1a07006 	mov	r7, r6
   14c44:	e3a05001 	mov	r5, #1
   14c48:	eafffecc 	b	14780 <CString::FormatV(char const*, std::__va_list)+0x918>
   14c4c:	cccccccd 	.word	0xcccccccd
   14c50:	cccccccc 	.word	0xcccccccc
   14c54:	0001d534 	.word	0x0001d534
   14c58:	0001d538 	.word	0x0001d538

00014c5c <CString::Format(char const*, ...)>:
   14c5c:	e92d000e 	push	{r1, r2, r3}
   14c60:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   14c64:	e24dd008 	sub	sp, sp, #8
   14c68:	e28d2010 	add	r2, sp, #16
   14c6c:	e59d100c 	ldr	r1, [sp, #12]
   14c70:	e58d2004 	str	r2, [sp, #4]
   14c74:	ebfffc7b 	bl	13e68 <CString::FormatV(char const*, std::__va_list)>
   14c78:	e28dd008 	add	sp, sp, #8
   14c7c:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   14c80:	e28dd00c 	add	sp, sp, #12
   14c84:	e12fff1e 	bx	lr

00014c88 <__aeabi_atexit>:
   14c88:	e12fff1e 	bx	lr

00014c8c <__errno>:
   14c8c:	e59f0000 	ldr	r0, [pc]	@ 14c94 <__errno+0x8>
   14c90:	e12fff1e 	bx	lr
   14c94:	00020b74 	.word	0x00020b74

00014c98 <set_qemu_exit_status>:
   14c98:	e12fff1e 	bx	lr

00014c9c <halt>:
   14c9c:	f10c0080 	cpsid	i
   14ca0:	f10c0040 	cpsid	f
   14ca4:	eafffffe 	b	14ca4 <halt+0x8>

00014ca8 <error_halt>:
   14ca8:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   14cac:	e24dd014 	sub	sp, sp, #20
   14cb0:	e1a04000 	mov	r4, r0
   14cb4:	e3a01000 	mov	r1, #0
   14cb8:	e28d0004 	add	r0, sp, #4
   14cbc:	ebffe9d6 	bl	f41c <CActLED::CActLED(bool)>
   14cc0:	e28d0004 	add	r0, sp, #4
   14cc4:	e3a03f4b 	mov	r3, #300	@ 0x12c
   14cc8:	e3a02064 	mov	r2, #100	@ 0x64
   14ccc:	e1a01004 	mov	r1, r4
   14cd0:	ebffea24 	bl	f568 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
   14cd4:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
   14cd8:	eb00037f 	bl	15adc <CTimer::SimpleMsDelay(unsigned int)>
   14cdc:	eafffff7 	b	14cc0 <error_halt+0x18>

00014ce0 <reboot>:
   14ce0:	e3a03000 	mov	r3, #0
   14ce4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   14ce8:	e59f3010 	ldr	r3, [pc, #16]	@ 14d00 <reboot+0x20>
   14cec:	e59f1010 	ldr	r1, [pc, #16]	@ 14d04 <reboot+0x24>
   14cf0:	e59f2010 	ldr	r2, [pc, #16]	@ 14d08 <reboot+0x28>
   14cf4:	e5831024 	str	r1, [r3, #36]	@ 0x24
   14cf8:	e583201c 	str	r2, [r3, #28]
   14cfc:	eafffffe 	b	14cfc <reboot+0x1c>
   14d00:	20100000 	.word	0x20100000
   14d04:	5a000001 	.word	0x5a000001
   14d08:	5a000020 	.word	0x5a000020

00014d0c <sysinit>:
   14d0c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   14d10:	e24ddfdd 	sub	sp, sp, #884	@ 0x374
   14d14:	f1080040 	cpsie	f
   14d18:	f1080080 	cpsie	i
   14d1c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   14d20:	e383360f 	orr	r3, r3, #15728640	@ 0xf00000
   14d24:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   14d28:	e3a04000 	mov	r4, #0
   14d2c:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   14d30:	e3a03101 	mov	r3, #1073741824	@ 0x40000000
   14d34:	eee83a10 	vmsr	fpexc, r3
   14d38:	e3a03403 	mov	r3, #50331648	@ 0x3000000
   14d3c:	eee13a10 	vmsr	fpscr, r3
   14d40:	e59f00e0 	ldr	r0, [pc, #224]	@ 14e28 <sysinit+0x11c>
   14d44:	e59f50e0 	ldr	r5, [pc, #224]	@ 14e2c <sysinit+0x120>
   14d48:	e1a01004 	mov	r1, r4
   14d4c:	e0452000 	sub	r2, r5, r0
   14d50:	eb0005e2 	bl	164e0 <memset>
   14d54:	e3550982 	cmp	r5, #2129920	@ 0x208000
   14d58:	8a000024 	bhi	14df0 <sysinit+0xe4>
   14d5c:	e3a01001 	mov	r1, #1
   14d60:	e28d0054 	add	r0, sp, #84	@ 0x54
   14d64:	eb000a48 	bl	1768c <CMemorySystem::CMemorySystem(bool)>
   14d68:	e28d0010 	add	r0, sp, #16
   14d6c:	ebfff187 	bl	11390 <CMachineInfo::CMachineInfo()>
   14d70:	e1a0000d 	mov	r0, sp
   14d74:	ebfff99e 	bl	133f4 <CString::CString()>
   14d78:	e3a02030 	mov	r2, #48	@ 0x30
   14d7c:	e59f10ac 	ldr	r1, [pc, #172]	@ 14e30 <sysinit+0x124>
   14d80:	e1a0000d 	mov	r0, sp
   14d84:	ebffffb4 	bl	14c5c <CString::Format(char const*, ...)>
   14d88:	e1a0000d 	mov	r0, sp
   14d8c:	ebfff9cf 	bl	134d0 <CString::operator char const*() const>
   14d90:	e1a01000 	mov	r1, r0
   14d94:	e59f0098 	ldr	r0, [pc, #152]	@ 14e34 <sysinit+0x128>
   14d98:	eb000467 	bl	15f3c <strcpy>
   14d9c:	e28d0e13 	add	r0, sp, #304	@ 0x130
   14da0:	eb000b11 	bl	179ec <CInterruptSystem::CInterruptSystem()>
   14da4:	e28d0e13 	add	r0, sp, #304	@ 0x130
   14da8:	eb000b40 	bl	17ab0 <CInterruptSystem::Initialize()>
   14dac:	e3500000 	cmp	r0, #0
   14db0:	0a00000f 	beq	14df4 <sysinit+0xe8>
   14db4:	e59f607c 	ldr	r6, [pc, #124]	@ 14e38 <sysinit+0x12c>
   14db8:	e59f507c 	ldr	r5, [pc, #124]	@ 14e3c <sysinit+0x130>
   14dbc:	e1550006 	cmp	r5, r6
   14dc0:	32466001 	subcc	r6, r6, #1
   14dc4:	30466005 	subcc	r6, r6, r5
   14dc8:	31a06126 	lsrcc	r6, r6, #2
   14dcc:	2a000004 	bcs	14de4 <sysinit+0xd8>
   14dd0:	e4953004 	ldr	r3, [r5], #4
   14dd4:	e12fff33 	blx	r3
   14dd8:	e1540006 	cmp	r4, r6
   14ddc:	e2844001 	add	r4, r4, #1
   14de0:	1afffffa 	bne	14dd0 <sysinit+0xc4>
   14de4:	ebffdb52 	bl	bb34 <main>
   14de8:	e3500001 	cmp	r0, #1
   14dec:	0a000002 	beq	14dfc <sysinit+0xf0>
   14df0:	ebffffa9 	bl	14c9c <halt>
   14df4:	e3a00002 	mov	r0, #2
   14df8:	ebffffaa 	bl	14ca8 <error_halt>
   14dfc:	eb0006b6 	bl	168dc <IsChainBootEnabled>
   14e00:	e3500000 	cmp	r0, #0
   14e04:	1a000000 	bne	14e0c <sysinit+0x100>
   14e08:	ebffffb4 	bl	14ce0 <reboot>
   14e0c:	e28d0e13 	add	r0, sp, #304	@ 0x130
   14e10:	eb000b14 	bl	17a68 <CInterruptSystem::Destructor()>
   14e14:	e28d0054 	add	r0, sp, #84	@ 0x54
   14e18:	eb0009b7 	bl	174fc <CMemorySystem::Destructor()>
   14e1c:	f10c0040 	cpsid	f
   14e20:	eb0006b3 	bl	168f4 <DoChainBoot>
   14e24:	eafffff7 	b	14e08 <sysinit+0xfc>
   14e28:	0001eee0 	.word	0x0001eee0
   14e2c:	00020c04 	.word	0x00020c04
   14e30:	0001d53c 	.word	0x0001d53c
   14e34:	00020b78 	.word	0x00020b78
   14e38:	0001ee3c 	.word	0x0001ee3c
   14e3c:	0001ee30 	.word	0x0001ee30

00014e40 <CTimer::CTimer(CInterruptSystem*)>:
   14e40:	e92d4070 	push	{r4, r5, r6, lr}
   14e44:	e3a05000 	mov	r5, #0
   14e48:	e3a06001 	mov	r6, #1
   14e4c:	e1a04000 	mov	r4, r0
   14e50:	e5805004 	str	r5, [r0, #4]
   14e54:	e5801000 	str	r1, [r0]
   14e58:	e5805008 	str	r5, [r0, #8]
   14e5c:	e5806010 	str	r6, [r0, #16]
   14e60:	e580500c 	str	r5, [r0, #12]
   14e64:	e5805014 	str	r5, [r0, #20]
   14e68:	e2800018 	add	r0, r0, #24
   14e6c:	ebfff390 	bl	11cb4 <CPtrList::CPtrList()>
   14e70:	e3a020c8 	mov	r2, #200	@ 0xc8
   14e74:	e59f303c 	ldr	r3, [pc, #60]	@ 14eb8 <CTimer::CTimer(CInterruptSystem*)+0x78>
   14e78:	e5842024 	str	r2, [r4, #36]	@ 0x24
   14e7c:	e5932000 	ldr	r2, [r3]
   14e80:	e59f1034 	ldr	r1, [pc, #52]	@ 14ebc <CTimer::CTimer(CInterruptSystem*)+0x7c>
   14e84:	e1520005 	cmp	r2, r5
   14e88:	e5841020 	str	r1, [r4, #32]
   14e8c:	e584601c 	str	r6, [r4, #28]
   14e90:	e5845028 	str	r5, [r4, #40]	@ 0x28
   14e94:	e584503c 	str	r5, [r4, #60]	@ 0x3c
   14e98:	1a000002 	bne	14ea8 <CTimer::CTimer(CInterruptSystem*)+0x68>
   14e9c:	e1a00004 	mov	r0, r4
   14ea0:	e5834000 	str	r4, [r3]
   14ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
   14ea8:	e3a02040 	mov	r2, #64	@ 0x40
   14eac:	e59f100c 	ldr	r1, [pc, #12]	@ 14ec0 <CTimer::CTimer(CInterruptSystem*)+0x80>
   14eb0:	e59f000c 	ldr	r0, [pc, #12]	@ 14ec4 <CTimer::CTimer(CInterruptSystem*)+0x84>
   14eb4:	ebffea1a 	bl	f724 <assertion_failed>
   14eb8:	00020b88 	.word	0x00020b88
   14ebc:	00030d40 	.word	0x00030d40
   14ec0:	0001d540 	.word	0x0001d540
   14ec4:	0001d54c 	.word	0x0001d54c

00014ec8 <CTimer::~CTimer()>:
   14ec8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14ecc:	e1a07000 	mov	r7, r0
   14ed0:	e5900000 	ldr	r0, [r0]
   14ed4:	e3500000 	cmp	r0, #0
   14ed8:	0a000025 	beq	14f74 <CTimer::~CTimer()+0xac>
   14edc:	e3a01003 	mov	r1, #3
   14ee0:	e2876018 	add	r6, r7, #24
   14ee4:	eb000b4d 	bl	17c20 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   14ee8:	e1a00006 	mov	r0, r6
   14eec:	ebfff37d 	bl	11ce8 <CPtrList::GetFirst() const>
   14ef0:	e2505000 	subs	r5, r0, #0
   14ef4:	e59f8088 	ldr	r8, [pc, #136]	@ 14f84 <CTimer::~CTimer()+0xbc>
   14ef8:	0a00000f 	beq	14f3c <CTimer::~CTimer()+0x74>
   14efc:	ebfff390 	bl	11d44 <CPtrList::GetPtr(TPtrListElement*)>
   14f00:	e2504000 	subs	r4, r0, #0
   14f04:	0a000012 	beq	14f54 <CTimer::~CTimer()+0x8c>
   14f08:	e5943000 	ldr	r3, [r4]
   14f0c:	e1530008 	cmp	r3, r8
   14f10:	1a000013 	bne	14f64 <CTimer::~CTimer()+0x9c>
   14f14:	e1a01005 	mov	r1, r5
   14f18:	e1a00006 	mov	r0, r6
   14f1c:	ebfff410 	bl	11f64 <CPtrList::Remove(TPtrListElement*)>
   14f20:	e3a01014 	mov	r1, #20
   14f24:	e1a00004 	mov	r0, r4
   14f28:	eb0006a6 	bl	169c8 <operator delete(void*, unsigned int)>
   14f2c:	e1a00006 	mov	r0, r6
   14f30:	ebfff36c 	bl	11ce8 <CPtrList::GetFirst() const>
   14f34:	e2505000 	subs	r5, r0, #0
   14f38:	1affffef 	bne	14efc <CTimer::~CTimer()+0x34>
   14f3c:	e59f3044 	ldr	r3, [pc, #68]	@ 14f88 <CTimer::~CTimer()+0xc0>
   14f40:	e1a00006 	mov	r0, r6
   14f44:	e5835000 	str	r5, [r3]
   14f48:	ebfff35c 	bl	11cc0 <CPtrList::~CPtrList()>
   14f4c:	e1a00007 	mov	r0, r7
   14f50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14f54:	e3a02057 	mov	r2, #87	@ 0x57
   14f58:	e59f102c 	ldr	r1, [pc, #44]	@ 14f8c <CTimer::~CTimer()+0xc4>
   14f5c:	e59f002c 	ldr	r0, [pc, #44]	@ 14f90 <CTimer::~CTimer()+0xc8>
   14f60:	ebffe9ef 	bl	f724 <assertion_failed>
   14f64:	e3a02058 	mov	r2, #88	@ 0x58
   14f68:	e59f101c 	ldr	r1, [pc, #28]	@ 14f8c <CTimer::~CTimer()+0xc4>
   14f6c:	e59f0020 	ldr	r0, [pc, #32]	@ 14f94 <CTimer::~CTimer()+0xcc>
   14f70:	ebffe9eb 	bl	f724 <assertion_failed>
   14f74:	e3a02046 	mov	r2, #70	@ 0x46
   14f78:	e59f100c 	ldr	r1, [pc, #12]	@ 14f8c <CTimer::~CTimer()+0xc4>
   14f7c:	e59f0014 	ldr	r0, [pc, #20]	@ 14f98 <CTimer::~CTimer()+0xd0>
   14f80:	ebffe9e7 	bl	f724 <assertion_failed>
   14f84:	4b544d43 	.word	0x4b544d43
   14f88:	00020b88 	.word	0x00020b88
   14f8c:	0001d540 	.word	0x0001d540
   14f90:	0001d574 	.word	0x0001d574
   14f94:	0001d580 	.word	0x0001d580
   14f98:	0001d55c 	.word	0x0001d55c

00014f9c <CTimer::SetTimeZone(int)>:
   14f9c:	e1a02000 	mov	r2, r0
   14fa0:	e59fc018 	ldr	ip, [pc, #24]	@ 14fc0 <CTimer::SetTimeZone(int)+0x24>
   14fa4:	e2813e59 	add	r3, r1, #1424	@ 0x590
   14fa8:	e283300f 	add	r3, r3, #15
   14fac:	e153000c 	cmp	r3, ip
   14fb0:	93a00001 	movls	r0, #1
   14fb4:	95821014 	strls	r1, [r2, #20]
   14fb8:	83a00000 	movhi	r0, #0
   14fbc:	e12fff1e 	bx	lr
   14fc0:	00000b3e 	.word	0x00000b3e

00014fc4 <CTimer::GetTimeZone() const>:
   14fc4:	e5900014 	ldr	r0, [r0, #20]
   14fc8:	e12fff1e 	bx	lr

00014fcc <CTimer::SetTime(unsigned int, bool)>:
   14fcc:	e5903014 	ldr	r3, [r0, #20]
   14fd0:	e3520000 	cmp	r2, #0
   14fd4:	e0633203 	rsb	r3, r3, r3, lsl #4
   14fd8:	e92d4070 	push	{r4, r5, r6, lr}
   14fdc:	e1a03103 	lsl	r3, r3, #2
   14fe0:	e1a04000 	mov	r4, r0
   14fe4:	e1a05001 	mov	r5, r1
   14fe8:	1a000002 	bne	14ff8 <CTimer::SetTime(unsigned int, bool)+0x2c>
   14fec:	e3530000 	cmp	r3, #0
   14ff0:	ba000017 	blt	15054 <CTimer::SetTime(unsigned int, bool)+0x88>
   14ff4:	e0855003 	add	r5, r5, r3
   14ff8:	e5942028 	ldr	r2, [r4, #40]	@ 0x28
   14ffc:	e3520000 	cmp	r2, #0
   15000:	0a000007 	beq	15024 <CTimer::SetTime(unsigned int, bool)+0x58>
   15004:	e594100c 	ldr	r1, [r4, #12]
   15008:	e0450003 	sub	r0, r5, r3
   1500c:	e1530001 	cmp	r3, r1
   15010:	c3a01000 	movgt	r1, #0
   15014:	d0411003 	suble	r1, r1, r3
   15018:	e12fff32 	blx	r2
   1501c:	e3500000 	cmp	r0, #0
   15020:	0a00000e 	beq	15060 <CTimer::SetTime(unsigned int, bool)+0x94>
   15024:	e5940010 	ldr	r0, [r4, #16]
   15028:	e3500000 	cmp	r0, #0
   1502c:	0584500c 	streq	r5, [r4, #12]
   15030:	0a000005 	beq	1504c <CTimer::SetTime(unsigned int, bool)+0x80>
   15034:	eb000a15 	bl	17890 <EnterCritical>
   15038:	e5943010 	ldr	r3, [r4, #16]
   1503c:	e584500c 	str	r5, [r4, #12]
   15040:	e3530000 	cmp	r3, #0
   15044:	0a000000 	beq	1504c <CTimer::SetTime(unsigned int, bool)+0x80>
   15048:	eb000a3a 	bl	17938 <LeaveCritical>
   1504c:	e3a00001 	mov	r0, #1
   15050:	e8bd8070 	pop	{r4, r5, r6, pc}
   15054:	e2632000 	rsb	r2, r3, #0
   15058:	e1520001 	cmp	r2, r1
   1505c:	daffffe4 	ble	14ff4 <CTimer::SetTime(unsigned int, bool)+0x28>
   15060:	e3a00000 	mov	r0, #0
   15064:	e8bd8070 	pop	{r4, r5, r6, pc}

00015068 <CTimer::GetClockTicks()>:
   15068:	e3a03000 	mov	r3, #0
   1506c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   15070:	e59f2008 	ldr	r2, [pc, #8]	@ 15080 <CTimer::GetClockTicks()+0x18>
   15074:	e5920004 	ldr	r0, [r2, #4]
   15078:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1507c:	e12fff1e 	bx	lr
   15080:	20003000 	.word	0x20003000

00015084 <CTimer::GetClockTicks64()>:
   15084:	e3a03000 	mov	r3, #0
   15088:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1508c:	e59f3020 	ldr	r3, [pc, #32]	@ 150b4 <CTimer::GetClockTicks64()+0x30>
   15090:	e5931008 	ldr	r1, [r3, #8]
   15094:	e5930004 	ldr	r0, [r3, #4]
   15098:	e5932008 	ldr	r2, [r3, #8]
   1509c:	e1520001 	cmp	r2, r1
   150a0:	15931008 	ldrne	r1, [r3, #8]
   150a4:	15930004 	ldrne	r0, [r3, #4]
   150a8:	e3a03000 	mov	r3, #0
   150ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   150b0:	e12fff1e 	bx	lr
   150b4:	20003000 	.word	0x20003000

000150b8 <CTimer::GetTicks() const>:
   150b8:	e5900004 	ldr	r0, [r0, #4]
   150bc:	e12fff1e 	bx	lr

000150c0 <CTimer::GetUptime() const>:
   150c0:	e5900008 	ldr	r0, [r0, #8]
   150c4:	e12fff1e 	bx	lr

000150c8 <CTimer::GetTime() const>:
   150c8:	e590000c 	ldr	r0, [r0, #12]
   150cc:	e12fff1e 	bx	lr

000150d0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   150d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   150d4:	e1a06000 	mov	r6, r0
   150d8:	e5900010 	ldr	r0, [r0, #16]
   150dc:	e1a07001 	mov	r7, r1
   150e0:	e3500000 	cmp	r0, #0
   150e4:	e1a05002 	mov	r5, r2
   150e8:	1a000013 	bne	1513c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   150ec:	e596800c 	ldr	r8, [r6, #12]
   150f0:	e5964004 	ldr	r4, [r6, #4]
   150f4:	e3570000 	cmp	r7, #0
   150f8:	0a000018 	beq	15160 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
   150fc:	e3550000 	cmp	r5, #0
   15100:	e5878000 	str	r8, [r7]
   15104:	0a000019 	beq	15170 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   15108:	e59f3070 	ldr	r3, [pc, #112]	@ 15180 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   1510c:	e3a00001 	mov	r0, #1
   15110:	e0832493 	umull	r2, r3, r3, r4
   15114:	e1a032a3 	lsr	r3, r3, #5
   15118:	e0833103 	add	r3, r3, r3, lsl #2
   1511c:	e0833103 	add	r3, r3, r3, lsl #2
   15120:	e0443103 	sub	r3, r4, r3, lsl #2
   15124:	e0632283 	rsb	r2, r3, r3, lsl #5
   15128:	e0833102 	add	r3, r3, r2, lsl #2
   1512c:	e0833103 	add	r3, r3, r3, lsl #2
   15130:	e1a03203 	lsl	r3, r3, #4
   15134:	e5853000 	str	r3, [r5]
   15138:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1513c:	eb0009d3 	bl	17890 <EnterCritical>
   15140:	e5963010 	ldr	r3, [r6, #16]
   15144:	e596800c 	ldr	r8, [r6, #12]
   15148:	e3530000 	cmp	r3, #0
   1514c:	e5964004 	ldr	r4, [r6, #4]
   15150:	0affffe7 	beq	150f4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   15154:	eb0009f7 	bl	17938 <LeaveCritical>
   15158:	e3570000 	cmp	r7, #0
   1515c:	1affffe6 	bne	150fc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   15160:	e3a02e13 	mov	r2, #304	@ 0x130
   15164:	e59f1018 	ldr	r1, [pc, #24]	@ 15184 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   15168:	e59f0018 	ldr	r0, [pc, #24]	@ 15188 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   1516c:	ebffe96c 	bl	f724 <assertion_failed>
   15170:	e59f2014 	ldr	r2, [pc, #20]	@ 1518c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   15174:	e59f1008 	ldr	r1, [pc, #8]	@ 15184 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   15178:	e59f0010 	ldr	r0, [pc, #16]	@ 15190 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
   1517c:	ebffe968 	bl	f724 <assertion_failed>
   15180:	51eb851f 	.word	0x51eb851f
   15184:	0001d540 	.word	0x0001d540
   15188:	0001d5a8 	.word	0x0001d5a8
   1518c:	00000133 	.word	0x00000133
   15190:	0001d5b8 	.word	0x0001d5b8

00015194 <CTimer::GetUniversalTime() const>:
   15194:	e5903014 	ldr	r3, [r0, #20]
   15198:	e590000c 	ldr	r0, [r0, #12]
   1519c:	e0633203 	rsb	r3, r3, r3, lsl #4
   151a0:	e1500103 	cmp	r0, r3, lsl #2
   151a4:	e1a03103 	lsl	r3, r3, #2
   151a8:	a0400003 	subge	r0, r0, r3
   151ac:	b3a00000 	movlt	r0, #0
   151b0:	e12fff1e 	bx	lr

000151b4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   151b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   151b8:	e1a05000 	mov	r5, r0
   151bc:	e5900010 	ldr	r0, [r0, #16]
   151c0:	e1a06001 	mov	r6, r1
   151c4:	e3500000 	cmp	r0, #0
   151c8:	e1a04002 	mov	r4, r2
   151cc:	1a00001b 	bne	15240 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
   151d0:	e595800c 	ldr	r8, [r5, #12]
   151d4:	e5957004 	ldr	r7, [r5, #4]
   151d8:	e5953014 	ldr	r3, [r5, #20]
   151dc:	e0633203 	rsb	r3, r3, r3, lsl #4
   151e0:	e1580103 	cmp	r8, r3, lsl #2
   151e4:	e1a03103 	lsl	r3, r3, #2
   151e8:	ba000012 	blt	15238 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   151ec:	e3560000 	cmp	r6, #0
   151f0:	0a00001a 	beq	15260 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   151f4:	e0488003 	sub	r8, r8, r3
   151f8:	e3540000 	cmp	r4, #0
   151fc:	e5868000 	str	r8, [r6]
   15200:	0a00001a 	beq	15270 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   15204:	e59f3074 	ldr	r3, [pc, #116]	@ 15280 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   15208:	e3a00001 	mov	r0, #1
   1520c:	e0832793 	umull	r2, r3, r3, r7
   15210:	e1a032a3 	lsr	r3, r3, #5
   15214:	e0833103 	add	r3, r3, r3, lsl #2
   15218:	e0833103 	add	r3, r3, r3, lsl #2
   1521c:	e0473103 	sub	r3, r7, r3, lsl #2
   15220:	e0632283 	rsb	r2, r3, r3, lsl #5
   15224:	e0833102 	add	r3, r3, r2, lsl #2
   15228:	e0833103 	add	r3, r3, r3, lsl #2
   1522c:	e1a03203 	lsl	r3, r3, #4
   15230:	e5843000 	str	r3, [r4]
   15234:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15238:	e3a00000 	mov	r0, #0
   1523c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15240:	eb000992 	bl	17890 <EnterCritical>
   15244:	e5953010 	ldr	r3, [r5, #16]
   15248:	e595800c 	ldr	r8, [r5, #12]
   1524c:	e3530000 	cmp	r3, #0
   15250:	e5957004 	ldr	r7, [r5, #4]
   15254:	0affffdf 	beq	151d8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   15258:	eb0009b6 	bl	17938 <LeaveCritical>
   1525c:	eaffffdd 	b	151d8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   15260:	e59f201c 	ldr	r2, [pc, #28]	@ 15284 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   15264:	e59f101c 	ldr	r1, [pc, #28]	@ 15288 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   15268:	e59f001c 	ldr	r0, [pc, #28]	@ 1528c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   1526c:	ebffe92c 	bl	f724 <assertion_failed>
   15270:	e3a02f56 	mov	r2, #344	@ 0x158
   15274:	e59f100c 	ldr	r1, [pc, #12]	@ 15288 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   15278:	e59f0010 	ldr	r0, [pc, #16]	@ 15290 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   1527c:	ebffe928 	bl	f724 <assertion_failed>
   15280:	51eb851f 	.word	0x51eb851f
   15284:	00000155 	.word	0x00000155
   15288:	0001d540 	.word	0x0001d540
   1528c:	0001d5a8 	.word	0x0001d5a8
   15290:	0001d5b8 	.word	0x0001d5b8

00015294 <CTimer::GetTimeString()>:
   15294:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15298:	e1a04000 	mov	r4, r0
   1529c:	e5900010 	ldr	r0, [r0, #16]
   152a0:	e24dd014 	sub	sp, sp, #20
   152a4:	e3500000 	cmp	r0, #0
   152a8:	1a000060 	bne	15430 <CTimer::GetTimeString()+0x19c>
   152ac:	e594500c 	ldr	r5, [r4, #12]
   152b0:	e594a004 	ldr	sl, [r4, #4]
   152b4:	e195300a 	orrs	r3, r5, sl
   152b8:	01a0a003 	moveq	sl, r3
   152bc:	0a00004e 	beq	153fc <CTimer::GetTimeString()+0x168>
   152c0:	e59f9188 	ldr	r9, [pc, #392]	@ 15450 <CTimer::GetTimeString()+0x1bc>
   152c4:	e59f4188 	ldr	r4, [pc, #392]	@ 15454 <CTimer::GetTimeString()+0x1c0>
   152c8:	e0873599 	umull	r3, r7, r9, r5
   152cc:	e1a072a7 	lsr	r7, r7, #5
   152d0:	e1a01007 	mov	r1, r7
   152d4:	e0890199 	umull	r0, r9, r9, r1
   152d8:	e1a092a9 	lsr	r9, r9, #5
   152dc:	e1a08009 	mov	r8, r9
   152e0:	e0699209 	rsb	r9, r9, r9, lsl #4
   152e4:	e0419109 	sub	r9, r1, r9, lsl #2
   152e8:	e0841894 	umull	r1, r4, r4, r8
   152ec:	e0677207 	rsb	r7, r7, r7, lsl #4
   152f0:	e59f6160 	ldr	r6, [pc, #352]	@ 15458 <CTimer::GetTimeString()+0x1c4>
   152f4:	e59f2160 	ldr	r2, [pc, #352]	@ 1545c <CTimer::GetTimeString()+0x1c8>
   152f8:	e59f3160 	ldr	r3, [pc, #352]	@ 15460 <CTimer::GetTimeString()+0x1cc>
   152fc:	e59fc160 	ldr	ip, [pc, #352]	@ 15464 <CTimer::GetTimeString()+0x1d0>
   15300:	e0457107 	sub	r7, r5, r7, lsl #2
   15304:	e1a04224 	lsr	r4, r4, #4
   15308:	ea000008 	b	15330 <CTimer::GetTimeString()+0x9c>
   1530c:	e3160003 	tst	r6, #3
   15310:	03a00001 	moveq	r0, #1
   15314:	13a00000 	movne	r0, #0
   15318:	e2801f5b 	add	r1, r0, #364	@ 0x16c
   1531c:	e2811001 	add	r1, r1, #1
   15320:	e1540001 	cmp	r4, r1
   15324:	3a00000b 	bcc	15358 <CTimer::GetTimeString()+0xc4>
   15328:	e0444001 	sub	r4, r4, r1
   1532c:	e2866001 	add	r6, r6, #1
   15330:	e0010692 	mul	r1, r2, r6
   15334:	e1530161 	cmp	r3, r1, ror #2
   15338:	3afffff3 	bcc	1530c <CTimer::GetTimeString()+0x78>
   1533c:	e15c0261 	cmp	ip, r1, ror #4
   15340:	23a00001 	movcs	r0, #1
   15344:	33a00000 	movcc	r0, #0
   15348:	e2801f5b 	add	r1, r0, #364	@ 0x16c
   1534c:	e2811001 	add	r1, r1, #1
   15350:	e1540001 	cmp	r4, r1
   15354:	2afffff3 	bcs	15328 <CTimer::GetTimeString()+0x94>
   15358:	e3a05000 	mov	r5, #0
   1535c:	e59f2104 	ldr	r2, [pc, #260]	@ 15468 <CTimer::GetTimeString()+0x1d4>
   15360:	ea000001 	b	1536c <CTimer::GetTimeString()+0xd8>
   15364:	e0444001 	sub	r4, r4, r1
   15368:	e2855001 	add	r5, r5, #1
   1536c:	e3550001 	cmp	r5, #1
   15370:	13a03000 	movne	r3, #0
   15374:	02003001 	andeq	r3, r0, #1
   15378:	e3530000 	cmp	r3, #0
   1537c:	13a0101d 	movne	r1, #29
   15380:	07921105 	ldreq	r1, [r2, r5, lsl #2]
   15384:	e1540001 	cmp	r4, r1
   15388:	2afffff5 	bcs	15364 <CTimer::GetTimeString()+0xd0>
   1538c:	e3a00010 	mov	r0, #16
   15390:	eb000574 	bl	16968 <operator new(unsigned int)>
   15394:	e59fb0d0 	ldr	fp, [pc, #208]	@ 1546c <CTimer::GetTimeString()+0x1d8>
   15398:	e08b3a9b 	umull	r3, fp, fp, sl
   1539c:	e1a0b2ab 	lsr	fp, fp, #5
   153a0:	e08bb10b 	add	fp, fp, fp, lsl #2
   153a4:	e08bb10b 	add	fp, fp, fp, lsl #2
   153a8:	e04ab10b 	sub	fp, sl, fp, lsl #2
   153ac:	e1a0a000 	mov	sl, r0
   153b0:	ebfff80f 	bl	133f4 <CString::CString()>
   153b4:	e59f30b4 	ldr	r3, [pc, #180]	@ 15470 <CTimer::GetTimeString()+0x1dc>
   153b8:	e1560003 	cmp	r6, r3
   153bc:	9a000011 	bls	15408 <CTimer::GetTimeString()+0x174>
   153c0:	e59f208c 	ldr	r2, [pc, #140]	@ 15454 <CTimer::GetTimeString()+0x1c0>
   153c4:	e58db00c 	str	fp, [sp, #12]
   153c8:	e0821892 	umull	r1, r2, r2, r8
   153cc:	e1a02222 	lsr	r2, r2, #4
   153d0:	e0822082 	add	r2, r2, r2, lsl #1
   153d4:	e0482182 	sub	r2, r8, r2, lsl #3
   153d8:	e58d2000 	str	r2, [sp]
   153dc:	e59f2090 	ldr	r2, [pc, #144]	@ 15474 <CTimer::GetTimeString()+0x1e0>
   153e0:	e58d7008 	str	r7, [sp, #8]
   153e4:	e58d9004 	str	r9, [sp, #4]
   153e8:	e1a0000a 	mov	r0, sl
   153ec:	e59f1084 	ldr	r1, [pc, #132]	@ 15478 <CTimer::GetTimeString()+0x1e4>
   153f0:	e7922105 	ldr	r2, [r2, r5, lsl #2]
   153f4:	e2843001 	add	r3, r4, #1
   153f8:	ebfffe17 	bl	14c5c <CString::Format(char const*, ...)>
   153fc:	e1a0000a 	mov	r0, sl
   15400:	e28dd014 	add	sp, sp, #20
   15404:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15408:	e1a0000a 	mov	r0, sl
   1540c:	e1a03009 	mov	r3, r9
   15410:	e1a02008 	mov	r2, r8
   15414:	e59f1060 	ldr	r1, [pc, #96]	@ 1547c <CTimer::GetTimeString()+0x1e8>
   15418:	e58db004 	str	fp, [sp, #4]
   1541c:	e58d7000 	str	r7, [sp]
   15420:	ebfffe0d 	bl	14c5c <CString::Format(char const*, ...)>
   15424:	e1a0000a 	mov	r0, sl
   15428:	e28dd014 	add	sp, sp, #20
   1542c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15430:	eb000916 	bl	17890 <EnterCritical>
   15434:	e5943010 	ldr	r3, [r4, #16]
   15438:	e594500c 	ldr	r5, [r4, #12]
   1543c:	e3530000 	cmp	r3, #0
   15440:	e594a004 	ldr	sl, [r4, #4]
   15444:	0affff9a 	beq	152b4 <CTimer::GetTimeString()+0x20>
   15448:	eb00093a 	bl	17938 <LeaveCritical>
   1544c:	eaffff98 	b	152b4 <CTimer::GetTimeString()+0x20>
   15450:	88888889 	.word	0x88888889
   15454:	aaaaaaab 	.word	0xaaaaaaab
   15458:	000007b2 	.word	0x000007b2
   1545c:	c28f5c29 	.word	0xc28f5c29
   15460:	028f5c28 	.word	0x028f5c28
   15464:	00a3d70a 	.word	0x00a3d70a
   15468:	0001e684 	.word	0x0001e684
   1546c:	51eb851f 	.word	0x51eb851f
   15470:	000007b7 	.word	0x000007b7
   15474:	0001ee6c 	.word	0x0001ee6c
   15478:	0001d5cc 	.word	0x0001d5cc
   1547c:	0001d5e8 	.word	0x0001d5e8

00015480 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   15480:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15484:	e1a07000 	mov	r7, r0
   15488:	e1a04002 	mov	r4, r2
   1548c:	e1a08001 	mov	r8, r1
   15490:	e3a00014 	mov	r0, #20
   15494:	e1a09003 	mov	r9, r3
   15498:	eb000532 	bl	16968 <operator new(unsigned int)>
   1549c:	e5976004 	ldr	r6, [r7, #4]
   154a0:	e3540000 	cmp	r4, #0
   154a4:	e0866008 	add	r6, r6, r8
   154a8:	0a000038 	beq	15590 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   154ac:	e1a05000 	mov	r5, r0
   154b0:	e59d3020 	ldr	r3, [sp, #32]
   154b4:	e5804004 	str	r4, [r0, #4]
   154b8:	e597001c 	ldr	r0, [r7, #28]
   154bc:	e5853010 	str	r3, [r5, #16]
   154c0:	e59f30f4 	ldr	r3, [pc, #244]	@ 155bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   154c4:	e3500000 	cmp	r0, #0
   154c8:	e5856008 	str	r6, [r5, #8]
   154cc:	e585900c 	str	r9, [r5, #12]
   154d0:	e5853000 	str	r3, [r5]
   154d4:	1a000022 	bne	15564 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   154d8:	e2878018 	add	r8, r7, #24
   154dc:	e1a00008 	mov	r0, r8
   154e0:	ebfff200 	bl	11ce8 <CPtrList::GetFirst() const>
   154e4:	e2504000 	subs	r4, r0, #0
   154e8:	0a00002e 	beq	155a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   154ec:	e1a00004 	mov	r0, r4
   154f0:	ebfff213 	bl	11d44 <CPtrList::GetPtr(TPtrListElement*)>
   154f4:	e3500000 	cmp	r0, #0
   154f8:	e59f90bc 	ldr	r9, [pc, #188]	@ 155bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   154fc:	0a000010 	beq	15544 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   15500:	e5903000 	ldr	r3, [r0]
   15504:	e1530009 	cmp	r3, r9
   15508:	1a000011 	bne	15554 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
   1550c:	e5903008 	ldr	r3, [r0, #8]
   15510:	e0433006 	sub	r3, r3, r6
   15514:	e3530000 	cmp	r3, #0
   15518:	ca000013 	bgt	1556c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
   1551c:	e1a01004 	mov	r1, r4
   15520:	e1a00008 	mov	r0, r8
   15524:	ebfff1f1 	bl	11cf0 <CPtrList::GetNext(TPtrListElement*) const>
   15528:	e3500000 	cmp	r0, #0
   1552c:	0a00001d 	beq	155a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   15530:	e1a04000 	mov	r4, r0
   15534:	e1a00004 	mov	r0, r4
   15538:	ebfff201 	bl	11d44 <CPtrList::GetPtr(TPtrListElement*)>
   1553c:	e3500000 	cmp	r0, #0
   15540:	1affffee 	bne	15500 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x80>
   15544:	e59f2074 	ldr	r2, [pc, #116]	@ 155c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   15548:	e59f1074 	ldr	r1, [pc, #116]	@ 155c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   1554c:	e59f0074 	ldr	r0, [pc, #116]	@ 155c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   15550:	ebffe873 	bl	f724 <assertion_failed>
   15554:	e3a02d07 	mov	r2, #448	@ 0x1c0
   15558:	e59f1064 	ldr	r1, [pc, #100]	@ 155c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   1555c:	e59f0068 	ldr	r0, [pc, #104]	@ 155cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
   15560:	ebffe86f 	bl	f724 <assertion_failed>
   15564:	eb0008c9 	bl	17890 <EnterCritical>
   15568:	eaffffda 	b	154d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   1556c:	e1a02005 	mov	r2, r5
   15570:	e1a01004 	mov	r1, r4
   15574:	e1a00008 	mov	r0, r8
   15578:	ebfff206 	bl	11d98 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   1557c:	e597301c 	ldr	r3, [r7, #28]
   15580:	e3530000 	cmp	r3, #0
   15584:	1a000005 	bne	155a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   15588:	e1a00005 	mov	r0, r5
   1558c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15590:	e59f2038 	ldr	r2, [pc, #56]	@ 155d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
   15594:	e59f1028 	ldr	r1, [pc, #40]	@ 155c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   15598:	e59f0034 	ldr	r0, [pc, #52]	@ 155d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x154>
   1559c:	ebffe860 	bl	f724 <assertion_failed>
   155a0:	eb0008e4 	bl	17938 <LeaveCritical>
   155a4:	eafffff7 	b	15588 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x108>
   155a8:	e1a02005 	mov	r2, r5
   155ac:	e1a01004 	mov	r1, r4
   155b0:	e1a00008 	mov	r0, r8
   155b4:	ebfff231 	bl	11e80 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   155b8:	eaffffef 	b	1557c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   155bc:	4b544d43 	.word	0x4b544d43
   155c0:	000001bf 	.word	0x000001bf
   155c4:	0001d540 	.word	0x0001d540
   155c8:	0001d5fc 	.word	0x0001d5fc
   155cc:	0001d60c 	.word	0x0001d60c
   155d0:	000001af 	.word	0x000001af
   155d4:	0001d984 	.word	0x0001d984

000155d8 <CTimer::CancelKernelTimer(unsigned int)>:
   155d8:	e92d4070 	push	{r4, r5, r6, lr}
   155dc:	e2514000 	subs	r4, r1, #0
   155e0:	0a000019 	beq	1564c <CTimer::CancelKernelTimer(unsigned int)+0x74>
   155e4:	e1a05000 	mov	r5, r0
   155e8:	e590001c 	ldr	r0, [r0, #28]
   155ec:	e3500000 	cmp	r0, #0
   155f0:	1a000013 	bne	15644 <CTimer::CancelKernelTimer(unsigned int)+0x6c>
   155f4:	e2856018 	add	r6, r5, #24
   155f8:	e1a01004 	mov	r1, r4
   155fc:	e1a00006 	mov	r0, r6
   15600:	ebfff29b 	bl	12074 <CPtrList::Find(void*) const>
   15604:	e2501000 	subs	r1, r0, #0
   15608:	0a000008 	beq	15630 <CTimer::CancelKernelTimer(unsigned int)+0x58>
   1560c:	e59f3058 	ldr	r3, [pc, #88]	@ 1566c <CTimer::CancelKernelTimer(unsigned int)+0x94>
   15610:	e5942000 	ldr	r2, [r4]
   15614:	e1520003 	cmp	r2, r3
   15618:	1a00000f 	bne	1565c <CTimer::CancelKernelTimer(unsigned int)+0x84>
   1561c:	e1a00006 	mov	r0, r6
   15620:	ebfff24f 	bl	11f64 <CPtrList::Remove(TPtrListElement*)>
   15624:	e3a01014 	mov	r1, #20
   15628:	e1a00004 	mov	r0, r4
   1562c:	eb0004e5 	bl	169c8 <operator delete(void*, unsigned int)>
   15630:	e595301c 	ldr	r3, [r5, #28]
   15634:	e3530000 	cmp	r3, #0
   15638:	08bd8070 	popeq	{r4, r5, r6, pc}
   1563c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15640:	ea0008bc 	b	17938 <LeaveCritical>
   15644:	eb000891 	bl	17890 <EnterCritical>
   15648:	eaffffe9 	b	155f4 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   1564c:	e3a02f77 	mov	r2, #476	@ 0x1dc
   15650:	e59f1018 	ldr	r1, [pc, #24]	@ 15670 <CTimer::CancelKernelTimer(unsigned int)+0x98>
   15654:	e59f0018 	ldr	r0, [pc, #24]	@ 15674 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   15658:	ebffe831 	bl	f724 <assertion_failed>
   1565c:	e59f2014 	ldr	r2, [pc, #20]	@ 15678 <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   15660:	e59f1008 	ldr	r1, [pc, #8]	@ 15670 <CTimer::CancelKernelTimer(unsigned int)+0x98>
   15664:	e59f0010 	ldr	r0, [pc, #16]	@ 1567c <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   15668:	ebffe82d 	bl	f724 <assertion_failed>
   1566c:	4b544d43 	.word	0x4b544d43
   15670:	0001d540 	.word	0x0001d540
   15674:	0001d574 	.word	0x0001d574
   15678:	000001e3 	.word	0x000001e3
   1567c:	0001d580 	.word	0x0001d580

00015680 <CTimer::PollKernelTimers()>:
   15680:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15684:	e1a05000 	mov	r5, r0
   15688:	e590001c 	ldr	r0, [r0, #28]
   1568c:	e3500000 	cmp	r0, #0
   15690:	1a00002d 	bne	1574c <CTimer::PollKernelTimers()+0xcc>
   15694:	e59f70ec 	ldr	r7, [pc, #236]	@ 15788 <CTimer::PollKernelTimers()+0x108>
   15698:	e2856018 	add	r6, r5, #24
   1569c:	e1a00006 	mov	r0, r6
   156a0:	ebfff190 	bl	11ce8 <CPtrList::GetFirst() const>
   156a4:	e2508000 	subs	r8, r0, #0
   156a8:	0a000031 	beq	15774 <CTimer::PollKernelTimers()+0xf4>
   156ac:	ebfff1a4 	bl	11d44 <CPtrList::GetPtr(TPtrListElement*)>
   156b0:	e2504000 	subs	r4, r0, #0
   156b4:	0a000026 	beq	15754 <CTimer::PollKernelTimers()+0xd4>
   156b8:	e5943000 	ldr	r3, [r4]
   156bc:	e1530007 	cmp	r3, r7
   156c0:	1a000027 	bne	15764 <CTimer::PollKernelTimers()+0xe4>
   156c4:	e5952004 	ldr	r2, [r5, #4]
   156c8:	e5943008 	ldr	r3, [r4, #8]
   156cc:	e0433002 	sub	r3, r3, r2
   156d0:	e3530000 	cmp	r3, #0
   156d4:	ca000026 	bgt	15774 <CTimer::PollKernelTimers()+0xf4>
   156d8:	e1a01008 	mov	r1, r8
   156dc:	e1a00006 	mov	r0, r6
   156e0:	ebfff21f 	bl	11f64 <CPtrList::Remove(TPtrListElement*)>
   156e4:	e595301c 	ldr	r3, [r5, #28]
   156e8:	e3530000 	cmp	r3, #0
   156ec:	1a00000e 	bne	1572c <CTimer::PollKernelTimers()+0xac>
   156f0:	e5943004 	ldr	r3, [r4, #4]
   156f4:	e3530000 	cmp	r3, #0
   156f8:	0a00000f 	beq	1573c <CTimer::PollKernelTimers()+0xbc>
   156fc:	e1a00004 	mov	r0, r4
   15700:	e5942010 	ldr	r2, [r4, #16]
   15704:	e594100c 	ldr	r1, [r4, #12]
   15708:	e12fff33 	blx	r3
   1570c:	e1a00004 	mov	r0, r4
   15710:	e3a01014 	mov	r1, #20
   15714:	eb0004ab 	bl	169c8 <operator delete(void*, unsigned int)>
   15718:	e595001c 	ldr	r0, [r5, #28]
   1571c:	e3500000 	cmp	r0, #0
   15720:	0affffdd 	beq	1569c <CTimer::PollKernelTimers()+0x1c>
   15724:	eb000859 	bl	17890 <EnterCritical>
   15728:	eaffffdb 	b	1569c <CTimer::PollKernelTimers()+0x1c>
   1572c:	eb000881 	bl	17938 <LeaveCritical>
   15730:	e5943004 	ldr	r3, [r4, #4]
   15734:	e3530000 	cmp	r3, #0
   15738:	1affffef 	bne	156fc <CTimer::PollKernelTimers()+0x7c>
   1573c:	e59f2048 	ldr	r2, [pc, #72]	@ 1578c <CTimer::PollKernelTimers()+0x10c>
   15740:	e59f1048 	ldr	r1, [pc, #72]	@ 15790 <CTimer::PollKernelTimers()+0x110>
   15744:	e59f0048 	ldr	r0, [pc, #72]	@ 15794 <CTimer::PollKernelTimers()+0x114>
   15748:	ebffe7f5 	bl	f724 <assertion_failed>
   1574c:	eb00084f 	bl	17890 <EnterCritical>
   15750:	eaffffcf 	b	15694 <CTimer::PollKernelTimers()+0x14>
   15754:	e3a02f7e 	mov	r2, #504	@ 0x1f8
   15758:	e59f1030 	ldr	r1, [pc, #48]	@ 15790 <CTimer::PollKernelTimers()+0x110>
   1575c:	e59f0034 	ldr	r0, [pc, #52]	@ 15798 <CTimer::PollKernelTimers()+0x118>
   15760:	ebffe7ef 	bl	f724 <assertion_failed>
   15764:	e59f2030 	ldr	r2, [pc, #48]	@ 1579c <CTimer::PollKernelTimers()+0x11c>
   15768:	e59f1020 	ldr	r1, [pc, #32]	@ 15790 <CTimer::PollKernelTimers()+0x110>
   1576c:	e59f002c 	ldr	r0, [pc, #44]	@ 157a0 <CTimer::PollKernelTimers()+0x120>
   15770:	ebffe7eb 	bl	f724 <assertion_failed>
   15774:	e595301c 	ldr	r3, [r5, #28]
   15778:	e3530000 	cmp	r3, #0
   1577c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   15780:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   15784:	ea00086b 	b	17938 <LeaveCritical>
   15788:	4b544d43 	.word	0x4b544d43
   1578c:	00000205 	.word	0x00000205
   15790:	0001d540 	.word	0x0001d540
   15794:	0001d984 	.word	0x0001d984
   15798:	0001d574 	.word	0x0001d574
   1579c:	000001f9 	.word	0x000001f9
   157a0:	0001d580 	.word	0x0001d580

000157a4 <CTimer::InterruptHandler()>:
   157a4:	e92d4070 	push	{r4, r5, r6, lr}
   157a8:	e3a03000 	mov	r3, #0
   157ac:	e1a04000 	mov	r4, r0
   157b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   157b4:	e59f1100 	ldr	r1, [pc, #256]	@ 158bc <CTimer::InterruptHandler()+0x118>
   157b8:	e5913018 	ldr	r3, [r1, #24]
   157bc:	e2833c27 	add	r3, r3, #9984	@ 0x2700
   157c0:	e2833010 	add	r3, r3, #16
   157c4:	e5813018 	str	r3, [r1, #24]
   157c8:	e5912004 	ldr	r2, [r1, #4]
   157cc:	e0432002 	sub	r2, r3, r2
   157d0:	e3520001 	cmp	r2, #1
   157d4:	dafffff8 	ble	157bc <CTimer::InterruptHandler()+0x18>
   157d8:	e3a02008 	mov	r2, #8
   157dc:	e3a03000 	mov	r3, #0
   157e0:	e5812000 	str	r2, [r1]
   157e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   157e8:	e5940010 	ldr	r0, [r4, #16]
   157ec:	e1500003 	cmp	r0, r3
   157f0:	1a00001c 	bne	15868 <CTimer::InterruptHandler()+0xc4>
   157f4:	e5943004 	ldr	r3, [r4, #4]
   157f8:	e59f20c0 	ldr	r2, [pc, #192]	@ 158c0 <CTimer::InterruptHandler()+0x11c>
   157fc:	e2833001 	add	r3, r3, #1
   15800:	e0020392 	mul	r2, r2, r3
   15804:	e59f10b8 	ldr	r1, [pc, #184]	@ 158c4 <CTimer::InterruptHandler()+0x120>
   15808:	e5843004 	str	r3, [r4, #4]
   1580c:	e1510162 	cmp	r1, r2, ror #2
   15810:	2a00000d 	bcs	1584c <CTimer::InterruptHandler()+0xa8>
   15814:	e1a00004 	mov	r0, r4
   15818:	ebffff98 	bl	15680 <CTimer::PollKernelTimers()>
   1581c:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
   15820:	e3530000 	cmp	r3, #0
   15824:	08bd8070 	popeq	{r4, r5, r6, pc}
   15828:	e3a05000 	mov	r5, #0
   1582c:	e2846028 	add	r6, r4, #40	@ 0x28
   15830:	e5b63004 	ldr	r3, [r6, #4]!
   15834:	e12fff33 	blx	r3
   15838:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
   1583c:	e2855001 	add	r5, r5, #1
   15840:	e1530005 	cmp	r3, r5
   15844:	8afffff9 	bhi	15830 <CTimer::InterruptHandler()+0x8c>
   15848:	e8bd8070 	pop	{r4, r5, r6, pc}
   1584c:	e5943008 	ldr	r3, [r4, #8]
   15850:	e2833001 	add	r3, r3, #1
   15854:	e5843008 	str	r3, [r4, #8]
   15858:	e594300c 	ldr	r3, [r4, #12]
   1585c:	e2833001 	add	r3, r3, #1
   15860:	e584300c 	str	r3, [r4, #12]
   15864:	eaffffea 	b	15814 <CTimer::InterruptHandler()+0x70>
   15868:	eb000808 	bl	17890 <EnterCritical>
   1586c:	e5943004 	ldr	r3, [r4, #4]
   15870:	e59f2048 	ldr	r2, [pc, #72]	@ 158c0 <CTimer::InterruptHandler()+0x11c>
   15874:	e2833001 	add	r3, r3, #1
   15878:	e0020392 	mul	r2, r2, r3
   1587c:	e59f0040 	ldr	r0, [pc, #64]	@ 158c4 <CTimer::InterruptHandler()+0x120>
   15880:	e5941010 	ldr	r1, [r4, #16]
   15884:	e1500162 	cmp	r0, r2, ror #2
   15888:	e5843004 	str	r3, [r4, #4]
   1588c:	2a000003 	bcs	158a0 <CTimer::InterruptHandler()+0xfc>
   15890:	e3510000 	cmp	r1, #0
   15894:	0affffde 	beq	15814 <CTimer::InterruptHandler()+0x70>
   15898:	eb000826 	bl	17938 <LeaveCritical>
   1589c:	eaffffdc 	b	15814 <CTimer::InterruptHandler()+0x70>
   158a0:	e5943008 	ldr	r3, [r4, #8]
   158a4:	e2833001 	add	r3, r3, #1
   158a8:	e5843008 	str	r3, [r4, #8]
   158ac:	e594300c 	ldr	r3, [r4, #12]
   158b0:	e2833001 	add	r3, r3, #1
   158b4:	e584300c 	str	r3, [r4, #12]
   158b8:	eafffff4 	b	15890 <CTimer::InterruptHandler()+0xec>
   158bc:	20003000 	.word	0x20003000
   158c0:	c28f5c29 	.word	0xc28f5c29
   158c4:	028f5c28 	.word	0x028f5c28

000158c8 <CTimer::InterruptHandler(void*)>:
   158c8:	e3500000 	cmp	r0, #0
   158cc:	0a000000 	beq	158d4 <CTimer::InterruptHandler(void*)+0xc>
   158d0:	eaffffb3 	b	157a4 <CTimer::InterruptHandler()>
   158d4:	e3a02f93 	mov	r2, #588	@ 0x24c
   158d8:	e92d4010 	push	{r4, lr}
   158dc:	e59f1004 	ldr	r1, [pc, #4]	@ 158e8 <CTimer::InterruptHandler(void*)+0x20>
   158e0:	e59f0004 	ldr	r0, [pc, #4]	@ 158ec <CTimer::InterruptHandler(void*)+0x24>
   158e4:	ebffe78e 	bl	f724 <assertion_failed>
   158e8:	0001d540 	.word	0x0001d540
   158ec:	0001d634 	.word	0x0001d634

000158f0 <CTimer::TuneMsDelay()>:
   158f0:	e92d4070 	push	{r4, r5, r6, lr}
   158f4:	e1a06000 	mov	r6, r0
   158f8:	e5900020 	ldr	r0, [r0, #32]
   158fc:	e24dd008 	sub	sp, sp, #8
   15900:	e0603280 	rsb	r3, r0, r0, lsl #5
   15904:	e0800103 	add	r0, r0, r3, lsl #2
   15908:	e1a00180 	lsl	r0, r0, #3
   1590c:	e5964004 	ldr	r4, [r6, #4]
   15910:	eb0010d8 	bl	19c78 <DelayLoop>
   15914:	e5961004 	ldr	r1, [r6, #4]
   15918:	e59f006c 	ldr	r0, [pc, #108]	@ 1598c <CTimer::TuneMsDelay()+0x9c>
   1591c:	e0411004 	sub	r1, r1, r4
   15920:	eb001220 	bl	1a1a8 <__udivsi3>
   15924:	e1a05000 	mov	r5, r0
   15928:	e5963020 	ldr	r3, [r6, #32]
   1592c:	e59f405c 	ldr	r4, [pc, #92]	@ 15990 <CTimer::TuneMsDelay()+0xa0>
   15930:	e0030093 	mul	r3, r3, r0
   15934:	e0831394 	umull	r1, r3, r4, r3
   15938:	e59f2054 	ldr	r2, [pc, #84]	@ 15994 <CTimer::TuneMsDelay()+0xa4>
   1593c:	e1a032a3 	lsr	r3, r3, #5
   15940:	e5863020 	str	r3, [r6, #32]
   15944:	e2833f7d 	add	r3, r3, #500	@ 0x1f4
   15948:	e0832392 	umull	r2, r3, r2, r3
   1594c:	e084c594 	umull	ip, r4, r4, r5
   15950:	e1a03323 	lsr	r3, r3, #6
   15954:	e5863024 	str	r3, [r6, #36]	@ 0x24
   15958:	e1a042a4 	lsr	r4, r4, #5
   1595c:	ebffec70 	bl	10b24 <CLogger::Get()>
   15960:	e084c104 	add	ip, r4, r4, lsl #2
   15964:	e08cc10c 	add	ip, ip, ip, lsl #2
   15968:	e045510c 	sub	r5, r5, ip, lsl #2
   1596c:	e3a02003 	mov	r2, #3
   15970:	e59f3020 	ldr	r3, [pc, #32]	@ 15998 <CTimer::TuneMsDelay()+0xa8>
   15974:	e59f1020 	ldr	r1, [pc, #32]	@ 1599c <CTimer::TuneMsDelay()+0xac>
   15978:	e58d4000 	str	r4, [sp]
   1597c:	e58d5004 	str	r5, [sp, #4]
   15980:	ebffee33 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15984:	e28dd008 	add	sp, sp, #8
   15988:	e8bd8070 	pop	{r4, r5, r6, pc}
   1598c:	00002710 	.word	0x00002710
   15990:	51eb851f 	.word	0x51eb851f
   15994:	10624dd3 	.word	0x10624dd3
   15998:	0001d640 	.word	0x0001d640
   1599c:	0001e6b4 	.word	0x0001e6b4

000159a0 <CTimer::Initialize()>:
   159a0:	e92d4070 	push	{r4, r5, r6, lr}
   159a4:	e1a04000 	mov	r4, r0
   159a8:	e5900000 	ldr	r0, [r0]
   159ac:	e3500000 	cmp	r0, #0
   159b0:	0a000011 	beq	159fc <CTimer::Initialize()+0x5c>
   159b4:	e1a03004 	mov	r3, r4
   159b8:	e3a01003 	mov	r1, #3
   159bc:	e59f2048 	ldr	r2, [pc, #72]	@ 15a0c <CTimer::Initialize()+0x6c>
   159c0:	eb000868 	bl	17b68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   159c4:	e3a05000 	mov	r5, #0
   159c8:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   159cc:	e59f203c 	ldr	r2, [pc, #60]	@ 15a10 <CTimer::Initialize()+0x70>
   159d0:	e59f303c 	ldr	r3, [pc, #60]	@ 15a14 <CTimer::Initialize()+0x74>
   159d4:	e1a00004 	mov	r0, r4
   159d8:	e5823004 	str	r3, [r2, #4]
   159dc:	e5923004 	ldr	r3, [r2, #4]
   159e0:	e2833c27 	add	r3, r3, #9984	@ 0x2700
   159e4:	e2833010 	add	r3, r3, #16
   159e8:	e5823018 	str	r3, [r2, #24]
   159ec:	ebffffbf 	bl	158f0 <CTimer::TuneMsDelay()>
   159f0:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   159f4:	e3a00001 	mov	r0, #1
   159f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   159fc:	e3a02064 	mov	r2, #100	@ 0x64
   15a00:	e59f1010 	ldr	r1, [pc, #16]	@ 15a18 <CTimer::Initialize()+0x78>
   15a04:	e59f0010 	ldr	r0, [pc, #16]	@ 15a1c <CTimer::Initialize()+0x7c>
   15a08:	ebffe745 	bl	f724 <assertion_failed>
   15a0c:	000158c8 	.word	0x000158c8
   15a10:	20003000 	.word	0x20003000
   15a14:	fe363c80 	.word	0xfe363c80
   15a18:	0001d540 	.word	0x0001d540
   15a1c:	0001d55c 	.word	0x0001d55c

00015a20 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   15a20:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
   15a24:	e92d4010 	push	{r4, lr}
   15a28:	e3530000 	cmp	r3, #0
   15a2c:	1a000006 	bne	15a4c <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x2c>
   15a30:	e3510000 	cmp	r1, #0
   15a34:	e5801028 	str	r1, [r0, #40]	@ 0x28
   15a38:	18bd8010 	popne	{r4, pc}
   15a3c:	e3a02f99 	mov	r2, #612	@ 0x264
   15a40:	e59f1014 	ldr	r1, [pc, #20]	@ 15a5c <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x3c>
   15a44:	e59f0014 	ldr	r0, [pc, #20]	@ 15a60 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x40>
   15a48:	ebffe735 	bl	f724 <assertion_failed>
   15a4c:	e59f2010 	ldr	r2, [pc, #16]	@ 15a64 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x44>
   15a50:	e59f1004 	ldr	r1, [pc, #4]	@ 15a5c <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x3c>
   15a54:	e59f000c 	ldr	r0, [pc, #12]	@ 15a68 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x48>
   15a58:	ebffe731 	bl	f724 <assertion_failed>
   15a5c:	0001d540 	.word	0x0001d540
   15a60:	0001d674 	.word	0x0001d674
   15a64:	00000262 	.word	0x00000262
   15a68:	0001d658 	.word	0x0001d658

00015a6c <CTimer::RegisterPeriodicHandler(void (*)())>:
   15a6c:	e3510000 	cmp	r1, #0
   15a70:	e92d4010 	push	{r4, lr}
   15a74:	0a00000b 	beq	15aa8 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   15a78:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   15a7c:	e3530003 	cmp	r3, #3
   15a80:	8a00000c 	bhi	15ab8 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   15a84:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   15a88:	e3a02000 	mov	r2, #0
   15a8c:	e0803103 	add	r3, r0, r3, lsl #2
   15a90:	e583102c 	str	r1, [r3, #44]	@ 0x2c
   15a94:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   15a98:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   15a9c:	e2833001 	add	r3, r3, #1
   15aa0:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   15aa4:	e8bd8010 	pop	{r4, pc}
   15aa8:	e59f2018 	ldr	r2, [pc, #24]	@ 15ac8 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   15aac:	e59f1018 	ldr	r1, [pc, #24]	@ 15acc <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   15ab0:	e59f0018 	ldr	r0, [pc, #24]	@ 15ad0 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   15ab4:	ebffe71a 	bl	f724 <assertion_failed>
   15ab8:	e59f2014 	ldr	r2, [pc, #20]	@ 15ad4 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   15abc:	e59f1008 	ldr	r1, [pc, #8]	@ 15acc <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   15ac0:	e59f0010 	ldr	r0, [pc, #16]	@ 15ad8 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   15ac4:	ebffe716 	bl	f724 <assertion_failed>
   15ac8:	00000269 	.word	0x00000269
   15acc:	0001d540 	.word	0x0001d540
   15ad0:	0001d984 	.word	0x0001d984
   15ad4:	0000026b 	.word	0x0000026b
   15ad8:	0001d690 	.word	0x0001d690

00015adc <CTimer::SimpleMsDelay(unsigned int)>:
   15adc:	e3500000 	cmp	r0, #0
   15ae0:	012fff1e 	bxeq	lr
   15ae4:	e0603280 	rsb	r3, r0, r0, lsl #5
   15ae8:	e0800103 	add	r0, r0, r3, lsl #2
   15aec:	e1b00180 	lsls	r0, r0, #3
   15af0:	012fff1e 	bxeq	lr
   15af4:	e2803001 	add	r3, r0, #1
   15af8:	e3a02000 	mov	r2, #0
   15afc:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   15b00:	e59f101c 	ldr	r1, [pc, #28]	@ 15b24 <CTimer::SimpleMsDelay(unsigned int)+0x48>
   15b04:	e5910004 	ldr	r0, [r1, #4]
   15b08:	e5912004 	ldr	r2, [r1, #4]
   15b0c:	e0422000 	sub	r2, r2, r0
   15b10:	e1530002 	cmp	r3, r2
   15b14:	8afffffb 	bhi	15b08 <CTimer::SimpleMsDelay(unsigned int)+0x2c>
   15b18:	e3a03000 	mov	r3, #0
   15b1c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   15b20:	e12fff1e 	bx	lr
   15b24:	20003000 	.word	0x20003000

00015b28 <CTimer::SimpleusDelay(unsigned int)>:
   15b28:	e3500000 	cmp	r0, #0
   15b2c:	012fff1e 	bxeq	lr
   15b30:	e2800001 	add	r0, r0, #1
   15b34:	e3a03000 	mov	r3, #0
   15b38:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   15b3c:	e59f201c 	ldr	r2, [pc, #28]	@ 15b60 <CTimer::SimpleusDelay(unsigned int)+0x38>
   15b40:	e5921004 	ldr	r1, [r2, #4]
   15b44:	e5923004 	ldr	r3, [r2, #4]
   15b48:	e0433001 	sub	r3, r3, r1
   15b4c:	e1500003 	cmp	r0, r3
   15b50:	8afffffb 	bhi	15b44 <CTimer::SimpleusDelay(unsigned int)+0x1c>
   15b54:	e3a03000 	mov	r3, #0
   15b58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   15b5c:	e12fff1e 	bx	lr
   15b60:	20003000 	.word	0x20003000

00015b64 <CTimer::IsLeapYear(unsigned int)>:
   15b64:	e59f3030 	ldr	r3, [pc, #48]	@ 15b9c <CTimer::IsLeapYear(unsigned int)+0x38>
   15b68:	e59f2030 	ldr	r2, [pc, #48]	@ 15ba0 <CTimer::IsLeapYear(unsigned int)+0x3c>
   15b6c:	e0030093 	mul	r3, r3, r0
   15b70:	e1520163 	cmp	r2, r3, ror #2
   15b74:	2a000003 	bcs	15b88 <CTimer::IsLeapYear(unsigned int)+0x24>
   15b78:	e3100003 	tst	r0, #3
   15b7c:	03a00001 	moveq	r0, #1
   15b80:	13a00000 	movne	r0, #0
   15b84:	e12fff1e 	bx	lr
   15b88:	e59f2014 	ldr	r2, [pc, #20]	@ 15ba4 <CTimer::IsLeapYear(unsigned int)+0x40>
   15b8c:	e1520263 	cmp	r2, r3, ror #4
   15b90:	23a00001 	movcs	r0, #1
   15b94:	33a00000 	movcc	r0, #0
   15b98:	e12fff1e 	bx	lr
   15b9c:	c28f5c29 	.word	0xc28f5c29
   15ba0:	028f5c28 	.word	0x028f5c28
   15ba4:	00a3d70a 	.word	0x00a3d70a

00015ba8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   15ba8:	e3500001 	cmp	r0, #1
   15bac:	0a000002 	beq	15bbc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   15bb0:	e59f3038 	ldr	r3, [pc, #56]	@ 15bf0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>
   15bb4:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   15bb8:	e12fff1e 	bx	lr
   15bbc:	e59f3030 	ldr	r3, [pc, #48]	@ 15bf4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   15bc0:	e59f2030 	ldr	r2, [pc, #48]	@ 15bf8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x50>
   15bc4:	e0030193 	mul	r3, r3, r1
   15bc8:	e1520163 	cmp	r2, r3, ror #2
   15bcc:	2a000003 	bcs	15be0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x38>
   15bd0:	e3110003 	tst	r1, #3
   15bd4:	1afffff5 	bne	15bb0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   15bd8:	e3a0001d 	mov	r0, #29
   15bdc:	e12fff1e 	bx	lr
   15be0:	e59f2014 	ldr	r2, [pc, #20]	@ 15bfc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x54>
   15be4:	e1520263 	cmp	r2, r3, ror #4
   15be8:	3afffff0 	bcc	15bb0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   15bec:	eafffff9 	b	15bd8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x30>
   15bf0:	0001e684 	.word	0x0001e684
   15bf4:	c28f5c29 	.word	0xc28f5c29
   15bf8:	028f5c28 	.word	0x028f5c28
   15bfc:	00a3d70a 	.word	0x00a3d70a

00015c00 <CTimer::Get()>:
   15c00:	e59f301c 	ldr	r3, [pc, #28]	@ 15c24 <CTimer::Get()+0x24>
   15c04:	e5930000 	ldr	r0, [r3]
   15c08:	e3500000 	cmp	r0, #0
   15c0c:	112fff1e 	bxne	lr
   15c10:	e3a02fab 	mov	r2, #684	@ 0x2ac
   15c14:	e92d4010 	push	{r4, lr}
   15c18:	e59f1008 	ldr	r1, [pc, #8]	@ 15c28 <CTimer::Get()+0x28>
   15c1c:	e59f0008 	ldr	r0, [pc, #8]	@ 15c2c <CTimer::Get()+0x2c>
   15c20:	ebffe6bf 	bl	f724 <assertion_failed>
   15c24:	00020b88 	.word	0x00020b88
   15c28:	0001d540 	.word	0x0001d540
   15c2c:	0001d6c4 	.word	0x0001d6c4

00015c30 <memmove>:
   15c30:	e1500001 	cmp	r0, r1
   15c34:	9a000002 	bls	15c44 <memmove+0x14>
   15c38:	e0813002 	add	r3, r1, r2
   15c3c:	e1530000 	cmp	r3, r0
   15c40:	8a000000 	bhi	15c48 <memmove+0x18>
   15c44:	ea00023c 	b	1653c <memcpy>
   15c48:	e3520000 	cmp	r2, #0
   15c4c:	e0802002 	add	r2, r0, r2
   15c50:	012fff1e 	bxeq	lr
   15c54:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   15c58:	e1510003 	cmp	r1, r3
   15c5c:	e562c001 	strb	ip, [r2, #-1]!
   15c60:	1afffffb 	bne	15c54 <memmove+0x24>
   15c64:	e12fff1e 	bx	lr

00015c68 <memcmp>:
   15c68:	e3520000 	cmp	r2, #0
   15c6c:	e242c001 	sub	ip, r2, #1
   15c70:	0a00000c 	beq	15ca8 <memcmp+0x40>
   15c74:	e2403001 	sub	r3, r0, #1
   15c78:	e2411001 	sub	r1, r1, #1
   15c7c:	e080000c 	add	r0, r0, ip
   15c80:	ea000002 	b	15c90 <memcmp+0x28>
   15c84:	3a000009 	bcc	15cb0 <memcmp+0x48>
   15c88:	e1530000 	cmp	r3, r0
   15c8c:	0a000005 	beq	15ca8 <memcmp+0x40>
   15c90:	e5f3c001 	ldrb	ip, [r3, #1]!
   15c94:	e5f12001 	ldrb	r2, [r1, #1]!
   15c98:	e15c0002 	cmp	ip, r2
   15c9c:	9afffff8 	bls	15c84 <memcmp+0x1c>
   15ca0:	e3a00001 	mov	r0, #1
   15ca4:	e12fff1e 	bx	lr
   15ca8:	e3a00000 	mov	r0, #0
   15cac:	e12fff1e 	bx	lr
   15cb0:	e3e00000 	mvn	r0, #0
   15cb4:	e12fff1e 	bx	lr

00015cb8 <strlen>:
   15cb8:	e1a03000 	mov	r3, r0
   15cbc:	e0d300d1 	ldrsb	r0, [r3], #1
   15cc0:	e3500000 	cmp	r0, #0
   15cc4:	012fff1e 	bxeq	lr
   15cc8:	e3a00000 	mov	r0, #0
   15ccc:	e0d320d1 	ldrsb	r2, [r3], #1
   15cd0:	e2800001 	add	r0, r0, #1
   15cd4:	e3520000 	cmp	r2, #0
   15cd8:	1afffffb 	bne	15ccc <strlen+0x14>
   15cdc:	e12fff1e 	bx	lr

00015ce0 <strcmp>:
   15ce0:	e1d030d0 	ldrsb	r3, [r0]
   15ce4:	e3530000 	cmp	r3, #0
   15ce8:	01d120d0 	ldrsbeq	r2, [r1]
   15cec:	1a000006 	bne	15d0c <strcmp+0x2c>
   15cf0:	ea000009 	b	15d1c <strcmp+0x3c>
   15cf4:	e1520003 	cmp	r2, r3
   15cf8:	ba00000c 	blt	15d30 <strcmp+0x50>
   15cfc:	ca00000d 	bgt	15d38 <strcmp+0x58>
   15d00:	e1f030d1 	ldrsb	r3, [r0, #1]!
   15d04:	e3530000 	cmp	r3, #0
   15d08:	0a00000c 	beq	15d40 <strcmp+0x60>
   15d0c:	e1a0c001 	mov	ip, r1
   15d10:	e0d120d1 	ldrsb	r2, [r1], #1
   15d14:	e3520000 	cmp	r2, #0
   15d18:	1afffff5 	bne	15cf4 <strcmp+0x14>
   15d1c:	e1530002 	cmp	r3, r2
   15d20:	ca000002 	bgt	15d30 <strcmp+0x50>
   15d24:	b3e00000 	mvnlt	r0, #0
   15d28:	a3a00000 	movge	r0, #0
   15d2c:	e12fff1e 	bx	lr
   15d30:	e3a00001 	mov	r0, #1
   15d34:	e12fff1e 	bx	lr
   15d38:	e3e00000 	mvn	r0, #0
   15d3c:	e12fff1e 	bx	lr
   15d40:	e1dc20d1 	ldrsb	r2, [ip, #1]
   15d44:	e1530002 	cmp	r3, r2
   15d48:	dafffff5 	ble	15d24 <strcmp+0x44>
   15d4c:	eafffff7 	b	15d30 <strcmp+0x50>

00015d50 <strcasecmp>:
   15d50:	e2400001 	sub	r0, r0, #1
   15d54:	ea000009 	b	15d80 <strcasecmp+0x30>
   15d58:	e0d130d1 	ldrsb	r3, [r1], #1
   15d5c:	e243c061 	sub	ip, r3, #97	@ 0x61
   15d60:	e35c0019 	cmp	ip, #25
   15d64:	92433020 	subls	r3, r3, #32
   15d68:	9a000001 	bls	15d74 <strcasecmp+0x24>
   15d6c:	e3530000 	cmp	r3, #0
   15d70:	0a000012 	beq	15dc0 <strcasecmp+0x70>
   15d74:	e1520003 	cmp	r2, r3
   15d78:	ca000012 	bgt	15dc8 <strcasecmp+0x78>
   15d7c:	ba000013 	blt	15dd0 <strcasecmp+0x80>
   15d80:	e1f020d1 	ldrsb	r2, [r0, #1]!
   15d84:	e2423061 	sub	r3, r2, #97	@ 0x61
   15d88:	e3530019 	cmp	r3, #25
   15d8c:	92422020 	subls	r2, r2, #32
   15d90:	9afffff0 	bls	15d58 <strcasecmp+0x8>
   15d94:	e3520000 	cmp	r2, #0
   15d98:	1affffee 	bne	15d58 <strcasecmp+0x8>
   15d9c:	e1d130d0 	ldrsb	r3, [r1]
   15da0:	e2431061 	sub	r1, r3, #97	@ 0x61
   15da4:	e3510019 	cmp	r1, #25
   15da8:	8a000004 	bhi	15dc0 <strcasecmp+0x70>
   15dac:	e2433020 	sub	r3, r3, #32
   15db0:	e1530002 	cmp	r3, r2
   15db4:	d3a00000 	movle	r0, #0
   15db8:	c3e00000 	mvngt	r0, #0
   15dbc:	e12fff1e 	bx	lr
   15dc0:	e1530002 	cmp	r3, r2
   15dc4:	aafffff9 	bge	15db0 <strcasecmp+0x60>
   15dc8:	e3a00001 	mov	r0, #1
   15dcc:	e12fff1e 	bx	lr
   15dd0:	e3e00000 	mvn	r0, #0
   15dd4:	e12fff1e 	bx	lr

00015dd8 <strncmp>:
   15dd8:	e3520000 	cmp	r2, #0
   15ddc:	0a00001b 	beq	15e50 <strncmp+0x78>
   15de0:	e92d4010 	push	{r4, lr}
   15de4:	ea000007 	b	15e08 <strncmp+0x30>
   15de8:	e0d1c0d1 	ldrsb	ip, [r1], #1
   15dec:	e35c0000 	cmp	ip, #0
   15df0:	0a000009 	beq	15e1c <strncmp+0x44>
   15df4:	e153000c 	cmp	r3, ip
   15df8:	ca00000e 	bgt	15e38 <strncmp+0x60>
   15dfc:	ba00000f 	blt	15e40 <strncmp+0x68>
   15e00:	e2522001 	subs	r2, r2, #1
   15e04:	0a00000f 	beq	15e48 <strncmp+0x70>
   15e08:	e1a04000 	mov	r4, r0
   15e0c:	e0d030d1 	ldrsb	r3, [r0], #1
   15e10:	e1a0e001 	mov	lr, r1
   15e14:	e3530000 	cmp	r3, #0
   15e18:	1afffff2 	bne	15de8 <strncmp+0x10>
   15e1c:	e1d420d0 	ldrsb	r2, [r4]
   15e20:	e1de30d0 	ldrsb	r3, [lr]
   15e24:	e1520003 	cmp	r2, r3
   15e28:	ca000002 	bgt	15e38 <strncmp+0x60>
   15e2c:	b3e00000 	mvnlt	r0, #0
   15e30:	a3a00000 	movge	r0, #0
   15e34:	e8bd8010 	pop	{r4, pc}
   15e38:	e3a00001 	mov	r0, #1
   15e3c:	e8bd8010 	pop	{r4, pc}
   15e40:	e3e00000 	mvn	r0, #0
   15e44:	e8bd8010 	pop	{r4, pc}
   15e48:	e1a00002 	mov	r0, r2
   15e4c:	e8bd8010 	pop	{r4, pc}
   15e50:	e1a00002 	mov	r0, r2
   15e54:	e12fff1e 	bx	lr

00015e58 <strncasecmp>:
   15e58:	e3520000 	cmp	r2, #0
   15e5c:	0a00001e 	beq	15edc <strncasecmp+0x84>
   15e60:	e2400001 	sub	r0, r0, #1
   15e64:	e1f030d1 	ldrsb	r3, [r0, #1]!
   15e68:	e243c061 	sub	ip, r3, #97	@ 0x61
   15e6c:	e35c0019 	cmp	ip, #25
   15e70:	92433020 	subls	r3, r3, #32
   15e74:	8a00000d 	bhi	15eb0 <strncasecmp+0x58>
   15e78:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   15e7c:	e0d1c0d1 	ldrsb	ip, [r1], #1
   15e80:	e24ce061 	sub	lr, ip, #97	@ 0x61
   15e84:	e35e0019 	cmp	lr, #25
   15e88:	924cc020 	subls	ip, ip, #32
   15e8c:	9a000014 	bls	15ee4 <strncasecmp+0x8c>
   15e90:	e35c0000 	cmp	ip, #0
   15e94:	1a000012 	bne	15ee4 <strncasecmp+0x8c>
   15e98:	e153000c 	cmp	r3, ip
   15e9c:	ca000021 	bgt	15f28 <strncasecmp+0xd0>
   15ea0:	b3e02000 	mvnlt	r2, #0
   15ea4:	a3a02000 	movge	r2, #0
   15ea8:	e1a00002 	mov	r0, r2
   15eac:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   15eb0:	e3530000 	cmp	r3, #0
   15eb4:	1affffef 	bne	15e78 <strncasecmp+0x20>
   15eb8:	e1d1c0d0 	ldrsb	ip, [r1]
   15ebc:	e24c2061 	sub	r2, ip, #97	@ 0x61
   15ec0:	e3520019 	cmp	r2, #25
   15ec4:	924cc020 	subls	ip, ip, #32
   15ec8:	e153000c 	cmp	r3, ip
   15ecc:	c3a02001 	movgt	r2, #1
   15ed0:	ca000001 	bgt	15edc <strncasecmp+0x84>
   15ed4:	b3e02000 	mvnlt	r2, #0
   15ed8:	a3a02000 	movge	r2, #0
   15edc:	e1a00002 	mov	r0, r2
   15ee0:	e12fff1e 	bx	lr
   15ee4:	e15c0003 	cmp	ip, r3
   15ee8:	ba00000e 	blt	15f28 <strncasecmp+0xd0>
   15eec:	ca000010 	bgt	15f34 <strncasecmp+0xdc>
   15ef0:	e2522001 	subs	r2, r2, #1
   15ef4:	0affffeb 	beq	15ea8 <strncasecmp+0x50>
   15ef8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   15efc:	e243c061 	sub	ip, r3, #97	@ 0x61
   15f00:	e35c0019 	cmp	ip, #25
   15f04:	92433020 	subls	r3, r3, #32
   15f08:	9affffdb 	bls	15e7c <strncasecmp+0x24>
   15f0c:	e3530000 	cmp	r3, #0
   15f10:	1affffd9 	bne	15e7c <strncasecmp+0x24>
   15f14:	e1d1c0d0 	ldrsb	ip, [r1]
   15f18:	e24c2061 	sub	r2, ip, #97	@ 0x61
   15f1c:	e3520019 	cmp	r2, #25
   15f20:	924cc020 	subls	ip, ip, #32
   15f24:	eaffffdb 	b	15e98 <strncasecmp+0x40>
   15f28:	e3a02001 	mov	r2, #1
   15f2c:	e1a00002 	mov	r0, r2
   15f30:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   15f34:	e3e02000 	mvn	r2, #0
   15f38:	eaffffda 	b	15ea8 <strncasecmp+0x50>

00015f3c <strcpy>:
   15f3c:	e1d130d0 	ldrsb	r3, [r1]
   15f40:	e1a02000 	mov	r2, r0
   15f44:	e3530000 	cmp	r3, #0
   15f48:	0a000003 	beq	15f5c <strcpy+0x20>
   15f4c:	e4c23001 	strb	r3, [r2], #1
   15f50:	e1f130d1 	ldrsb	r3, [r1, #1]!
   15f54:	e3530000 	cmp	r3, #0
   15f58:	1afffffb 	bne	15f4c <strcpy+0x10>
   15f5c:	e3a03000 	mov	r3, #0
   15f60:	e5c23000 	strb	r3, [r2]
   15f64:	e12fff1e 	bx	lr

00015f68 <strncpy>:
   15f68:	e3520000 	cmp	r2, #0
   15f6c:	012fff1e 	bxeq	lr
   15f70:	e1a0c000 	mov	ip, r0
   15f74:	e2411001 	sub	r1, r1, #1
   15f78:	ea000002 	b	15f88 <strncpy+0x20>
   15f7c:	e2522001 	subs	r2, r2, #1
   15f80:	e4cc3001 	strb	r3, [ip], #1
   15f84:	012fff1e 	bxeq	lr
   15f88:	e1f130d1 	ldrsb	r3, [r1, #1]!
   15f8c:	e3530000 	cmp	r3, #0
   15f90:	1afffff9 	bne	15f7c <strncpy+0x14>
   15f94:	e5cc3000 	strb	r3, [ip]
   15f98:	e12fff1e 	bx	lr

00015f9c <strcat>:
   15f9c:	e1d030d0 	ldrsb	r3, [r0]
   15fa0:	e3530000 	cmp	r3, #0
   15fa4:	e1a03000 	mov	r3, r0
   15fa8:	0a000002 	beq	15fb8 <strcat+0x1c>
   15fac:	e1f320d1 	ldrsb	r2, [r3, #1]!
   15fb0:	e3520000 	cmp	r2, #0
   15fb4:	1afffffc 	bne	15fac <strcat+0x10>
   15fb8:	e1d120d0 	ldrsb	r2, [r1]
   15fbc:	e3520000 	cmp	r2, #0
   15fc0:	0a000003 	beq	15fd4 <strcat+0x38>
   15fc4:	e4c32001 	strb	r2, [r3], #1
   15fc8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   15fcc:	e3520000 	cmp	r2, #0
   15fd0:	1afffffb 	bne	15fc4 <strcat+0x28>
   15fd4:	e3a02000 	mov	r2, #0
   15fd8:	e5c32000 	strb	r2, [r3]
   15fdc:	e12fff1e 	bx	lr

00015fe0 <strncat>:
   15fe0:	e1d030d0 	ldrsb	r3, [r0]
   15fe4:	e3530000 	cmp	r3, #0
   15fe8:	e1a03000 	mov	r3, r0
   15fec:	0a000002 	beq	15ffc <strncat+0x1c>
   15ff0:	e1f3c0d1 	ldrsb	ip, [r3, #1]!
   15ff4:	e35c0000 	cmp	ip, #0
   15ff8:	1afffffc 	bne	15ff0 <strncat+0x10>
   15ffc:	e1d1c0d0 	ldrsb	ip, [r1]
   16000:	e35c0000 	cmp	ip, #0
   16004:	0a000009 	beq	16030 <strncat+0x50>
   16008:	e3520000 	cmp	r2, #0
   1600c:	0a000007 	beq	16030 <strncat+0x50>
   16010:	e0832002 	add	r2, r3, r2
   16014:	ea000001 	b	16020 <strncat+0x40>
   16018:	e1530002 	cmp	r3, r2
   1601c:	0a000003 	beq	16030 <strncat+0x50>
   16020:	e4c3c001 	strb	ip, [r3], #1
   16024:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   16028:	e35c0000 	cmp	ip, #0
   1602c:	1afffff9 	bne	16018 <strncat+0x38>
   16030:	e3a02000 	mov	r2, #0
   16034:	e5c32000 	strb	r2, [r3]
   16038:	e12fff1e 	bx	lr

0001603c <strchr>:
   1603c:	e1d030d0 	ldrsb	r3, [r0]
   16040:	e3530000 	cmp	r3, #0
   16044:	0a000004 	beq	1605c <strchr+0x20>
   16048:	e1530001 	cmp	r3, r1
   1604c:	012fff1e 	bxeq	lr
   16050:	e1f030d1 	ldrsb	r3, [r0, #1]!
   16054:	e3530000 	cmp	r3, #0
   16058:	1afffffa 	bne	16048 <strchr+0xc>
   1605c:	e1a00003 	mov	r0, r3
   16060:	e12fff1e 	bx	lr

00016064 <strstr>:
   16064:	e92d4010 	push	{r4, lr}
   16068:	e1d030d0 	ldrsb	r3, [r0]
   1606c:	e1d140d0 	ldrsb	r4, [r1]
   16070:	e3530000 	cmp	r3, #0
   16074:	1a000002 	bne	16084 <strstr+0x20>
   16078:	e3540000 	cmp	r4, #0
   1607c:	13a00000 	movne	r0, #0
   16080:	e8bd8010 	pop	{r4, pc}
   16084:	e3540000 	cmp	r4, #0
   16088:	08bd8010 	popeq	{r4, pc}
   1608c:	e1a0e001 	mov	lr, r1
   16090:	e1a03004 	mov	r3, r4
   16094:	e2402001 	sub	r2, r0, #1
   16098:	ea000002 	b	160a8 <strstr+0x44>
   1609c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   160a0:	e3530000 	cmp	r3, #0
   160a4:	08bd8010 	popeq	{r4, pc}
   160a8:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   160ac:	e15c0003 	cmp	ip, r3
   160b0:	0afffff9 	beq	1609c <strstr+0x38>
   160b4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   160b8:	e3530000 	cmp	r3, #0
   160bc:	1afffff2 	bne	1608c <strstr+0x28>
   160c0:	e1a00003 	mov	r0, r3
   160c4:	e8bd8010 	pop	{r4, pc}

000160c8 <strtok_r>:
   160c8:	e3500000 	cmp	r0, #0
   160cc:	e92d4030 	push	{r4, r5, lr}
   160d0:	e1a04001 	mov	r4, r1
   160d4:	e1a05002 	mov	r5, r2
   160d8:	0a00002d 	beq	16194 <strtok_r+0xcc>
   160dc:	e1d0c0d0 	ldrsb	ip, [r0]
   160e0:	e35c0000 	cmp	ip, #0
   160e4:	0a000026 	beq	16184 <strtok_r+0xbc>
   160e8:	e1d410d0 	ldrsb	r1, [r4]
   160ec:	e2802001 	add	r2, r0, #1
   160f0:	e3510000 	cmp	r1, #0
   160f4:	0a00000a 	beq	16124 <strtok_r+0x5c>
   160f8:	e1a0e004 	mov	lr, r4
   160fc:	e1a03001 	mov	r3, r1
   16100:	ea000002 	b	16110 <strtok_r+0x48>
   16104:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   16108:	e3530000 	cmp	r3, #0
   1610c:	0a000004 	beq	16124 <strtok_r+0x5c>
   16110:	e153000c 	cmp	r3, ip
   16114:	1afffffa 	bne	16104 <strtok_r+0x3c>
   16118:	e1a00002 	mov	r0, r2
   1611c:	e0d2c0d1 	ldrsb	ip, [r2], #1
   16120:	eafffff4 	b	160f8 <strtok_r+0x30>
   16124:	e35c0000 	cmp	ip, #0
   16128:	0a000015 	beq	16184 <strtok_r+0xbc>
   1612c:	e3510000 	cmp	r1, #0
   16130:	e1a02000 	mov	r2, r0
   16134:	1a000006 	bne	16154 <strtok_r+0x8c>
   16138:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   1613c:	e35c0000 	cmp	ip, #0
   16140:	1afffffc 	bne	16138 <strtok_r+0x70>
   16144:	ea00000c 	b	1617c <strtok_r+0xb4>
   16148:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   1614c:	e35c0000 	cmp	ip, #0
   16150:	0a000009 	beq	1617c <strtok_r+0xb4>
   16154:	e1a0e004 	mov	lr, r4
   16158:	e1a03001 	mov	r3, r1
   1615c:	ea000002 	b	1616c <strtok_r+0xa4>
   16160:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   16164:	e3530000 	cmp	r3, #0
   16168:	0afffff6 	beq	16148 <strtok_r+0x80>
   1616c:	e153000c 	cmp	r3, ip
   16170:	1afffffa 	bne	16160 <strtok_r+0x98>
   16174:	e3a03000 	mov	r3, #0
   16178:	e4c23001 	strb	r3, [r2], #1
   1617c:	e5852000 	str	r2, [r5]
   16180:	e8bd8030 	pop	{r4, r5, pc}
   16184:	e3a03000 	mov	r3, #0
   16188:	e5853000 	str	r3, [r5]
   1618c:	e3a00000 	mov	r0, #0
   16190:	e8bd8030 	pop	{r4, r5, pc}
   16194:	e5920000 	ldr	r0, [r2]
   16198:	e3500000 	cmp	r0, #0
   1619c:	1affffce 	bne	160dc <strtok_r+0x14>
   161a0:	eafffff9 	b	1618c <strtok_r+0xc4>

000161a4 <strtoul>:
   161a4:	e92d4070 	push	{r4, r5, r6, lr}
   161a8:	e2423002 	sub	r3, r2, #2
   161ac:	e2514000 	subs	r4, r1, #0
   161b0:	15840000 	strne	r0, [r4]
   161b4:	e3520000 	cmp	r2, #0
   161b8:	13530022 	cmpne	r3, #34	@ 0x22
   161bc:	e1a0e000 	mov	lr, r0
   161c0:	8a000049 	bhi	162ec <strtoul+0x148>
   161c4:	e1de30d0 	ldrsb	r3, [lr]
   161c8:	e1a0c00e 	mov	ip, lr
   161cc:	e2430009 	sub	r0, r3, #9
   161d0:	e3530020 	cmp	r3, #32
   161d4:	e6ef0070 	uxtb	r0, r0
   161d8:	e28ee001 	add	lr, lr, #1
   161dc:	0afffff8 	beq	161c4 <strtoul+0x20>
   161e0:	e3500004 	cmp	r0, #4
   161e4:	9afffff6 	bls	161c4 <strtoul+0x20>
   161e8:	e353002b 	cmp	r3, #43	@ 0x2b
   161ec:	0a00002c 	beq	162a4 <strtoul+0x100>
   161f0:	e353002d 	cmp	r3, #45	@ 0x2d
   161f4:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   161f8:	03a06001 	moveq	r6, #1
   161fc:	01a0c00e 	moveq	ip, lr
   16200:	13a06000 	movne	r6, #0
   16204:	e3530030 	cmp	r3, #48	@ 0x30
   16208:	0a00002a 	beq	162b8 <strtoul+0x114>
   1620c:	e3520000 	cmp	r2, #0
   16210:	03a0200a 	moveq	r2, #10
   16214:	e353002f 	cmp	r3, #47	@ 0x2f
   16218:	e1a0e003 	mov	lr, r3
   1621c:	da000030 	ble	162e4 <strtoul+0x140>
   16220:	e3a05001 	mov	r5, #1
   16224:	e3a01000 	mov	r1, #0
   16228:	ea00000d 	b	16264 <strtoul+0xc0>
   1622c:	e35e0040 	cmp	lr, #64	@ 0x40
   16230:	ca00000f 	bgt	16274 <strtoul+0xd0>
   16234:	e24ee030 	sub	lr, lr, #48	@ 0x30
   16238:	e15e0002 	cmp	lr, r2
   1623c:	aa000010 	bge	16284 <strtoul+0xe0>
   16240:	e020e291 	mla	r0, r1, r2, lr
   16244:	e1500001 	cmp	r0, r1
   16248:	3a00002d 	bcc	16304 <strtoul+0x160>
   1624c:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   16250:	e3a05000 	mov	r5, #0
   16254:	e35e002f 	cmp	lr, #47	@ 0x2f
   16258:	e1a0300e 	mov	r3, lr
   1625c:	da00002c 	ble	16314 <strtoul+0x170>
   16260:	e1a01000 	mov	r1, r0
   16264:	e2433061 	sub	r3, r3, #97	@ 0x61
   16268:	e3530019 	cmp	r3, #25
   1626c:	924ee020 	subls	lr, lr, #32
   16270:	8affffed 	bhi	1622c <strtoul+0x88>
   16274:	e24ee007 	sub	lr, lr, #7
   16278:	e24ee030 	sub	lr, lr, #48	@ 0x30
   1627c:	e15e0002 	cmp	lr, r2
   16280:	baffffee 	blt	16240 <strtoul+0x9c>
   16284:	e1a00001 	mov	r0, r1
   16288:	e2253001 	eor	r3, r5, #1
   1628c:	e3540000 	cmp	r4, #0
   16290:	e0033006 	and	r3, r3, r6
   16294:	1584c000 	strne	ip, [r4]
   16298:	e3530000 	cmp	r3, #0
   1629c:	12600000 	rsbne	r0, r0, #0
   162a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   162a4:	e1dc30d1 	ldrsb	r3, [ip, #1]
   162a8:	e3a06000 	mov	r6, #0
   162ac:	e3530030 	cmp	r3, #48	@ 0x30
   162b0:	e1a0c00e 	mov	ip, lr
   162b4:	1affffd4 	bne	1620c <strtoul+0x68>
   162b8:	e1dc30d1 	ldrsb	r3, [ip, #1]
   162bc:	e28c0001 	add	r0, ip, #1
   162c0:	e3c31020 	bic	r1, r3, #32
   162c4:	e3510058 	cmp	r1, #88	@ 0x58
   162c8:	1a000009 	bne	162f4 <strtoul+0x150>
   162cc:	e3d23010 	bics	r3, r2, #16
   162d0:	1a000005 	bne	162ec <strtoul+0x148>
   162d4:	e1dc30d2 	ldrsb	r3, [ip, #2]
   162d8:	e3a02010 	mov	r2, #16
   162dc:	e28cc002 	add	ip, ip, #2
   162e0:	eaffffcb 	b	16214 <strtoul+0x70>
   162e4:	e3540000 	cmp	r4, #0
   162e8:	1584c000 	strne	ip, [r4]
   162ec:	e3a00000 	mov	r0, #0
   162f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   162f4:	e3520000 	cmp	r2, #0
   162f8:	e1a0c000 	mov	ip, r0
   162fc:	03a02008 	moveq	r2, #8
   16300:	eaffffc3 	b	16214 <strtoul+0x70>
   16304:	e3540000 	cmp	r4, #0
   16308:	e3e00000 	mvn	r0, #0
   1630c:	1584c000 	strne	ip, [r4]
   16310:	e8bd8070 	pop	{r4, r5, r6, pc}
   16314:	e3a03001 	mov	r3, #1
   16318:	eaffffdb 	b	1628c <strtoul+0xe8>

0001631c <strtoull>:
   1631c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   16320:	e2423002 	sub	r3, r2, #2
   16324:	e2514000 	subs	r4, r1, #0
   16328:	15840000 	strne	r0, [r4]
   1632c:	e3520000 	cmp	r2, #0
   16330:	13530022 	cmpne	r3, #34	@ 0x22
   16334:	e1a0e000 	mov	lr, r0
   16338:	8a000056 	bhi	16498 <strtoull+0x17c>
   1633c:	e1de30d0 	ldrsb	r3, [lr]
   16340:	e1a0c00e 	mov	ip, lr
   16344:	e2430009 	sub	r0, r3, #9
   16348:	e3530020 	cmp	r3, #32
   1634c:	e6ef0070 	uxtb	r0, r0
   16350:	e28ee001 	add	lr, lr, #1
   16354:	0afffff8 	beq	1633c <strtoull+0x20>
   16358:	e3500004 	cmp	r0, #4
   1635c:	9afffff6 	bls	1633c <strtoull+0x20>
   16360:	e353002b 	cmp	r3, #43	@ 0x2b
   16364:	0a000039 	beq	16450 <strtoull+0x134>
   16368:	e353002d 	cmp	r3, #45	@ 0x2d
   1636c:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   16370:	03a07001 	moveq	r7, #1
   16374:	01a0c00e 	moveq	ip, lr
   16378:	13a07000 	movne	r7, #0
   1637c:	e3530030 	cmp	r3, #48	@ 0x30
   16380:	0a000037 	beq	16464 <strtoull+0x148>
   16384:	e3520000 	cmp	r2, #0
   16388:	03a0200a 	moveq	r2, #10
   1638c:	e353002f 	cmp	r3, #47	@ 0x2f
   16390:	e1a0e003 	mov	lr, r3
   16394:	da00003d 	ble	16490 <strtoull+0x174>
   16398:	e3a05000 	mov	r5, #0
   1639c:	e3a09001 	mov	r9, #1
   163a0:	e1a06005 	mov	r6, r5
   163a4:	e1a08fc2 	asr	r8, r2, #31
   163a8:	ea000014 	b	16400 <strtoull+0xe4>
   163ac:	e35e0040 	cmp	lr, #64	@ 0x40
   163b0:	ca000016 	bgt	16410 <strtoull+0xf4>
   163b4:	e24ee030 	sub	lr, lr, #48	@ 0x30
   163b8:	e15e0002 	cmp	lr, r2
   163bc:	aa000017 	bge	16420 <strtoull+0x104>
   163c0:	e0010692 	mul	r1, r2, r6
   163c4:	e0893592 	umull	r3, r9, r2, r5
   163c8:	e0211895 	mla	r1, r5, r8, r1
   163cc:	e09e0003 	adds	r0, lr, r3
   163d0:	e0811009 	add	r1, r1, r9
   163d4:	e0a11fce 	adc	r1, r1, lr, asr #31
   163d8:	e1500005 	cmp	r0, r5
   163dc:	e0d16006 	sbcs	r6, r1, r6
   163e0:	3a000033 	bcc	164b4 <strtoull+0x198>
   163e4:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   163e8:	e3a09000 	mov	r9, #0
   163ec:	e35e002f 	cmp	lr, #47	@ 0x2f
   163f0:	e1a0300e 	mov	r3, lr
   163f4:	da000033 	ble	164c8 <strtoull+0x1ac>
   163f8:	e1a05000 	mov	r5, r0
   163fc:	e1a06001 	mov	r6, r1
   16400:	e2433061 	sub	r3, r3, #97	@ 0x61
   16404:	e3530019 	cmp	r3, #25
   16408:	924ee020 	subls	lr, lr, #32
   1640c:	8affffe6 	bhi	163ac <strtoull+0x90>
   16410:	e24ee007 	sub	lr, lr, #7
   16414:	e24ee030 	sub	lr, lr, #48	@ 0x30
   16418:	e15e0002 	cmp	lr, r2
   1641c:	baffffe7 	blt	163c0 <strtoull+0xa4>
   16420:	e1a00005 	mov	r0, r5
   16424:	e1a01006 	mov	r1, r6
   16428:	e2293001 	eor	r3, r9, #1
   1642c:	e3540000 	cmp	r4, #0
   16430:	e0033007 	and	r3, r3, r7
   16434:	1584c000 	strne	ip, [r4]
   16438:	e3530000 	cmp	r3, #0
   1643c:	08bd83f0 	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16440:	e2703000 	rsbs	r3, r0, #0
   16444:	e1a00003 	mov	r0, r3
   16448:	e2e11000 	rsc	r1, r1, #0
   1644c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16450:	e1dc30d1 	ldrsb	r3, [ip, #1]
   16454:	e3a07000 	mov	r7, #0
   16458:	e3530030 	cmp	r3, #48	@ 0x30
   1645c:	e1a0c00e 	mov	ip, lr
   16460:	1affffc7 	bne	16384 <strtoull+0x68>
   16464:	e1dc30d1 	ldrsb	r3, [ip, #1]
   16468:	e28c0001 	add	r0, ip, #1
   1646c:	e3c31020 	bic	r1, r3, #32
   16470:	e3510058 	cmp	r1, #88	@ 0x58
   16474:	1a00000a 	bne	164a4 <strtoull+0x188>
   16478:	e3d23010 	bics	r3, r2, #16
   1647c:	1a000005 	bne	16498 <strtoull+0x17c>
   16480:	e1dc30d2 	ldrsb	r3, [ip, #2]
   16484:	e3a02010 	mov	r2, #16
   16488:	e28cc002 	add	ip, ip, #2
   1648c:	eaffffbe 	b	1638c <strtoull+0x70>
   16490:	e3540000 	cmp	r4, #0
   16494:	1584c000 	strne	ip, [r4]
   16498:	e3a00000 	mov	r0, #0
   1649c:	e1a01000 	mov	r1, r0
   164a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   164a4:	e3520000 	cmp	r2, #0
   164a8:	e1a0c000 	mov	ip, r0
   164ac:	03a02008 	moveq	r2, #8
   164b0:	eaffffb5 	b	1638c <strtoull+0x70>
   164b4:	e3540000 	cmp	r4, #0
   164b8:	e3e00000 	mvn	r0, #0
   164bc:	e3a01000 	mov	r1, #0
   164c0:	1584c000 	strne	ip, [r4]
   164c4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   164c8:	e3a03001 	mov	r3, #1
   164cc:	eaffffd6 	b	1642c <strtoull+0x110>

000164d0 <atoi>:
   164d0:	e3a0200a 	mov	r2, #10
   164d4:	e3a01000 	mov	r1, #0
   164d8:	eaffff31 	b	161a4 <strtoul>

000164dc <char2int>:
   164dc:	e12fff1e 	bx	lr

000164e0 <memset>:
   164e0:	e3100003 	tst	r0, #3
   164e4:	1a00000d 	bne	16520 <memset+0x40>
   164e8:	e3520010 	cmp	r2, #16
   164ec:	3a00000b 	bcc	16520 <memset+0x40>
   164f0:	e1813401 	orr	r3, r1, r1, lsl #8
   164f4:	e183c803 	orr	ip, r3, r3, lsl #16
   164f8:	e1a03000 	mov	r3, r0
   164fc:	e583c000 	str	ip, [r3]
   16500:	e583c004 	str	ip, [r3, #4]
   16504:	e583c008 	str	ip, [r3, #8]
   16508:	e583c00c 	str	ip, [r3, #12]
   1650c:	e2833010 	add	r3, r3, #16
   16510:	e2422010 	sub	r2, r2, #16
   16514:	e352000f 	cmp	r2, #15
   16518:	8afffff7 	bhi	164fc <memset+0x1c>
   1651c:	ea000000 	b	16524 <memset+0x44>
   16520:	e1a03000 	mov	r3, r0
   16524:	e3520000 	cmp	r2, #0
   16528:	012fff1e 	bxeq	lr
   1652c:	e4c31001 	strb	r1, [r3], #1
   16530:	e2522001 	subs	r2, r2, #1
   16534:	1afffffc 	bne	1652c <memset+0x4c>
   16538:	e12fff1e 	bx	lr

0001653c <memcpy>:
   1653c:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
   16540:	e352007f 	cmp	r2, #127	@ 0x7f
   16544:	9a00000b 	bls	16578 <memcpy+0x3c>
   16548:	e3110003 	tst	r1, #3
   1654c:	1a000009 	bne	16578 <memcpy+0x3c>
   16550:	e3100003 	tst	r0, #3
   16554:	1a000007 	bne	16578 <memcpy+0x3c>
   16558:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   1655c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   16560:	e2422020 	sub	r2, r2, #32
   16564:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   16568:	f5d1f040 	pld	[r1, #64]	@ 0x40
   1656c:	e352001f 	cmp	r2, #31
   16570:	8afffff9 	bhi	1655c <memcpy+0x20>
   16574:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   16578:	e3520000 	cmp	r2, #0
   1657c:	0a000003 	beq	16590 <memcpy+0x54>
   16580:	e4d13001 	ldrb	r3, [r1], #1
   16584:	e2522001 	subs	r2, r2, #1
   16588:	e4c03001 	strb	r3, [r0], #1
   1658c:	1afffffb 	bne	16580 <memcpy+0x44>
   16590:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
   16594:	e12fff1e 	bx	lr

00016598 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   16598:	e12fff1e 	bx	lr

0001659c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   1659c:	e92d4010 	push	{r4, lr}
   165a0:	e1a04000 	mov	r4, r0
   165a4:	e3a01014 	mov	r1, #20
   165a8:	eb000106 	bl	169c8 <operator delete(void*, unsigned int)>
   165ac:	e1a00004 	mov	r0, r4
   165b0:	e8bd8010 	pop	{r4, pc}

000165b4 <CVirtualGPIOPin::Write(unsigned int)>:
   165b4:	e92d4070 	push	{r4, r5, r6, lr}
   165b8:	e5d03004 	ldrb	r3, [r0, #4]
   165bc:	e1a05001 	mov	r5, r1
   165c0:	e3530000 	cmp	r3, #0
   165c4:	e5901008 	ldr	r1, [r0, #8]
   165c8:	e24dd028 	sub	sp, sp, #40	@ 0x28
   165cc:	0a000011 	beq	16618 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   165d0:	e3510000 	cmp	r1, #0
   165d4:	1a000030 	bne	1669c <CVirtualGPIOPin::Write(unsigned int)+0xe8>
   165d8:	e28d000c 	add	r0, sp, #12
   165dc:	eb000d16 	bl	19a3c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   165e0:	e3a02008 	mov	r2, #8
   165e4:	e3a00082 	mov	r0, #130	@ 0x82
   165e8:	e3a03014 	mov	r3, #20
   165ec:	e58d2000 	str	r2, [sp]
   165f0:	e58d0020 	str	r0, [sp, #32]
   165f4:	e59f10d0 	ldr	r1, [pc, #208]	@ 166cc <CVirtualGPIOPin::Write(unsigned int)+0x118>
   165f8:	e08d2003 	add	r2, sp, r3
   165fc:	e28d000c 	add	r0, sp, #12
   16600:	e58d5024 	str	r5, [sp, #36]	@ 0x24
   16604:	eb000d5d 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   16608:	e28d000c 	add	r0, sp, #12
   1660c:	eb000d11 	bl	19a58 <CBcmPropertyTags::~CBcmPropertyTags()>
   16610:	e28dd028 	add	sp, sp, #40	@ 0x28
   16614:	e8bd8070 	pop	{r4, r5, r6, pc}
   16618:	e1853001 	orr	r3, r5, r1
   1661c:	e3530001 	cmp	r3, #1
   16620:	8afffffa 	bhi	16610 <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   16624:	e59f60a4 	ldr	r6, [pc, #164]	@ 166d0 <CVirtualGPIOPin::Write(unsigned int)+0x11c>
   16628:	e5963000 	ldr	r3, [r6]
   1662c:	e3530000 	cmp	r3, #0
   16630:	0afffff6 	beq	16610 <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   16634:	e1a04000 	mov	r4, r0
   16638:	e5960004 	ldr	r0, [r6, #4]
   1663c:	e3500000 	cmp	r0, #0
   16640:	1a00001f 	bne	166c4 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   16644:	e1d421b0 	ldrh	r2, [r4, #16]
   16648:	e1d431b2 	ldrh	r3, [r4, #18]
   1664c:	e584500c 	str	r5, [r4, #12]
   16650:	e0421003 	sub	r1, r2, r3
   16654:	e6bf1071 	sxth	r1, r1
   16658:	e3510000 	cmp	r1, #0
   1665c:	da000012 	ble	166ac <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   16660:	e3550000 	cmp	r5, #0
   16664:	02833001 	addeq	r3, r3, #1
   16668:	06ff3073 	uxtheq	r3, r3
   1666c:	01c431b2 	strheq	r3, [r4, #18]
   16670:	1a000003 	bne	16684 <CVirtualGPIOPin::Write(unsigned int)+0xd0>
   16674:	e5940008 	ldr	r0, [r4, #8]
   16678:	e5961000 	ldr	r1, [r6]
   1667c:	e1833802 	orr	r3, r3, r2, lsl #16
   16680:	e7813100 	str	r3, [r1, r0, lsl #2]
   16684:	e5963004 	ldr	r3, [r6, #4]
   16688:	e3530000 	cmp	r3, #0
   1668c:	0affffdf 	beq	16610 <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   16690:	e28dd028 	add	sp, sp, #40	@ 0x28
   16694:	e8bd4070 	pop	{r4, r5, r6, lr}
   16698:	ea0004a6 	b	17938 <LeaveCritical>
   1669c:	e59f1030 	ldr	r1, [pc, #48]	@ 166d4 <CVirtualGPIOPin::Write(unsigned int)+0x120>
   166a0:	e3a0205b 	mov	r2, #91	@ 0x5b
   166a4:	e2810014 	add	r0, r1, #20
   166a8:	ebffe41d 	bl	f724 <assertion_failed>
   166ac:	e3550000 	cmp	r5, #0
   166b0:	0afffff3 	beq	16684 <CVirtualGPIOPin::Write(unsigned int)+0xd0>
   166b4:	e2822001 	add	r2, r2, #1
   166b8:	e6ff2072 	uxth	r2, r2
   166bc:	e1c421b0 	strh	r2, [r4, #16]
   166c0:	eaffffeb 	b	16674 <CVirtualGPIOPin::Write(unsigned int)+0xc0>
   166c4:	eb000471 	bl	17890 <EnterCritical>
   166c8:	eaffffdd 	b	16644 <CVirtualGPIOPin::Write(unsigned int)+0x90>
   166cc:	00038041 	.word	0x00038041
   166d0:	00020b8c 	.word	0x00020b8c
   166d4:	0001e6bc 	.word	0x0001e6bc

000166d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   166d8:	e92d4070 	push	{r4, r5, r6, lr}
   166dc:	e59f3138 	ldr	r3, [pc, #312]	@ 1681c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x144>
   166e0:	e24dd020 	sub	sp, sp, #32
   166e4:	e3a0c000 	mov	ip, #0
   166e8:	e5803000 	str	r3, [r0]
   166ec:	e3510001 	cmp	r1, #1
   166f0:	91a03002 	movls	r3, r2
   166f4:	83823001 	orrhi	r3, r2, #1
   166f8:	e153000c 	cmp	r3, ip
   166fc:	e1a04000 	mov	r4, r0
   16700:	e5c02004 	strb	r2, [r0, #4]
   16704:	e5801008 	str	r1, [r0, #8]
   16708:	e580c010 	str	ip, [r0, #16]
   1670c:	0a000002 	beq	1671c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   16710:	e1a00004 	mov	r0, r4
   16714:	e28dd020 	add	sp, sp, #32
   16718:	e8bd8070 	pop	{r4, r5, r6, pc}
   1671c:	e59f50fc 	ldr	r5, [pc, #252]	@ 16820 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   16720:	e5950004 	ldr	r0, [r5, #4]
   16724:	e150000c 	cmp	r0, ip
   16728:	1a00000e 	bne	16768 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   1672c:	e5956000 	ldr	r6, [r5]
   16730:	e3560000 	cmp	r6, #0
   16734:	0a00000f 	beq	16778 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   16738:	e3a02000 	mov	r2, #0
   1673c:	e5943008 	ldr	r3, [r4, #8]
   16740:	e7862103 	str	r2, [r6, r3, lsl #2]
   16744:	e5953004 	ldr	r3, [r5, #4]
   16748:	e3530000 	cmp	r3, #0
   1674c:	1a000024 	bne	167e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x10c>
   16750:	e1a00004 	mov	r0, r4
   16754:	e3a01000 	mov	r1, #0
   16758:	ebffff95 	bl	165b4 <CVirtualGPIOPin::Write(unsigned int)>
   1675c:	e1a00004 	mov	r0, r4
   16760:	e28dd020 	add	sp, sp, #32
   16764:	e8bd8070 	pop	{r4, r5, r6, pc}
   16768:	eb000448 	bl	17890 <EnterCritical>
   1676c:	e5956000 	ldr	r6, [r5]
   16770:	e3560000 	cmp	r6, #0
   16774:	1affffef 	bne	16738 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   16778:	e3a00001 	mov	r0, #1
   1677c:	eb000413 	bl	177d0 <CMemorySystem::GetCoherentPage(unsigned int)>
   16780:	e1a01006 	mov	r1, r6
   16784:	e5850000 	str	r0, [r5]
   16788:	e28d0008 	add	r0, sp, #8
   1678c:	eb000caa 	bl	19a3c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   16790:	e3a00004 	mov	r0, #4
   16794:	e3a03010 	mov	r3, #16
   16798:	e5952000 	ldr	r2, [r5]
   1679c:	e59f1080 	ldr	r1, [pc, #128]	@ 16824 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   167a0:	e3c22103 	bic	r2, r2, #-1073741824	@ 0xc0000000
   167a4:	e3822101 	orr	r2, r2, #1073741824	@ 0x40000000
   167a8:	e58d0000 	str	r0, [sp]
   167ac:	e58d201c 	str	r2, [sp, #28]
   167b0:	e28d0008 	add	r0, sp, #8
   167b4:	e08d2003 	add	r2, sp, r3
   167b8:	eb000cf0 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   167bc:	e3500000 	cmp	r0, #0
   167c0:	0a000009 	beq	167ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x114>
   167c4:	e28d0008 	add	r0, sp, #8
   167c8:	eb000ca2 	bl	19a58 <CBcmPropertyTags::~CBcmPropertyTags()>
   167cc:	e5956000 	ldr	r6, [r5]
   167d0:	e3560000 	cmp	r6, #0
   167d4:	1affffd7 	bne	16738 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   167d8:	e5953004 	ldr	r3, [r5, #4]
   167dc:	e3530000 	cmp	r3, #0
   167e0:	0affffda 	beq	16750 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   167e4:	eb000453 	bl	17938 <LeaveCritical>
   167e8:	eaffffd8 	b	16750 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   167ec:	e3a03010 	mov	r3, #16
   167f0:	e58d0000 	str	r0, [sp]
   167f4:	e59f102c 	ldr	r1, [pc, #44]	@ 16828 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x150>
   167f8:	e28d2010 	add	r2, sp, #16
   167fc:	e28d0008 	add	r0, sp, #8
   16800:	eb000cde 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   16804:	e3500000 	cmp	r0, #0
   16808:	159d301c 	ldrne	r3, [sp, #28]
   1680c:	05850000 	streq	r0, [r5]
   16810:	13c33103 	bicne	r3, r3, #-1073741824	@ 0xc0000000
   16814:	15853000 	strne	r3, [r5]
   16818:	eaffffe9 	b	167c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xec>
   1681c:	0001e6e4 	.word	0x0001e6e4
   16820:	00020b8c 	.word	0x00020b8c
   16824:	00048020 	.word	0x00048020
   16828:	00040010 	.word	0x00040010

0001682c <CVirtualGPIOPin::Invert()>:
   1682c:	e590100c 	ldr	r1, [r0, #12]
   16830:	e2211001 	eor	r1, r1, #1
   16834:	eaffff5e 	b	165b4 <CVirtualGPIOPin::Write(unsigned int)>

00016838 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   16838:	e3a02000 	mov	r2, #0
   1683c:	e59f3004 	ldr	r3, [pc, #4]	@ 16848 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   16840:	e5832004 	str	r2, [r3, #4]
   16844:	e12fff1e 	bx	lr
   16848:	00020b8c 	.word	0x00020b8c

0001684c <ChainBootStub(void const*, unsigned int)>:
   1684c:	e2811003 	add	r1, r1, #3
   16850:	e1b01121 	lsrs	r1, r1, #2
   16854:	0a000007 	beq	16878 <ChainBootStub(void const*, unsigned int)+0x2c>
   16858:	e1a03000 	mov	r3, r0
   1685c:	e0800101 	add	r0, r0, r1, lsl #2
   16860:	e263c902 	rsb	ip, r3, #32768	@ 0x8000
   16864:	e083200c 	add	r2, r3, ip
   16868:	e4931004 	ldr	r1, [r3], #4
   1686c:	e1530000 	cmp	r3, r0
   16870:	e5821000 	str	r1, [r2]
   16874:	1afffffa 	bne	16864 <ChainBootStub(void const*, unsigned int)+0x18>
   16878:	e3a03000 	mov	r3, #0
   1687c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   16880:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   16884:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   16888:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   1688c:	e3a03902 	mov	r3, #32768	@ 0x8000
   16890:	e12fff13 	bx	r3

00016894 <EnableChainBoot>:
   16894:	e92d4010 	push	{r4, lr}
   16898:	e1a0c001 	mov	ip, r1
   1689c:	e1a0e000 	mov	lr, r0
   168a0:	e59f302c 	ldr	r3, [pc, #44]	@ 168d4 <EnableChainBoot+0x40>
   168a4:	e3a02b01 	mov	r2, #1024	@ 0x400
   168a8:	e59f1028 	ldr	r1, [pc, #40]	@ 168d8 <EnableChainBoot+0x44>
   168ac:	e3a00b1f 	mov	r0, #31744	@ 0x7c00
   168b0:	e583e000 	str	lr, [r3]
   168b4:	e583c004 	str	ip, [r3, #4]
   168b8:	ebffff1f 	bl	1653c <memcpy>
   168bc:	e3a03000 	mov	r3, #0
   168c0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   168c4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   168c8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   168cc:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   168d0:	e8bd8010 	pop	{r4, pc}
   168d4:	00020b94 	.word	0x00020b94
   168d8:	0001684c 	.word	0x0001684c

000168dc <IsChainBootEnabled>:
   168dc:	e59f300c 	ldr	r3, [pc, #12]	@ 168f0 <IsChainBootEnabled+0x14>
   168e0:	e5930000 	ldr	r0, [r3]
   168e4:	e2500000 	subs	r0, r0, #0
   168e8:	13a00001 	movne	r0, #1
   168ec:	e12fff1e 	bx	lr
   168f0:	00020b94 	.word	0x00020b94

000168f4 <DoChainBoot>:
   168f4:	e59f3008 	ldr	r3, [pc, #8]	@ 16904 <DoChainBoot+0x10>
   168f8:	e3a02b1f 	mov	r2, #31744	@ 0x7c00
   168fc:	e8930003 	ldm	r3, {r0, r1}
   16900:	e12fff12 	bx	r2
   16904:	00020b94 	.word	0x00020b94

00016908 <operator new(unsigned int, int)>:
   16908:	e3d13002 	bics	r3, r1, #2
   1690c:	e1a01000 	mov	r1, r0
   16910:	0a000001 	beq	1691c <operator new(unsigned int, int)+0x14>
   16914:	e3a00000 	mov	r0, #0
   16918:	e12fff1e 	bx	lr
   1691c:	e59f3008 	ldr	r3, [pc, #8]	@ 1692c <operator new(unsigned int, int)+0x24>
   16920:	e5930000 	ldr	r0, [r3]
   16924:	e280000c 	add	r0, r0, #12
   16928:	ea000052 	b	16a78 <CHeapAllocator::Allocate(unsigned int)>
   1692c:	00020ba0 	.word	0x00020ba0

00016930 <operator new[](unsigned int, int)>:
   16930:	e3d13002 	bics	r3, r1, #2
   16934:	e1a01000 	mov	r1, r0
   16938:	0a000001 	beq	16944 <operator new[](unsigned int, int)+0x14>
   1693c:	e3a00000 	mov	r0, #0
   16940:	e12fff1e 	bx	lr
   16944:	e59f3008 	ldr	r3, [pc, #8]	@ 16954 <operator new[](unsigned int, int)+0x24>
   16948:	e5930000 	ldr	r0, [r3]
   1694c:	e280000c 	add	r0, r0, #12
   16950:	ea000048 	b	16a78 <CHeapAllocator::Allocate(unsigned int)>
   16954:	00020ba0 	.word	0x00020ba0

00016958 <operator new(unsigned int, void*)>:
   16958:	e1a00001 	mov	r0, r1
   1695c:	e12fff1e 	bx	lr

00016960 <operator new[](unsigned int, void*)>:
   16960:	e1a00001 	mov	r0, r1
   16964:	e12fff1e 	bx	lr

00016968 <operator new(unsigned int)>:
   16968:	e59f300c 	ldr	r3, [pc, #12]	@ 1697c <operator new(unsigned int)+0x14>
   1696c:	e1a01000 	mov	r1, r0
   16970:	e5930000 	ldr	r0, [r3]
   16974:	e280000c 	add	r0, r0, #12
   16978:	ea00003e 	b	16a78 <CHeapAllocator::Allocate(unsigned int)>
   1697c:	00020ba0 	.word	0x00020ba0

00016980 <operator new[](unsigned int)>:
   16980:	e59f300c 	ldr	r3, [pc, #12]	@ 16994 <operator new[](unsigned int)+0x14>
   16984:	e1a01000 	mov	r1, r0
   16988:	e5930000 	ldr	r0, [r3]
   1698c:	e280000c 	add	r0, r0, #12
   16990:	ea000038 	b	16a78 <CHeapAllocator::Allocate(unsigned int)>
   16994:	00020ba0 	.word	0x00020ba0

00016998 <operator delete(void*)>:
   16998:	e59f300c 	ldr	r3, [pc, #12]	@ 169ac <operator delete(void*)+0x14>
   1699c:	e1a01000 	mov	r1, r0
   169a0:	e5930000 	ldr	r0, [r3]
   169a4:	e280000c 	add	r0, r0, #12
   169a8:	ea0000ab 	b	16c5c <CHeapAllocator::Free(void*)>
   169ac:	00020ba0 	.word	0x00020ba0

000169b0 <operator delete[](void*)>:
   169b0:	e59f300c 	ldr	r3, [pc, #12]	@ 169c4 <operator delete[](void*)+0x14>
   169b4:	e1a01000 	mov	r1, r0
   169b8:	e5930000 	ldr	r0, [r3]
   169bc:	e280000c 	add	r0, r0, #12
   169c0:	ea0000a5 	b	16c5c <CHeapAllocator::Free(void*)>
   169c4:	00020ba0 	.word	0x00020ba0

000169c8 <operator delete(void*, unsigned int)>:
   169c8:	e59f300c 	ldr	r3, [pc, #12]	@ 169dc <operator delete(void*, unsigned int)+0x14>
   169cc:	e1a01000 	mov	r1, r0
   169d0:	e5930000 	ldr	r0, [r3]
   169d4:	e280000c 	add	r0, r0, #12
   169d8:	ea00009f 	b	16c5c <CHeapAllocator::Free(void*)>
   169dc:	00020ba0 	.word	0x00020ba0

000169e0 <operator delete[](void*, unsigned int)>:
   169e0:	e59f300c 	ldr	r3, [pc, #12]	@ 169f4 <operator delete[](void*, unsigned int)+0x14>
   169e4:	e1a01000 	mov	r1, r0
   169e8:	e5930000 	ldr	r0, [r3]
   169ec:	e280000c 	add	r0, r0, #12
   169f0:	ea000099 	b	16c5c <CHeapAllocator::Free(void*)>
   169f4:	00020ba0 	.word	0x00020ba0

000169f8 <CHeapAllocator::CHeapAllocator(char const*)>:
   169f8:	e92d4010 	push	{r4, lr}
   169fc:	e3a03000 	mov	r3, #0
   16a00:	e1a0e001 	mov	lr, r1
   16a04:	e3a0c001 	mov	ip, #1
   16a08:	e1a04000 	mov	r4, r0
   16a0c:	e5803004 	str	r3, [r0, #4]
   16a10:	e5803008 	str	r3, [r0, #8]
   16a14:	e580300c 	str	r3, [r0, #12]
   16a18:	e3a020a8 	mov	r2, #168	@ 0xa8
   16a1c:	e1a01003 	mov	r1, r3
   16a20:	e580e000 	str	lr, [r0]
   16a24:	e580c0b8 	str	ip, [r0, #184]	@ 0xb8
   16a28:	e2800010 	add	r0, r0, #16
   16a2c:	ebfffeab 	bl	164e0 <memset>
   16a30:	e1a03004 	mov	r3, r4
   16a34:	e59f201c 	ldr	r2, [pc, #28]	@ 16a58 <CHeapAllocator::CHeapAllocator(char const*)+0x60>
   16a38:	e2840038 	add	r0, r4, #56	@ 0x38
   16a3c:	e2833008 	add	r3, r3, #8
   16a40:	e4921004 	ldr	r1, [r2], #4
   16a44:	e1530000 	cmp	r3, r0
   16a48:	e5831008 	str	r1, [r3, #8]
   16a4c:	1afffffa 	bne	16a3c <CHeapAllocator::CHeapAllocator(char const*)+0x44>
   16a50:	e1a00004 	mov	r0, r4
   16a54:	e8bd8010 	pop	{r4, pc}
   16a58:	0001ee9c 	.word	0x0001ee9c

00016a5c <CHeapAllocator::~CHeapAllocator()>:
   16a5c:	e12fff1e 	bx	lr

00016a60 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   16a60:	e0812002 	add	r2, r1, r2
   16a64:	e980000e 	stmib	r0, {r1, r2, r3}
   16a68:	e12fff1e 	bx	lr

00016a6c <CHeapAllocator::GetFreeSpace() const>:
   16a6c:	e9900005 	ldmib	r0, {r0, r2}
   16a70:	e0420000 	sub	r0, r2, r0
   16a74:	e12fff1e 	bx	lr

00016a78 <CHeapAllocator::Allocate(unsigned int)>:
   16a78:	e5903004 	ldr	r3, [r0, #4]
   16a7c:	e3530000 	cmp	r3, #0
   16a80:	0a00006e 	beq	16c40 <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   16a84:	e92d4070 	push	{r4, r5, r6, lr}
   16a88:	e1a06000 	mov	r6, r0
   16a8c:	e59000b8 	ldr	r0, [r0, #184]	@ 0xb8
   16a90:	e1a04001 	mov	r4, r1
   16a94:	e3500000 	cmp	r0, #0
   16a98:	1a00005c 	bne	16c10 <CHeapAllocator::Allocate(unsigned int)+0x198>
   16a9c:	e5963010 	ldr	r3, [r6, #16]
   16aa0:	e2862010 	add	r2, r6, #16
   16aa4:	e3530000 	cmp	r3, #0
   16aa8:	1a000003 	bne	16abc <CHeapAllocator::Allocate(unsigned int)+0x44>
   16aac:	ea000029 	b	16b58 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   16ab0:	e5b23008 	ldr	r3, [r2, #8]!
   16ab4:	e3530000 	cmp	r3, #0
   16ab8:	0a000026 	beq	16b58 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   16abc:	e1530004 	cmp	r3, r4
   16ac0:	3afffffa 	bcc	16ab0 <CHeapAllocator::Allocate(unsigned int)+0x38>
   16ac4:	e5925004 	ldr	r5, [r2, #4]
   16ac8:	e3550000 	cmp	r5, #0
   16acc:	01a04003 	moveq	r4, r3
   16ad0:	0a000020 	beq	16b58 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   16ad4:	e5d51001 	ldrb	r1, [r5, #1]
   16ad8:	e5d53000 	ldrb	r3, [r5]
   16adc:	e1833401 	orr	r3, r3, r1, lsl #8
   16ae0:	e5d51002 	ldrb	r1, [r5, #2]
   16ae4:	e1833801 	orr	r3, r3, r1, lsl #16
   16ae8:	e5d51003 	ldrb	r1, [r5, #3]
   16aec:	e1833c01 	orr	r3, r3, r1, lsl #24
   16af0:	e59f1150 	ldr	r1, [pc, #336]	@ 16c48 <CHeapAllocator::Allocate(unsigned int)+0x1d0>
   16af4:	e1530001 	cmp	r3, r1
   16af8:	1a00004c 	bne	16c30 <CHeapAllocator::Allocate(unsigned int)+0x1b8>
   16afc:	e5d51009 	ldrb	r1, [r5, #9]
   16b00:	e5d53008 	ldrb	r3, [r5, #8]
   16b04:	e1833401 	orr	r3, r3, r1, lsl #8
   16b08:	e5d5100a 	ldrb	r1, [r5, #10]
   16b0c:	e1833801 	orr	r3, r3, r1, lsl #16
   16b10:	e5d5100b 	ldrb	r1, [r5, #11]
   16b14:	e1833c01 	orr	r3, r3, r1, lsl #24
   16b18:	e5823004 	str	r3, [r2, #4]
   16b1c:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   16b20:	e3530000 	cmp	r3, #0
   16b24:	1a000029 	bne	16bd0 <CHeapAllocator::Allocate(unsigned int)+0x158>
   16b28:	e3a03000 	mov	r3, #0
   16b2c:	e315001f 	tst	r5, #31
   16b30:	e5c53008 	strb	r3, [r5, #8]
   16b34:	e5c53009 	strb	r3, [r5, #9]
   16b38:	e5c5300a 	strb	r3, [r5, #10]
   16b3c:	e5c5300b 	strb	r3, [r5, #11]
   16b40:	e2850020 	add	r0, r5, #32
   16b44:	08bd8070 	popeq	{r4, r5, r6, pc}
   16b48:	e3a0208e 	mov	r2, #142	@ 0x8e
   16b4c:	e59f10f8 	ldr	r1, [pc, #248]	@ 16c4c <CHeapAllocator::Allocate(unsigned int)+0x1d4>
   16b50:	e59f00f8 	ldr	r0, [pc, #248]	@ 16c50 <CHeapAllocator::Allocate(unsigned int)+0x1d8>
   16b54:	ebffe2f2 	bl	f724 <assertion_failed>
   16b58:	e5965004 	ldr	r5, [r6, #4]
   16b5c:	e284303f 	add	r3, r4, #63	@ 0x3f
   16b60:	e3c3301f 	bic	r3, r3, #31
   16b64:	e0853003 	add	r3, r5, r3
   16b68:	e1550003 	cmp	r5, r3
   16b6c:	e596100c 	ldr	r1, [r6, #12]
   16b70:	2a000018 	bcs	16bd8 <CHeapAllocator::Allocate(unsigned int)+0x160>
   16b74:	e5962008 	ldr	r2, [r6, #8]
   16b78:	e0422001 	sub	r2, r2, r1
   16b7c:	e1530002 	cmp	r3, r2
   16b80:	8a000014 	bhi	16bd8 <CHeapAllocator::Allocate(unsigned int)+0x160>
   16b84:	e5863004 	str	r3, [r6, #4]
   16b88:	e3a0304c 	mov	r3, #76	@ 0x4c
   16b8c:	e3a0204d 	mov	r2, #77	@ 0x4d
   16b90:	e5c53002 	strb	r3, [r5, #2]
   16b94:	e3a01043 	mov	r1, #67	@ 0x43
   16b98:	e3a03042 	mov	r3, #66	@ 0x42
   16b9c:	e5c52001 	strb	r2, [r5, #1]
   16ba0:	e1a02424 	lsr	r2, r4, #8
   16ba4:	e5c54004 	strb	r4, [r5, #4]
   16ba8:	e5c52005 	strb	r2, [r5, #5]
   16bac:	e1a02824 	lsr	r2, r4, #16
   16bb0:	e1a04c24 	lsr	r4, r4, #24
   16bb4:	e5c51000 	strb	r1, [r5]
   16bb8:	e5c52006 	strb	r2, [r5, #6]
   16bbc:	e5c54007 	strb	r4, [r5, #7]
   16bc0:	e5c53003 	strb	r3, [r5, #3]
   16bc4:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   16bc8:	e3530000 	cmp	r3, #0
   16bcc:	0affffd5 	beq	16b28 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   16bd0:	eb000358 	bl	17938 <LeaveCritical>
   16bd4:	eaffffd3 	b	16b28 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   16bd8:	e3510000 	cmp	r1, #0
   16bdc:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   16be0:	0a00000c 	beq	16c18 <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   16be4:	e3a02000 	mov	r2, #0
   16be8:	e1530002 	cmp	r3, r2
   16bec:	e586200c 	str	r2, [r6, #12]
   16bf0:	1a00000c 	bne	16c28 <CHeapAllocator::Allocate(unsigned int)+0x1b0>
   16bf4:	ebffe7ca 	bl	10b24 <CLogger::Get()>
   16bf8:	e3a02000 	mov	r2, #0
   16bfc:	e59f3050 	ldr	r3, [pc, #80]	@ 16c54 <CHeapAllocator::Allocate(unsigned int)+0x1dc>
   16c00:	e5961000 	ldr	r1, [r6]
   16c04:	ebffe992 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c08:	e3a00000 	mov	r0, #0
   16c0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16c10:	eb00031e 	bl	17890 <EnterCritical>
   16c14:	eaffffa0 	b	16a9c <CHeapAllocator::Allocate(unsigned int)+0x24>
   16c18:	e3530000 	cmp	r3, #0
   16c1c:	0afffff9 	beq	16c08 <CHeapAllocator::Allocate(unsigned int)+0x190>
   16c20:	eb000344 	bl	17938 <LeaveCritical>
   16c24:	eafffff7 	b	16c08 <CHeapAllocator::Allocate(unsigned int)+0x190>
   16c28:	eb000342 	bl	17938 <LeaveCritical>
   16c2c:	eafffff0 	b	16bf4 <CHeapAllocator::Allocate(unsigned int)+0x17c>
   16c30:	e3a0205e 	mov	r2, #94	@ 0x5e
   16c34:	e59f1010 	ldr	r1, [pc, #16]	@ 16c4c <CHeapAllocator::Allocate(unsigned int)+0x1d4>
   16c38:	e59f0018 	ldr	r0, [pc, #24]	@ 16c58 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   16c3c:	ebffe2b8 	bl	f724 <assertion_failed>
   16c40:	e3a00000 	mov	r0, #0
   16c44:	e12fff1e 	bx	lr
   16c48:	424c4d43 	.word	0x424c4d43
   16c4c:	0001d704 	.word	0x0001d704
   16c50:	0001d754 	.word	0x0001d754
   16c54:	0001d744 	.word	0x0001d744
   16c58:	0001d718 	.word	0x0001d718

00016c5c <CHeapAllocator::Free(void*)>:
   16c5c:	e92d4070 	push	{r4, r5, r6, lr}
   16c60:	e2515000 	subs	r5, r1, #0
   16c64:	08bd8070 	popeq	{r4, r5, r6, pc}
   16c68:	e555101f 	ldrb	r1, [r5, #-31]	@ 0xffffffe1
   16c6c:	e5553020 	ldrb	r3, [r5, #-32]	@ 0xffffffe0
   16c70:	e555201e 	ldrb	r2, [r5, #-30]	@ 0xffffffe2
   16c74:	e1833401 	orr	r3, r3, r1, lsl #8
   16c78:	e555101d 	ldrb	r1, [r5, #-29]	@ 0xffffffe3
   16c7c:	e1833802 	orr	r3, r3, r2, lsl #16
   16c80:	e59f20d4 	ldr	r2, [pc, #212]	@ 16d5c <CHeapAllocator::Free(void*)+0x100>
   16c84:	e1833c01 	orr	r3, r3, r1, lsl #24
   16c88:	e1530002 	cmp	r3, r2
   16c8c:	e2455020 	sub	r5, r5, #32
   16c90:	1a00002d 	bne	16d4c <CHeapAllocator::Free(void*)+0xf0>
   16c94:	e5903010 	ldr	r3, [r0, #16]
   16c98:	e1a06000 	mov	r6, r0
   16c9c:	e3530000 	cmp	r3, #0
   16ca0:	08bd8070 	popeq	{r4, r5, r6, pc}
   16ca4:	e5d51005 	ldrb	r1, [r5, #5]
   16ca8:	e5d52004 	ldrb	r2, [r5, #4]
   16cac:	e2804010 	add	r4, r0, #16
   16cb0:	e1822401 	orr	r2, r2, r1, lsl #8
   16cb4:	e5d51006 	ldrb	r1, [r5, #6]
   16cb8:	e1822801 	orr	r2, r2, r1, lsl #16
   16cbc:	e5d51007 	ldrb	r1, [r5, #7]
   16cc0:	e1822c01 	orr	r2, r2, r1, lsl #24
   16cc4:	ea000002 	b	16cd4 <CHeapAllocator::Free(void*)+0x78>
   16cc8:	e5b43008 	ldr	r3, [r4, #8]!
   16ccc:	e3530000 	cmp	r3, #0
   16cd0:	08bd8070 	popeq	{r4, r5, r6, pc}
   16cd4:	e1530002 	cmp	r3, r2
   16cd8:	1afffffa 	bne	16cc8 <CHeapAllocator::Free(void*)+0x6c>
   16cdc:	e59600b8 	ldr	r0, [r6, #184]	@ 0xb8
   16ce0:	e3500000 	cmp	r0, #0
   16ce4:	1a000009 	bne	16d10 <CHeapAllocator::Free(void*)+0xb4>
   16ce8:	e5943004 	ldr	r3, [r4, #4]
   16cec:	e1a01423 	lsr	r1, r3, #8
   16cf0:	e1a02823 	lsr	r2, r3, #16
   16cf4:	e5c53008 	strb	r3, [r5, #8]
   16cf8:	e1a03c23 	lsr	r3, r3, #24
   16cfc:	e5c51009 	strb	r1, [r5, #9]
   16d00:	e5c5200a 	strb	r2, [r5, #10]
   16d04:	e5c5300b 	strb	r3, [r5, #11]
   16d08:	e5845004 	str	r5, [r4, #4]
   16d0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16d10:	eb0002de 	bl	17890 <EnterCritical>
   16d14:	e5943004 	ldr	r3, [r4, #4]
   16d18:	e59610b8 	ldr	r1, [r6, #184]	@ 0xb8
   16d1c:	e1a02423 	lsr	r2, r3, #8
   16d20:	e5c53008 	strb	r3, [r5, #8]
   16d24:	e5c52009 	strb	r2, [r5, #9]
   16d28:	e3510000 	cmp	r1, #0
   16d2c:	e1a02823 	lsr	r2, r3, #16
   16d30:	e1a03c23 	lsr	r3, r3, #24
   16d34:	e5c5200a 	strb	r2, [r5, #10]
   16d38:	e5c5300b 	strb	r3, [r5, #11]
   16d3c:	e5845004 	str	r5, [r4, #4]
   16d40:	08bd8070 	popeq	{r4, r5, r6, pc}
   16d44:	e8bd4070 	pop	{r4, r5, r6, lr}
   16d48:	ea0002fa 	b	17938 <LeaveCritical>
   16d4c:	e3a020bf 	mov	r2, #191	@ 0xbf
   16d50:	e59f1008 	ldr	r1, [pc, #8]	@ 16d60 <CHeapAllocator::Free(void*)+0x104>
   16d54:	e59f0008 	ldr	r0, [pc, #8]	@ 16d64 <CHeapAllocator::Free(void*)+0x108>
   16d58:	ebffe271 	bl	f724 <assertion_failed>
   16d5c:	424c4d43 	.word	0x424c4d43
   16d60:	0001d704 	.word	0x0001d704
   16d64:	0001d718 	.word	0x0001d718

00016d68 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   16d68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16d6c:	e2514000 	subs	r4, r1, #0
   16d70:	e1a05002 	mov	r5, r2
   16d74:	0a00002b 	beq	16e28 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc0>
   16d78:	e3520000 	cmp	r2, #0
   16d7c:	0a000026 	beq	16e1c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xb4>
   16d80:	e554201f 	ldrb	r2, [r4, #-31]	@ 0xffffffe1
   16d84:	e5543020 	ldrb	r3, [r4, #-32]	@ 0xffffffe0
   16d88:	e2447020 	sub	r7, r4, #32
   16d8c:	e1833402 	orr	r3, r3, r2, lsl #8
   16d90:	e554201e 	ldrb	r2, [r4, #-30]	@ 0xffffffe2
   16d94:	e1833802 	orr	r3, r3, r2, lsl #16
   16d98:	e554201d 	ldrb	r2, [r4, #-29]	@ 0xffffffe3
   16d9c:	e1833c02 	orr	r3, r3, r2, lsl #24
   16da0:	e59f209c 	ldr	r2, [pc, #156]	@ 16e44 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xdc>
   16da4:	e1530002 	cmp	r3, r2
   16da8:	1a000021 	bne	16e34 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xcc>
   16dac:	e5d72005 	ldrb	r2, [r7, #5]
   16db0:	e5d73004 	ldrb	r3, [r7, #4]
   16db4:	e1833402 	orr	r3, r3, r2, lsl #8
   16db8:	e5d72006 	ldrb	r2, [r7, #6]
   16dbc:	e1833802 	orr	r3, r3, r2, lsl #16
   16dc0:	e5d72007 	ldrb	r2, [r7, #7]
   16dc4:	e1833c02 	orr	r3, r3, r2, lsl #24
   16dc8:	e1530005 	cmp	r3, r5
   16dcc:	21a05004 	movcs	r5, r4
   16dd0:	3a000001 	bcc	16ddc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x74>
   16dd4:	e1a00005 	mov	r0, r5
   16dd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16ddc:	e1a01005 	mov	r1, r5
   16de0:	e1a06000 	mov	r6, r0
   16de4:	ebffff23 	bl	16a78 <CHeapAllocator::Allocate(unsigned int)>
   16de8:	e2505000 	subs	r5, r0, #0
   16dec:	0afffff8 	beq	16dd4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   16df0:	e5d72005 	ldrb	r2, [r7, #5]
   16df4:	e5d73004 	ldrb	r3, [r7, #4]
   16df8:	e1a01004 	mov	r1, r4
   16dfc:	e1833402 	orr	r3, r3, r2, lsl #8
   16e00:	e5d72006 	ldrb	r2, [r7, #6]
   16e04:	e1833802 	orr	r3, r3, r2, lsl #16
   16e08:	e5d72007 	ldrb	r2, [r7, #7]
   16e0c:	e1832c02 	orr	r2, r3, r2, lsl #24
   16e10:	ebfffdc9 	bl	1653c <memcpy>
   16e14:	e1a01004 	mov	r1, r4
   16e18:	e1a00006 	mov	r0, r6
   16e1c:	ebffff8e 	bl	16c5c <CHeapAllocator::Free(void*)>
   16e20:	e1a00005 	mov	r0, r5
   16e24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16e28:	e1a01002 	mov	r1, r2
   16e2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   16e30:	eaffff10 	b	16a78 <CHeapAllocator::Allocate(unsigned int)>
   16e34:	e3a020a3 	mov	r2, #163	@ 0xa3
   16e38:	e59f1008 	ldr	r1, [pc, #8]	@ 16e48 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe0>
   16e3c:	e59f0008 	ldr	r0, [pc, #8]	@ 16e4c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe4>
   16e40:	ebffe237 	bl	f724 <assertion_failed>
   16e44:	424c4d43 	.word	0x424c4d43
   16e48:	0001d704 	.word	0x0001d704
   16e4c:	0001d718 	.word	0x0001d718

00016e50 <CPageAllocator::CPageAllocator()>:
   16e50:	e3a02000 	mov	r2, #0
   16e54:	e3a01001 	mov	r1, #1
   16e58:	e5802000 	str	r2, [r0]
   16e5c:	e5802004 	str	r2, [r0, #4]
   16e60:	e5802008 	str	r2, [r0, #8]
   16e64:	e580100c 	str	r1, [r0, #12]
   16e68:	e12fff1e 	bx	lr

00016e6c <CPageAllocator::~CPageAllocator()>:
   16e6c:	e12fff1e 	bx	lr

00016e70 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   16e70:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   16e74:	e28db000 	add	fp, sp, #0
   16e78:	e24dd014 	sub	sp, sp, #20
   16e7c:	e50b0008 	str	r0, [fp, #-8]
   16e80:	e50b100c 	str	r1, [fp, #-12]
   16e84:	e50b2010 	str	r2, [fp, #-16]
   16e88:	e51b300c 	ldr	r3, [fp, #-12]
   16e8c:	e2833eff 	add	r3, r3, #4080	@ 0xff0
   16e90:	e283300f 	add	r3, r3, #15
   16e94:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   16e98:	e3c3300f 	bic	r3, r3, #15
   16e9c:	e1a02003 	mov	r2, r3
   16ea0:	e51b3008 	ldr	r3, [fp, #-8]
   16ea4:	e5832000 	str	r2, [r3]
   16ea8:	e51b200c 	ldr	r2, [fp, #-12]
   16eac:	e51b3010 	ldr	r3, [fp, #-16]
   16eb0:	e0823003 	add	r3, r2, r3
   16eb4:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   16eb8:	e3c3300f 	bic	r3, r3, #15
   16ebc:	e1a02003 	mov	r2, r3
   16ec0:	e51b3008 	ldr	r3, [fp, #-8]
   16ec4:	e5832004 	str	r2, [r3, #4]
   16ec8:	e320f000 	nop	{0}
   16ecc:	e28bd000 	add	sp, fp, #0
   16ed0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   16ed4:	e12fff1e 	bx	lr

00016ed8 <CPageAllocator::GetFreeSpace() const>:
   16ed8:	e8900005 	ldm	r0, {r0, r2}
   16edc:	e0420000 	sub	r0, r2, r0
   16ee0:	e12fff1e 	bx	lr

00016ee4 <CPageAllocator::Allocate()>:
   16ee4:	e5903000 	ldr	r3, [r0]
   16ee8:	e92d4070 	push	{r4, r5, r6, lr}
   16eec:	e3530000 	cmp	r3, #0
   16ef0:	0a000023 	beq	16f84 <CPageAllocator::Allocate()+0xa0>
   16ef4:	e1a04000 	mov	r4, r0
   16ef8:	e590000c 	ldr	r0, [r0, #12]
   16efc:	e3500000 	cmp	r0, #0
   16f00:	1a00000f 	bne	16f44 <CPageAllocator::Allocate()+0x60>
   16f04:	e5945008 	ldr	r5, [r4, #8]
   16f08:	e3550000 	cmp	r5, #0
   16f0c:	0a000010 	beq	16f54 <CPageAllocator::Allocate()+0x70>
   16f10:	e59f308c 	ldr	r3, [pc, #140]	@ 16fa4 <CPageAllocator::Allocate()+0xc0>
   16f14:	e5952000 	ldr	r2, [r5]
   16f18:	e1520003 	cmp	r2, r3
   16f1c:	1a00001c 	bne	16f94 <CPageAllocator::Allocate()+0xb0>
   16f20:	e3a03000 	mov	r3, #0
   16f24:	e594000c 	ldr	r0, [r4, #12]
   16f28:	e5952004 	ldr	r2, [r5, #4]
   16f2c:	e3500000 	cmp	r0, #0
   16f30:	e5842008 	str	r2, [r4, #8]
   16f34:	e5853000 	str	r3, [r5]
   16f38:	1a00000e 	bne	16f78 <CPageAllocator::Allocate()+0x94>
   16f3c:	e1a00005 	mov	r0, r5
   16f40:	e8bd8070 	pop	{r4, r5, r6, pc}
   16f44:	eb000251 	bl	17890 <EnterCritical>
   16f48:	e5945008 	ldr	r5, [r4, #8]
   16f4c:	e3550000 	cmp	r5, #0
   16f50:	1affffee 	bne	16f10 <CPageAllocator::Allocate()+0x2c>
   16f54:	e5942000 	ldr	r2, [r4]
   16f58:	e5941004 	ldr	r1, [r4, #4]
   16f5c:	e2823a01 	add	r3, r2, #4096	@ 0x1000
   16f60:	e594000c 	ldr	r0, [r4, #12]
   16f64:	e1530001 	cmp	r3, r1
   16f68:	91a05002 	movls	r5, r2
   16f6c:	e3500000 	cmp	r0, #0
   16f70:	e5843000 	str	r3, [r4]
   16f74:	0afffff0 	beq	16f3c <CPageAllocator::Allocate()+0x58>
   16f78:	eb00026e 	bl	17938 <LeaveCritical>
   16f7c:	e1a00005 	mov	r0, r5
   16f80:	e8bd8070 	pop	{r4, r5, r6, pc}
   16f84:	e59f101c 	ldr	r1, [pc, #28]	@ 16fa8 <CPageAllocator::Allocate()+0xc4>
   16f88:	e3a02036 	mov	r2, #54	@ 0x36
   16f8c:	e2810014 	add	r0, r1, #20
   16f90:	ebffe1e3 	bl	f724 <assertion_failed>
   16f94:	e59f100c 	ldr	r1, [pc, #12]	@ 16fa8 <CPageAllocator::Allocate()+0xc4>
   16f98:	e3a02044 	mov	r2, #68	@ 0x44
   16f9c:	e2810024 	add	r0, r1, #36	@ 0x24
   16fa0:	ebffe1df 	bl	f724 <assertion_failed>
   16fa4:	50474d43 	.word	0x50474d43
   16fa8:	0001e6ec 	.word	0x0001e6ec

00016fac <CPageAllocator::Free(void*)>:
   16fac:	e92d4070 	push	{r4, r5, r6, lr}
   16fb0:	e2514000 	subs	r4, r1, #0
   16fb4:	08bd8070 	popeq	{r4, r5, r6, pc}
   16fb8:	e1a05000 	mov	r5, r0
   16fbc:	e590000c 	ldr	r0, [r0, #12]
   16fc0:	e3500000 	cmp	r0, #0
   16fc4:	1a000005 	bne	16fe0 <CPageAllocator::Free(void*)+0x34>
   16fc8:	e5952008 	ldr	r2, [r5, #8]
   16fcc:	e59f3034 	ldr	r3, [pc, #52]	@ 17008 <CPageAllocator::Free(void*)+0x5c>
   16fd0:	e5842004 	str	r2, [r4, #4]
   16fd4:	e5843000 	str	r3, [r4]
   16fd8:	e5854008 	str	r4, [r5, #8]
   16fdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   16fe0:	eb00022a 	bl	17890 <EnterCritical>
   16fe4:	e595100c 	ldr	r1, [r5, #12]
   16fe8:	e5953008 	ldr	r3, [r5, #8]
   16fec:	e59f2014 	ldr	r2, [pc, #20]	@ 17008 <CPageAllocator::Free(void*)+0x5c>
   16ff0:	e3510000 	cmp	r1, #0
   16ff4:	e884000c 	stm	r4, {r2, r3}
   16ff8:	e5854008 	str	r4, [r5, #8]
   16ffc:	08bd8070 	popeq	{r4, r5, r6, pc}
   17000:	e8bd4070 	pop	{r4, r5, r6, lr}
   17004:	ea00024b 	b	17938 <LeaveCritical>
   17008:	50474d43 	.word	0x50474d43

0001700c <CExceptionHandler::~CExceptionHandler()>:
   1700c:	e3a02000 	mov	r2, #0
   17010:	e59f3004 	ldr	r3, [pc, #4]	@ 1701c <CExceptionHandler::~CExceptionHandler()+0x10>
   17014:	e5832000 	str	r2, [r3]
   17018:	e12fff1e 	bx	lr
   1701c:	00020b9c 	.word	0x00020b9c

00017020 <CExceptionHandler::~CExceptionHandler()>:
   17020:	e92d4010 	push	{r4, lr}
   17024:	e3a02000 	mov	r2, #0
   17028:	e1a04000 	mov	r4, r0
   1702c:	e59f3010 	ldr	r3, [pc, #16]	@ 17044 <CExceptionHandler::~CExceptionHandler()+0x24>
   17030:	e3a01004 	mov	r1, #4
   17034:	e5832000 	str	r2, [r3]
   17038:	ebfffe62 	bl	169c8 <operator delete(void*, unsigned int)>
   1703c:	e1a00004 	mov	r0, r4
   17040:	e8bd8010 	pop	{r4, pc}
   17044:	00020b9c 	.word	0x00020b9c

00017048 <CExceptionHandler::Throw(unsigned int)>:
   17048:	e92d4010 	push	{r4, lr}
   1704c:	e1a04001 	mov	r4, r1
   17050:	e24dd008 	sub	sp, sp, #8
   17054:	ebffe6b2 	bl	10b24 <CLogger::Get()>
   17058:	e59fc01c 	ldr	ip, [pc, #28]	@ 1707c <CExceptionHandler::Throw(unsigned int)+0x34>
   1705c:	e3a02000 	mov	r2, #0
   17060:	e79cc104 	ldr	ip, [ip, r4, lsl #2]
   17064:	e59f3014 	ldr	r3, [pc, #20]	@ 17080 <CExceptionHandler::Throw(unsigned int)+0x38>
   17068:	e59f1014 	ldr	r1, [pc, #20]	@ 17084 <CExceptionHandler::Throw(unsigned int)+0x3c>
   1706c:	e58dc000 	str	ip, [sp]
   17070:	ebffe877 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17074:	e28dd008 	add	sp, sp, #8
   17078:	e8bd8010 	pop	{r4, pc}
   1707c:	0001eeb8 	.word	0x0001eeb8
   17080:	0001d780 	.word	0x0001d780
   17084:	0001e734 	.word	0x0001e734

00017088 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   17088:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1708c:	e3510002 	cmp	r1, #2
   17090:	e1a08001 	mov	r8, r1
   17094:	e1a04002 	mov	r4, r2
   17098:	e24dd024 	sub	sp, sp, #36	@ 0x24
   1709c:	0a00002a 	beq	1714c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   170a0:	e3510003 	cmp	r1, #3
   170a4:	13a07000 	movne	r7, #0
   170a8:	11a09007 	movne	r9, r7
   170ac:	0a00001e 	beq	1712c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   170b0:	e3540000 	cmp	r4, #0
   170b4:	0a000020 	beq	1713c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   170b8:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   170bc:	e5946048 	ldr	r6, [r4, #72]	@ 0x48
   170c0:	e203301f 	and	r3, r3, #31
   170c4:	e3530011 	cmp	r3, #17
   170c8:	e5945044 	ldr	r5, [r4, #68]	@ 0x44
   170cc:	0a000021 	beq	17158 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
   170d0:	e3530012 	cmp	r3, #18
   170d4:	08940060 	ldmeq	r4, {r5, r6}
   170d8:	e1a00005 	mov	r0, r5
   170dc:	e59f1080 	ldr	r1, [pc, #128]	@ 17164 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   170e0:	ebffe1f3 	bl	f8b4 <debug_stacktrace(unsigned int const*, char const*)>
   170e4:	ebffe68e 	bl	10b24 <CLogger::Get()>
   170e8:	e58d6014 	str	r6, [sp, #20]
   170ec:	e58d5010 	str	r5, [sp, #16]
   170f0:	e58d700c 	str	r7, [sp, #12]
   170f4:	e5943050 	ldr	r3, [r4, #80]	@ 0x50
   170f8:	e59f2068 	ldr	r2, [pc, #104]	@ 17168 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   170fc:	e7921108 	ldr	r1, [r2, r8, lsl #2]
   17100:	e58d3004 	str	r3, [sp, #4]
   17104:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   17108:	e3a02000 	mov	r2, #0
   1710c:	e58d3018 	str	r3, [sp, #24]
   17110:	e58d1000 	str	r1, [sp]
   17114:	e59f3050 	ldr	r3, [pc, #80]	@ 1716c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   17118:	e59f1044 	ldr	r1, [pc, #68]	@ 17164 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   1711c:	e58d9008 	str	r9, [sp, #8]
   17120:	ebffe84b 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17124:	e28dd024 	add	sp, sp, #36	@ 0x24
   17128:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1712c:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   17130:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   17134:	e3540000 	cmp	r4, #0
   17138:	1affffde 	bne	170b8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   1713c:	e3a02069 	mov	r2, #105	@ 0x69
   17140:	e59f1028 	ldr	r1, [pc, #40]	@ 17170 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   17144:	e59f0028 	ldr	r0, [pc, #40]	@ 17174 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   17148:	ebffe175 	bl	f724 <assertion_failed>
   1714c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   17150:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   17154:	eaffffd5 	b	170b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   17158:	e594600c 	ldr	r6, [r4, #12]
   1715c:	e5945008 	ldr	r5, [r4, #8]
   17160:	eaffffdc 	b	170d8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   17164:	0001e734 	.word	0x0001e734
   17168:	0001eeb8 	.word	0x0001eeb8
   1716c:	0001d7b4 	.word	0x0001d7b4
   17170:	0001d790 	.word	0x0001d790
   17174:	0001d7a8 	.word	0x0001d7a8

00017178 <CExceptionHandler::CExceptionHandler()>:
   17178:	e92d4010 	push	{r4, lr}
   1717c:	e59f30ac 	ldr	r3, [pc, #172]	@ 17230 <CExceptionHandler::CExceptionHandler()+0xb8>
   17180:	e59f20ac 	ldr	r2, [pc, #172]	@ 17234 <CExceptionHandler::CExceptionHandler()+0xbc>
   17184:	e5931000 	ldr	r1, [r3]
   17188:	e24dd008 	sub	sp, sp, #8
   1718c:	e3510000 	cmp	r1, #0
   17190:	e5802000 	str	r2, [r0]
   17194:	1a000021 	bne	17220 <CExceptionHandler::CExceptionHandler()+0xa8>
   17198:	e1a04000 	mov	r4, r0
   1719c:	e3a00004 	mov	r0, #4
   171a0:	e58d0004 	str	r0, [sp, #4]
   171a4:	e59d0004 	ldr	r0, [sp, #4]
   171a8:	e59f1088 	ldr	r1, [pc, #136]	@ 17238 <CExceptionHandler::CExceptionHandler()+0xc0>
   171ac:	e59dc004 	ldr	ip, [sp, #4]
   171b0:	e0411000 	sub	r1, r1, r0
   171b4:	e1a01141 	asr	r1, r1, #2
   171b8:	e59d0004 	ldr	r0, [sp, #4]
   171bc:	e2411002 	sub	r1, r1, #2
   171c0:	e38114ea 	orr	r1, r1, #-369098752	@ 0xea000000
   171c4:	e59f2070 	ldr	r2, [pc, #112]	@ 1723c <CExceptionHandler::CExceptionHandler()+0xc4>
   171c8:	e5834000 	str	r4, [r3]
   171cc:	e58c1000 	str	r1, [ip]
   171d0:	e2801008 	add	r1, r0, #8
   171d4:	e0422001 	sub	r2, r2, r1
   171d8:	e1a02142 	asr	r2, r2, #2
   171dc:	e59d1004 	ldr	r1, [sp, #4]
   171e0:	e2422002 	sub	r2, r2, #2
   171e4:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   171e8:	e5812008 	str	r2, [r1, #8]
   171ec:	e59d2004 	ldr	r2, [sp, #4]
   171f0:	e59f3048 	ldr	r3, [pc, #72]	@ 17240 <CExceptionHandler::CExceptionHandler()+0xc8>
   171f4:	e282200c 	add	r2, r2, #12
   171f8:	e0433002 	sub	r3, r3, r2
   171fc:	e1a03143 	asr	r3, r3, #2
   17200:	e59d1004 	ldr	r1, [sp, #4]
   17204:	e2433002 	sub	r3, r3, #2
   17208:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   1720c:	e581300c 	str	r3, [r1, #12]
   17210:	eb0001ed 	bl	179cc <SyncDataAndInstructionCache>
   17214:	e1a00004 	mov	r0, r4
   17218:	e28dd008 	add	sp, sp, #8
   1721c:	e8bd8010 	pop	{r4, pc}
   17220:	e3a02030 	mov	r2, #48	@ 0x30
   17224:	e59f1018 	ldr	r1, [pc, #24]	@ 17244 <CExceptionHandler::CExceptionHandler()+0xcc>
   17228:	e59f0018 	ldr	r0, [pc, #24]	@ 17248 <CExceptionHandler::CExceptionHandler()+0xd0>
   1722c:	ebffe13c 	bl	f724 <assertion_failed>
   17230:	00020b9c 	.word	0x00020b9c
   17234:	0001e744 	.word	0x0001e744
   17238:	00017464 	.word	0x00017464
   1723c:	000173c4 	.word	0x000173c4
   17240:	00017414 	.word	0x00017414
   17244:	0001d790 	.word	0x0001d790
   17248:	0001d54c 	.word	0x0001d54c

0001724c <CExceptionHandler::Get()>:
   1724c:	e59f301c 	ldr	r3, [pc, #28]	@ 17270 <CExceptionHandler::Get()+0x24>
   17250:	e5930000 	ldr	r0, [r3]
   17254:	e3500000 	cmp	r0, #0
   17258:	112fff1e 	bxne	lr
   1725c:	e3a02087 	mov	r2, #135	@ 0x87
   17260:	e92d4010 	push	{r4, lr}
   17264:	e59f1008 	ldr	r1, [pc, #8]	@ 17274 <CExceptionHandler::Get()+0x28>
   17268:	e59f0008 	ldr	r0, [pc, #8]	@ 17278 <CExceptionHandler::Get()+0x2c>
   1726c:	ebffe12c 	bl	f724 <assertion_failed>
   17270:	00020b9c 	.word	0x00020b9c
   17274:	0001d790 	.word	0x0001d790
   17278:	0001d6c4 	.word	0x0001d6c4

0001727c <ExceptionHandler>:
   1727c:	e92d4070 	push	{r4, r5, r6, lr}
   17280:	e3a03000 	mov	r3, #0
   17284:	e1a04000 	mov	r4, r0
   17288:	e1a05001 	mov	r5, r1
   1728c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   17290:	eb000331 	bl	17f5c <CInterruptSystem::DisableFIQ()>
   17294:	f1080040 	cpsie	f
   17298:	e59f3030 	ldr	r3, [pc, #48]	@ 172d0 <ExceptionHandler+0x54>
   1729c:	e5930000 	ldr	r0, [r3]
   172a0:	e3500000 	cmp	r0, #0
   172a4:	0a000005 	beq	172c0 <ExceptionHandler+0x44>
   172a8:	e5903000 	ldr	r3, [r0]
   172ac:	e1a02005 	mov	r2, r5
   172b0:	e1a01004 	mov	r1, r4
   172b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   172b8:	e593300c 	ldr	r3, [r3, #12]
   172bc:	e12fff13 	bx	r3
   172c0:	e3a02087 	mov	r2, #135	@ 0x87
   172c4:	e59f1008 	ldr	r1, [pc, #8]	@ 172d4 <ExceptionHandler+0x58>
   172c8:	e59f0008 	ldr	r0, [pc, #8]	@ 172d8 <ExceptionHandler+0x5c>
   172cc:	ebffe114 	bl	f724 <assertion_failed>
   172d0:	00020b9c 	.word	0x00020b9c
   172d4:	0001d790 	.word	0x0001d790
   172d8:	0001d6c4 	.word	0x0001d6c4

000172dc <raise>:
   172dc:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   172e0:	e59f3070 	ldr	r3, [pc, #112]	@ 17358 <raise+0x7c>
   172e4:	e24dd00c 	sub	sp, sp, #12
   172e8:	e5930000 	ldr	r0, [r3]
   172ec:	e3500000 	cmp	r0, #0
   172f0:	0a000014 	beq	17348 <raise+0x6c>
   172f4:	e5903000 	ldr	r3, [r0]
   172f8:	e59f205c 	ldr	r2, [pc, #92]	@ 1735c <raise+0x80>
   172fc:	e5933008 	ldr	r3, [r3, #8]
   17300:	e1530002 	cmp	r3, r2
   17304:	1a00000a 	bne	17334 <raise+0x58>
   17308:	ebffe605 	bl	10b24 <CLogger::Get()>
   1730c:	e59f304c 	ldr	r3, [pc, #76]	@ 17360 <raise+0x84>
   17310:	e3a02000 	mov	r2, #0
   17314:	e593c010 	ldr	ip, [r3, #16]
   17318:	e59f1044 	ldr	r1, [pc, #68]	@ 17364 <raise+0x88>
   1731c:	e59f3044 	ldr	r3, [pc, #68]	@ 17368 <raise+0x8c>
   17320:	e58dc000 	str	ip, [sp]
   17324:	ebffe7ca 	bl	11254 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17328:	e3a00000 	mov	r0, #0
   1732c:	e28dd00c 	add	sp, sp, #12
   17330:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   17334:	e3a01004 	mov	r1, #4
   17338:	e12fff33 	blx	r3
   1733c:	e3a00000 	mov	r0, #0
   17340:	e28dd00c 	add	sp, sp, #12
   17344:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   17348:	e3a02087 	mov	r2, #135	@ 0x87
   1734c:	e59f1018 	ldr	r1, [pc, #24]	@ 1736c <raise+0x90>
   17350:	e59f0018 	ldr	r0, [pc, #24]	@ 17370 <raise+0x94>
   17354:	ebffe0f2 	bl	f724 <assertion_failed>
   17358:	00020b9c 	.word	0x00020b9c
   1735c:	00017048 	.word	0x00017048
   17360:	0001eeb8 	.word	0x0001eeb8
   17364:	0001e734 	.word	0x0001e734
   17368:	0001d780 	.word	0x0001d780
   1736c:	0001d790 	.word	0x0001d790
   17370:	0001d6c4 	.word	0x0001d6c4

00017374 <UndefinedInstructionInternal>:
   17374:	e24dd004 	sub	sp, sp, #4
   17378:	e24ee004 	sub	lr, lr, #4
   1737c:	e92d4000 	stmfd	sp!, {lr}
   17380:	e14fe000 	mrs	lr, SPSR
   17384:	e92d4000 	stmfd	sp!, {lr}
   17388:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1738c:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   17390:	e1a0100d 	mov	r1, sp
   17394:	f1020012 	cps	#18
   17398:	e1a0200d 	mov	r2, sp
   1739c:	e1a0300e 	mov	r3, lr
   173a0:	f1020011 	cps	#17
   173a4:	e1a0400d 	mov	r4, sp
   173a8:	e1a0500e 	mov	r5, lr
   173ac:	f102001f 	cps	#31
   173b0:	e1a0d001 	mov	sp, r1
   173b4:	e92d003c 	push	{r2, r3, r4, r5}
   173b8:	e1a0100d 	mov	r1, sp
   173bc:	e3a00001 	mov	r0, #1
   173c0:	eaffffad 	b	1727c <ExceptionHandler>

000173c4 <PrefetchAbortStub>:
   173c4:	e24dd004 	sub	sp, sp, #4
   173c8:	e24ee004 	sub	lr, lr, #4
   173cc:	e92d4000 	stmfd	sp!, {lr}
   173d0:	e14fe000 	mrs	lr, SPSR
   173d4:	e92d4000 	stmfd	sp!, {lr}
   173d8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   173dc:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   173e0:	e1a0100d 	mov	r1, sp
   173e4:	f1020012 	cps	#18
   173e8:	e1a0200d 	mov	r2, sp
   173ec:	e1a0300e 	mov	r3, lr
   173f0:	f1020011 	cps	#17
   173f4:	e1a0400d 	mov	r4, sp
   173f8:	e1a0500e 	mov	r5, lr
   173fc:	f102001f 	cps	#31
   17400:	e1a0d001 	mov	sp, r1
   17404:	e92d003c 	push	{r2, r3, r4, r5}
   17408:	e1a0100d 	mov	r1, sp
   1740c:	e3a00002 	mov	r0, #2
   17410:	eaffff99 	b	1727c <ExceptionHandler>

00017414 <DataAbortStub>:
   17414:	e24dd004 	sub	sp, sp, #4
   17418:	e24ee008 	sub	lr, lr, #8
   1741c:	e92d4000 	stmfd	sp!, {lr}
   17420:	e14fe000 	mrs	lr, SPSR
   17424:	e92d4000 	stmfd	sp!, {lr}
   17428:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1742c:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   17430:	e1a0100d 	mov	r1, sp
   17434:	f1020012 	cps	#18
   17438:	e1a0200d 	mov	r2, sp
   1743c:	e1a0300e 	mov	r3, lr
   17440:	f1020011 	cps	#17
   17444:	e1a0400d 	mov	r4, sp
   17448:	e1a0500e 	mov	r5, lr
   1744c:	f102001f 	cps	#31
   17450:	e1a0d001 	mov	sp, r1
   17454:	e92d003c 	push	{r2, r3, r4, r5}
   17458:	e1a0100d 	mov	r1, sp
   1745c:	e3a00003 	mov	r0, #3
   17460:	eaffff85 	b	1727c <ExceptionHandler>

00017464 <UndefinedInstructionStub>:
   17464:	e92d4001 	push	{r0, lr}
   17468:	eef80a10 	vmrs	r0, fpexc
   1746c:	e3100102 	tst	r0, #-2147483648	@ 0x80000000
   17470:	0affffbf 	beq	17374 <UndefinedInstructionInternal>
   17474:	e3c00102 	bic	r0, r0, #-2147483648	@ 0x80000000
   17478:	eee80a10 	vmsr	fpexc, r0
   1747c:	e8fd8001 	ldm	sp!, {r0, pc}^

00017480 <IRQStub>:
   17480:	e24ee004 	sub	lr, lr, #4
   17484:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   17488:	e59f0060 	ldr	r0, [pc, #96]	@ 174f0 <FIQStub+0x58>
   1748c:	e580e000 	str	lr, [r0]
   17490:	eb000338 	bl	18178 <InterruptHandler>
   17494:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00017498 <FIQStub>:
   17498:	e24ee004 	sub	lr, lr, #4
   1749c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   174a0:	e3a03000 	mov	r3, #0
   174a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   174a8:	e59f2044 	ldr	r2, [pc, #68]	@ 174f4 <FIQStub+0x5c>
   174ac:	e5921000 	ldr	r1, [r2]
   174b0:	e3510000 	cmp	r1, #0
   174b4:	0a000004 	beq	174cc <FIQStub+0x34>
   174b8:	e5920004 	ldr	r0, [r2, #4]
   174bc:	e12fff31 	blx	r1
   174c0:	e3a03000 	mov	r3, #0
   174c4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   174c8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   174cc:	e3a03000 	mov	r3, #0
   174d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   174d4:	e59f101c 	ldr	r1, [pc, #28]	@ 174f8 <FIQStub+0x60>
   174d8:	e3a00000 	mov	r0, #0
   174dc:	e5810000 	str	r0, [r1]
   174e0:	e3a03000 	mov	r3, #0
   174e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   174e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   174ec:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   174f0:	0001eed8 	.word	0x0001eed8
   174f4:	0001eecc 	.word	0x0001eecc
   174f8:	2000b20c 	.word	0x2000b20c

000174fc <CMemorySystem::Destructor()>:
   174fc:	e59f3044 	ldr	r3, [pc, #68]	@ 17548 <CMemorySystem::Destructor()+0x4c>
   17500:	e5932000 	ldr	r2, [r3]
   17504:	e1520000 	cmp	r2, r0
   17508:	112fff1e 	bxne	lr
   1750c:	e3a01000 	mov	r1, #0
   17510:	e5d22000 	ldrb	r2, [r2]
   17514:	e5831000 	str	r1, [r3]
   17518:	e1520001 	cmp	r2, r1
   1751c:	012fff1e 	bxeq	lr
   17520:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   17524:	e3c33005 	bic	r3, r3, #5
   17528:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1752c:	ee071f1a 	mcr	15, 0, r1, cr7, cr10, {0}
   17530:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
   17534:	ee071f16 	mcr	15, 0, r1, cr7, cr6, {0}
   17538:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
   1753c:	ee081f17 	mcr	15, 0, r1, cr8, cr7, {0}
   17540:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
   17544:	e12fff1e 	bx	lr
   17548:	00020ba0 	.word	0x00020ba0

0001754c <CMemorySystem::~CMemorySystem()>:
   1754c:	e92d4010 	push	{r4, lr}
   17550:	e1a04000 	mov	r4, r0
   17554:	ebffffe8 	bl	174fc <CMemorySystem::Destructor()>
   17558:	e28000c8 	add	r0, r0, #200	@ 0xc8
   1755c:	ebfffe42 	bl	16e6c <CPageAllocator::~CPageAllocator()>
   17560:	e284000c 	add	r0, r4, #12
   17564:	ebfffd3c 	bl	16a5c <CHeapAllocator::~CHeapAllocator()>
   17568:	e1a00004 	mov	r0, r4
   1756c:	e8bd8010 	pop	{r4, pc}

00017570 <CMemorySystem::GetMemSize() const>:
   17570:	e59f3028 	ldr	r3, [pc, #40]	@ 175a0 <CMemorySystem::GetMemSize() const+0x30>
   17574:	e5933000 	ldr	r3, [r3]
   17578:	e3530000 	cmp	r3, #0
   1757c:	0a000002 	beq	1758c <CMemorySystem::GetMemSize() const+0x1c>
   17580:	e9930009 	ldmib	r3, {r0, r3}
   17584:	e0800003 	add	r0, r0, r3
   17588:	e12fff1e 	bx	lr
   1758c:	e59f1010 	ldr	r1, [pc, #16]	@ 175a4 <CMemorySystem::GetMemSize() const+0x34>
   17590:	e3a020a1 	mov	r2, #161	@ 0xa1
   17594:	e92d4010 	push	{r4, lr}
   17598:	e281000c 	add	r0, r1, #12
   1759c:	ebffe060 	bl	f724 <assertion_failed>
   175a0:	00020ba0 	.word	0x00020ba0
   175a4:	0001e754 	.word	0x0001e754

000175a8 <CMemorySystem::Get()>:
   175a8:	e59f301c 	ldr	r3, [pc, #28]	@ 175cc <CMemorySystem::Get()+0x24>
   175ac:	e5930000 	ldr	r0, [r3]
   175b0:	e3500000 	cmp	r0, #0
   175b4:	112fff1e 	bxne	lr
   175b8:	e59f1010 	ldr	r1, [pc, #16]	@ 175d0 <CMemorySystem::Get()+0x28>
   175bc:	e3a020a7 	mov	r2, #167	@ 0xa7
   175c0:	e92d4010 	push	{r4, lr}
   175c4:	e281000c 	add	r0, r1, #12
   175c8:	ebffe055 	bl	f724 <assertion_failed>
   175cc:	00020ba0 	.word	0x00020ba0
   175d0:	0001e754 	.word	0x0001e754

000175d4 <CMemorySystem::EnableMMU()>:
   175d4:	e5d03000 	ldrb	r3, [r0]
   175d8:	e92d4010 	push	{r4, lr}
   175dc:	e3530000 	cmp	r3, #0
   175e0:	0a00001b 	beq	17654 <CMemorySystem::EnableMMU()+0x80>
   175e4:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   175e8:	e3833040 	orr	r3, r3, #64	@ 0x40
   175ec:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   175f0:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   175f4:	e3130001 	tst	r3, #1
   175f8:	1a000019 	bne	17664 <CMemorySystem::EnableMMU()+0x90>
   175fc:	e3a04000 	mov	r4, #0
   17600:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   17604:	e59000d8 	ldr	r0, [r0, #216]	@ 0xd8
   17608:	e1500004 	cmp	r0, r4
   1760c:	0a000018 	beq	17674 <CMemorySystem::EnableMMU()+0xa0>
   17610:	eb000095 	bl	1786c <CPageTable::GetBaseAddress() const>
   17614:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   17618:	e3a03001 	mov	r3, #1
   1761c:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   17620:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   17624:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   17628:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   1762c:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   17630:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   17634:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   17638:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   1763c:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
   17640:	e59f303c 	ldr	r3, [pc, #60]	@ 17684 <CMemorySystem::EnableMMU()+0xb0>
   17644:	e3c22002 	bic	r2, r2, #2
   17648:	e1823003 	orr	r3, r2, r3
   1764c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   17650:	e8bd8010 	pop	{r4, pc}
   17654:	e59f102c 	ldr	r1, [pc, #44]	@ 17688 <CMemorySystem::EnableMMU()+0xb4>
   17658:	e3a020ad 	mov	r2, #173	@ 0xad
   1765c:	e281001c 	add	r0, r1, #28
   17660:	ebffe02f 	bl	f724 <assertion_failed>
   17664:	e59f101c 	ldr	r1, [pc, #28]	@ 17688 <CMemorySystem::EnableMMU()+0xb4>
   17668:	e3a020bb 	mov	r2, #187	@ 0xbb
   1766c:	e281002c 	add	r0, r1, #44	@ 0x2c
   17670:	ebffe02b 	bl	f724 <assertion_failed>
   17674:	e59f100c 	ldr	r1, [pc, #12]	@ 17688 <CMemorySystem::EnableMMU()+0xb4>
   17678:	e3a020c1 	mov	r2, #193	@ 0xc1
   1767c:	e2810058 	add	r0, r1, #88	@ 0x58
   17680:	ebffe027 	bl	f724 <assertion_failed>
   17684:	00c01805 	.word	0x00c01805
   17688:	0001e754 	.word	0x0001e754

0001768c <CMemorySystem::CMemorySystem(bool)>:
   1768c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17690:	e1a03001 	mov	r3, r1
   17694:	e1a04000 	mov	r4, r0
   17698:	e3a05000 	mov	r5, #0
   1769c:	e280800c 	add	r8, r0, #12
   176a0:	e24dd028 	sub	sp, sp, #40	@ 0x28
   176a4:	e59f1114 	ldr	r1, [pc, #276]	@ 177c0 <CMemorySystem::CMemorySystem(bool)+0x134>
   176a8:	e5c03000 	strb	r3, [r0]
   176ac:	e28470c8 	add	r7, r4, #200	@ 0xc8
   176b0:	e1a00008 	mov	r0, r8
   176b4:	e5845004 	str	r5, [r4, #4]
   176b8:	e5845008 	str	r5, [r4, #8]
   176bc:	ebfffccd 	bl	169f8 <CHeapAllocator::CHeapAllocator(char const*)>
   176c0:	e1a00007 	mov	r0, r7
   176c4:	ebfffde1 	bl	16e50 <CPageAllocator::CPageAllocator()>
   176c8:	e59f30f4 	ldr	r3, [pc, #244]	@ 177c4 <CMemorySystem::CMemorySystem(bool)+0x138>
   176cc:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   176d0:	e5936000 	ldr	r6, [r3]
   176d4:	e1560005 	cmp	r6, r5
   176d8:	0a000002 	beq	176e8 <CMemorySystem::CMemorySystem(bool)+0x5c>
   176dc:	e1a00004 	mov	r0, r4
   176e0:	e28dd028 	add	sp, sp, #40	@ 0x28
   176e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   176e8:	e3a01001 	mov	r1, #1
   176ec:	e28d000c 	add	r0, sp, #12
   176f0:	e5834000 	str	r4, [r3]
   176f4:	eb0008d0 	bl	19a3c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   176f8:	e3a03014 	mov	r3, #20
   176fc:	e59f10c4 	ldr	r1, [pc, #196]	@ 177c8 <CMemorySystem::CMemorySystem(bool)+0x13c>
   17700:	e58d6000 	str	r6, [sp]
   17704:	e28d000c 	add	r0, sp, #12
   17708:	e08d2003 	add	r2, sp, r3
   1770c:	eb00091b 	bl	19b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17710:	e3500000 	cmp	r0, #0
   17714:	0a000016 	beq	17774 <CMemorySystem::CMemorySystem(bool)+0xe8>
   17718:	e59d3020 	ldr	r3, [sp, #32]
   1771c:	e3530000 	cmp	r3, #0
   17720:	1a000022 	bne	177b0 <CMemorySystem::CMemorySystem(bool)+0x124>
   17724:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   17728:	e2435501 	sub	r5, r3, #4194304	@ 0x400000
   1772c:	e2432609 	sub	r2, r3, #9437184	@ 0x900000
   17730:	e1a00008 	mov	r0, r8
   17734:	e3a01605 	mov	r1, #5242880	@ 0x500000
   17738:	e5843004 	str	r3, [r4, #4]
   1773c:	e3a03701 	mov	r3, #262144	@ 0x40000
   17740:	ebfffcc6 	bl	16a60 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   17744:	e3a02501 	mov	r2, #4194304	@ 0x400000
   17748:	e1a01005 	mov	r1, r5
   1774c:	e1a00007 	mov	r0, r7
   17750:	ebfffdc6 	bl	16e70 <CPageAllocator::Setup(unsigned int, unsigned int)>
   17754:	e5d43000 	ldrb	r3, [r4]
   17758:	e3530000 	cmp	r3, #0
   1775c:	1a00000a 	bne	1778c <CMemorySystem::CMemorySystem(bool)+0x100>
   17760:	e28d000c 	add	r0, sp, #12
   17764:	eb0008bb 	bl	19a58 <CBcmPropertyTags::~CBcmPropertyTags()>
   17768:	e1a00004 	mov	r0, r4
   1776c:	e28dd028 	add	sp, sp, #40	@ 0x28
   17770:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17774:	e3a03303 	mov	r3, #201326592	@ 0xc000000
   17778:	e3a026b7 	mov	r2, #191889408	@ 0xb700000
   1777c:	e3a0552f 	mov	r5, #197132288	@ 0xbc00000
   17780:	e58d0020 	str	r0, [sp, #32]
   17784:	e58d3024 	str	r3, [sp, #36]	@ 0x24
   17788:	eaffffe8 	b	17730 <CMemorySystem::CMemorySystem(bool)+0xa4>
   1778c:	e3a00004 	mov	r0, #4
   17790:	ebfffc74 	bl	16968 <operator new(unsigned int)>
   17794:	e1a05000 	mov	r5, r0
   17798:	e5941004 	ldr	r1, [r4, #4]
   1779c:	eb00000e 	bl	177dc <CPageTable::CPageTable(unsigned int)>
   177a0:	e1a00004 	mov	r0, r4
   177a4:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   177a8:	ebffff89 	bl	175d4 <CMemorySystem::EnableMMU()>
   177ac:	eaffffeb 	b	17760 <CMemorySystem::CMemorySystem(bool)+0xd4>
   177b0:	e59f1014 	ldr	r1, [pc, #20]	@ 177cc <CMemorySystem::CMemorySystem(bool)+0x140>
   177b4:	e3a0204e 	mov	r2, #78	@ 0x4e
   177b8:	e2810074 	add	r0, r1, #116	@ 0x74
   177bc:	ebffdfd8 	bl	f724 <assertion_failed>
   177c0:	0001e7c0 	.word	0x0001e7c0
   177c4:	00020ba0 	.word	0x00020ba0
   177c8:	00010005 	.word	0x00010005
   177cc:	0001e754 	.word	0x0001e754

000177d0 <CMemorySystem::GetCoherentPage(unsigned int)>:
   177d0:	e1a00600 	lsl	r0, r0, #12
   177d4:	e2800501 	add	r0, r0, #4194304	@ 0x400000
   177d8:	e12fff1e 	bx	lr

000177dc <CPageTable::CPageTable(unsigned int)>:
   177dc:	e3a0c709 	mov	ip, #2359296	@ 0x240000
   177e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   177e4:	e3a03000 	mov	r3, #0
   177e8:	e3e064df 	mvn	r6, #-553648128	@ 0xdf000000
   177ec:	e1a0200c 	mov	r2, ip
   177f0:	e59fe060 	ldr	lr, [pc, #96]	@ 17858 <CPageTable::CPageTable(unsigned int)+0x7c>
   177f4:	e59f7060 	ldr	r7, [pc, #96]	@ 1785c <CPageTable::CPageTable(unsigned int)+0x80>
   177f8:	e59f5060 	ldr	r5, [pc, #96]	@ 17860 <CPageTable::CPageTable(unsigned int)+0x84>
   177fc:	e59f4060 	ldr	r4, [pc, #96]	@ 17864 <CPageTable::CPageTable(unsigned int)+0x88>
   17800:	e580c000 	str	ip, [r0]
   17804:	e153000e 	cmp	r3, lr
   17808:	3183c004 	orrcc	ip, r3, r4
   1780c:	3a000009 	bcc	17838 <CPageTable::CPageTable(unsigned int)+0x5c>
   17810:	e3530501 	cmp	r3, #4194304	@ 0x400000
   17814:	01a0c007 	moveq	ip, r7
   17818:	0a000006 	beq	17838 <CPageTable::CPageTable(unsigned int)+0x5c>
   1781c:	e1530001 	cmp	r3, r1
   17820:	3183c005 	orrcc	ip, r3, r5
   17824:	3a000003 	bcc	17838 <CPageTable::CPageTable(unsigned int)+0x5c>
   17828:	e1530006 	cmp	r3, r6
   1782c:	21a0c003 	movcs	ip, r3
   17830:	3383cb41 	orrcc	ip, r3, #66560	@ 0x10400
   17834:	338cc016 	orrcc	ip, ip, #22
   17838:	e482c004 	str	ip, [r2], #4
   1783c:	e3520991 	cmp	r2, #2375680	@ 0x244000
   17840:	e2833601 	add	r3, r3, #1048576	@ 0x100000
   17844:	1affffee 	bne	17804 <CPageTable::CPageTable(unsigned int)+0x28>
   17848:	e3a03000 	mov	r3, #0
   1784c:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   17850:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   17854:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17858:	0001afdc 	.word	0x0001afdc
   1785c:	00410412 	.word	0x00410412
   17860:	0000041e 	.word	0x0000041e
   17864:	0000040e 	.word	0x0000040e

00017868 <CPageTable::~CPageTable()>:
   17868:	e12fff1e 	bx	lr

0001786c <CPageTable::GetBaseAddress() const>:
   1786c:	e5900000 	ldr	r0, [r0]
   17870:	e3800001 	orr	r0, r0, #1
   17874:	e12fff1e 	bx	lr

00017878 <CurrentExecutionLevel>:
   17878:	e10f0000 	mrs	r0, CPSR
   1787c:	e3100040 	tst	r0, #64	@ 0x40
   17880:	01a003a0 	lsreq	r0, r0, #7
   17884:	02000001 	andeq	r0, r0, #1
   17888:	13a00002 	movne	r0, #2
   1788c:	e12fff1e 	bx	lr

00017890 <EnterCritical>:
   17890:	e2403001 	sub	r3, r0, #1
   17894:	e3530001 	cmp	r3, #1
   17898:	e92d4010 	push	{r4, lr}
   1789c:	8a000012 	bhi	178ec <EnterCritical+0x5c>
   178a0:	e10f1000 	mrs	r1, CPSR
   178a4:	e3500002 	cmp	r0, #2
   178a8:	1a000013 	bne	178fc <EnterCritical+0x6c>
   178ac:	f10c00c0 	cpsid	if
   178b0:	e59f306c 	ldr	r3, [pc, #108]	@ 17924 <EnterCritical+0x94>
   178b4:	e5932000 	ldr	r2, [r3]
   178b8:	e3520013 	cmp	r2, #19
   178bc:	8a000014 	bhi	17914 <EnterCritical+0x84>
   178c0:	e5932000 	ldr	r2, [r3]
   178c4:	e3500001 	cmp	r0, #1
   178c8:	e2820001 	add	r0, r2, #1
   178cc:	e0832102 	add	r2, r3, r2, lsl #2
   178d0:	e5830000 	str	r0, [r3]
   178d4:	e5821004 	str	r1, [r2, #4]
   178d8:	1a000000 	bne	178e0 <EnterCritical+0x50>
   178dc:	f1080040 	cpsie	f
   178e0:	e3a03000 	mov	r3, #0
   178e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   178e8:	e8bd8010 	pop	{r4, pc}
   178ec:	e3a02064 	mov	r2, #100	@ 0x64
   178f0:	e59f1030 	ldr	r1, [pc, #48]	@ 17928 <EnterCritical+0x98>
   178f4:	e59f0030 	ldr	r0, [pc, #48]	@ 1792c <EnterCritical+0x9c>
   178f8:	ebffdf89 	bl	f724 <assertion_failed>
   178fc:	e3110040 	tst	r1, #64	@ 0x40
   17900:	0affffe9 	beq	178ac <EnterCritical+0x1c>
   17904:	e3a0206a 	mov	r2, #106	@ 0x6a
   17908:	e59f1018 	ldr	r1, [pc, #24]	@ 17928 <EnterCritical+0x98>
   1790c:	e59f001c 	ldr	r0, [pc, #28]	@ 17930 <EnterCritical+0xa0>
   17910:	ebffdf83 	bl	f724 <assertion_failed>
   17914:	e3a0206e 	mov	r2, #110	@ 0x6e
   17918:	e59f1008 	ldr	r1, [pc, #8]	@ 17928 <EnterCritical+0x98>
   1791c:	e59f0010 	ldr	r0, [pc, #16]	@ 17934 <EnterCritical+0xa4>
   17920:	ebffdf7f 	bl	f724 <assertion_failed>
   17924:	00020ba4 	.word	0x00020ba4
   17928:	0001d83c 	.word	0x0001d83c
   1792c:	0001d84c 	.word	0x0001d84c
   17930:	0001d884 	.word	0x0001d884
   17934:	0001d8b4 	.word	0x0001d8b4

00017938 <LeaveCritical>:
   17938:	e3a03000 	mov	r3, #0
   1793c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   17940:	f10c0040 	cpsid	f
   17944:	e59f3038 	ldr	r3, [pc, #56]	@ 17984 <LeaveCritical+0x4c>
   17948:	e5932000 	ldr	r2, [r3]
   1794c:	e3520000 	cmp	r2, #0
   17950:	0a000006 	beq	17970 <LeaveCritical+0x38>
   17954:	e5932000 	ldr	r2, [r3]
   17958:	e2422001 	sub	r2, r2, #1
   1795c:	e5832000 	str	r2, [r3]
   17960:	e0833102 	add	r3, r3, r2, lsl #2
   17964:	e5933004 	ldr	r3, [r3, #4]
   17968:	e121f003 	msr	CPSR_c, r3
   1796c:	e12fff1e 	bx	lr
   17970:	e3a0207f 	mov	r2, #127	@ 0x7f
   17974:	e92d4010 	push	{r4, lr}
   17978:	e59f1008 	ldr	r1, [pc, #8]	@ 17988 <LeaveCritical+0x50>
   1797c:	e59f0008 	ldr	r0, [pc, #8]	@ 1798c <LeaveCritical+0x54>
   17980:	ebffdf67 	bl	f724 <assertion_failed>
   17984:	00020ba4 	.word	0x00020ba4
   17988:	0001d83c 	.word	0x0001d83c
   1798c:	0001d8dc 	.word	0x0001d8dc

00017990 <CleanAndInvalidateDataCacheRange>:
   17990:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   17994:	e3510020 	cmp	r1, #32
   17998:	9a000008 	bls	179c0 <CleanAndInvalidateDataCacheRange+0x30>
   1799c:	e2413021 	sub	r3, r1, #33	@ 0x21
   179a0:	e3c3301f 	bic	r3, r3, #31
   179a4:	e2800020 	add	r0, r0, #32
   179a8:	e0833000 	add	r3, r3, r0
   179ac:	ea000000 	b	179b4 <CleanAndInvalidateDataCacheRange+0x24>
   179b0:	e2800020 	add	r0, r0, #32
   179b4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   179b8:	e1500003 	cmp	r0, r3
   179bc:	1afffffb 	bne	179b0 <CleanAndInvalidateDataCacheRange+0x20>
   179c0:	e3a03000 	mov	r3, #0
   179c4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   179c8:	e12fff1e 	bx	lr

000179cc <SyncDataAndInstructionCache>:
   179cc:	e3a03000 	mov	r3, #0
   179d0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   179d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   179d8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   179dc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   179e0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   179e4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   179e8:	e12fff1e 	bx	lr

000179ec <CInterruptSystem::CInterruptSystem()>:
   179ec:	e59f3028 	ldr	r3, [pc, #40]	@ 17a1c <CInterruptSystem::CInterruptSystem()+0x30>
   179f0:	e5932000 	ldr	r2, [r3]
   179f4:	e3520000 	cmp	r2, #0
   179f8:	112fff1e 	bxne	lr
   179fc:	e5830000 	str	r0, [r3]
   17a00:	e2801f47 	add	r1, r0, #284	@ 0x11c
   17a04:	e2403004 	sub	r3, r0, #4
   17a08:	e5a32004 	str	r2, [r3, #4]!
   17a0c:	e1530001 	cmp	r3, r1
   17a10:	e5832120 	str	r2, [r3, #288]	@ 0x120
   17a14:	1afffffb 	bne	17a08 <CInterruptSystem::CInterruptSystem()+0x1c>
   17a18:	e12fff1e 	bx	lr
   17a1c:	00020bf8 	.word	0x00020bf8

00017a20 <CInterruptSystem::~CInterruptSystem()>:
   17a20:	e59f3038 	ldr	r3, [pc, #56]	@ 17a60 <CInterruptSystem::~CInterruptSystem()+0x40>
   17a24:	e5932000 	ldr	r2, [r3]
   17a28:	e1500002 	cmp	r0, r2
   17a2c:	112fff1e 	bxne	lr
   17a30:	f10c0080 	cpsid	i
   17a34:	e3a02000 	mov	r2, #0
   17a38:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   17a3c:	e3e0c000 	mvn	ip, #0
   17a40:	e59f101c 	ldr	r1, [pc, #28]	@ 17a64 <CInterruptSystem::~CInterruptSystem()+0x44>
   17a44:	e581220c 	str	r2, [r1, #524]	@ 0x20c
   17a48:	e581c21c 	str	ip, [r1, #540]	@ 0x21c
   17a4c:	e581c220 	str	ip, [r1, #544]	@ 0x220
   17a50:	e581c224 	str	ip, [r1, #548]	@ 0x224
   17a54:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   17a58:	e5832000 	str	r2, [r3]
   17a5c:	e12fff1e 	bx	lr
   17a60:	00020bf8 	.word	0x00020bf8
   17a64:	2000b000 	.word	0x2000b000

00017a68 <CInterruptSystem::Destructor()>:
   17a68:	e59f3038 	ldr	r3, [pc, #56]	@ 17aa8 <CInterruptSystem::Destructor()+0x40>
   17a6c:	e5932000 	ldr	r2, [r3]
   17a70:	e1520000 	cmp	r2, r0
   17a74:	112fff1e 	bxne	lr
   17a78:	f10c0080 	cpsid	i
   17a7c:	e3a02000 	mov	r2, #0
   17a80:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   17a84:	e3e00000 	mvn	r0, #0
   17a88:	e59f101c 	ldr	r1, [pc, #28]	@ 17aac <CInterruptSystem::Destructor()+0x44>
   17a8c:	e581220c 	str	r2, [r1, #524]	@ 0x20c
   17a90:	e581021c 	str	r0, [r1, #540]	@ 0x21c
   17a94:	e5810220 	str	r0, [r1, #544]	@ 0x220
   17a98:	e5810224 	str	r0, [r1, #548]	@ 0x224
   17a9c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   17aa0:	e5832000 	str	r2, [r3]
   17aa4:	e12fff1e 	bx	lr
   17aa8:	00020bf8 	.word	0x00020bf8
   17aac:	2000b000 	.word	0x2000b000

00017ab0 <CInterruptSystem::Initialize()>:
   17ab0:	e59f30a0 	ldr	r3, [pc, #160]	@ 17b58 <CInterruptSystem::Initialize()+0xa8>
   17ab4:	e5933000 	ldr	r3, [r3]
   17ab8:	e1530000 	cmp	r3, r0
   17abc:	0a000001 	beq	17ac8 <CInterruptSystem::Initialize()+0x18>
   17ac0:	e3a00001 	mov	r0, #1
   17ac4:	e12fff1e 	bx	lr
   17ac8:	e3a01004 	mov	r1, #4
   17acc:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   17ad0:	e24dd00c 	sub	sp, sp, #12
   17ad4:	e58d1004 	str	r1, [sp, #4]
   17ad8:	e59d1004 	ldr	r1, [sp, #4]
   17adc:	e59dc004 	ldr	ip, [sp, #4]
   17ae0:	e59d0004 	ldr	r0, [sp, #4]
   17ae4:	e59f2070 	ldr	r2, [pc, #112]	@ 17b5c <CInterruptSystem::Initialize()+0xac>
   17ae8:	e59f3070 	ldr	r3, [pc, #112]	@ 17b60 <CInterruptSystem::Initialize()+0xb0>
   17aec:	e2800018 	add	r0, r0, #24
   17af0:	e2811014 	add	r1, r1, #20
   17af4:	e0433000 	sub	r3, r3, r0
   17af8:	e0422001 	sub	r2, r2, r1
   17afc:	e1a02142 	asr	r2, r2, #2
   17b00:	e1a03143 	asr	r3, r3, #2
   17b04:	e59d1004 	ldr	r1, [sp, #4]
   17b08:	e2422002 	sub	r2, r2, #2
   17b0c:	e2433002 	sub	r3, r3, #2
   17b10:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   17b14:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   17b18:	e58c2014 	str	r2, [ip, #20]
   17b1c:	e5813018 	str	r3, [r1, #24]
   17b20:	ebffffa9 	bl	179cc <SyncDataAndInstructionCache>
   17b24:	e3a02000 	mov	r2, #0
   17b28:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   17b2c:	e3e01000 	mvn	r1, #0
   17b30:	e59f302c 	ldr	r3, [pc, #44]	@ 17b64 <CInterruptSystem::Initialize()+0xb4>
   17b34:	e583220c 	str	r2, [r3, #524]	@ 0x20c
   17b38:	e583121c 	str	r1, [r3, #540]	@ 0x21c
   17b3c:	e5831220 	str	r1, [r3, #544]	@ 0x220
   17b40:	e5831224 	str	r1, [r3, #548]	@ 0x224
   17b44:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   17b48:	f1080080 	cpsie	i
   17b4c:	e3a00001 	mov	r0, #1
   17b50:	e28dd00c 	add	sp, sp, #12
   17b54:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   17b58:	00020bf8 	.word	0x00020bf8
   17b5c:	00017480 	.word	0x00017480
   17b60:	00017498 	.word	0x00017498
   17b64:	2000b000 	.word	0x2000b000

00017b68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   17b68:	e59fc094 	ldr	ip, [pc, #148]	@ 17c04 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
   17b6c:	e92d4010 	push	{r4, lr}
   17b70:	e59cc000 	ldr	ip, [ip]
   17b74:	ea000000 	b	17b7c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x14>
   17b78:	e1a0000c 	mov	r0, ip
   17b7c:	e15c0000 	cmp	ip, r0
   17b80:	1afffffc 	bne	17b78 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x10>
   17b84:	e3510047 	cmp	r1, #71	@ 0x47
   17b88:	8a000015 	bhi	17be4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x7c>
   17b8c:	e79c0101 	ldr	r0, [ip, r1, lsl #2]
   17b90:	e08ce101 	add	lr, ip, r1, lsl #2
   17b94:	e3500000 	cmp	r0, #0
   17b98:	1a000015 	bne	17bf4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x8c>
   17b9c:	e78c2101 	str	r2, [ip, r1, lsl #2]
   17ba0:	e58e3120 	str	r3, [lr, #288]	@ 0x120
   17ba4:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
   17ba8:	e351001f 	cmp	r1, #31
   17bac:	8a000007 	bhi	17bd0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   17bb0:	e59f2050 	ldr	r2, [pc, #80]	@ 17c08 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xa0>
   17bb4:	e3a03001 	mov	r3, #1
   17bb8:	e201101f 	and	r1, r1, #31
   17bbc:	e1a03113 	lsl	r3, r3, r1
   17bc0:	e3a00000 	mov	r0, #0
   17bc4:	e5823000 	str	r3, [r2]
   17bc8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   17bcc:	e8bd8010 	pop	{r4, pc}
   17bd0:	e59f3034 	ldr	r3, [pc, #52]	@ 17c0c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xa4>
   17bd4:	e351003f 	cmp	r1, #63	@ 0x3f
   17bd8:	e59f2030 	ldr	r2, [pc, #48]	@ 17c10 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xa8>
   17bdc:	91a02003 	movls	r2, r3
   17be0:	eafffff3 	b	17bb4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x4c>
   17be4:	e3a02090 	mov	r2, #144	@ 0x90
   17be8:	e59f1024 	ldr	r1, [pc, #36]	@ 17c14 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xac>
   17bec:	e59f0024 	ldr	r0, [pc, #36]	@ 17c18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb0>
   17bf0:	ebffdecb 	bl	f724 <assertion_failed>
   17bf4:	e3a02091 	mov	r2, #145	@ 0x91
   17bf8:	e59f1014 	ldr	r1, [pc, #20]	@ 17c14 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xac>
   17bfc:	e59f0018 	ldr	r0, [pc, #24]	@ 17c1c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb4>
   17c00:	ebffdec7 	bl	f724 <assertion_failed>
   17c04:	00020bf8 	.word	0x00020bf8
   17c08:	2000b210 	.word	0x2000b210
   17c0c:	2000b214 	.word	0x2000b214
   17c10:	2000b218 	.word	0x2000b218
   17c14:	0001d8f4 	.word	0x0001d8f4
   17c18:	0001d904 	.word	0x0001d904
   17c1c:	0001d918 	.word	0x0001d918

00017c20 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   17c20:	e59f3098 	ldr	r3, [pc, #152]	@ 17cc0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa0>
   17c24:	e92d4010 	push	{r4, lr}
   17c28:	e5933000 	ldr	r3, [r3]
   17c2c:	ea000000 	b	17c34 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x14>
   17c30:	e1a00003 	mov	r0, r3
   17c34:	e1530000 	cmp	r3, r0
   17c38:	1afffffc 	bne	17c30 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x10>
   17c3c:	e3510047 	cmp	r1, #71	@ 0x47
   17c40:	8a000016 	bhi	17ca0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x80>
   17c44:	e7932101 	ldr	r2, [r3, r1, lsl #2]
   17c48:	e083c101 	add	ip, r3, r1, lsl #2
   17c4c:	e3520000 	cmp	r2, #0
   17c50:	0a000016 	beq	17cb0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x90>
   17c54:	e3a02000 	mov	r2, #0
   17c58:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   17c5c:	e351001f 	cmp	r1, #31
   17c60:	8a000009 	bhi	17c8c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x6c>
   17c64:	e59f0058 	ldr	r0, [pc, #88]	@ 17cc4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa4>
   17c68:	e3a02001 	mov	r2, #1
   17c6c:	e201e01f 	and	lr, r1, #31
   17c70:	e1a02e12 	lsl	r2, r2, lr
   17c74:	e5802000 	str	r2, [r0]
   17c78:	e3a02000 	mov	r2, #0
   17c7c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   17c80:	e7832101 	str	r2, [r3, r1, lsl #2]
   17c84:	e58c2120 	str	r2, [ip, #288]	@ 0x120
   17c88:	e8bd8010 	pop	{r4, pc}
   17c8c:	e59f2034 	ldr	r2, [pc, #52]	@ 17cc8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa8>
   17c90:	e351003f 	cmp	r1, #63	@ 0x3f
   17c94:	e59f0030 	ldr	r0, [pc, #48]	@ 17ccc <CInterruptSystem::DisconnectIRQ(unsigned int)+0xac>
   17c98:	91a00002 	movls	r0, r2
   17c9c:	eafffff1 	b	17c68 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x48>
   17ca0:	e3a020a2 	mov	r2, #162	@ 0xa2
   17ca4:	e59f1024 	ldr	r1, [pc, #36]	@ 17cd0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb0>
   17ca8:	e59f0024 	ldr	r0, [pc, #36]	@ 17cd4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb4>
   17cac:	ebffde9c 	bl	f724 <assertion_failed>
   17cb0:	e3a020a3 	mov	r2, #163	@ 0xa3
   17cb4:	e59f1014 	ldr	r1, [pc, #20]	@ 17cd0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb0>
   17cb8:	e59f0018 	ldr	r0, [pc, #24]	@ 17cd8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb8>
   17cbc:	ebffde98 	bl	f724 <assertion_failed>
   17cc0:	00020bf8 	.word	0x00020bf8
   17cc4:	2000b21c 	.word	0x2000b21c
   17cc8:	2000b220 	.word	0x2000b220
   17ccc:	2000b224 	.word	0x2000b224
   17cd0:	0001d8f4 	.word	0x0001d8f4
   17cd4:	0001d904 	.word	0x0001d904
   17cd8:	0001d934 	.word	0x0001d934

00017cdc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   17cdc:	e3510047 	cmp	r1, #71	@ 0x47
   17ce0:	e92d4010 	push	{r4, lr}
   17ce4:	8a00001e 	bhi	17d64 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   17ce8:	e3520000 	cmp	r2, #0
   17cec:	0a000020 	beq	17d74 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   17cf0:	e59f009c 	ldr	r0, [pc, #156]	@ 17d94 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   17cf4:	e5d0e001 	ldrb	lr, [r0, #1]
   17cf8:	e5d0c000 	ldrb	ip, [r0]
   17cfc:	e18cc40e 	orr	ip, ip, lr, lsl #8
   17d00:	e5d0e002 	ldrb	lr, [r0, #2]
   17d04:	e18cc80e 	orr	ip, ip, lr, lsl #16
   17d08:	e5d0e003 	ldrb	lr, [r0, #3]
   17d0c:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   17d10:	1a00001b 	bne	17d84 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   17d14:	e1a0e422 	lsr	lr, r2, #8
   17d18:	e5c02000 	strb	r2, [r0]
   17d1c:	e5c0e001 	strb	lr, [r0, #1]
   17d20:	e1a0e822 	lsr	lr, r2, #16
   17d24:	e1a02c22 	lsr	r2, r2, #24
   17d28:	e5c02003 	strb	r2, [r0, #3]
   17d2c:	e1a02423 	lsr	r2, r3, #8
   17d30:	e5c03004 	strb	r3, [r0, #4]
   17d34:	e5c02005 	strb	r2, [r0, #5]
   17d38:	e1a02823 	lsr	r2, r3, #16
   17d3c:	e1a03c23 	lsr	r3, r3, #24
   17d40:	e5c0e002 	strb	lr, [r0, #2]
   17d44:	e5c02006 	strb	r2, [r0, #6]
   17d48:	e5c03007 	strb	r3, [r0, #7]
   17d4c:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   17d50:	e59f3040 	ldr	r3, [pc, #64]	@ 17d98 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   17d54:	e3811080 	orr	r1, r1, #128	@ 0x80
   17d58:	e583120c 	str	r1, [r3, #524]	@ 0x20c
   17d5c:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   17d60:	e8bd8010 	pop	{r4, pc}
   17d64:	e3a020b7 	mov	r2, #183	@ 0xb7
   17d68:	e59f102c 	ldr	r1, [pc, #44]	@ 17d9c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   17d6c:	e59f002c 	ldr	r0, [pc, #44]	@ 17da0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   17d70:	ebffde6b 	bl	f724 <assertion_failed>
   17d74:	e3a020b8 	mov	r2, #184	@ 0xb8
   17d78:	e59f101c 	ldr	r1, [pc, #28]	@ 17d9c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   17d7c:	e59f0020 	ldr	r0, [pc, #32]	@ 17da4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   17d80:	ebffde67 	bl	f724 <assertion_failed>
   17d84:	e3a020b9 	mov	r2, #185	@ 0xb9
   17d88:	e59f100c 	ldr	r1, [pc, #12]	@ 17d9c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   17d8c:	e59f0014 	ldr	r0, [pc, #20]	@ 17da8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   17d90:	ebffde63 	bl	f724 <assertion_failed>
   17d94:	0001eecc 	.word	0x0001eecc
   17d98:	2000b000 	.word	0x2000b000
   17d9c:	0001d8f4 	.word	0x0001d8f4
   17da0:	0001d950 	.word	0x0001d950
   17da4:	0001d984 	.word	0x0001d984
   17da8:	0001d964 	.word	0x0001d964

00017dac <CInterruptSystem::DisconnectFIQ()>:
   17dac:	e59f3068 	ldr	r3, [pc, #104]	@ 17e1c <CInterruptSystem::DisconnectFIQ()+0x70>
   17db0:	e5d32000 	ldrb	r2, [r3]
   17db4:	e5d3c001 	ldrb	ip, [r3, #1]
   17db8:	e5d30002 	ldrb	r0, [r3, #2]
   17dbc:	e5d31003 	ldrb	r1, [r3, #3]
   17dc0:	e182240c 	orr	r2, r2, ip, lsl #8
   17dc4:	e1822800 	orr	r2, r2, r0, lsl #16
   17dc8:	e1922c01 	orrs	r2, r2, r1, lsl #24
   17dcc:	0a00000d 	beq	17e08 <CInterruptSystem::DisconnectFIQ()+0x5c>
   17dd0:	e3a02000 	mov	r2, #0
   17dd4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   17dd8:	e59f1040 	ldr	r1, [pc, #64]	@ 17e20 <CInterruptSystem::DisconnectFIQ()+0x74>
   17ddc:	e581220c 	str	r2, [r1, #524]	@ 0x20c
   17de0:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   17de4:	e5c32000 	strb	r2, [r3]
   17de8:	e5c32001 	strb	r2, [r3, #1]
   17dec:	e5c32002 	strb	r2, [r3, #2]
   17df0:	e5c32003 	strb	r2, [r3, #3]
   17df4:	e5c32004 	strb	r2, [r3, #4]
   17df8:	e5c32005 	strb	r2, [r3, #5]
   17dfc:	e5c32006 	strb	r2, [r3, #6]
   17e00:	e5c32007 	strb	r2, [r3, #7]
   17e04:	e12fff1e 	bx	lr
   17e08:	e3a020ca 	mov	r2, #202	@ 0xca
   17e0c:	e92d4010 	push	{r4, lr}
   17e10:	e59f100c 	ldr	r1, [pc, #12]	@ 17e24 <CInterruptSystem::DisconnectFIQ()+0x78>
   17e14:	e59f000c 	ldr	r0, [pc, #12]	@ 17e28 <CInterruptSystem::DisconnectFIQ()+0x7c>
   17e18:	ebffde41 	bl	f724 <assertion_failed>
   17e1c:	0001eecc 	.word	0x0001eecc
   17e20:	2000b000 	.word	0x2000b000
   17e24:	0001d8f4 	.word	0x0001d8f4
   17e28:	0001d97c 	.word	0x0001d97c

00017e2c <CInterruptSystem::EnableIRQ(unsigned int)>:
   17e2c:	e3a03000 	mov	r3, #0
   17e30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   17e34:	e3500047 	cmp	r0, #71	@ 0x47
   17e38:	8a00000e 	bhi	17e78 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   17e3c:	e350001f 	cmp	r0, #31
   17e40:	8a000007 	bhi	17e64 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   17e44:	e59f2040 	ldr	r2, [pc, #64]	@ 17e8c <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   17e48:	e3a03001 	mov	r3, #1
   17e4c:	e200001f 	and	r0, r0, #31
   17e50:	e1a03013 	lsl	r3, r3, r0
   17e54:	e3a01000 	mov	r1, #0
   17e58:	e5823000 	str	r3, [r2]
   17e5c:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   17e60:	e12fff1e 	bx	lr
   17e64:	e59f3024 	ldr	r3, [pc, #36]	@ 17e90 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   17e68:	e350003f 	cmp	r0, #63	@ 0x3f
   17e6c:	e59f2020 	ldr	r2, [pc, #32]	@ 17e94 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   17e70:	91a02003 	movls	r2, r3
   17e74:	eafffff3 	b	17e48 <CInterruptSystem::EnableIRQ(unsigned int)+0x1c>
   17e78:	e3a020d6 	mov	r2, #214	@ 0xd6
   17e7c:	e92d4010 	push	{r4, lr}
   17e80:	e59f1010 	ldr	r1, [pc, #16]	@ 17e98 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   17e84:	e59f0010 	ldr	r0, [pc, #16]	@ 17e9c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   17e88:	ebffde25 	bl	f724 <assertion_failed>
   17e8c:	2000b210 	.word	0x2000b210
   17e90:	2000b214 	.word	0x2000b214
   17e94:	2000b218 	.word	0x2000b218
   17e98:	0001d8f4 	.word	0x0001d8f4
   17e9c:	0001d904 	.word	0x0001d904

00017ea0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   17ea0:	e3a03000 	mov	r3, #0
   17ea4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   17ea8:	e3500047 	cmp	r0, #71	@ 0x47
   17eac:	8a00000e 	bhi	17eec <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   17eb0:	e350001f 	cmp	r0, #31
   17eb4:	8a000007 	bhi	17ed8 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   17eb8:	e59f2040 	ldr	r2, [pc, #64]	@ 17f00 <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   17ebc:	e3a03001 	mov	r3, #1
   17ec0:	e200001f 	and	r0, r0, #31
   17ec4:	e1a03013 	lsl	r3, r3, r0
   17ec8:	e3a01000 	mov	r1, #0
   17ecc:	e5823000 	str	r3, [r2]
   17ed0:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   17ed4:	e12fff1e 	bx	lr
   17ed8:	e59f3024 	ldr	r3, [pc, #36]	@ 17f04 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   17edc:	e350003f 	cmp	r0, #63	@ 0x3f
   17ee0:	e59f2020 	ldr	r2, [pc, #32]	@ 17f08 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   17ee4:	91a02003 	movls	r2, r3
   17ee8:	eafffff3 	b	17ebc <CInterruptSystem::DisableIRQ(unsigned int)+0x1c>
   17eec:	e3a020ee 	mov	r2, #238	@ 0xee
   17ef0:	e92d4010 	push	{r4, lr}
   17ef4:	e59f1010 	ldr	r1, [pc, #16]	@ 17f0c <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   17ef8:	e59f0010 	ldr	r0, [pc, #16]	@ 17f10 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   17efc:	ebffde08 	bl	f724 <assertion_failed>
   17f00:	2000b21c 	.word	0x2000b21c
   17f04:	2000b220 	.word	0x2000b220
   17f08:	2000b224 	.word	0x2000b224
   17f0c:	0001d8f4 	.word	0x0001d8f4
   17f10:	0001d904 	.word	0x0001d904

00017f14 <CInterruptSystem::EnableFIQ(unsigned int)>:
   17f14:	e3a03000 	mov	r3, #0
   17f18:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   17f1c:	e3500047 	cmp	r0, #71	@ 0x47
   17f20:	8a000004 	bhi	17f38 <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   17f24:	e59f2020 	ldr	r2, [pc, #32]	@ 17f4c <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   17f28:	e3800080 	orr	r0, r0, #128	@ 0x80
   17f2c:	e582020c 	str	r0, [r2, #524]	@ 0x20c
   17f30:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   17f34:	e12fff1e 	bx	lr
   17f38:	e92d4010 	push	{r4, lr}
   17f3c:	e59f200c 	ldr	r2, [pc, #12]	@ 17f50 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   17f40:	e59f100c 	ldr	r1, [pc, #12]	@ 17f54 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   17f44:	e59f000c 	ldr	r0, [pc, #12]	@ 17f58 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
   17f48:	ebffddf5 	bl	f724 <assertion_failed>
   17f4c:	2000b000 	.word	0x2000b000
   17f50:	00000106 	.word	0x00000106
   17f54:	0001d8f4 	.word	0x0001d8f4
   17f58:	0001d950 	.word	0x0001d950

00017f5c <CInterruptSystem::DisableFIQ()>:
   17f5c:	e3a03000 	mov	r3, #0
   17f60:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   17f64:	e59f2008 	ldr	r2, [pc, #8]	@ 17f74 <CInterruptSystem::DisableFIQ()+0x18>
   17f68:	e582320c 	str	r3, [r2, #524]	@ 0x20c
   17f6c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   17f70:	e12fff1e 	bx	lr
   17f74:	2000b000 	.word	0x2000b000

00017f78 <CInterruptSystem::Get()>:
   17f78:	e59f301c 	ldr	r3, [pc, #28]	@ 17f9c <CInterruptSystem::Get()+0x24>
   17f7c:	e5930000 	ldr	r0, [r3]
   17f80:	e3500000 	cmp	r0, #0
   17f84:	112fff1e 	bxne	lr
   17f88:	e3a02f46 	mov	r2, #280	@ 0x118
   17f8c:	e92d4010 	push	{r4, lr}
   17f90:	e59f1008 	ldr	r1, [pc, #8]	@ 17fa0 <CInterruptSystem::Get()+0x28>
   17f94:	e59f0008 	ldr	r0, [pc, #8]	@ 17fa4 <CInterruptSystem::Get()+0x2c>
   17f98:	ebffdde1 	bl	f724 <assertion_failed>
   17f9c:	00020bf8 	.word	0x00020bf8
   17fa0:	0001d8f4 	.word	0x0001d8f4
   17fa4:	0001d6c4 	.word	0x0001d6c4

00017fa8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   17fa8:	e3510047 	cmp	r1, #71	@ 0x47
   17fac:	e92d4010 	push	{r4, lr}
   17fb0:	8a000017 	bhi	18014 <CInterruptSystem::CallIRQHandler(unsigned int)+0x6c>
   17fb4:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   17fb8:	e0800101 	add	r0, r0, r1, lsl #2
   17fbc:	e3530000 	cmp	r3, #0
   17fc0:	0a000003 	beq	17fd4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   17fc4:	e5900120 	ldr	r0, [r0, #288]	@ 0x120
   17fc8:	e12fff33 	blx	r3
   17fcc:	e3a00001 	mov	r0, #1
   17fd0:	e8bd8010 	pop	{r4, pc}
   17fd4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   17fd8:	e351001f 	cmp	r1, #31
   17fdc:	8a000007 	bhi	18000 <CInterruptSystem::CallIRQHandler(unsigned int)+0x58>
   17fe0:	e59f203c 	ldr	r2, [pc, #60]	@ 18024 <CInterruptSystem::CallIRQHandler(unsigned int)+0x7c>
   17fe4:	e3a03001 	mov	r3, #1
   17fe8:	e201101f 	and	r1, r1, #31
   17fec:	e1a03113 	lsl	r3, r3, r1
   17ff0:	e3a00000 	mov	r0, #0
   17ff4:	e5823000 	str	r3, [r2]
   17ff8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   17ffc:	e8bd8010 	pop	{r4, pc}
   18000:	e59f3020 	ldr	r3, [pc, #32]	@ 18028 <CInterruptSystem::CallIRQHandler(unsigned int)+0x80>
   18004:	e351003f 	cmp	r1, #63	@ 0x3f
   18008:	e59f201c 	ldr	r2, [pc, #28]	@ 1802c <CInterruptSystem::CallIRQHandler(unsigned int)+0x84>
   1800c:	91a02003 	movls	r2, r3
   18010:	eafffff3 	b	17fe4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   18014:	e59f2014 	ldr	r2, [pc, #20]	@ 18030 <CInterruptSystem::CallIRQHandler(unsigned int)+0x88>
   18018:	e59f1014 	ldr	r1, [pc, #20]	@ 18034 <CInterruptSystem::CallIRQHandler(unsigned int)+0x8c>
   1801c:	e59f0014 	ldr	r0, [pc, #20]	@ 18038 <CInterruptSystem::CallIRQHandler(unsigned int)+0x90>
   18020:	ebffddbf 	bl	f724 <assertion_failed>
   18024:	2000b21c 	.word	0x2000b21c
   18028:	2000b220 	.word	0x2000b220
   1802c:	2000b224 	.word	0x2000b224
   18030:	0000011e 	.word	0x0000011e
   18034:	0001d8f4 	.word	0x0001d8f4
   18038:	0001d904 	.word	0x0001d904

0001803c <CInterruptSystem::InterruptHandler()>:
   1803c:	e92d4030 	push	{r4, r5, lr}
   18040:	e59f4108 	ldr	r4, [pc, #264]	@ 18150 <CInterruptSystem::InterruptHandler()+0x114>
   18044:	e24dd014 	sub	sp, sp, #20
   18048:	e5943000 	ldr	r3, [r4]
   1804c:	e3530000 	cmp	r3, #0
   18050:	0a00003a 	beq	18140 <CInterruptSystem::InterruptHandler()+0x104>
   18054:	e3a01000 	mov	r1, #0
   18058:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
   1805c:	e59f30f0 	ldr	r3, [pc, #240]	@ 18154 <CInterruptSystem::InterruptHandler()+0x118>
   18060:	e5932204 	ldr	r2, [r3, #516]	@ 0x204
   18064:	e58d2004 	str	r2, [sp, #4]
   18068:	e5932208 	ldr	r2, [r3, #520]	@ 0x208
   1806c:	e58d2008 	str	r2, [sp, #8]
   18070:	e5933200 	ldr	r3, [r3, #512]	@ 0x200
   18074:	e6ef3073 	uxtb	r3, r3
   18078:	e58d300c 	str	r3, [sp, #12]
   1807c:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   18080:	e28dc004 	add	ip, sp, #4
   18084:	e49c3004 	ldr	r3, [ip], #4
   18088:	e3530000 	cmp	r3, #0
   1808c:	1a000004 	bne	180a4 <CInterruptSystem::InterruptHandler()+0x68>
   18090:	e2811020 	add	r1, r1, #32
   18094:	e3510060 	cmp	r1, #96	@ 0x60
   18098:	1afffff9 	bne	18084 <CInterruptSystem::InterruptHandler()+0x48>
   1809c:	e28dd014 	add	sp, sp, #20
   180a0:	e8bd8030 	pop	{r4, r5, pc}
   180a4:	e1a02001 	mov	r2, r1
   180a8:	ea000002 	b	180b8 <CInterruptSystem::InterruptHandler()+0x7c>
   180ac:	e1b030a3 	lsrs	r3, r3, #1
   180b0:	e2822001 	add	r2, r2, #1
   180b4:	0afffff5 	beq	18090 <CInterruptSystem::InterruptHandler()+0x54>
   180b8:	e3130001 	tst	r3, #1
   180bc:	0afffffa 	beq	180ac <CInterruptSystem::InterruptHandler()+0x70>
   180c0:	e3520047 	cmp	r2, #71	@ 0x47
   180c4:	e5940000 	ldr	r0, [r4]
   180c8:	8a000018 	bhi	18130 <CInterruptSystem::InterruptHandler()+0xf4>
   180cc:	e790e102 	ldr	lr, [r0, r2, lsl #2]
   180d0:	e0800102 	add	r0, r0, r2, lsl #2
   180d4:	e35e0000 	cmp	lr, #0
   180d8:	0a000004 	beq	180f0 <CInterruptSystem::InterruptHandler()+0xb4>
   180dc:	e1a0300e 	mov	r3, lr
   180e0:	e5900120 	ldr	r0, [r0, #288]	@ 0x120
   180e4:	e28dd014 	add	sp, sp, #20
   180e8:	e8bd4030 	pop	{r4, r5, lr}
   180ec:	e12fff13 	bx	r3
   180f0:	ee07ef9a 	mcr	15, 0, lr, cr7, cr10, {4}
   180f4:	e352001f 	cmp	r2, #31
   180f8:	9a00000a 	bls	18128 <CInterruptSystem::InterruptHandler()+0xec>
   180fc:	e59f0054 	ldr	r0, [pc, #84]	@ 18158 <CInterruptSystem::InterruptHandler()+0x11c>
   18100:	e352003f 	cmp	r2, #63	@ 0x3f
   18104:	e59fe050 	ldr	lr, [pc, #80]	@ 1815c <CInterruptSystem::InterruptHandler()+0x120>
   18108:	91a0e000 	movls	lr, r0
   1810c:	e3a00001 	mov	r0, #1
   18110:	e202501f 	and	r5, r2, #31
   18114:	e1a00510 	lsl	r0, r0, r5
   18118:	e58e0000 	str	r0, [lr]
   1811c:	e3a00000 	mov	r0, #0
   18120:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   18124:	eaffffe0 	b	180ac <CInterruptSystem::InterruptHandler()+0x70>
   18128:	e59fe030 	ldr	lr, [pc, #48]	@ 18160 <CInterruptSystem::InterruptHandler()+0x124>
   1812c:	eafffff6 	b	1810c <CInterruptSystem::InterruptHandler()+0xd0>
   18130:	e59f202c 	ldr	r2, [pc, #44]	@ 18164 <CInterruptSystem::InterruptHandler()+0x128>
   18134:	e59f102c 	ldr	r1, [pc, #44]	@ 18168 <CInterruptSystem::InterruptHandler()+0x12c>
   18138:	e59f002c 	ldr	r0, [pc, #44]	@ 1816c <CInterruptSystem::InterruptHandler()+0x130>
   1813c:	ebffdd78 	bl	f724 <assertion_failed>
   18140:	e59f2028 	ldr	r2, [pc, #40]	@ 18170 <CInterruptSystem::InterruptHandler()+0x134>
   18144:	e59f101c 	ldr	r1, [pc, #28]	@ 18168 <CInterruptSystem::InterruptHandler()+0x12c>
   18148:	e59f0024 	ldr	r0, [pc, #36]	@ 18174 <CInterruptSystem::InterruptHandler()+0x138>
   1814c:	ebffdd74 	bl	f724 <assertion_failed>
   18150:	00020bf8 	.word	0x00020bf8
   18154:	2000b000 	.word	0x2000b000
   18158:	2000b220 	.word	0x2000b220
   1815c:	2000b224 	.word	0x2000b224
   18160:	2000b21c 	.word	0x2000b21c
   18164:	0000011e 	.word	0x0000011e
   18168:	0001d8f4 	.word	0x0001d8f4
   1816c:	0001d904 	.word	0x0001d904
   18170:	00000131 	.word	0x00000131
   18174:	0001d6c4 	.word	0x0001d6c4

00018178 <InterruptHandler>:
   18178:	e92d4010 	push	{r4, lr}
   1817c:	e3a04000 	mov	r4, #0
   18180:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   18184:	ebffffac 	bl	1803c <CInterruptSystem::InterruptHandler()>
   18188:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   1818c:	e8bd8010 	pop	{r4, pc}

00018190 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>:
   18190:	e3520010 	cmp	r2, #16
   18194:	e5c01000 	strb	r1, [r0]
   18198:	e5c02001 	strb	r2, [r0, #1]
   1819c:	912fff1e 	bxls	lr
   181a0:	e59f100c 	ldr	r1, [pc, #12]	@ 181b4 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x24>
   181a4:	e3a0202e 	mov	r2, #46	@ 0x2e
   181a8:	e92d4010 	push	{r4, lr}
   181ac:	e2810010 	add	r0, r1, #16
   181b0:	ebffdd5b 	bl	f724 <assertion_failed>
   181b4:	0001e7e4 	.word	0x0001e7e4

000181b8 <CGPIOClock::~CGPIOClock()>:
   181b8:	e5d01000 	ldrb	r1, [r0]
   181bc:	e59f2028 	ldr	r2, [pc, #40]	@ 181ec <CGPIOClock::~CGPIOClock()+0x34>
   181c0:	e3a03000 	mov	r3, #0
   181c4:	e0812002 	add	r2, r1, r2
   181c8:	e1a02182 	lsl	r2, r2, #3
   181cc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   181d0:	e59f3018 	ldr	r3, [pc, #24]	@ 181f0 <CGPIOClock::~CGPIOClock()+0x38>
   181d4:	e5823000 	str	r3, [r2]
   181d8:	e5923000 	ldr	r3, [r2]
   181dc:	e2133080 	ands	r3, r3, #128	@ 0x80
   181e0:	1afffffc 	bne	181d8 <CGPIOClock::~CGPIOClock()+0x20>
   181e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   181e8:	e12fff1e 	bx	lr
   181ec:	0402020e 	.word	0x0402020e
   181f0:	5a000020 	.word	0x5a000020

000181f4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>:
   181f4:	e3530003 	cmp	r3, #3
   181f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   181fc:	e1a06003 	mov	r6, r3
   18200:	8a00002e 	bhi	182c0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xcc>
   18204:	e1a03001 	mov	r3, r1
   18208:	e59f10dc 	ldr	r1, [pc, #220]	@ 182ec <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xf8>
   1820c:	e1a07000 	mov	r7, r0
   18210:	e0810106 	add	r0, r1, r6, lsl #2
   18214:	e5900040 	ldr	r0, [r0, #64]	@ 0x40
   18218:	e1500003 	cmp	r0, r3
   1821c:	93530a01 	cmpls	r3, #4096	@ 0x1000
   18220:	2a000023 	bcs	182b4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xc0>
   18224:	e3520a01 	cmp	r2, #4096	@ 0x1000
   18228:	2a000028 	bcs	182d0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xdc>
   1822c:	e5d71000 	ldrb	r1, [r7]
   18230:	e59f50b8 	ldr	r5, [pc, #184]	@ 182f0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xfc>
   18234:	e0815005 	add	r5, r1, r5
   18238:	e1a05185 	lsl	r5, r5, #3
   1823c:	e3a01000 	mov	r1, #0
   18240:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
   18244:	e59f10a8 	ldr	r1, [pc, #168]	@ 182f4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x100>
   18248:	e285e070 	add	lr, r5, #112	@ 0x70
   1824c:	e5851070 	str	r1, [r5, #112]	@ 0x70
   18250:	e59ec000 	ldr	ip, [lr]
   18254:	e21c4080 	ands	r4, ip, #128	@ 0x80
   18258:	1afffffc 	bne	18250 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x5c>
   1825c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   18260:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   18264:	e1822603 	orr	r2, r2, r3, lsl #12
   18268:	e382245a 	orr	r2, r2, #1509949440	@ 0x5a000000
   1826c:	e3a0000a 	mov	r0, #10
   18270:	e5852004 	str	r2, [r5, #4]
   18274:	ebfff62b 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
   18278:	e5d73001 	ldrb	r3, [r7, #1]
   1827c:	e353000f 	cmp	r3, #15
   18280:	8a000015 	bhi	182dc <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xe8>
   18284:	e1833486 	orr	r3, r3, r6, lsl #9
   18288:	e383345a 	orr	r3, r3, #1509949440	@ 0x5a000000
   1828c:	e5853000 	str	r3, [r5]
   18290:	e3a0000a 	mov	r0, #10
   18294:	ebfff623 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
   18298:	e5953000 	ldr	r3, [r5]
   1829c:	e383345a 	orr	r3, r3, #1509949440	@ 0x5a000000
   182a0:	e3833010 	orr	r3, r3, #16
   182a4:	e5853000 	str	r3, [r5]
   182a8:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   182ac:	e3a00001 	mov	r0, #1
   182b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   182b4:	e3a0203c 	mov	r2, #60	@ 0x3c
   182b8:	e2810050 	add	r0, r1, #80	@ 0x50
   182bc:	ebffdd18 	bl	f724 <assertion_failed>
   182c0:	e59f1024 	ldr	r1, [pc, #36]	@ 182ec <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xf8>
   182c4:	e3a0203b 	mov	r2, #59	@ 0x3b
   182c8:	e2810034 	add	r0, r1, #52	@ 0x34
   182cc:	ebffdd14 	bl	f724 <assertion_failed>
   182d0:	e3a0203d 	mov	r2, #61	@ 0x3d
   182d4:	e281007c 	add	r0, r1, #124	@ 0x7c
   182d8:	ebffdd11 	bl	f724 <assertion_failed>
   182dc:	e59f1008 	ldr	r1, [pc, #8]	@ 182ec <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xf8>
   182e0:	e3a0204b 	mov	r2, #75	@ 0x4b
   182e4:	e281008c 	add	r0, r1, #140	@ 0x8c
   182e8:	ebffdd0d 	bl	f724 <assertion_failed>
   182ec:	0001e7e4 	.word	0x0001e7e4
   182f0:	04020200 	.word	0x04020200
   182f4:	5a000020 	.word	0x5a000020

000182f8 <CGPIOClock::StartRate(unsigned int)>:
   182f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   182fc:	e2516000 	subs	r6, r1, #0
   18300:	11a08000 	movne	r8, r0
   18304:	13a05000 	movne	r5, #0
   18308:	159f7074 	ldrne	r7, [pc, #116]	@ 18384 <CGPIOClock::StartRate(unsigned int)+0x8c>
   1830c:	0a000018 	beq	18374 <CGPIOClock::StartRate(unsigned int)+0x7c>
   18310:	ebffe65b 	bl	11c84 <CMachineInfo::Get()>
   18314:	e1a01005 	mov	r1, r5
   18318:	ebffe5d4 	bl	11a70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
   1831c:	e2504000 	subs	r4, r0, #0
   18320:	0a000007 	beq	18344 <CGPIOClock::StartRate(unsigned int)+0x4c>
   18324:	e1a01006 	mov	r1, r6
   18328:	eb00079e 	bl	1a1a8 <__udivsi3>
   1832c:	e2403001 	sub	r3, r0, #1
   18330:	e1530007 	cmp	r3, r7
   18334:	8a000002 	bhi	18344 <CGPIOClock::StartRate(unsigned int)+0x4c>
   18338:	e0030690 	mul	r3, r0, r6
   1833c:	e1530004 	cmp	r3, r4
   18340:	0a000004 	beq	18358 <CGPIOClock::StartRate(unsigned int)+0x60>
   18344:	e2855001 	add	r5, r5, #1
   18348:	e3550010 	cmp	r5, #16
   1834c:	1affffef 	bne	18310 <CGPIOClock::StartRate(unsigned int)+0x18>
   18350:	e3a00000 	mov	r0, #0
   18354:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18358:	e3a03000 	mov	r3, #0
   1835c:	e1a01000 	mov	r1, r0
   18360:	e5c85001 	strb	r5, [r8, #1]
   18364:	e1a00008 	mov	r0, r8
   18368:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1836c:	e1a02003 	mov	r2, r3
   18370:	eaffff9f 	b	181f4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   18374:	e59f100c 	ldr	r1, [pc, #12]	@ 18388 <CGPIOClock::StartRate(unsigned int)+0x90>
   18378:	e3a02059 	mov	r2, #89	@ 0x59
   1837c:	e28100b0 	add	r0, r1, #176	@ 0xb0
   18380:	ebffdce7 	bl	f724 <assertion_failed>
   18384:	00000ffe 	.word	0x00000ffe
   18388:	0001e7e4 	.word	0x0001e7e4

0001838c <CGPIOClock::Stop()>:
   1838c:	e5d01000 	ldrb	r1, [r0]
   18390:	e59f2028 	ldr	r2, [pc, #40]	@ 183c0 <CGPIOClock::Stop()+0x34>
   18394:	e3a03000 	mov	r3, #0
   18398:	e0812002 	add	r2, r1, r2
   1839c:	e1a02182 	lsl	r2, r2, #3
   183a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   183a4:	e59f3018 	ldr	r3, [pc, #24]	@ 183c4 <CGPIOClock::Stop()+0x38>
   183a8:	e5823000 	str	r3, [r2]
   183ac:	e5923000 	ldr	r3, [r2]
   183b0:	e2133080 	ands	r3, r3, #128	@ 0x80
   183b4:	1afffffc 	bne	183ac <CGPIOClock::Stop()+0x20>
   183b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   183bc:	e12fff1e 	bx	lr
   183c0:	0402020e 	.word	0x0402020e
   183c4:	5a000020 	.word	0x5a000020

000183c8 <CGPIOPin::~CGPIOPin()>:
   183c8:	e12fff1e 	bx	lr

000183cc <CGPIOPin::~CGPIOPin()>:
   183cc:	e92d4010 	push	{r4, lr}
   183d0:	e1a04000 	mov	r4, r0
   183d4:	e3a01028 	mov	r1, #40	@ 0x28
   183d8:	ebfff97a 	bl	169c8 <operator delete(void*, unsigned int)>
   183dc:	e1a00004 	mov	r0, r4
   183e0:	e8bd8010 	pop	{r4, pc}

000183e4 <CGPIOPin::CGPIOPin()>:
   183e4:	e92d4010 	push	{r4, lr}
   183e8:	e3a01000 	mov	r1, #0
   183ec:	e3a02006 	mov	r2, #6
   183f0:	e3a0e036 	mov	lr, #54	@ 0x36
   183f4:	e3a0c00b 	mov	ip, #11
   183f8:	e59f4018 	ldr	r4, [pc, #24]	@ 18418 <CGPIOPin::CGPIOPin()+0x34>
   183fc:	e5c0c010 	strb	ip, [r0, #16]
   18400:	e8804010 	stm	r0, {r4, lr}
   18404:	e5801018 	str	r1, [r0, #24]
   18408:	e580101c 	str	r1, [r0, #28]
   1840c:	e5c02025 	strb	r2, [r0, #37]	@ 0x25
   18410:	e5c02026 	strb	r2, [r0, #38]	@ 0x26
   18414:	e8bd8010 	pop	{r4, pc}
   18418:	0001e8a8 	.word	0x0001e8a8

0001841c <CGPIOPin::AssignPin(unsigned int)>:
   1841c:	e5903004 	ldr	r3, [r0, #4]
   18420:	e92d4070 	push	{r4, r5, r6, lr}
   18424:	e3530036 	cmp	r3, #54	@ 0x36
   18428:	1a000017 	bne	1848c <CGPIOPin::AssignPin(unsigned int)+0x70>
   1842c:	e3510035 	cmp	r1, #53	@ 0x35
   18430:	e1a05000 	mov	r5, r0
   18434:	e1a04001 	mov	r4, r1
   18438:	e5801004 	str	r1, [r0, #4]
   1843c:	8a000007 	bhi	18460 <CGPIOPin::AssignPin(unsigned int)+0x44>
   18440:	e3a03001 	mov	r3, #1
   18444:	e1a022a4 	lsr	r2, r4, #5
   18448:	e204401f 	and	r4, r4, #31
   1844c:	e1a02102 	lsl	r2, r2, #2
   18450:	e1a03413 	lsl	r3, r3, r4
   18454:	e5852008 	str	r2, [r5, #8]
   18458:	e585300c 	str	r3, [r5, #12]
   1845c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18460:	ebffe607 	bl	11c84 <CMachineInfo::Get()>
   18464:	e6ef1074 	uxtb	r1, r4
   18468:	ebffe55a 	bl	119d8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   1846c:	e3500035 	cmp	r0, #53	@ 0x35
   18470:	e1a04000 	mov	r4, r0
   18474:	e5850004 	str	r0, [r5, #4]
   18478:	9afffff0 	bls	18440 <CGPIOPin::AssignPin(unsigned int)+0x24>
   1847c:	e59f1018 	ldr	r1, [pc, #24]	@ 1849c <CGPIOPin::AssignPin(unsigned int)+0x80>
   18480:	e3a02047 	mov	r2, #71	@ 0x47
   18484:	e2810020 	add	r0, r1, #32
   18488:	ebffdca5 	bl	f724 <assertion_failed>
   1848c:	e59f1008 	ldr	r1, [pc, #8]	@ 1849c <CGPIOPin::AssignPin(unsigned int)+0x80>
   18490:	e3a02040 	mov	r2, #64	@ 0x40
   18494:	e281000c 	add	r0, r1, #12
   18498:	ebffdca1 	bl	f724 <assertion_failed>
   1849c:	0001e8b0 	.word	0x0001e8b0

000184a0 <CGPIOPin::Write(unsigned int)>:
   184a0:	e5903004 	ldr	r3, [r0, #4]
   184a4:	e92d4010 	push	{r4, lr}
   184a8:	e3530035 	cmp	r3, #53	@ 0x35
   184ac:	8a000010 	bhi	184f4 <CGPIOPin::Write(unsigned int)+0x54>
   184b0:	e5d03010 	ldrb	r3, [r0, #16]
   184b4:	e3530004 	cmp	r3, #4
   184b8:	8a000011 	bhi	18504 <CGPIOPin::Write(unsigned int)+0x64>
   184bc:	e3a02000 	mov	r2, #0
   184c0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   184c4:	e3510001 	cmp	r1, #1
   184c8:	8a000011 	bhi	18514 <CGPIOPin::Write(unsigned int)+0x74>
   184cc:	e59fc050 	ldr	ip, [pc, #80]	@ 18524 <CGPIOPin::Write(unsigned int)+0x84>
   184d0:	e3510000 	cmp	r1, #0
   184d4:	e59f304c 	ldr	r3, [pc, #76]	@ 18528 <CGPIOPin::Write(unsigned int)+0x88>
   184d8:	11a0300c 	movne	r3, ip
   184dc:	e5801014 	str	r1, [r0, #20]
   184e0:	e590c00c 	ldr	ip, [r0, #12]
   184e4:	e5901008 	ldr	r1, [r0, #8]
   184e8:	e783c001 	str	ip, [r3, r1]
   184ec:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   184f0:	e8bd8010 	pop	{r4, pc}
   184f4:	e59f1030 	ldr	r1, [pc, #48]	@ 1852c <CGPIOPin::Write(unsigned int)+0x8c>
   184f8:	e3a02095 	mov	r2, #149	@ 0x95
   184fc:	e2810020 	add	r0, r1, #32
   18500:	ebffdc87 	bl	f724 <assertion_failed>
   18504:	e59f1020 	ldr	r1, [pc, #32]	@ 1852c <CGPIOPin::Write(unsigned int)+0x8c>
   18508:	e3a02098 	mov	r2, #152	@ 0x98
   1850c:	e2810034 	add	r0, r1, #52	@ 0x34
   18510:	ebffdc83 	bl	f724 <assertion_failed>
   18514:	e59f1010 	ldr	r1, [pc, #16]	@ 1852c <CGPIOPin::Write(unsigned int)+0x8c>
   18518:	e3a0209c 	mov	r2, #156	@ 0x9c
   1851c:	e2810058 	add	r0, r1, #88	@ 0x58
   18520:	ebffdc7f 	bl	f724 <assertion_failed>
   18524:	2020001c 	.word	0x2020001c
   18528:	20200028 	.word	0x20200028
   1852c:	0001e8b0 	.word	0x0001e8b0

00018530 <CGPIOPin::Read() const>:
   18530:	e5903004 	ldr	r3, [r0, #4]
   18534:	e92d4010 	push	{r4, lr}
   18538:	e3530035 	cmp	r3, #53	@ 0x35
   1853c:	8a00000f 	bhi	18580 <CGPIOPin::Read() const+0x50>
   18540:	e5d03010 	ldrb	r3, [r0, #16]
   18544:	e2432003 	sub	r2, r3, #3
   18548:	e3530001 	cmp	r3, #1
   1854c:	13520001 	cmpne	r2, #1
   18550:	8a00000e 	bhi	18590 <CGPIOPin::Read() const+0x60>
   18554:	e3a03000 	mov	r3, #0
   18558:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1855c:	e59f103c 	ldr	r1, [pc, #60]	@ 185a0 <CGPIOPin::Read() const+0x70>
   18560:	e590c008 	ldr	ip, [r0, #8]
   18564:	e590200c 	ldr	r2, [r0, #12]
   18568:	e79c1001 	ldr	r1, [ip, r1]
   1856c:	e1110002 	tst	r1, r2
   18570:	13a00001 	movne	r0, #1
   18574:	01a00003 	moveq	r0, r3
   18578:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1857c:	e8bd8010 	pop	{r4, pc}
   18580:	e59f101c 	ldr	r1, [pc, #28]	@ 185a4 <CGPIOPin::Read() const+0x74>
   18584:	e3a020a8 	mov	r2, #168	@ 0xa8
   18588:	e2810020 	add	r0, r1, #32
   1858c:	ebffdc64 	bl	f724 <assertion_failed>
   18590:	e59f100c 	ldr	r1, [pc, #12]	@ 185a4 <CGPIOPin::Read() const+0x74>
   18594:	e3a020aa 	mov	r2, #170	@ 0xaa
   18598:	e2810078 	add	r0, r1, #120	@ 0x78
   1859c:	ebffdc60 	bl	f724 <assertion_failed>
   185a0:	20200034 	.word	0x20200034
   185a4:	0001e8b0 	.word	0x0001e8b0

000185a8 <CGPIOPin::Invert()>:
   185a8:	e5d03010 	ldrb	r3, [r0, #16]
   185ac:	e92d4010 	push	{r4, lr}
   185b0:	e3530002 	cmp	r3, #2
   185b4:	1a000012 	bne	18604 <CGPIOPin::Invert()+0x5c>
   185b8:	e5903004 	ldr	r3, [r0, #4]
   185bc:	e5902014 	ldr	r2, [r0, #20]
   185c0:	e3530035 	cmp	r3, #53	@ 0x35
   185c4:	e2221001 	eor	r1, r2, #1
   185c8:	8a000011 	bhi	18614 <CGPIOPin::Invert()+0x6c>
   185cc:	e3a0c000 	mov	ip, #0
   185d0:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   185d4:	e3510001 	cmp	r1, #1
   185d8:	8a000011 	bhi	18624 <CGPIOPin::Invert()+0x7c>
   185dc:	e5801014 	str	r1, [r0, #20]
   185e0:	e59f104c 	ldr	r1, [pc, #76]	@ 18634 <CGPIOPin::Invert()+0x8c>
   185e4:	e3520001 	cmp	r2, #1
   185e8:	e59f3048 	ldr	r3, [pc, #72]	@ 18638 <CGPIOPin::Invert()+0x90>
   185ec:	11a03001 	movne	r3, r1
   185f0:	e5902008 	ldr	r2, [r0, #8]
   185f4:	e590100c 	ldr	r1, [r0, #12]
   185f8:	e7831002 	str	r1, [r3, r2]
   185fc:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   18600:	e8bd8010 	pop	{r4, pc}
   18604:	e59f1030 	ldr	r1, [pc, #48]	@ 1863c <CGPIOPin::Invert()+0x94>
   18608:	e3a020b9 	mov	r2, #185	@ 0xb9
   1860c:	e28100d4 	add	r0, r1, #212	@ 0xd4
   18610:	ebffdc43 	bl	f724 <assertion_failed>
   18614:	e59f1020 	ldr	r1, [pc, #32]	@ 1863c <CGPIOPin::Invert()+0x94>
   18618:	e3a02095 	mov	r2, #149	@ 0x95
   1861c:	e2810020 	add	r0, r1, #32
   18620:	ebffdc3f 	bl	f724 <assertion_failed>
   18624:	e59f1010 	ldr	r1, [pc, #16]	@ 1863c <CGPIOPin::Invert()+0x94>
   18628:	e3a0209c 	mov	r2, #156	@ 0x9c
   1862c:	e2810058 	add	r0, r1, #88	@ 0x58
   18630:	ebffdc3b 	bl	f724 <assertion_failed>
   18634:	2020001c 	.word	0x2020001c
   18638:	20200028 	.word	0x20200028
   1863c:	0001e8b0 	.word	0x0001e8b0

00018640 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   18640:	e1a0c000 	mov	ip, r0
   18644:	e5d00010 	ldrb	r0, [r0, #16]
   18648:	e92d4010 	push	{r4, lr}
   1864c:	e240e003 	sub	lr, r0, #3
   18650:	e3500001 	cmp	r0, #1
   18654:	135e0001 	cmpne	lr, #1
   18658:	8a000027 	bhi	186fc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   1865c:	e5dc0025 	ldrb	r0, [ip, #37]	@ 0x25
   18660:	e3500006 	cmp	r0, #6
   18664:	1a000010 	bne	186ac <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   18668:	e5dc0026 	ldrb	r0, [ip, #38]	@ 0x26
   1866c:	e3500006 	cmp	r0, #6
   18670:	1a000011 	bne	186bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   18674:	e3510000 	cmp	r1, #0
   18678:	0a000013 	beq	186cc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   1867c:	e59c001c 	ldr	r0, [ip, #28]
   18680:	e3500000 	cmp	r0, #0
   18684:	1a000014 	bne	186dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   18688:	e59c0018 	ldr	r0, [ip, #24]
   1868c:	e58c101c 	str	r1, [ip, #28]
   18690:	e3500000 	cmp	r0, #0
   18694:	e58c2020 	str	r2, [ip, #32]
   18698:	e5cc3024 	strb	r3, [ip, #36]	@ 0x24
   1869c:	0a000012 	beq	186ec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   186a0:	e8bd4010 	pop	{r4, lr}
   186a4:	e1a0100c 	mov	r1, ip
   186a8:	ea0005ba 	b	19d98 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   186ac:	e59f1058 	ldr	r1, [pc, #88]	@ 1870c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   186b0:	e3a020c4 	mov	r2, #196	@ 0xc4
   186b4:	e28100f0 	add	r0, r1, #240	@ 0xf0
   186b8:	ebffdc19 	bl	f724 <assertion_failed>
   186bc:	e59f1048 	ldr	r1, [pc, #72]	@ 1870c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   186c0:	e3a020c5 	mov	r2, #197	@ 0xc5
   186c4:	e2810f45 	add	r0, r1, #276	@ 0x114
   186c8:	ebffdc15 	bl	f724 <assertion_failed>
   186cc:	e59f1038 	ldr	r1, [pc, #56]	@ 1870c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   186d0:	e3a020c7 	mov	r2, #199	@ 0xc7
   186d4:	e2810f4f 	add	r0, r1, #316	@ 0x13c
   186d8:	ebffdc11 	bl	f724 <assertion_failed>
   186dc:	e59f1028 	ldr	r1, [pc, #40]	@ 1870c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   186e0:	e3a020c8 	mov	r2, #200	@ 0xc8
   186e4:	e2810f53 	add	r0, r1, #332	@ 0x14c
   186e8:	ebffdc0d 	bl	f724 <assertion_failed>
   186ec:	e59f1018 	ldr	r1, [pc, #24]	@ 1870c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   186f0:	e3a020cf 	mov	r2, #207	@ 0xcf
   186f4:	e2810f57 	add	r0, r1, #348	@ 0x15c
   186f8:	ebffdc09 	bl	f724 <assertion_failed>
   186fc:	e59f1008 	ldr	r1, [pc, #8]	@ 1870c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   18700:	e3a020c0 	mov	r2, #192	@ 0xc0
   18704:	e2810078 	add	r0, r1, #120	@ 0x78
   18708:	ebffdc05 	bl	f724 <assertion_failed>
   1870c:	0001e8b0 	.word	0x0001e8b0

00018710 <CGPIOPin::DisconnectInterrupt()>:
   18710:	e5d03010 	ldrb	r3, [r0, #16]
   18714:	e92d4010 	push	{r4, lr}
   18718:	e2432003 	sub	r2, r3, #3
   1871c:	e3530001 	cmp	r3, #1
   18720:	13520001 	cmpne	r2, #1
   18724:	8a000020 	bhi	187ac <CGPIOPin::DisconnectInterrupt()+0x9c>
   18728:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   1872c:	e1a01000 	mov	r1, r0
   18730:	e3530006 	cmp	r3, #6
   18734:	1a00000c 	bne	1876c <CGPIOPin::DisconnectInterrupt()+0x5c>
   18738:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   1873c:	e3530006 	cmp	r3, #6
   18740:	1a00000d 	bne	1877c <CGPIOPin::DisconnectInterrupt()+0x6c>
   18744:	e590301c 	ldr	r3, [r0, #28]
   18748:	e3530000 	cmp	r3, #0
   1874c:	0a00000e 	beq	1878c <CGPIOPin::DisconnectInterrupt()+0x7c>
   18750:	e3a03000 	mov	r3, #0
   18754:	e5900018 	ldr	r0, [r0, #24]
   18758:	e581301c 	str	r3, [r1, #28]
   1875c:	e1500003 	cmp	r0, r3
   18760:	0a00000d 	beq	1879c <CGPIOPin::DisconnectInterrupt()+0x8c>
   18764:	e8bd4010 	pop	{r4, lr}
   18768:	ea0005ae 	b	19e28 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1876c:	e59f1048 	ldr	r1, [pc, #72]	@ 187bc <CGPIOPin::DisconnectInterrupt()+0xac>
   18770:	e3a020d9 	mov	r2, #217	@ 0xd9
   18774:	e28100f0 	add	r0, r1, #240	@ 0xf0
   18778:	ebffdbe9 	bl	f724 <assertion_failed>
   1877c:	e59f1038 	ldr	r1, [pc, #56]	@ 187bc <CGPIOPin::DisconnectInterrupt()+0xac>
   18780:	e3a020da 	mov	r2, #218	@ 0xda
   18784:	e2810f45 	add	r0, r1, #276	@ 0x114
   18788:	ebffdbe5 	bl	f724 <assertion_failed>
   1878c:	e59f1028 	ldr	r1, [pc, #40]	@ 187bc <CGPIOPin::DisconnectInterrupt()+0xac>
   18790:	e3a020dc 	mov	r2, #220	@ 0xdc
   18794:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   18798:	ebffdbe1 	bl	f724 <assertion_failed>
   1879c:	e59f1018 	ldr	r1, [pc, #24]	@ 187bc <CGPIOPin::DisconnectInterrupt()+0xac>
   187a0:	e3a020df 	mov	r2, #223	@ 0xdf
   187a4:	e2810f57 	add	r0, r1, #348	@ 0x15c
   187a8:	ebffdbdd 	bl	f724 <assertion_failed>
   187ac:	e59f1008 	ldr	r1, [pc, #8]	@ 187bc <CGPIOPin::DisconnectInterrupt()+0xac>
   187b0:	e3a020d5 	mov	r2, #213	@ 0xd5
   187b4:	e2810078 	add	r0, r1, #120	@ 0x78
   187b8:	ebffdbd9 	bl	f724 <assertion_failed>
   187bc:	0001e8b0 	.word	0x0001e8b0

000187c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   187c0:	e5d03010 	ldrb	r3, [r0, #16]
   187c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   187c8:	e2432003 	sub	r2, r3, #3
   187cc:	e3530001 	cmp	r3, #1
   187d0:	13520001 	cmpne	r2, #1
   187d4:	8a000030 	bhi	1889c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   187d8:	e590301c 	ldr	r3, [r0, #28]
   187dc:	e1a05000 	mov	r5, r0
   187e0:	e3530000 	cmp	r3, #0
   187e4:	0a00001c 	beq	1885c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   187e8:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   187ec:	e3530006 	cmp	r3, #6
   187f0:	1a00001d 	bne	1886c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   187f4:	e3510005 	cmp	r1, #5
   187f8:	8a00001f 	bhi	1887c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   187fc:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   18800:	e1530001 	cmp	r3, r1
   18804:	0a000020 	beq	1888c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   18808:	e59f709c 	ldr	r7, [pc, #156]	@ 188ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   1880c:	e5903008 	ldr	r3, [r0, #8]
   18810:	e5c01025 	strb	r1, [r0, #37]	@ 0x25
   18814:	e5970000 	ldr	r0, [r7]
   18818:	e59f6090 	ldr	r6, [pc, #144]	@ 188b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   1881c:	e0811081 	add	r1, r1, r1, lsl #1
   18820:	e3500000 	cmp	r0, #0
   18824:	e0836006 	add	r6, r3, r6
   18828:	e1a04101 	lsl	r4, r1, #2
   1882c:	1a000008 	bne	18854 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   18830:	e7963004 	ldr	r3, [r6, r4]
   18834:	e595200c 	ldr	r2, [r5, #12]
   18838:	e1833002 	orr	r3, r3, r2
   1883c:	e7863004 	str	r3, [r6, r4]
   18840:	e5973000 	ldr	r3, [r7]
   18844:	e3530000 	cmp	r3, #0
   18848:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1884c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18850:	eafffc38 	b	17938 <LeaveCritical>
   18854:	ebfffc0d 	bl	17890 <EnterCritical>
   18858:	eafffff4 	b	18830 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   1885c:	e59f1050 	ldr	r1, [pc, #80]	@ 188b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   18860:	e3a020e8 	mov	r2, #232	@ 0xe8
   18864:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   18868:	ebffdbad 	bl	f724 <assertion_failed>
   1886c:	e59f1040 	ldr	r1, [pc, #64]	@ 188b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   18870:	e3a020ea 	mov	r2, #234	@ 0xea
   18874:	e28100f0 	add	r0, r1, #240	@ 0xf0
   18878:	ebffdba9 	bl	f724 <assertion_failed>
   1887c:	e59f1030 	ldr	r1, [pc, #48]	@ 188b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   18880:	e3a020eb 	mov	r2, #235	@ 0xeb
   18884:	e2810f5f 	add	r0, r1, #380	@ 0x17c
   18888:	ebffdba5 	bl	f724 <assertion_failed>
   1888c:	e59f1020 	ldr	r1, [pc, #32]	@ 188b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   18890:	e3a020ec 	mov	r2, #236	@ 0xec
   18894:	e2810e1a 	add	r0, r1, #416	@ 0x1a0
   18898:	ebffdba1 	bl	f724 <assertion_failed>
   1889c:	e59f1010 	ldr	r1, [pc, #16]	@ 188b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   188a0:	e3a020e5 	mov	r2, #229	@ 0xe5
   188a4:	e2810078 	add	r0, r1, #120	@ 0x78
   188a8:	ebffdb9d 	bl	f724 <assertion_failed>
   188ac:	00020bfc 	.word	0x00020bfc
   188b0:	2020004c 	.word	0x2020004c
   188b4:	0001e8b0 	.word	0x0001e8b0

000188b8 <CGPIOPin::DisableInterrupt()>:
   188b8:	e5d03010 	ldrb	r3, [r0, #16]
   188bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   188c0:	e2432003 	sub	r2, r3, #3
   188c4:	e3530001 	cmp	r3, #1
   188c8:	13520001 	cmpne	r2, #1
   188cc:	8a00001e 	bhi	1894c <CGPIOPin::DisableInterrupt()+0x94>
   188d0:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   188d4:	e1a05000 	mov	r5, r0
   188d8:	e3530005 	cmp	r3, #5
   188dc:	8a000016 	bhi	1893c <CGPIOPin::DisableInterrupt()+0x84>
   188e0:	e59f7074 	ldr	r7, [pc, #116]	@ 1895c <CGPIOPin::DisableInterrupt()+0xa4>
   188e4:	e5902008 	ldr	r2, [r0, #8]
   188e8:	e5970000 	ldr	r0, [r7]
   188ec:	e59f606c 	ldr	r6, [pc, #108]	@ 18960 <CGPIOPin::DisableInterrupt()+0xa8>
   188f0:	e0833083 	add	r3, r3, r3, lsl #1
   188f4:	e3500000 	cmp	r0, #0
   188f8:	e0826006 	add	r6, r2, r6
   188fc:	e1a04103 	lsl	r4, r3, #2
   18900:	1a000009 	bne	1892c <CGPIOPin::DisableInterrupt()+0x74>
   18904:	e7963004 	ldr	r3, [r6, r4]
   18908:	e595200c 	ldr	r2, [r5, #12]
   1890c:	e1c33002 	bic	r3, r3, r2
   18910:	e7863004 	str	r3, [r6, r4]
   18914:	e5973000 	ldr	r3, [r7]
   18918:	e3530000 	cmp	r3, #0
   1891c:	1a000004 	bne	18934 <CGPIOPin::DisableInterrupt()+0x7c>
   18920:	e3a03006 	mov	r3, #6
   18924:	e5c53025 	strb	r3, [r5, #37]	@ 0x25
   18928:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1892c:	ebfffbd7 	bl	17890 <EnterCritical>
   18930:	eafffff3 	b	18904 <CGPIOPin::DisableInterrupt()+0x4c>
   18934:	ebfffbff 	bl	17938 <LeaveCritical>
   18938:	eafffff8 	b	18920 <CGPIOPin::DisableInterrupt()+0x68>
   1893c:	e59f1020 	ldr	r1, [pc, #32]	@ 18964 <CGPIOPin::DisableInterrupt()+0xac>
   18940:	e3a020ff 	mov	r2, #255	@ 0xff
   18944:	e2810f6f 	add	r0, r1, #444	@ 0x1bc
   18948:	ebffdb75 	bl	f724 <assertion_failed>
   1894c:	e59f1010 	ldr	r1, [pc, #16]	@ 18964 <CGPIOPin::DisableInterrupt()+0xac>
   18950:	e3a020fb 	mov	r2, #251	@ 0xfb
   18954:	e2810078 	add	r0, r1, #120	@ 0x78
   18958:	ebffdb71 	bl	f724 <assertion_failed>
   1895c:	00020bfc 	.word	0x00020bfc
   18960:	2020004c 	.word	0x2020004c
   18964:	0001e8b0 	.word	0x0001e8b0

00018968 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   18968:	e5d03010 	ldrb	r3, [r0, #16]
   1896c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18970:	e2432003 	sub	r2, r3, #3
   18974:	e3530001 	cmp	r3, #1
   18978:	13520001 	cmpne	r2, #1
   1897c:	8a000030 	bhi	18a44 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   18980:	e590301c 	ldr	r3, [r0, #28]
   18984:	e1a05000 	mov	r5, r0
   18988:	e3530000 	cmp	r3, #0
   1898c:	0a00001c 	beq	18a04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   18990:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   18994:	e3530006 	cmp	r3, #6
   18998:	1a00001d 	bne	18a14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   1899c:	e3510005 	cmp	r1, #5
   189a0:	8a00001f 	bhi	18a24 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   189a4:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   189a8:	e1530001 	cmp	r3, r1
   189ac:	0a000020 	beq	18a34 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   189b0:	e59f709c 	ldr	r7, [pc, #156]	@ 18a54 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   189b4:	e5903008 	ldr	r3, [r0, #8]
   189b8:	e5c01026 	strb	r1, [r0, #38]	@ 0x26
   189bc:	e5970000 	ldr	r0, [r7]
   189c0:	e59f6090 	ldr	r6, [pc, #144]	@ 18a58 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   189c4:	e0811081 	add	r1, r1, r1, lsl #1
   189c8:	e3500000 	cmp	r0, #0
   189cc:	e0836006 	add	r6, r3, r6
   189d0:	e1a04101 	lsl	r4, r1, #2
   189d4:	1a000008 	bne	189fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   189d8:	e7963004 	ldr	r3, [r6, r4]
   189dc:	e595200c 	ldr	r2, [r5, #12]
   189e0:	e1833002 	orr	r3, r3, r2
   189e4:	e7863004 	str	r3, [r6, r4]
   189e8:	e5973000 	ldr	r3, [r7]
   189ec:	e3530000 	cmp	r3, #0
   189f0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   189f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   189f8:	eafffbce 	b	17938 <LeaveCritical>
   189fc:	ebfffba3 	bl	17890 <EnterCritical>
   18a00:	eafffff4 	b	189d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   18a04:	e59f1050 	ldr	r1, [pc, #80]	@ 18a5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   18a08:	e59f2050 	ldr	r2, [pc, #80]	@ 18a60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   18a0c:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   18a10:	ebffdb43 	bl	f724 <assertion_failed>
   18a14:	e59f1040 	ldr	r1, [pc, #64]	@ 18a5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   18a18:	e59f2044 	ldr	r2, [pc, #68]	@ 18a64 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   18a1c:	e2810f45 	add	r0, r1, #276	@ 0x114
   18a20:	ebffdb3f 	bl	f724 <assertion_failed>
   18a24:	e59f1030 	ldr	r1, [pc, #48]	@ 18a5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   18a28:	e3a02f45 	mov	r2, #276	@ 0x114
   18a2c:	e2810f5f 	add	r0, r1, #380	@ 0x17c
   18a30:	ebffdb3b 	bl	f724 <assertion_failed>
   18a34:	e59f1020 	ldr	r1, [pc, #32]	@ 18a5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   18a38:	e59f2028 	ldr	r2, [pc, #40]	@ 18a68 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   18a3c:	e2810e1e 	add	r0, r1, #480	@ 0x1e0
   18a40:	ebffdb37 	bl	f724 <assertion_failed>
   18a44:	e59f1010 	ldr	r1, [pc, #16]	@ 18a5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   18a48:	e59f201c 	ldr	r2, [pc, #28]	@ 18a6c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   18a4c:	e2810078 	add	r0, r1, #120	@ 0x78
   18a50:	ebffdb33 	bl	f724 <assertion_failed>
   18a54:	00020bfc 	.word	0x00020bfc
   18a58:	2020004c 	.word	0x2020004c
   18a5c:	0001e8b0 	.word	0x0001e8b0
   18a60:	00000111 	.word	0x00000111
   18a64:	00000113 	.word	0x00000113
   18a68:	00000115 	.word	0x00000115
   18a6c:	0000010e 	.word	0x0000010e

00018a70 <CGPIOPin::DisableInterrupt2()>:
   18a70:	e5d03010 	ldrb	r3, [r0, #16]
   18a74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18a78:	e2432003 	sub	r2, r3, #3
   18a7c:	e3530001 	cmp	r3, #1
   18a80:	13520001 	cmpne	r2, #1
   18a84:	8a00001e 	bhi	18b04 <CGPIOPin::DisableInterrupt2()+0x94>
   18a88:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   18a8c:	e1a05000 	mov	r5, r0
   18a90:	e3530005 	cmp	r3, #5
   18a94:	8a000016 	bhi	18af4 <CGPIOPin::DisableInterrupt2()+0x84>
   18a98:	e59f7074 	ldr	r7, [pc, #116]	@ 18b14 <CGPIOPin::DisableInterrupt2()+0xa4>
   18a9c:	e5902008 	ldr	r2, [r0, #8]
   18aa0:	e5970000 	ldr	r0, [r7]
   18aa4:	e59f606c 	ldr	r6, [pc, #108]	@ 18b18 <CGPIOPin::DisableInterrupt2()+0xa8>
   18aa8:	e0833083 	add	r3, r3, r3, lsl #1
   18aac:	e3500000 	cmp	r0, #0
   18ab0:	e0826006 	add	r6, r2, r6
   18ab4:	e1a04103 	lsl	r4, r3, #2
   18ab8:	1a000009 	bne	18ae4 <CGPIOPin::DisableInterrupt2()+0x74>
   18abc:	e7963004 	ldr	r3, [r6, r4]
   18ac0:	e595200c 	ldr	r2, [r5, #12]
   18ac4:	e1c33002 	bic	r3, r3, r2
   18ac8:	e7863004 	str	r3, [r6, r4]
   18acc:	e5973000 	ldr	r3, [r7]
   18ad0:	e3530000 	cmp	r3, #0
   18ad4:	1a000004 	bne	18aec <CGPIOPin::DisableInterrupt2()+0x7c>
   18ad8:	e3a03006 	mov	r3, #6
   18adc:	e5c53026 	strb	r3, [r5, #38]	@ 0x26
   18ae0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18ae4:	ebfffb69 	bl	17890 <EnterCritical>
   18ae8:	eafffff3 	b	18abc <CGPIOPin::DisableInterrupt2()+0x4c>
   18aec:	ebfffb91 	bl	17938 <LeaveCritical>
   18af0:	eafffff8 	b	18ad8 <CGPIOPin::DisableInterrupt2()+0x68>
   18af4:	e59f1020 	ldr	r1, [pc, #32]	@ 18b1c <CGPIOPin::DisableInterrupt2()+0xac>
   18af8:	e3a02f4a 	mov	r2, #296	@ 0x128
   18afc:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
   18b00:	ebffdb07 	bl	f724 <assertion_failed>
   18b04:	e59f1010 	ldr	r1, [pc, #16]	@ 18b1c <CGPIOPin::DisableInterrupt2()+0xac>
   18b08:	e3a02f49 	mov	r2, #292	@ 0x124
   18b0c:	e2810078 	add	r0, r1, #120	@ 0x78
   18b10:	ebffdb03 	bl	f724 <assertion_failed>
   18b14:	00020bfc 	.word	0x00020bfc
   18b18:	2020004c 	.word	0x2020004c
   18b1c:	0001e8b0 	.word	0x0001e8b0

00018b20 <CGPIOPin::AcknowledgeInterrupt()>:
   18b20:	e590301c 	ldr	r3, [r0, #28]
   18b24:	e92d4010 	push	{r4, lr}
   18b28:	e3530000 	cmp	r3, #0
   18b2c:	0a000009 	beq	18b58 <CGPIOPin::AcknowledgeInterrupt()+0x38>
   18b30:	e5d03024 	ldrb	r3, [r0, #36]	@ 0x24
   18b34:	e3530000 	cmp	r3, #0
   18b38:	1a00000a 	bne	18b68 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   18b3c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   18b40:	e59f2030 	ldr	r2, [pc, #48]	@ 18b78 <CGPIOPin::AcknowledgeInterrupt()+0x58>
   18b44:	e590c00c 	ldr	ip, [r0, #12]
   18b48:	e5901008 	ldr	r1, [r0, #8]
   18b4c:	e781c002 	str	ip, [r1, r2]
   18b50:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   18b54:	e8bd8010 	pop	{r4, pc}
   18b58:	e59f101c 	ldr	r1, [pc, #28]	@ 18b7c <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   18b5c:	e59f201c 	ldr	r2, [pc, #28]	@ 18b80 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   18b60:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   18b64:	ebffdaee 	bl	f724 <assertion_failed>
   18b68:	e59f100c 	ldr	r1, [pc, #12]	@ 18b7c <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   18b6c:	e3a02f4e 	mov	r2, #312	@ 0x138
   18b70:	e2810e22 	add	r0, r1, #544	@ 0x220
   18b74:	ebffdaea 	bl	f724 <assertion_failed>
   18b78:	20200040 	.word	0x20200040
   18b7c:	0001e8b0 	.word	0x0001e8b0
   18b80:	00000137 	.word	0x00000137

00018b84 <CGPIOPin::SetModeAll(unsigned int, unsigned int)>:
   18b84:	e1100001 	tst	r0, r1
   18b88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b8c:	1a000029 	bne	18c38 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xb4>
   18b90:	e59f80b0 	ldr	r8, [pc, #176]	@ 18c48 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xc4>
   18b94:	e1804001 	orr	r4, r0, r1
   18b98:	e5980000 	ldr	r0, [r8]
   18b9c:	e1a07001 	mov	r7, r1
   18ba0:	e3500000 	cmp	r0, #0
   18ba4:	1a000021 	bne	18c30 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xac>
   18ba8:	e3a0e000 	mov	lr, #0
   18bac:	e3a05001 	mov	r5, #1
   18bb0:	e3a01007 	mov	r1, #7
   18bb4:	e59f6090 	ldr	r6, [pc, #144]	@ 18c4c <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xc8>
   18bb8:	e59f9090 	ldr	r9, [pc, #144]	@ 18c50 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xcc>
   18bbc:	e0143e19 	ands	r3, r4, r9, lsl lr
   18bc0:	1a000008 	bne	18be8 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x64>
   18bc4:	e28ee00a 	add	lr, lr, #10
   18bc8:	e35e0028 	cmp	lr, #40	@ 0x28
   18bcc:	e2866004 	add	r6, r6, #4
   18bd0:	1afffff9 	bne	18bbc <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x38>
   18bd4:	e5983000 	ldr	r3, [r8]
   18bd8:	e3530000 	cmp	r3, #0
   18bdc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18be0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18be4:	eafffb53 	b	17938 <LeaveCritical>
   18be8:	e3a02000 	mov	r2, #0
   18bec:	e1a0300e 	mov	r3, lr
   18bf0:	e596c000 	ldr	ip, [r6]
   18bf4:	ea000003 	b	18c08 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x84>
   18bf8:	e2833001 	add	r3, r3, #1
   18bfc:	e3530020 	cmp	r3, #32
   18c00:	e2822003 	add	r2, r2, #3
   18c04:	0a000007 	beq	18c28 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xa4>
   18c08:	e1a00315 	lsl	r0, r5, r3
   18c0c:	e1140000 	tst	r4, r0
   18c10:	0a000002 	beq	18c20 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x9c>
   18c14:	e1170000 	tst	r7, r0
   18c18:	e1ccc211 	bic	ip, ip, r1, lsl r2
   18c1c:	118cc215 	orrne	ip, ip, r5, lsl r2
   18c20:	e352001b 	cmp	r2, #27
   18c24:	1afffff3 	bne	18bf8 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x74>
   18c28:	e586c000 	str	ip, [r6]
   18c2c:	eaffffe4 	b	18bc4 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x40>
   18c30:	ebfffb16 	bl	17890 <EnterCritical>
   18c34:	eaffffdb 	b	18ba8 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x24>
   18c38:	e59f1014 	ldr	r1, [pc, #20]	@ 18c54 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xd0>
   18c3c:	e59f2014 	ldr	r2, [pc, #20]	@ 18c58 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xd4>
   18c40:	e2810f8b 	add	r0, r1, #556	@ 0x22c
   18c44:	ebffdab6 	bl	f724 <assertion_failed>
   18c48:	00020bfc 	.word	0x00020bfc
   18c4c:	20200000 	.word	0x20200000
   18c50:	000003ff 	.word	0x000003ff
   18c54:	0001e8b0 	.word	0x0001e8b0
   18c58:	00000143 	.word	0x00000143

00018c5c <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   18c5c:	e3a03000 	mov	r3, #0
   18c60:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   18c64:	e1d13000 	bics	r3, r1, r0
   18c68:	159f2018 	ldrne	r2, [pc, #24]	@ 18c88 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   18c6c:	15823028 	strne	r3, [r2, #40]	@ 0x28
   18c70:	e0100001 	ands	r0, r0, r1
   18c74:	159f300c 	ldrne	r3, [pc, #12]	@ 18c88 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   18c78:	1583001c 	strne	r0, [r3, #28]
   18c7c:	e3a03000 	mov	r3, #0
   18c80:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   18c84:	e12fff1e 	bx	lr
   18c88:	20200000 	.word	0x20200000

00018c8c <CGPIOPin::ReadAll()>:
   18c8c:	e3a03000 	mov	r3, #0
   18c90:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   18c94:	e59f2008 	ldr	r2, [pc, #8]	@ 18ca4 <CGPIOPin::ReadAll()+0x18>
   18c98:	e5920034 	ldr	r0, [r2, #52]	@ 0x34
   18c9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   18ca0:	e12fff1e 	bx	lr
   18ca4:	20200000 	.word	0x20200000

00018ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   18ca8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18cac:	e59f7084 	ldr	r7, [pc, #132]	@ 18d38 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   18cb0:	e1a04000 	mov	r4, r0
   18cb4:	e5973000 	ldr	r3, [r7]
   18cb8:	e1a05001 	mov	r5, r1
   18cbc:	e3530000 	cmp	r3, #0
   18cc0:	1a000015 	bne	18d1c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   18cc4:	e3a06000 	mov	r6, #0
   18cc8:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   18ccc:	e3550002 	cmp	r5, #2
   18cd0:	e5949008 	ldr	r9, [r4, #8]
   18cd4:	e59f8060 	ldr	r8, [pc, #96]	@ 18d3c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   18cd8:	8a000012 	bhi	18d28 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
   18cdc:	e59fa05c 	ldr	sl, [pc, #92]	@ 18d40 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   18ce0:	e3a00005 	mov	r0, #5
   18ce4:	e58a5094 	str	r5, [sl, #148]	@ 0x94
   18ce8:	ebfff38e 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
   18cec:	e594300c 	ldr	r3, [r4, #12]
   18cf0:	e3a00005 	mov	r0, #5
   18cf4:	e7893008 	str	r3, [r9, r8]
   18cf8:	ebfff38a 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
   18cfc:	e58a6094 	str	r6, [sl, #148]	@ 0x94
   18d00:	e7896008 	str	r6, [r9, r8]
   18d04:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   18d08:	e5973000 	ldr	r3, [r7]
   18d0c:	e3530000 	cmp	r3, #0
   18d10:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d14:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d18:	eafffb06 	b	17938 <LeaveCritical>
   18d1c:	e1a00003 	mov	r0, r3
   18d20:	ebfffada 	bl	17890 <EnterCritical>
   18d24:	eaffffe6 	b	18cc4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   18d28:	e59f1014 	ldr	r1, [pc, #20]	@ 18d44 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   18d2c:	e59f2014 	ldr	r2, [pc, #20]	@ 18d48 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xa0>
   18d30:	e2810f92 	add	r0, r1, #584	@ 0x248
   18d34:	ebffda7a 	bl	f724 <assertion_failed>
   18d38:	00020bfc 	.word	0x00020bfc
   18d3c:	20200098 	.word	0x20200098
   18d40:	20200000 	.word	0x20200000
   18d44:	0001e8b0 	.word	0x0001e8b0
   18d48:	00000196 	.word	0x00000196

00018d4c <CGPIOPin::SetAlternateFunction(unsigned int)>:
   18d4c:	e5903004 	ldr	r3, [r0, #4]
   18d50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18d54:	e3530035 	cmp	r3, #53	@ 0x35
   18d58:	8a00001e 	bhi	18dd8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   18d5c:	e59f2094 	ldr	r2, [pc, #148]	@ 18df8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   18d60:	e1a05001 	mov	r5, r1
   18d64:	e3510005 	cmp	r1, #5
   18d68:	e0821392 	umull	r1, r2, r2, r3
   18d6c:	e1a021a2 	lsr	r2, r2, #3
   18d70:	e2820302 	add	r0, r2, #134217728	@ 0x8000000
   18d74:	e0822102 	add	r2, r2, r2, lsl #2
   18d78:	e2800702 	add	r0, r0, #524288	@ 0x80000
   18d7c:	e0433082 	sub	r3, r3, r2, lsl #1
   18d80:	e1a06100 	lsl	r6, r0, #2
   18d84:	e0834083 	add	r4, r3, r3, lsl #1
   18d88:	8a000016 	bhi	18de8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   18d8c:	e59f7068 	ldr	r7, [pc, #104]	@ 18dfc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   18d90:	e5970000 	ldr	r0, [r7]
   18d94:	e3500000 	cmp	r0, #0
   18d98:	1a00000c 	bne	18dd0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   18d9c:	e3a02007 	mov	r2, #7
   18da0:	e5963000 	ldr	r3, [r6]
   18da4:	e1c33412 	bic	r3, r3, r2, lsl r4
   18da8:	e59f2050 	ldr	r2, [pc, #80]	@ 18e00 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   18dac:	e0822105 	add	r2, r2, r5, lsl #2
   18db0:	e5922274 	ldr	r2, [r2, #628]	@ 0x274
   18db4:	e1833412 	orr	r3, r3, r2, lsl r4
   18db8:	e5863000 	str	r3, [r6]
   18dbc:	e5973000 	ldr	r3, [r7]
   18dc0:	e3530000 	cmp	r3, #0
   18dc4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18dc8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18dcc:	eafffad9 	b	17938 <LeaveCritical>
   18dd0:	ebfffaae 	bl	17890 <EnterCritical>
   18dd4:	eafffff0 	b	18d9c <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   18dd8:	e59f1024 	ldr	r1, [pc, #36]	@ 18e04 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   18ddc:	e59f2024 	ldr	r2, [pc, #36]	@ 18e08 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   18de0:	e2810020 	add	r0, r1, #32
   18de4:	ebffda4e 	bl	f724 <assertion_failed>
   18de8:	e59f1014 	ldr	r1, [pc, #20]	@ 18e04 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   18dec:	e59f2018 	ldr	r2, [pc, #24]	@ 18e0c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   18df0:	e2810f95 	add	r0, r1, #596	@ 0x254
   18df4:	ebffda4a 	bl	f724 <assertion_failed>
   18df8:	cccccccd 	.word	0xcccccccd
   18dfc:	00020bfc 	.word	0x00020bfc
   18e00:	0001e8a0 	.word	0x0001e8a0
   18e04:	0001e8b0 	.word	0x0001e8b0
   18e08:	000001b2 	.word	0x000001b2
   18e0c:	000001b6 	.word	0x000001b6

00018e10 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   18e10:	e351000a 	cmp	r1, #10
   18e14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18e18:	8a00005c 	bhi	18f90 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   18e1c:	e3510001 	cmp	r1, #1
   18e20:	21a03001 	movcs	r3, r1
   18e24:	33a03001 	movcc	r3, #1
   18e28:	e1a06002 	mov	r6, r2
   18e2c:	e1a04000 	mov	r4, r0
   18e30:	e3a02000 	mov	r2, #0
   18e34:	e5c03010 	strb	r3, [r0, #16]
   18e38:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   18e3c:	e5d03010 	ldrb	r3, [r0, #16]
   18e40:	e2431005 	sub	r1, r3, #5
   18e44:	e6efc071 	uxtb	ip, r1
   18e48:	e35c0005 	cmp	ip, #5
   18e4c:	9a000031 	bls	18f18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
   18e50:	e3530002 	cmp	r3, #2
   18e54:	13a01000 	movne	r1, #0
   18e58:	02061001 	andeq	r1, r6, #1
   18e5c:	e3510000 	cmp	r1, #0
   18e60:	1a00004e 	bne	18fa0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>
   18e64:	e5943004 	ldr	r3, [r4, #4]
   18e68:	e3530035 	cmp	r3, #53	@ 0x35
   18e6c:	8a00004e 	bhi	18fac <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
   18e70:	e59f1144 	ldr	r1, [pc, #324]	@ 18fbc <CGPIOPin::SetMode(TGPIOMode, bool)+0x1ac>
   18e74:	e59f7144 	ldr	r7, [pc, #324]	@ 18fc0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b0>
   18e78:	e0812391 	umull	r2, r1, r1, r3
   18e7c:	e5970000 	ldr	r0, [r7]
   18e80:	e1a011a1 	lsr	r1, r1, #3
   18e84:	e2812302 	add	r2, r1, #134217728	@ 0x8000000
   18e88:	e0811101 	add	r1, r1, r1, lsl #2
   18e8c:	e0435081 	sub	r5, r3, r1, lsl #1
   18e90:	e2822702 	add	r2, r2, #524288	@ 0x80000
   18e94:	e3500000 	cmp	r0, #0
   18e98:	e1a08102 	lsl	r8, r2, #2
   18e9c:	e0855085 	add	r5, r5, r5, lsl #1
   18ea0:	1a000027 	bne	18f44 <CGPIOPin::SetMode(TGPIOMode, bool)+0x134>
   18ea4:	e5d42010 	ldrb	r2, [r4, #16]
   18ea8:	e3a01007 	mov	r1, #7
   18eac:	e2422002 	sub	r2, r2, #2
   18eb0:	e16f2f12 	clz	r2, r2
   18eb4:	e5983000 	ldr	r3, [r8]
   18eb8:	e1a022a2 	lsr	r2, r2, #5
   18ebc:	e1c33511 	bic	r3, r3, r1, lsl r5
   18ec0:	e1833512 	orr	r3, r3, r2, lsl r5
   18ec4:	e5883000 	str	r3, [r8]
   18ec8:	e5973000 	ldr	r3, [r7]
   18ecc:	e3530000 	cmp	r3, #0
   18ed0:	1a000017 	bne	18f34 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   18ed4:	e3560000 	cmp	r6, #0
   18ed8:	0a00000b 	beq	18f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   18edc:	e5d43010 	ldrb	r3, [r4, #16]
   18ee0:	e2433001 	sub	r3, r3, #1
   18ee4:	e3530003 	cmp	r3, #3
   18ee8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   18eec:	ea000006 	b	18f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   18ef0:	00018f00 	.word	0x00018f00
   18ef4:	00018f6c 	.word	0x00018f6c
   18ef8:	00018f5c 	.word	0x00018f5c
   18efc:	00018f4c 	.word	0x00018f4c
   18f00:	e3a01000 	mov	r1, #0
   18f04:	e1a00004 	mov	r0, r4
   18f08:	ebffff66 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   18f0c:	e3a03000 	mov	r3, #0
   18f10:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   18f14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18f18:	e1560002 	cmp	r6, r2
   18f1c:	1a000016 	bne	18f7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x16c>
   18f20:	e1a00004 	mov	r0, r4
   18f24:	ebffff88 	bl	18d4c <CGPIOPin::SetAlternateFunction(unsigned int)>
   18f28:	e3a03000 	mov	r3, #0
   18f2c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   18f30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18f34:	ebfffa7f 	bl	17938 <LeaveCritical>
   18f38:	e3560000 	cmp	r6, #0
   18f3c:	0afffff2 	beq	18f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   18f40:	eaffffe5 	b	18edc <CGPIOPin::SetMode(TGPIOMode, bool)+0xcc>
   18f44:	ebfffa51 	bl	17890 <EnterCritical>
   18f48:	eaffffd5 	b	18ea4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x94>
   18f4c:	e3a01001 	mov	r1, #1
   18f50:	e1a00004 	mov	r0, r4
   18f54:	ebffff53 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   18f58:	eaffffeb 	b	18f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   18f5c:	e3a01002 	mov	r1, #2
   18f60:	e1a00004 	mov	r0, r4
   18f64:	ebffff4f 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   18f68:	eaffffe7 	b	18f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   18f6c:	e3a01000 	mov	r1, #0
   18f70:	e1a00004 	mov	r0, r4
   18f74:	ebfffd49 	bl	184a0 <CGPIOPin::Write(unsigned int)>
   18f78:	eaffffe3 	b	18f0c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
   18f7c:	e1a01002 	mov	r1, r2
   18f80:	ebffff48 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   18f84:	e5d43010 	ldrb	r3, [r4, #16]
   18f88:	e2431005 	sub	r1, r3, #5
   18f8c:	eaffffe3 	b	18f20 <CGPIOPin::SetMode(TGPIOMode, bool)+0x110>
   18f90:	e59f102c 	ldr	r1, [pc, #44]	@ 18fc4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
   18f94:	e3a0204f 	mov	r2, #79	@ 0x4f
   18f98:	e2810f9f 	add	r0, r1, #636	@ 0x27c
   18f9c:	ebffd9e0 	bl	f724 <assertion_failed>
   18fa0:	e1a01002 	mov	r1, r2
   18fa4:	ebffff3f 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   18fa8:	eaffffad 	b	18e64 <CGPIOPin::SetMode(TGPIOMode, bool)+0x54>
   18fac:	e59f1010 	ldr	r1, [pc, #16]	@ 18fc4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
   18fb0:	e3a0206c 	mov	r2, #108	@ 0x6c
   18fb4:	e2810020 	add	r0, r1, #32
   18fb8:	ebffd9d9 	bl	f724 <assertion_failed>
   18fbc:	cccccccd 	.word	0xcccccccd
   18fc0:	00020bfc 	.word	0x00020bfc
   18fc4:	0001e8b0 	.word	0x0001e8b0

00018fc8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   18fc8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18fcc:	e3a0c006 	mov	ip, #6
   18fd0:	e3a0800b 	mov	r8, #11
   18fd4:	e3a0e000 	mov	lr, #0
   18fd8:	e59f7088 	ldr	r7, [pc, #136]	@ 19068 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
   18fdc:	e3510035 	cmp	r1, #53	@ 0x35
   18fe0:	e1a05001 	mov	r5, r1
   18fe4:	e1a04000 	mov	r4, r0
   18fe8:	e1a06002 	mov	r6, r2
   18fec:	e5c08010 	strb	r8, [r0, #16]
   18ff0:	e5803018 	str	r3, [r0, #24]
   18ff4:	e580e01c 	str	lr, [r0, #28]
   18ff8:	e5807000 	str	r7, [r0]
   18ffc:	e5c0c025 	strb	ip, [r0, #37]	@ 0x25
   19000:	e5c0c026 	strb	ip, [r0, #38]	@ 0x26
   19004:	e5801004 	str	r1, [r0, #4]
   19008:	8a00000b 	bhi	1903c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
   1900c:	e3a02001 	mov	r2, #1
   19010:	e1a032a5 	lsr	r3, r5, #5
   19014:	e205501f 	and	r5, r5, #31
   19018:	e1a03103 	lsl	r3, r3, #2
   1901c:	e1a05512 	lsl	r5, r2, r5
   19020:	e1a00004 	mov	r0, r4
   19024:	e1a01006 	mov	r1, r6
   19028:	e5843008 	str	r3, [r4, #8]
   1902c:	e584500c 	str	r5, [r4, #12]
   19030:	ebffff76 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   19034:	e1a00004 	mov	r0, r4
   19038:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1903c:	ebffe310 	bl	11c84 <CMachineInfo::Get()>
   19040:	e6ef1075 	uxtb	r1, r5
   19044:	ebffe263 	bl	119d8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   19048:	e3500035 	cmp	r0, #53	@ 0x35
   1904c:	e1a05000 	mov	r5, r0
   19050:	e5840004 	str	r0, [r4, #4]
   19054:	9affffec 	bls	1900c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   19058:	e3a02047 	mov	r2, #71	@ 0x47
   1905c:	e2871008 	add	r1, r7, #8
   19060:	e2870028 	add	r0, r7, #40	@ 0x28
   19064:	ebffd9ae 	bl	f724 <assertion_failed>
   19068:	0001e8a8 	.word	0x0001e8a8

0001906c <CGPIOPin::InterruptHandler()>:
   1906c:	e5d03010 	ldrb	r3, [r0, #16]
   19070:	e92d4010 	push	{r4, lr}
   19074:	e2432003 	sub	r2, r3, #3
   19078:	e3530001 	cmp	r3, #1
   1907c:	13520001 	cmpne	r2, #1
   19080:	8a000013 	bhi	190d4 <CGPIOPin::InterruptHandler()+0x68>
   19084:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   19088:	e3530005 	cmp	r3, #5
   1908c:	8a000005 	bhi	190a8 <CGPIOPin::InterruptHandler()+0x3c>
   19090:	e590301c 	ldr	r3, [r0, #28]
   19094:	e3530000 	cmp	r3, #0
   19098:	0a000009 	beq	190c4 <CGPIOPin::InterruptHandler()+0x58>
   1909c:	e8bd4010 	pop	{r4, lr}
   190a0:	e5900020 	ldr	r0, [r0, #32]
   190a4:	e12fff13 	bx	r3
   190a8:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   190ac:	e3530005 	cmp	r3, #5
   190b0:	9afffff6 	bls	19090 <CGPIOPin::InterruptHandler()+0x24>
   190b4:	e59f1028 	ldr	r1, [pc, #40]	@ 190e4 <CGPIOPin::InterruptHandler()+0x78>
   190b8:	e59f2028 	ldr	r2, [pc, #40]	@ 190e8 <CGPIOPin::InterruptHandler()+0x7c>
   190bc:	e2810fa5 	add	r0, r1, #660	@ 0x294
   190c0:	ebffd997 	bl	f724 <assertion_failed>
   190c4:	e59f1018 	ldr	r1, [pc, #24]	@ 190e4 <CGPIOPin::InterruptHandler()+0x78>
   190c8:	e59f201c 	ldr	r2, [pc, #28]	@ 190ec <CGPIOPin::InterruptHandler()+0x80>
   190cc:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   190d0:	ebffd993 	bl	f724 <assertion_failed>
   190d4:	e59f1008 	ldr	r1, [pc, #8]	@ 190e4 <CGPIOPin::InterruptHandler()+0x78>
   190d8:	e59f2010 	ldr	r2, [pc, #16]	@ 190f0 <CGPIOPin::InterruptHandler()+0x84>
   190dc:	e2810078 	add	r0, r1, #120	@ 0x78
   190e0:	ebffd98f 	bl	f724 <assertion_failed>
   190e4:	0001e8b0 	.word	0x0001e8b0
   190e8:	000001c6 	.word	0x000001c6
   190ec:	000001c9 	.word	0x000001c9
   190f0:	000001c3 	.word	0x000001c3

000190f4 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   190f4:	e3500035 	cmp	r0, #53	@ 0x35
   190f8:	e92d4070 	push	{r4, r5, r6, lr}
   190fc:	8a000017 	bhi	19160 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x6c>
   19100:	e3a02001 	mov	r2, #1
   19104:	e59f6064 	ldr	r6, [pc, #100]	@ 19170 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
   19108:	e59f4064 	ldr	r4, [pc, #100]	@ 19174 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   1910c:	e200301f 	and	r3, r0, #31
   19110:	e08442a0 	add	r4, r4, r0, lsr #5
   19114:	e5960000 	ldr	r0, [r6]
   19118:	e1a04104 	lsl	r4, r4, #2
   1911c:	e3500000 	cmp	r0, #0
   19120:	e1a05312 	lsl	r5, r2, r3
   19124:	1a00000b 	bne	19158 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   19128:	e1e02005 	mvn	r2, r5
   1912c:	e59f1044 	ldr	r1, [pc, #68]	@ 19178 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   19130:	e5943000 	ldr	r3, [r4]
   19134:	e0033002 	and	r3, r3, r2
   19138:	e484300c 	str	r3, [r4], #12
   1913c:	e1540001 	cmp	r4, r1
   19140:	9afffffa 	bls	19130 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   19144:	e5963000 	ldr	r3, [r6]
   19148:	e3530000 	cmp	r3, #0
   1914c:	08bd8070 	popeq	{r4, r5, r6, pc}
   19150:	e8bd4070 	pop	{r4, r5, r6, lr}
   19154:	eafff9f7 	b	17938 <LeaveCritical>
   19158:	ebfff9cc 	bl	17890 <EnterCritical>
   1915c:	eafffff1 	b	19128 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   19160:	e59f1014 	ldr	r1, [pc, #20]	@ 1917c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   19164:	e59f2014 	ldr	r2, [pc, #20]	@ 19180 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   19168:	e2810e2e 	add	r0, r1, #736	@ 0x2e0
   1916c:	ebffd96c 	bl	f724 <assertion_failed>
   19170:	00020bfc 	.word	0x00020bfc
   19174:	08080013 	.word	0x08080013
   19178:	2020008b 	.word	0x2020008b
   1917c:	0001e8b0 	.word	0x0001e8b0
   19180:	000001cf 	.word	0x000001cf

00019184 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   19184:	e3a02001 	mov	r2, #1
   19188:	e59f3004 	ldr	r3, [pc, #4]	@ 19194 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   1918c:	e5832000 	str	r2, [r3]
   19190:	e12fff1e 	bx	lr
   19194:	00020bfc 	.word	0x00020bfc

00019198 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)>:
   19198:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1919c:	e1a04000 	mov	r4, r0
   191a0:	e3a06000 	mov	r6, #0
   191a4:	e2809014 	add	r9, r0, #20
   191a8:	e580300c 	str	r3, [r0, #12]
   191ac:	e5801000 	str	r1, [r0]
   191b0:	e5c02008 	strb	r2, [r0, #8]
   191b4:	e5806004 	str	r6, [r0, #4]
   191b8:	e5c06010 	strb	r6, [r0, #16]
   191bc:	e284803c 	add	r8, r4, #60	@ 0x3c
   191c0:	e1a00009 	mov	r0, r9
   191c4:	e1a07003 	mov	r7, r3
   191c8:	e1a05001 	mov	r5, r1
   191cc:	ebfffc84 	bl	183e4 <CGPIOPin::CGPIOPin()>
   191d0:	e1a00008 	mov	r0, r8
   191d4:	ebfffc82 	bl	183e4 <CGPIOPin::CGPIOPin()>
   191d8:	ebffe2a9 	bl	11c84 <CMachineInfo::Get()>
   191dc:	e3a01004 	mov	r1, #4
   191e0:	ebffe1ad 	bl	1189c <CMachineInfo::GetClockRate(unsigned int) const>
   191e4:	e5943000 	ldr	r3, [r4]
   191e8:	e5840064 	str	r0, [r4, #100]	@ 0x64
   191ec:	e3530001 	cmp	r3, #1
   191f0:	e5846068 	str	r6, [r4, #104]	@ 0x68
   191f4:	e584606c 	str	r6, [r4, #108]	@ 0x6c
   191f8:	8a000030 	bhi	192c0 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x128>
   191fc:	e594300c 	ldr	r3, [r4, #12]
   19200:	e3530002 	cmp	r3, #2
   19204:	8a00002d 	bhi	192c0 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x128>
   19208:	e59f60d8 	ldr	r6, [pc, #216]	@ 192e8 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x150>
   1920c:	e0853085 	add	r3, r5, r5, lsl #1
   19210:	e0833007 	add	r3, r3, r7
   19214:	e7961183 	ldr	r1, [r6, r3, lsl #3]
   19218:	e1a0a085 	lsl	sl, r5, #1
   1921c:	e3510035 	cmp	r1, #53	@ 0x35
   19220:	8a000026 	bhi	192c0 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x128>
   19224:	e0863105 	add	r3, r6, r5, lsl #2
   19228:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
   1922c:	e3530000 	cmp	r3, #0
   19230:	e5843004 	str	r3, [r4, #4]
   19234:	0a000027 	beq	192d8 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x140>
   19238:	e1a00009 	mov	r0, r9
   1923c:	ebfffc76 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
   19240:	e3570002 	cmp	r7, #2
   19244:	03550000 	cmpeq	r5, #0
   19248:	03a0b006 	moveq	fp, #6
   1924c:	0a000002 	beq	1925c <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0xc4>
   19250:	e3550001 	cmp	r5, #1
   19254:	83a0b00a 	movhi	fp, #10
   19258:	93a0b005 	movls	fp, #5
   1925c:	e08aa005 	add	sl, sl, r5
   19260:	e3a02001 	mov	r2, #1
   19264:	e1a0100b 	mov	r1, fp
   19268:	e1a00009 	mov	r0, r9
   1926c:	e08aa007 	add	sl, sl, r7
   19270:	ebfffee6 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   19274:	e086618a 	add	r6, r6, sl, lsl #3
   19278:	e3a01002 	mov	r1, #2
   1927c:	e1a00009 	mov	r0, r9
   19280:	ebfffe88 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   19284:	e1a00008 	mov	r0, r8
   19288:	e5961004 	ldr	r1, [r6, #4]
   1928c:	ebfffc62 	bl	1841c <CGPIOPin::AssignPin(unsigned int)>
   19290:	e3a02001 	mov	r2, #1
   19294:	e1a0100b 	mov	r1, fp
   19298:	e1a00008 	mov	r0, r8
   1929c:	ebfffedb 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   192a0:	e3a01002 	mov	r1, #2
   192a4:	e1a00008 	mov	r0, r8
   192a8:	ebfffe7e 	bl	18ca8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   192ac:	e5943064 	ldr	r3, [r4, #100]	@ 0x64
   192b0:	e3530000 	cmp	r3, #0
   192b4:	13a03001 	movne	r3, #1
   192b8:	15c43010 	strbne	r3, [r4, #16]
   192bc:	0a000001 	beq	192c8 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x130>
   192c0:	e1a00004 	mov	r0, r4
   192c4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192c8:	e59f101c 	ldr	r1, [pc, #28]	@ 192ec <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x154>
   192cc:	e3a02085 	mov	r2, #133	@ 0x85
   192d0:	e2810024 	add	r0, r1, #36	@ 0x24
   192d4:	ebffd912 	bl	f724 <assertion_failed>
   192d8:	e3a0207b 	mov	r2, #123	@ 0x7b
   192dc:	e2861038 	add	r1, r6, #56	@ 0x38
   192e0:	e2860048 	add	r0, r6, #72	@ 0x48
   192e4:	ebffd90e 	bl	f724 <assertion_failed>
   192e8:	0001eba4 	.word	0x0001eba4
   192ec:	0001ebdc 	.word	0x0001ebdc

000192f0 <CI2CMaster::Initialize()>:
   192f0:	e92d4070 	push	{r4, r5, r6, lr}
   192f4:	e5d05010 	ldrb	r5, [r0, #16]
   192f8:	e3550000 	cmp	r5, #0
   192fc:	0a00000d 	beq	19338 <CI2CMaster::Initialize()+0x48>
   19300:	e5d02008 	ldrb	r2, [r0, #8]
   19304:	e59f3034 	ldr	r3, [pc, #52]	@ 19340 <CI2CMaster::Initialize()+0x50>
   19308:	e3520000 	cmp	r2, #0
   1930c:	e59f1030 	ldr	r1, [pc, #48]	@ 19344 <CI2CMaster::Initialize()+0x54>
   19310:	e1a04000 	mov	r4, r0
   19314:	11a01003 	movne	r1, r3
   19318:	e3a06000 	mov	r6, #0
   1931c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   19320:	e5801068 	str	r1, [r0, #104]	@ 0x68
   19324:	e5900064 	ldr	r0, [r0, #100]	@ 0x64
   19328:	eb00039e 	bl	1a1a8 <__udivsi3>
   1932c:	e5943004 	ldr	r3, [r4, #4]
   19330:	e5830014 	str	r0, [r3, #20]
   19334:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   19338:	e1a00005 	mov	r0, r5
   1933c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19340:	00061a80 	.word	0x00061a80
   19344:	000186a0 	.word	0x000186a0

00019348 <CI2CMaster::SetClock(unsigned int)>:
   19348:	e5d02010 	ldrb	r2, [r0, #16]
   1934c:	e92d4070 	push	{r4, r5, r6, lr}
   19350:	e3520000 	cmp	r2, #0
   19354:	0a00000c 	beq	1938c <CI2CMaster::SetClock(unsigned int)+0x44>
   19358:	e3a05000 	mov	r5, #0
   1935c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   19360:	e1510005 	cmp	r1, r5
   19364:	0a00000c 	beq	1939c <CI2CMaster::SetClock(unsigned int)+0x54>
   19368:	e1a04000 	mov	r4, r0
   1936c:	e5900064 	ldr	r0, [r0, #100]	@ 0x64
   19370:	e5841068 	str	r1, [r4, #104]	@ 0x68
   19374:	eb00038b 	bl	1a1a8 <__udivsi3>
   19378:	e5943004 	ldr	r3, [r4, #4]
   1937c:	e6ff0070 	uxth	r0, r0
   19380:	e5830014 	str	r0, [r3, #20]
   19384:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   19388:	e8bd8070 	pop	{r4, r5, r6, pc}
   1938c:	e59f1018 	ldr	r1, [pc, #24]	@ 193ac <CI2CMaster::SetClock(unsigned int)+0x64>
   19390:	e3a020a5 	mov	r2, #165	@ 0xa5
   19394:	e281003c 	add	r0, r1, #60	@ 0x3c
   19398:	ebffd8e1 	bl	f724 <assertion_failed>
   1939c:	e59f1008 	ldr	r1, [pc, #8]	@ 193ac <CI2CMaster::SetClock(unsigned int)+0x64>
   193a0:	e3a020a9 	mov	r2, #169	@ 0xa9
   193a4:	e2810048 	add	r0, r1, #72	@ 0x48
   193a8:	ebffd8dd 	bl	f724 <assertion_failed>
   193ac:	0001ebdc 	.word	0x0001ebdc

000193b0 <CI2CMaster::Read(unsigned char, void*, unsigned int)>:
   193b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   193b4:	e1a05003 	mov	r5, r3
   193b8:	e5d03010 	ldrb	r3, [r0, #16]
   193bc:	e3530000 	cmp	r3, #0
   193c0:	0a000066 	beq	19560 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1b0>
   193c4:	e16f3f15 	clz	r3, r5
   193c8:	e1a032a3 	lsr	r3, r3, #5
   193cc:	e19333a1 	orrs	r3, r3, r1, lsr #7
   193d0:	e1a06001 	mov	r6, r1
   193d4:	1a000069 	bne	19580 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1d0>
   193d8:	e1a04000 	mov	r4, r0
   193dc:	e590006c 	ldr	r0, [r0, #108]	@ 0x6c
   193e0:	e1a07002 	mov	r7, r2
   193e4:	e3500000 	cmp	r0, #0
   193e8:	1a000057 	bne	1954c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x19c>
   193ec:	e3570000 	cmp	r7, #0
   193f0:	0a00005e 	beq	19570 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1c0>
   193f4:	e3a02000 	mov	r2, #0
   193f8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   193fc:	e3a01020 	mov	r1, #32
   19400:	e5943004 	ldr	r3, [r4, #4]
   19404:	e583600c 	str	r6, [r3, #12]
   19408:	e5943004 	ldr	r3, [r4, #4]
   1940c:	e5831000 	str	r1, [r3]
   19410:	e5943004 	ldr	r3, [r4, #4]
   19414:	e59f116c 	ldr	r1, [pc, #364]	@ 19588 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1d8>
   19418:	e5831004 	str	r1, [r3, #4]
   1941c:	e5943004 	ldr	r3, [r4, #4]
   19420:	e59f1164 	ldr	r1, [pc, #356]	@ 1958c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1dc>
   19424:	e5835008 	str	r5, [r3, #8]
   19428:	e5943004 	ldr	r3, [r4, #4]
   1942c:	e5831000 	str	r1, [r3]
   19430:	e5941004 	ldr	r1, [r4, #4]
   19434:	e5913004 	ldr	r3, [r1, #4]
   19438:	e2136002 	ands	r6, r3, #2
   1943c:	11a06002 	movne	r6, r2
   19440:	1281c004 	addne	ip, r1, #4
   19444:	1a00002f 	bne	19508 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x158>
   19448:	e281c004 	add	ip, r1, #4
   1944c:	e59c2000 	ldr	r2, [ip]
   19450:	e1a0300c 	mov	r3, ip
   19454:	e3120020 	tst	r2, #32
   19458:	11a0e007 	movne	lr, r7
   1945c:	0a00000c 	beq	19494 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xe4>
   19460:	e5911010 	ldr	r1, [r1, #16]
   19464:	e4ce1001 	strb	r1, [lr], #1
   19468:	e5941004 	ldr	r1, [r4, #4]
   1946c:	e5913004 	ldr	r3, [r1, #4]
   19470:	e281c004 	add	ip, r1, #4
   19474:	e3130020 	tst	r3, #32
   19478:	e1a0300c 	mov	r3, ip
   1947c:	1afffff7 	bne	19460 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xb0>
   19480:	e045500e 	sub	r5, r5, lr
   19484:	e086600e 	add	r6, r6, lr
   19488:	e0855007 	add	r5, r5, r7
   1948c:	e0466007 	sub	r6, r6, r7
   19490:	e1a0700e 	mov	r7, lr
   19494:	e59c2000 	ldr	r2, [ip]
   19498:	e3120002 	tst	r2, #2
   1949c:	0affffea 	beq	1944c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x9c>
   194a0:	e3550000 	cmp	r5, #0
   194a4:	1a000017 	bne	19508 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x158>
   194a8:	e5932000 	ldr	r2, [r3]
   194ac:	e3120c01 	tst	r2, #256	@ 0x100
   194b0:	0a000019 	beq	1951c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x16c>
   194b4:	e3a02c01 	mov	r2, #256	@ 0x100
   194b8:	e3e06001 	mvn	r6, #1
   194bc:	e5832000 	str	r2, [r3]
   194c0:	e5943004 	ldr	r3, [r4, #4]
   194c4:	e2833004 	add	r3, r3, #4
   194c8:	e3a01002 	mov	r1, #2
   194cc:	e3a02000 	mov	r2, #0
   194d0:	e5831000 	str	r1, [r3]
   194d4:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   194d8:	e594306c 	ldr	r3, [r4, #108]	@ 0x6c
   194dc:	e1530002 	cmp	r3, r2
   194e0:	1a00001b 	bne	19554 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1a4>
   194e4:	e1a00006 	mov	r0, r6
   194e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   194ec:	e5913010 	ldr	r3, [r1, #16]
   194f0:	e2555001 	subs	r5, r5, #1
   194f4:	e4c73001 	strb	r3, [r7], #1
   194f8:	e2866001 	add	r6, r6, #1
   194fc:	0a00000c 	beq	19534 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x184>
   19500:	e5941004 	ldr	r1, [r4, #4]
   19504:	e281c004 	add	ip, r1, #4
   19508:	e59c2000 	ldr	r2, [ip]
   1950c:	e1a0300c 	mov	r3, ip
   19510:	e3120020 	tst	r2, #32
   19514:	1afffff4 	bne	194ec <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x13c>
   19518:	eaffffe2 	b	194a8 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xf8>
   1951c:	e3120c02 	tst	r2, #512	@ 0x200
   19520:	13e06002 	mvnne	r6, #2
   19524:	1affffe7 	bne	194c8 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x118>
   19528:	e3550000 	cmp	r5, #0
   1952c:	13e06003 	mvnne	r6, #3
   19530:	eaffffe4 	b	194c8 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x118>
   19534:	e5943004 	ldr	r3, [r4, #4]
   19538:	e5932004 	ldr	r2, [r3, #4]
   1953c:	e2833004 	add	r3, r3, #4
   19540:	e3120c01 	tst	r2, #256	@ 0x100
   19544:	0afffff4 	beq	1951c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x16c>
   19548:	eaffffd9 	b	194b4 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x104>
   1954c:	ebfff8cf 	bl	17890 <EnterCritical>
   19550:	eaffffa5 	b	193ec <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x3c>
   19554:	ebfff8f7 	bl	17938 <LeaveCritical>
   19558:	e1a00006 	mov	r0, r6
   1955c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19560:	e59f1028 	ldr	r1, [pc, #40]	@ 19590 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1e0>
   19564:	e3a020b4 	mov	r2, #180	@ 0xb4
   19568:	e281003c 	add	r0, r1, #60	@ 0x3c
   1956c:	ebffd86c 	bl	f724 <assertion_failed>
   19570:	e59f1018 	ldr	r1, [pc, #24]	@ 19590 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1e0>
   19574:	e3a020c3 	mov	r2, #195	@ 0xc3
   19578:	e2810058 	add	r0, r1, #88	@ 0x58
   1957c:	ebffd868 	bl	f724 <assertion_failed>
   19580:	e3e06000 	mvn	r6, #0
   19584:	eaffffd6 	b	194e4 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x134>
   19588:	00000302 	.word	0x00000302
   1958c:	00008081 	.word	0x00008081
   19590:	0001ebdc 	.word	0x0001ebdc

00019594 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>:
   19594:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19598:	e1a04003 	mov	r4, r3
   1959c:	e5d03010 	ldrb	r3, [r0, #16]
   195a0:	e3530000 	cmp	r3, #0
   195a4:	0a00005c 	beq	1971c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x188>
   195a8:	e3110080 	tst	r1, #128	@ 0x80
   195ac:	e1a08001 	mov	r8, r1
   195b0:	1a00005d 	bne	1972c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x198>
   195b4:	e2543000 	subs	r3, r4, #0
   195b8:	13a03001 	movne	r3, #1
   195bc:	e3520000 	cmp	r2, #0
   195c0:	13a03000 	movne	r3, #0
   195c4:	e3530000 	cmp	r3, #0
   195c8:	e1a06002 	mov	r6, r2
   195cc:	1a000056 	bne	1972c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x198>
   195d0:	e1a07000 	mov	r7, r0
   195d4:	e590006c 	ldr	r0, [r0, #108]	@ 0x6c
   195d8:	e3500000 	cmp	r0, #0
   195dc:	1a00004a 	bne	1970c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x178>
   195e0:	e3a05000 	mov	r5, #0
   195e4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   195e8:	e3a02020 	mov	r2, #32
   195ec:	e5973004 	ldr	r3, [r7, #4]
   195f0:	e1540005 	cmp	r4, r5
   195f4:	e583800c 	str	r8, [r3, #12]
   195f8:	e5973004 	ldr	r3, [r7, #4]
   195fc:	e5832000 	str	r2, [r3]
   19600:	e5973004 	ldr	r3, [r7, #4]
   19604:	e59f2128 	ldr	r2, [pc, #296]	@ 19734 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x1a0>
   19608:	e5832004 	str	r2, [r3, #4]
   1960c:	e5973004 	ldr	r3, [r7, #4]
   19610:	e5834008 	str	r4, [r3, #8]
   19614:	0a00003e 	beq	19714 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x180>
   19618:	e2544001 	subs	r4, r4, #1
   1961c:	13a03001 	movne	r3, #1
   19620:	03a03000 	moveq	r3, #0
   19624:	e2855001 	add	r5, r5, #1
   19628:	e355000f 	cmp	r5, #15
   1962c:	83a03000 	movhi	r3, #0
   19630:	92033001 	andls	r3, r3, #1
   19634:	e4d61001 	ldrb	r1, [r6], #1
   19638:	e5972004 	ldr	r2, [r7, #4]
   1963c:	e3530000 	cmp	r3, #0
   19640:	e5821010 	str	r1, [r2, #16]
   19644:	1afffff3 	bne	19618 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x84>
   19648:	e5973004 	ldr	r3, [r7, #4]
   1964c:	e59f20e4 	ldr	r2, [pc, #228]	@ 19738 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x1a4>
   19650:	e5832000 	str	r2, [r3]
   19654:	e5973004 	ldr	r3, [r7, #4]
   19658:	e5932004 	ldr	r2, [r3, #4]
   1965c:	e3120002 	tst	r2, #2
   19660:	e2832004 	add	r2, r3, #4
   19664:	1a00000f 	bne	196a8 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x114>
   19668:	e3540000 	cmp	r4, #0
   1966c:	1a000007 	bne	19690 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xfc>
   19670:	ea000009 	b	1969c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x108>
   19674:	e4d62001 	ldrb	r2, [r6], #1
   19678:	e2544001 	subs	r4, r4, #1
   1967c:	e5832010 	str	r2, [r3, #16]
   19680:	e5973004 	ldr	r3, [r7, #4]
   19684:	e2855001 	add	r5, r5, #1
   19688:	e2832004 	add	r2, r3, #4
   1968c:	0a000002 	beq	1969c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x108>
   19690:	e5921000 	ldr	r1, [r2]
   19694:	e3110010 	tst	r1, #16
   19698:	1afffff5 	bne	19674 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xe0>
   1969c:	e5921000 	ldr	r1, [r2]
   196a0:	e3110002 	tst	r1, #2
   196a4:	0affffef 	beq	19668 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xd4>
   196a8:	e5921000 	ldr	r1, [r2]
   196ac:	e3110c01 	tst	r1, #256	@ 0x100
   196b0:	1a00000d 	bne	196ec <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x158>
   196b4:	e3110c02 	tst	r1, #512	@ 0x200
   196b8:	13e05002 	mvnne	r5, #2
   196bc:	1a000001 	bne	196c8 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x134>
   196c0:	e3540000 	cmp	r4, #0
   196c4:	13e05003 	mvnne	r5, #3
   196c8:	e3a01002 	mov	r1, #2
   196cc:	e3a02000 	mov	r2, #0
   196d0:	e5831004 	str	r1, [r3, #4]
   196d4:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   196d8:	e597306c 	ldr	r3, [r7, #108]	@ 0x6c
   196dc:	e1530002 	cmp	r3, r2
   196e0:	1a000006 	bne	19700 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x16c>
   196e4:	e1a00005 	mov	r0, r5
   196e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   196ec:	e3a03c01 	mov	r3, #256	@ 0x100
   196f0:	e5823000 	str	r3, [r2]
   196f4:	e3e05001 	mvn	r5, #1
   196f8:	e5973004 	ldr	r3, [r7, #4]
   196fc:	eafffff1 	b	196c8 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x134>
   19700:	ebfff88c 	bl	17938 <LeaveCritical>
   19704:	e1a00005 	mov	r0, r5
   19708:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1970c:	ebfff85f 	bl	17890 <EnterCritical>
   19710:	eaffffb2 	b	195e0 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x4c>
   19714:	e1a05004 	mov	r5, r4
   19718:	eaffffca 	b	19648 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xb4>
   1971c:	e59f1018 	ldr	r1, [pc, #24]	@ 1973c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x1a8>
   19720:	e3a02f41 	mov	r2, #260	@ 0x104
   19724:	e281003c 	add	r0, r1, #60	@ 0x3c
   19728:	ebffd7fd 	bl	f724 <assertion_failed>
   1972c:	e3e05000 	mvn	r5, #0
   19730:	eaffffeb 	b	196e4 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x150>
   19734:	00000302 	.word	0x00000302
   19738:	00008080 	.word	0x00008080
   1973c:	0001ebdc 	.word	0x0001ebdc

00019740 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)>:
   19740:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19744:	e1a08003 	mov	r8, r3
   19748:	e5d03010 	ldrb	r3, [r0, #16]
   1974c:	e59d7020 	ldr	r7, [sp, #32]
   19750:	e3530000 	cmp	r3, #0
   19754:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
   19758:	0a00008b 	beq	1998c <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x24c>
   1975c:	e3110080 	tst	r1, #128	@ 0x80
   19760:	e1a09001 	mov	r9, r1
   19764:	1a000090 	bne	199ac <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x26c>
   19768:	e2483001 	sub	r3, r8, #1
   1976c:	e353000f 	cmp	r3, #15
   19770:	8a00008d 	bhi	199ac <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x26c>
   19774:	e3550000 	cmp	r5, #0
   19778:	13520000 	cmpne	r2, #0
   1977c:	03a03001 	moveq	r3, #1
   19780:	13a03000 	movne	r3, #0
   19784:	e3570000 	cmp	r7, #0
   19788:	03833001 	orreq	r3, r3, #1
   1978c:	e3530000 	cmp	r3, #0
   19790:	e1a06002 	mov	r6, r2
   19794:	1a000084 	bne	199ac <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x26c>
   19798:	e1a04000 	mov	r4, r0
   1979c:	e590006c 	ldr	r0, [r0, #108]	@ 0x6c
   197a0:	e3500000 	cmp	r0, #0
   197a4:	1a000073 	bne	19978 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x238>
   197a8:	e3a03000 	mov	r3, #0
   197ac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   197b0:	e3a02020 	mov	r2, #32
   197b4:	e5943004 	ldr	r3, [r4, #4]
   197b8:	e583900c 	str	r9, [r3, #12]
   197bc:	e5943004 	ldr	r3, [r4, #4]
   197c0:	e5832000 	str	r2, [r3]
   197c4:	e5943004 	ldr	r3, [r4, #4]
   197c8:	e59f21e4 	ldr	r2, [pc, #484]	@ 199b4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x274>
   197cc:	e5832004 	str	r2, [r3, #4]
   197d0:	e5943004 	ldr	r3, [r4, #4]
   197d4:	e5838008 	str	r8, [r3, #8]
   197d8:	e0863008 	add	r3, r6, r8
   197dc:	e4d61001 	ldrb	r1, [r6], #1
   197e0:	e5942004 	ldr	r2, [r4, #4]
   197e4:	e1560003 	cmp	r6, r3
   197e8:	e5821010 	str	r1, [r2, #16]
   197ec:	1afffffa 	bne	197dc <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x9c>
   197f0:	e5943004 	ldr	r3, [r4, #4]
   197f4:	e59f21bc 	ldr	r2, [pc, #444]	@ 199b8 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x278>
   197f8:	e5832000 	str	r2, [r3]
   197fc:	e5943004 	ldr	r3, [r4, #4]
   19800:	e2832004 	add	r2, r3, #4
   19804:	ea000002 	b	19814 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0xd4>
   19808:	e5921000 	ldr	r1, [r2]
   1980c:	e3110002 	tst	r1, #2
   19810:	1a000002 	bne	19820 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0xe0>
   19814:	e5921000 	ldr	r1, [r2]
   19818:	e3110001 	tst	r1, #1
   1981c:	0afffff9 	beq	19808 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0xc8>
   19820:	e5835008 	str	r5, [r3, #8]
   19824:	e5943004 	ldr	r3, [r4, #4]
   19828:	e59f218c 	ldr	r2, [pc, #396]	@ 199bc <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x27c>
   1982c:	e5832000 	str	r2, [r3]
   19830:	e5941068 	ldr	r1, [r4, #104]	@ 0x68
   19834:	e3510000 	cmp	r1, #0
   19838:	0a000057 	beq	1999c <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x25c>
   1983c:	e2888001 	add	r8, r8, #1
   19840:	e0883388 	add	r3, r8, r8, lsl #7
   19844:	e0883103 	add	r3, r8, r3, lsl #2
   19848:	e0833203 	add	r3, r3, r3, lsl #4
   1984c:	e0888203 	add	r8, r8, r3, lsl #4
   19850:	e1a00308 	lsl	r0, r8, #6
   19854:	eb000253 	bl	1a1a8 <__udivsi3>
   19858:	ebfff0b2 	bl	15b28 <CTimer::SimpleusDelay(unsigned int)>
   1985c:	e5943004 	ldr	r3, [r4, #4]
   19860:	e5932004 	ldr	r2, [r3, #4]
   19864:	e2126002 	ands	r6, r2, #2
   19868:	13a06000 	movne	r6, #0
   1986c:	12832004 	addne	r2, r3, #4
   19870:	1a00002f 	bne	19934 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1f4>
   19874:	e2832004 	add	r2, r3, #4
   19878:	e5921000 	ldr	r1, [r2]
   1987c:	e1a0c002 	mov	ip, r2
   19880:	e3110020 	tst	r1, #32
   19884:	11a01007 	movne	r1, r7
   19888:	0a00000c 	beq	198c0 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x180>
   1988c:	e5933010 	ldr	r3, [r3, #16]
   19890:	e4c13001 	strb	r3, [r1], #1
   19894:	e5943004 	ldr	r3, [r4, #4]
   19898:	e593c004 	ldr	ip, [r3, #4]
   1989c:	e2832004 	add	r2, r3, #4
   198a0:	e31c0020 	tst	ip, #32
   198a4:	e1a0c002 	mov	ip, r2
   198a8:	1afffff7 	bne	1988c <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x14c>
   198ac:	e0455001 	sub	r5, r5, r1
   198b0:	e0866001 	add	r6, r6, r1
   198b4:	e0875005 	add	r5, r7, r5
   198b8:	e0466007 	sub	r6, r6, r7
   198bc:	e1a07001 	mov	r7, r1
   198c0:	e5921000 	ldr	r1, [r2]
   198c4:	e3110002 	tst	r1, #2
   198c8:	0affffea 	beq	19878 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x138>
   198cc:	e3550000 	cmp	r5, #0
   198d0:	1a000017 	bne	19934 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1f4>
   198d4:	e59c3000 	ldr	r3, [ip]
   198d8:	e3130c01 	tst	r3, #256	@ 0x100
   198dc:	0a000019 	beq	19948 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x208>
   198e0:	e3a03c01 	mov	r3, #256	@ 0x100
   198e4:	e3e06001 	mvn	r6, #1
   198e8:	e58c3000 	str	r3, [ip]
   198ec:	e594c004 	ldr	ip, [r4, #4]
   198f0:	e28cc004 	add	ip, ip, #4
   198f4:	e3a02002 	mov	r2, #2
   198f8:	e3a03000 	mov	r3, #0
   198fc:	e58c2000 	str	r2, [ip]
   19900:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   19904:	e594306c 	ldr	r3, [r4, #108]	@ 0x6c
   19908:	e3530000 	cmp	r3, #0
   1990c:	1a00001b 	bne	19980 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x240>
   19910:	e1a00006 	mov	r0, r6
   19914:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19918:	e5933010 	ldr	r3, [r3, #16]
   1991c:	e2555001 	subs	r5, r5, #1
   19920:	e4c73001 	strb	r3, [r7], #1
   19924:	e2866001 	add	r6, r6, #1
   19928:	0a00000c 	beq	19960 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x220>
   1992c:	e5943004 	ldr	r3, [r4, #4]
   19930:	e2832004 	add	r2, r3, #4
   19934:	e5921000 	ldr	r1, [r2]
   19938:	e1a0c002 	mov	ip, r2
   1993c:	e3110020 	tst	r1, #32
   19940:	1afffff4 	bne	19918 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1d8>
   19944:	eaffffe2 	b	198d4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x194>
   19948:	e3130c02 	tst	r3, #512	@ 0x200
   1994c:	13e06002 	mvnne	r6, #2
   19950:	1affffe7 	bne	198f4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1b4>
   19954:	e3550000 	cmp	r5, #0
   19958:	13e06003 	mvnne	r6, #3
   1995c:	eaffffe4 	b	198f4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1b4>
   19960:	e594c004 	ldr	ip, [r4, #4]
   19964:	e59c3004 	ldr	r3, [ip, #4]
   19968:	e28cc004 	add	ip, ip, #4
   1996c:	e3130c01 	tst	r3, #256	@ 0x100
   19970:	0afffff4 	beq	19948 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x208>
   19974:	eaffffd9 	b	198e0 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1a0>
   19978:	ebfff7c4 	bl	17890 <EnterCritical>
   1997c:	eaffff89 	b	197a8 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x68>
   19980:	ebfff7ec 	bl	17938 <LeaveCritical>
   19984:	e1a00006 	mov	r0, r6
   19988:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1998c:	e59f102c 	ldr	r1, [pc, #44]	@ 199c0 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x280>
   19990:	e59f202c 	ldr	r2, [pc, #44]	@ 199c4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x284>
   19994:	e281003c 	add	r0, r1, #60	@ 0x3c
   19998:	ebffd761 	bl	f724 <assertion_failed>
   1999c:	e59f101c 	ldr	r1, [pc, #28]	@ 199c0 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x280>
   199a0:	e59f2020 	ldr	r2, [pc, #32]	@ 199c8 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x288>
   199a4:	e2810064 	add	r0, r1, #100	@ 0x64
   199a8:	ebffd75d 	bl	f724 <assertion_failed>
   199ac:	e3e06000 	mvn	r6, #0
   199b0:	eaffffd6 	b	19910 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1d0>
   199b4:	00000302 	.word	0x00000302
   199b8:	00008080 	.word	0x00008080
   199bc:	00008081 	.word	0x00008081
   199c0:	0001ebdc 	.word	0x0001ebdc
   199c4:	00000157 	.word	0x00000157
   199c8:	0000018e 	.word	0x0000018e

000199cc <CI2CMaster::~CI2CMaster()>:
   199cc:	e5d03010 	ldrb	r3, [r0, #16]
   199d0:	e92d4070 	push	{r4, r5, r6, lr}
   199d4:	e3530000 	cmp	r3, #0
   199d8:	e1a04000 	mov	r4, r0
   199dc:	1a000009 	bne	19a08 <CI2CMaster::~CI2CMaster()+0x3c>
   199e0:	e2805014 	add	r5, r0, #20
   199e4:	e280603c 	add	r6, r0, #60	@ 0x3c
   199e8:	e3a03000 	mov	r3, #0
   199ec:	e1a00006 	mov	r0, r6
   199f0:	e5843004 	str	r3, [r4, #4]
   199f4:	ebfffa73 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   199f8:	e1a00005 	mov	r0, r5
   199fc:	ebfffa71 	bl	183c8 <CGPIOPin::~CGPIOPin()>
   19a00:	e1a00004 	mov	r0, r4
   19a04:	e8bd8070 	pop	{r4, r5, r6, pc}
   19a08:	e3a02001 	mov	r2, #1
   19a0c:	e2805014 	add	r5, r0, #20
   19a10:	e1a01002 	mov	r1, r2
   19a14:	e1a00005 	mov	r0, r5
   19a18:	ebfffcfc 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   19a1c:	e3a02001 	mov	r2, #1
   19a20:	e284603c 	add	r6, r4, #60	@ 0x3c
   19a24:	e1a01002 	mov	r1, r2
   19a28:	e1a00006 	mov	r0, r6
   19a2c:	ebfffcf7 	bl	18e10 <CGPIOPin::SetMode(TGPIOMode, bool)>
   19a30:	e3a03000 	mov	r3, #0
   19a34:	e5c43010 	strb	r3, [r4, #16]
   19a38:	eaffffea 	b	199e8 <CI2CMaster::~CI2CMaster()+0x1c>

00019a3c <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   19a3c:	e92d4010 	push	{r4, lr}
   19a40:	e1a04000 	mov	r4, r0
   19a44:	e1a02001 	mov	r2, r1
   19a48:	e3a01008 	mov	r1, #8
   19a4c:	eb00015b 	bl	19fc0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   19a50:	e1a00004 	mov	r0, r4
   19a54:	e8bd8010 	pop	{r4, pc}

00019a58 <CBcmPropertyTags::~CBcmPropertyTags()>:
   19a58:	e92d4010 	push	{r4, lr}
   19a5c:	e1a04000 	mov	r4, r0
   19a60:	eb000159 	bl	19fcc <CBcmMailBox::~CBcmMailBox()>
   19a64:	e1a00004 	mov	r0, r4
   19a68:	e8bd8010 	pop	{r4, pc}

00019a6c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   19a6c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a70:	e2518000 	subs	r8, r1, #0
   19a74:	0a000034 	beq	19b4c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   19a78:	e352000f 	cmp	r2, #15
   19a7c:	e1a05002 	mov	r5, r2
   19a80:	9a000035 	bls	19b5c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   19a84:	e2126003 	ands	r6, r2, #3
   19a88:	e282700c 	add	r7, r2, #12
   19a8c:	1a000036 	bne	19b6c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   19a90:	e1a0a000 	mov	sl, r0
   19a94:	e1a00006 	mov	r0, r6
   19a98:	ebfff74c 	bl	177d0 <CMemorySystem::GetCoherentPage(unsigned int)>
   19a9c:	e1a03427 	lsr	r3, r7, #8
   19aa0:	e5c03001 	strb	r3, [r0, #1]
   19aa4:	e5c07000 	strb	r7, [r0]
   19aa8:	e1a03827 	lsr	r3, r7, #16
   19aac:	e2809008 	add	r9, r0, #8
   19ab0:	e1a07c27 	lsr	r7, r7, #24
   19ab4:	e5c06004 	strb	r6, [r0, #4]
   19ab8:	e5c06005 	strb	r6, [r0, #5]
   19abc:	e5c06006 	strb	r6, [r0, #6]
   19ac0:	e5c06007 	strb	r6, [r0, #7]
   19ac4:	e5c03002 	strb	r3, [r0, #2]
   19ac8:	e5c07003 	strb	r7, [r0, #3]
   19acc:	e1a04000 	mov	r4, r0
   19ad0:	e1a02005 	mov	r2, r5
   19ad4:	e1a01008 	mov	r1, r8
   19ad8:	e1a00009 	mov	r0, r9
   19adc:	ebfff296 	bl	1653c <memcpy>
   19ae0:	e7896005 	str	r6, [r9, r5]
   19ae4:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   19ae8:	e3c47103 	bic	r7, r4, #-1073741824	@ 0xc0000000
   19aec:	e3877101 	orr	r7, r7, #1073741824	@ 0x40000000
   19af0:	e1a0000a 	mov	r0, sl
   19af4:	e1a01007 	mov	r1, r7
   19af8:	eb000134 	bl	19fd0 <CBcmMailBox::WriteRead(unsigned int)>
   19afc:	e1500007 	cmp	r0, r7
   19b00:	0a000001 	beq	19b0c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   19b04:	e3a00000 	mov	r0, #0
   19b08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b0c:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   19b10:	e5d42005 	ldrb	r2, [r4, #5]
   19b14:	e5d43004 	ldrb	r3, [r4, #4]
   19b18:	e1833402 	orr	r3, r3, r2, lsl #8
   19b1c:	e5d42006 	ldrb	r2, [r4, #6]
   19b20:	e1833802 	orr	r3, r3, r2, lsl #16
   19b24:	e5d42007 	ldrb	r2, [r4, #7]
   19b28:	e1833c02 	orr	r3, r3, r2, lsl #24
   19b2c:	e3530102 	cmp	r3, #-2147483648	@ 0x80000000
   19b30:	1afffff3 	bne	19b04 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   19b34:	e1a02005 	mov	r2, r5
   19b38:	e1a01009 	mov	r1, r9
   19b3c:	e1a00008 	mov	r0, r8
   19b40:	ebfff27d 	bl	1653c <memcpy>
   19b44:	e3a00001 	mov	r0, #1
   19b48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b4c:	e59f1028 	ldr	r1, [pc, #40]	@ 19b7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   19b50:	e3a0204b 	mov	r2, #75	@ 0x4b
   19b54:	e2810014 	add	r0, r1, #20
   19b58:	ebffd6f1 	bl	f724 <assertion_failed>
   19b5c:	e59f1018 	ldr	r1, [pc, #24]	@ 19b7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   19b60:	e3a0204c 	mov	r2, #76	@ 0x4c
   19b64:	e2810020 	add	r0, r1, #32
   19b68:	ebffd6ed 	bl	f724 <assertion_failed>
   19b6c:	e59f1008 	ldr	r1, [pc, #8]	@ 19b7c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   19b70:	e3a0204e 	mov	r2, #78	@ 0x4e
   19b74:	e281004c 	add	r0, r1, #76	@ 0x4c
   19b78:	ebffd6e9 	bl	f724 <assertion_failed>
   19b7c:	0001ec54 	.word	0x0001ec54

00019b80 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   19b80:	e92d4010 	push	{r4, lr}
   19b84:	e2524000 	subs	r4, r2, #0
   19b88:	e59dc008 	ldr	ip, [sp, #8]
   19b8c:	0a00002f 	beq	19c50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   19b90:	e353000f 	cmp	r3, #15
   19b94:	e1a02003 	mov	r2, r3
   19b98:	9a000030 	bls	19c60 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   19b9c:	e243e00c 	sub	lr, r3, #12
   19ba0:	e1a03421 	lsr	r3, r1, #8
   19ba4:	e5c43001 	strb	r3, [r4, #1]
   19ba8:	e1a03821 	lsr	r3, r1, #16
   19bac:	e5c43002 	strb	r3, [r4, #2]
   19bb0:	e1a0342e 	lsr	r3, lr, #8
   19bb4:	e5c4c008 	strb	ip, [r4, #8]
   19bb8:	e5c43005 	strb	r3, [r4, #5]
   19bbc:	e3ccc102 	bic	ip, ip, #-2147483648	@ 0x80000000
   19bc0:	e1a0382e 	lsr	r3, lr, #16
   19bc4:	e5c43006 	strb	r3, [r4, #6]
   19bc8:	e1a0342c 	lsr	r3, ip, #8
   19bcc:	e5c41000 	strb	r1, [r4]
   19bd0:	e5c4e004 	strb	lr, [r4, #4]
   19bd4:	e1a01c21 	lsr	r1, r1, #24
   19bd8:	e1a0ec2e 	lsr	lr, lr, #24
   19bdc:	e5c43009 	strb	r3, [r4, #9]
   19be0:	e1a0382c 	lsr	r3, ip, #16
   19be4:	e1a0cc2c 	lsr	ip, ip, #24
   19be8:	e5c41003 	strb	r1, [r4, #3]
   19bec:	e5c4e007 	strb	lr, [r4, #7]
   19bf0:	e1a01004 	mov	r1, r4
   19bf4:	e5c4300a 	strb	r3, [r4, #10]
   19bf8:	e5c4c00b 	strb	ip, [r4, #11]
   19bfc:	ebffff9a 	bl	19a6c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   19c00:	e3500000 	cmp	r0, #0
   19c04:	08bd8010 	popeq	{r4, pc}
   19c08:	e5d40009 	ldrb	r0, [r4, #9]
   19c0c:	e5d43008 	ldrb	r3, [r4, #8]
   19c10:	e5d4100a 	ldrb	r1, [r4, #10]
   19c14:	e5d4200b 	ldrb	r2, [r4, #11]
   19c18:	e1833400 	orr	r3, r3, r0, lsl #8
   19c1c:	e1833801 	orr	r3, r3, r1, lsl #16
   19c20:	e1833c02 	orr	r3, r3, r2, lsl #24
   19c24:	e3c32102 	bic	r2, r3, #-2147483648	@ 0x80000000
   19c28:	e2520000 	subs	r0, r2, #0
   19c2c:	e1a01422 	lsr	r1, r2, #8
   19c30:	e5c43008 	strb	r3, [r4, #8]
   19c34:	e1a03822 	lsr	r3, r2, #16
   19c38:	e1a02c22 	lsr	r2, r2, #24
   19c3c:	13a00001 	movne	r0, #1
   19c40:	e5c41009 	strb	r1, [r4, #9]
   19c44:	e5c4300a 	strb	r3, [r4, #10]
   19c48:	e5c4200b 	strb	r2, [r4, #11]
   19c4c:	e8bd8010 	pop	{r4, pc}
   19c50:	e59f1018 	ldr	r1, [pc, #24]	@ 19c70 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   19c54:	e3a02033 	mov	r2, #51	@ 0x33
   19c58:	e2810064 	add	r0, r1, #100	@ 0x64
   19c5c:	ebffd6b0 	bl	f724 <assertion_failed>
   19c60:	e59f1008 	ldr	r1, [pc, #8]	@ 19c70 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   19c64:	e3a02034 	mov	r2, #52	@ 0x34
   19c68:	e2810070 	add	r0, r1, #112	@ 0x70
   19c6c:	ebffd6ac 	bl	f724 <assertion_failed>
   19c70:	0001ec54 	.word	0x0001ec54
   19c74:	00000000 	.word	0x00000000

00019c78 <DelayLoop>:
   19c78:	e1a01001 	mov	r1, r1
   19c7c:	e1a02002 	mov	r2, r2
   19c80:	e2500001 	subs	r0, r0, #1
   19c84:	8afffffb 	bhi	19c78 <DelayLoop>
   19c88:	e1a0f00e 	mov	pc, lr

00019c8c <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   19c8c:	e3a02000 	mov	r2, #0
   19c90:	e1a03000 	mov	r3, r0
   19c94:	e5801000 	str	r1, [r0]
   19c98:	e28010dc 	add	r1, r0, #220	@ 0xdc
   19c9c:	e5e32004 	strb	r2, [r3, #4]!
   19ca0:	e5a32004 	str	r2, [r3, #4]!
   19ca4:	e1530001 	cmp	r3, r1
   19ca8:	1afffffc 	bne	19ca0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   19cac:	e12fff1e 	bx	lr

00019cb0 <CGPIOManager::~CGPIOManager()>:
   19cb0:	e92d4010 	push	{r4, lr}
   19cb4:	e2803004 	add	r3, r0, #4
   19cb8:	e1a04000 	mov	r4, r0
   19cbc:	e28010dc 	add	r1, r0, #220	@ 0xdc
   19cc0:	ea000001 	b	19ccc <CGPIOManager::~CGPIOManager()+0x1c>
   19cc4:	e1530001 	cmp	r3, r1
   19cc8:	0a000006 	beq	19ce8 <CGPIOManager::~CGPIOManager()+0x38>
   19ccc:	e5b32004 	ldr	r2, [r3, #4]!
   19cd0:	e3520000 	cmp	r2, #0
   19cd4:	0afffffa 	beq	19cc4 <CGPIOManager::~CGPIOManager()+0x14>
   19cd8:	e3a0202c 	mov	r2, #44	@ 0x2c
   19cdc:	e59f103c 	ldr	r1, [pc, #60]	@ 19d20 <CGPIOManager::~CGPIOManager()+0x70>
   19ce0:	e59f003c 	ldr	r0, [pc, #60]	@ 19d24 <CGPIOManager::~CGPIOManager()+0x74>
   19ce4:	ebffd68e 	bl	f724 <assertion_failed>
   19ce8:	e5d43004 	ldrb	r3, [r4, #4]
   19cec:	e3530000 	cmp	r3, #0
   19cf0:	0a000004 	beq	19d08 <CGPIOManager::~CGPIOManager()+0x58>
   19cf4:	e5940000 	ldr	r0, [r4]
   19cf8:	e3500000 	cmp	r0, #0
   19cfc:	0a000003 	beq	19d10 <CGPIOManager::~CGPIOManager()+0x60>
   19d00:	e3a01034 	mov	r1, #52	@ 0x34
   19d04:	ebfff7c5 	bl	17c20 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   19d08:	e1a00004 	mov	r0, r4
   19d0c:	e8bd8010 	pop	{r4, pc}
   19d10:	e3a02032 	mov	r2, #50	@ 0x32
   19d14:	e59f1004 	ldr	r1, [pc, #4]	@ 19d20 <CGPIOManager::~CGPIOManager()+0x70>
   19d18:	e59f0008 	ldr	r0, [pc, #8]	@ 19d28 <CGPIOManager::~CGPIOManager()+0x78>
   19d1c:	ebffd680 	bl	f724 <assertion_failed>
   19d20:	0001d994 	.word	0x0001d994
   19d24:	0001d9a4 	.word	0x0001d9a4
   19d28:	0001d9b8 	.word	0x0001d9b8

00019d2c <CGPIOManager::Initialize()>:
   19d2c:	e5d03004 	ldrb	r3, [r0, #4]
   19d30:	e92d4010 	push	{r4, lr}
   19d34:	e3530000 	cmp	r3, #0
   19d38:	1a00000a 	bne	19d68 <CGPIOManager::Initialize()+0x3c>
   19d3c:	e1a04000 	mov	r4, r0
   19d40:	e5900000 	ldr	r0, [r0]
   19d44:	e3500000 	cmp	r0, #0
   19d48:	0a00000a 	beq	19d78 <CGPIOManager::Initialize()+0x4c>
   19d4c:	e1a03004 	mov	r3, r4
   19d50:	e3a01034 	mov	r1, #52	@ 0x34
   19d54:	e59f202c 	ldr	r2, [pc, #44]	@ 19d88 <CGPIOManager::Initialize()+0x5c>
   19d58:	ebfff782 	bl	17b68 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   19d5c:	e3a00001 	mov	r0, #1
   19d60:	e5c40004 	strb	r0, [r4, #4]
   19d64:	e8bd8010 	pop	{r4, pc}
   19d68:	e3a0203b 	mov	r2, #59	@ 0x3b
   19d6c:	e59f1018 	ldr	r1, [pc, #24]	@ 19d8c <CGPIOManager::Initialize()+0x60>
   19d70:	e59f0018 	ldr	r0, [pc, #24]	@ 19d90 <CGPIOManager::Initialize()+0x64>
   19d74:	ebffd66a 	bl	f724 <assertion_failed>
   19d78:	e3a0203c 	mov	r2, #60	@ 0x3c
   19d7c:	e59f1008 	ldr	r1, [pc, #8]	@ 19d8c <CGPIOManager::Initialize()+0x60>
   19d80:	e59f000c 	ldr	r0, [pc, #12]	@ 19d94 <CGPIOManager::Initialize()+0x68>
   19d84:	ebffd666 	bl	f724 <assertion_failed>
   19d88:	00019f98 	.word	0x00019f98
   19d8c:	0001d994 	.word	0x0001d994
   19d90:	0001d9cc 	.word	0x0001d9cc
   19d94:	0001d9b8 	.word	0x0001d9b8

00019d98 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   19d98:	e5d03004 	ldrb	r3, [r0, #4]
   19d9c:	e92d4010 	push	{r4, lr}
   19da0:	e3530000 	cmp	r3, #0
   19da4:	0a00000a 	beq	19dd4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   19da8:	e3510000 	cmp	r1, #0
   19dac:	0a00000c 	beq	19de4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   19db0:	e5913004 	ldr	r3, [r1, #4]
   19db4:	e3530035 	cmp	r3, #53	@ 0x35
   19db8:	8a00000d 	bhi	19df4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   19dbc:	e0800103 	add	r0, r0, r3, lsl #2
   19dc0:	e5903008 	ldr	r3, [r0, #8]
   19dc4:	e3530000 	cmp	r3, #0
   19dc8:	1a00000d 	bne	19e04 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   19dcc:	e5801008 	str	r1, [r0, #8]
   19dd0:	e8bd8010 	pop	{r4, pc}
   19dd4:	e3a02045 	mov	r2, #69	@ 0x45
   19dd8:	e59f1034 	ldr	r1, [pc, #52]	@ 19e14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   19ddc:	e59f0034 	ldr	r0, [pc, #52]	@ 19e18 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   19de0:	ebffd64f 	bl	f724 <assertion_failed>
   19de4:	e3a02047 	mov	r2, #71	@ 0x47
   19de8:	e59f1024 	ldr	r1, [pc, #36]	@ 19e14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   19dec:	e59f0028 	ldr	r0, [pc, #40]	@ 19e1c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   19df0:	ebffd64b 	bl	f724 <assertion_failed>
   19df4:	e3a02049 	mov	r2, #73	@ 0x49
   19df8:	e59f1014 	ldr	r1, [pc, #20]	@ 19e14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   19dfc:	e59f001c 	ldr	r0, [pc, #28]	@ 19e20 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   19e00:	ebffd647 	bl	f724 <assertion_failed>
   19e04:	e3a0204b 	mov	r2, #75	@ 0x4b
   19e08:	e59f1004 	ldr	r1, [pc, #4]	@ 19e14 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   19e0c:	e59f0010 	ldr	r0, [pc, #16]	@ 19e24 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   19e10:	ebffd643 	bl	f724 <assertion_failed>
   19e14:	0001d994 	.word	0x0001d994
   19e18:	0001d9e0 	.word	0x0001d9e0
   19e1c:	0001d9f0 	.word	0x0001d9f0
   19e20:	0001d9fc 	.word	0x0001d9fc
   19e24:	0001d9a4 	.word	0x0001d9a4

00019e28 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   19e28:	e5d03004 	ldrb	r3, [r0, #4]
   19e2c:	e92d4010 	push	{r4, lr}
   19e30:	e3530000 	cmp	r3, #0
   19e34:	0a00000b 	beq	19e68 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   19e38:	e3510000 	cmp	r1, #0
   19e3c:	0a00000d 	beq	19e78 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   19e40:	e5913004 	ldr	r3, [r1, #4]
   19e44:	e3530035 	cmp	r3, #53	@ 0x35
   19e48:	8a00000e 	bhi	19e88 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   19e4c:	e0800103 	add	r0, r0, r3, lsl #2
   19e50:	e5903008 	ldr	r3, [r0, #8]
   19e54:	e3530000 	cmp	r3, #0
   19e58:	0a00000e 	beq	19e98 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   19e5c:	e3a03000 	mov	r3, #0
   19e60:	e5803008 	str	r3, [r0, #8]
   19e64:	e8bd8010 	pop	{r4, pc}
   19e68:	e3a02052 	mov	r2, #82	@ 0x52
   19e6c:	e59f1034 	ldr	r1, [pc, #52]	@ 19ea8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   19e70:	e59f0034 	ldr	r0, [pc, #52]	@ 19eac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   19e74:	ebffd62a 	bl	f724 <assertion_failed>
   19e78:	e3a02054 	mov	r2, #84	@ 0x54
   19e7c:	e59f1024 	ldr	r1, [pc, #36]	@ 19ea8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   19e80:	e59f0028 	ldr	r0, [pc, #40]	@ 19eb0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   19e84:	ebffd626 	bl	f724 <assertion_failed>
   19e88:	e3a02056 	mov	r2, #86	@ 0x56
   19e8c:	e59f1014 	ldr	r1, [pc, #20]	@ 19ea8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   19e90:	e59f001c 	ldr	r0, [pc, #28]	@ 19eb4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   19e94:	ebffd622 	bl	f724 <assertion_failed>
   19e98:	e3a02058 	mov	r2, #88	@ 0x58
   19e9c:	e59f1004 	ldr	r1, [pc, #4]	@ 19ea8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   19ea0:	e59f0010 	ldr	r0, [pc, #16]	@ 19eb8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   19ea4:	ebffd61e 	bl	f724 <assertion_failed>
   19ea8:	0001d994 	.word	0x0001d994
   19eac:	0001d9e0 	.word	0x0001d9e0
   19eb0:	0001d9f0 	.word	0x0001d9f0
   19eb4:	0001d9fc 	.word	0x0001d9fc
   19eb8:	0001da10 	.word	0x0001da10

00019ebc <CGPIOManager::InterruptHandler()>:
   19ebc:	e5d03004 	ldrb	r3, [r0, #4]
   19ec0:	e92d4070 	push	{r4, r5, r6, lr}
   19ec4:	e3530000 	cmp	r3, #0
   19ec8:	0a000029 	beq	19f74 <CGPIOManager::InterruptHandler()+0xb8>
   19ecc:	e3a04000 	mov	r4, #0
   19ed0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   19ed4:	e59f30a8 	ldr	r3, [pc, #168]	@ 19f84 <CGPIOManager::InterruptHandler()+0xc8>
   19ed8:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   19edc:	e3130001 	tst	r3, #1
   19ee0:	1a000008 	bne	19f08 <CGPIOManager::InterruptHandler()+0x4c>
   19ee4:	e2844001 	add	r4, r4, #1
   19ee8:	e314001f 	tst	r4, #31
   19eec:	e1a030a3 	lsr	r3, r3, #1
   19ef0:	0a000011 	beq	19f3c <CGPIOManager::InterruptHandler()+0x80>
   19ef4:	e3540036 	cmp	r4, #54	@ 0x36
   19ef8:	1afffff7 	bne	19edc <CGPIOManager::InterruptHandler()+0x20>
   19efc:	e3a03000 	mov	r3, #0
   19f00:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   19f04:	e8bd8070 	pop	{r4, r5, r6, pc}
   19f08:	e2843002 	add	r3, r4, #2
   19f0c:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   19f10:	e3550000 	cmp	r5, #0
   19f14:	0a00000c 	beq	19f4c <CGPIOManager::InterruptHandler()+0x90>
   19f18:	e1a00005 	mov	r0, r5
   19f1c:	ebfffc52 	bl	1906c <CGPIOPin::InterruptHandler()>
   19f20:	e5d53024 	ldrb	r3, [r5, #36]	@ 0x24
   19f24:	e3530000 	cmp	r3, #0
   19f28:	1595100c 	ldrne	r1, [r5, #12]
   19f2c:	15952008 	ldrne	r2, [r5, #8]
   19f30:	159f3050 	ldrne	r3, [pc, #80]	@ 19f88 <CGPIOManager::InterruptHandler()+0xcc>
   19f34:	17821003 	strne	r1, [r2, r3]
   19f38:	eaffffef 	b	19efc <CGPIOManager::InterruptHandler()+0x40>
   19f3c:	e59f3040 	ldr	r3, [pc, #64]	@ 19f84 <CGPIOManager::InterruptHandler()+0xc8>
   19f40:	e3a04020 	mov	r4, #32
   19f44:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   19f48:	eaffffe3 	b	19edc <CGPIOManager::InterruptHandler()+0x20>
   19f4c:	e1a00004 	mov	r0, r4
   19f50:	ebfffc67 	bl	190f4 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   19f54:	e3a02001 	mov	r2, #1
   19f58:	e59f302c 	ldr	r3, [pc, #44]	@ 19f8c <CGPIOManager::InterruptHandler()+0xd0>
   19f5c:	e204101f 	and	r1, r4, #31
   19f60:	e08332a4 	add	r3, r3, r4, lsr #5
   19f64:	e1a02112 	lsl	r2, r2, r1
   19f68:	e1a03103 	lsl	r3, r3, #2
   19f6c:	e5832000 	str	r2, [r3]
   19f70:	eaffffe1 	b	19efc <CGPIOManager::InterruptHandler()+0x40>
   19f74:	e3a0205e 	mov	r2, #94	@ 0x5e
   19f78:	e59f1010 	ldr	r1, [pc, #16]	@ 19f90 <CGPIOManager::InterruptHandler()+0xd4>
   19f7c:	e59f0010 	ldr	r0, [pc, #16]	@ 19f94 <CGPIOManager::InterruptHandler()+0xd8>
   19f80:	ebffd5e7 	bl	f724 <assertion_failed>
   19f84:	20200000 	.word	0x20200000
   19f88:	20200040 	.word	0x20200040
   19f8c:	08080010 	.word	0x08080010
   19f90:	0001d994 	.word	0x0001d994
   19f94:	0001d9e0 	.word	0x0001d9e0

00019f98 <CGPIOManager::InterruptStub(void*)>:
   19f98:	e3500000 	cmp	r0, #0
   19f9c:	0a000000 	beq	19fa4 <CGPIOManager::InterruptStub(void*)+0xc>
   19fa0:	eaffffc5 	b	19ebc <CGPIOManager::InterruptHandler()>
   19fa4:	e3a0208e 	mov	r2, #142	@ 0x8e
   19fa8:	e92d4010 	push	{r4, lr}
   19fac:	e59f1004 	ldr	r1, [pc, #4]	@ 19fb8 <CGPIOManager::InterruptStub(void*)+0x20>
   19fb0:	e59f0004 	ldr	r0, [pc, #4]	@ 19fbc <CGPIOManager::InterruptStub(void*)+0x24>
   19fb4:	ebffd5da 	bl	f724 <assertion_failed>
   19fb8:	0001d994 	.word	0x0001d994
   19fbc:	0001da24 	.word	0x0001da24

00019fc0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   19fc0:	e5801000 	str	r1, [r0]
   19fc4:	e5c02004 	strb	r2, [r0, #4]
   19fc8:	e12fff1e 	bx	lr

00019fcc <CBcmMailBox::~CBcmMailBox()>:
   19fcc:	e12fff1e 	bx	lr

00019fd0 <CBcmMailBox::WriteRead(unsigned int)>:
   19fd0:	e92d4070 	push	{r4, r5, r6, lr}
   19fd4:	e3a03000 	mov	r3, #0
   19fd8:	e1a05000 	mov	r5, r0
   19fdc:	e1a06001 	mov	r6, r1
   19fe0:	e24dd008 	sub	sp, sp, #8
   19fe4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   19fe8:	e5d03004 	ldrb	r3, [r0, #4]
   19fec:	e3530000 	cmp	r3, #0
   19ff0:	1a000003 	bne	1a004 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   19ff4:	e59f30dc 	ldr	r3, [pc, #220]	@ 1a0d8 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   19ff8:	e5930000 	ldr	r0, [r3]
   19ffc:	e3500000 	cmp	r0, #0
   1a000:	1a000027 	bne	1a0a4 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   1a004:	e59f40d0 	ldr	r4, [pc, #208]	@ 1a0dc <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   1a008:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   1a00c:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   1a010:	1a000005 	bne	1a02c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   1a014:	e3a00014 	mov	r0, #20
   1a018:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   1a01c:	ebffeeae 	bl	15adc <CTimer::SimpleMsDelay(unsigned int)>
   1a020:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   1a024:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   1a028:	0afffff9 	beq	1a014 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   1a02c:	e59f00a8 	ldr	r0, [pc, #168]	@ 1a0dc <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   1a030:	e59038b8 	ldr	r3, [r0, #2232]	@ 0x8b8
   1a034:	e3530000 	cmp	r3, #0
   1a038:	bafffffc 	blt	1a030 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   1a03c:	e316000f 	tst	r6, #15
   1a040:	1a000020 	bne	1a0c8 <CBcmMailBox::WriteRead(unsigned int)+0xf8>
   1a044:	e5953000 	ldr	r3, [r5]
   1a048:	e59f208c 	ldr	r2, [pc, #140]	@ 1a0dc <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   1a04c:	e1866003 	orr	r6, r6, r3
   1a050:	e58068a0 	str	r6, [r0, #2208]	@ 0x8a0
   1a054:	e5950000 	ldr	r0, [r5]
   1a058:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   1a05c:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   1a060:	1afffffc 	bne	1a058 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   1a064:	e5923880 	ldr	r3, [r2, #2176]	@ 0x880
   1a068:	e203100f 	and	r1, r3, #15
   1a06c:	e1510000 	cmp	r1, r0
   1a070:	1afffff8 	bne	1a058 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   1a074:	e5d52004 	ldrb	r2, [r5, #4]
   1a078:	e3c3000f 	bic	r0, r3, #15
   1a07c:	e3520000 	cmp	r2, #0
   1a080:	1a000003 	bne	1a094 <CBcmMailBox::WriteRead(unsigned int)+0xc4>
   1a084:	e59f304c 	ldr	r3, [pc, #76]	@ 1a0d8 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   1a088:	e5933000 	ldr	r3, [r3]
   1a08c:	e3530000 	cmp	r3, #0
   1a090:	1a000005 	bne	1a0ac <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   1a094:	e3a03000 	mov	r3, #0
   1a098:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1a09c:	e28dd008 	add	sp, sp, #8
   1a0a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a0a4:	ebfff5f9 	bl	17890 <EnterCritical>
   1a0a8:	eaffffd5 	b	1a004 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   1a0ac:	e58d0004 	str	r0, [sp, #4]
   1a0b0:	ebfff620 	bl	17938 <LeaveCritical>
   1a0b4:	e3a03000 	mov	r3, #0
   1a0b8:	e59d0004 	ldr	r0, [sp, #4]
   1a0bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1a0c0:	e28dd008 	add	sp, sp, #8
   1a0c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a0c8:	e3a02062 	mov	r2, #98	@ 0x62
   1a0cc:	e59f100c 	ldr	r1, [pc, #12]	@ 1a0e0 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   1a0d0:	e59f000c 	ldr	r0, [pc, #12]	@ 1a0e4 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   1a0d4:	ebffd592 	bl	f724 <assertion_failed>
   1a0d8:	00020c00 	.word	0x00020c00
   1a0dc:	2000b000 	.word	0x2000b000
   1a0e0:	0001da30 	.word	0x0001da30
   1a0e4:	0001da40 	.word	0x0001da40

0001a0e8 <CBcmMailBox::Flush()>:
   1a0e8:	e92d4010 	push	{r4, lr}
   1a0ec:	e59f4024 	ldr	r4, [pc, #36]	@ 1a118 <CBcmMailBox::Flush()+0x30>
   1a0f0:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   1a0f4:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   1a0f8:	18bd8010 	popne	{r4, pc}
   1a0fc:	e3a00014 	mov	r0, #20
   1a100:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   1a104:	ebffee74 	bl	15adc <CTimer::SimpleMsDelay(unsigned int)>
   1a108:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   1a10c:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   1a110:	0afffff9 	beq	1a0fc <CBcmMailBox::Flush()+0x14>
   1a114:	e8bd8010 	pop	{r4, pc}
   1a118:	2000b000 	.word	0x2000b000

0001a11c <CBcmMailBox::Read()>:
   1a11c:	e59f2024 	ldr	r2, [pc, #36]	@ 1a148 <CBcmMailBox::Read()+0x2c>
   1a120:	e5901000 	ldr	r1, [r0]
   1a124:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   1a128:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   1a12c:	1afffffc 	bne	1a124 <CBcmMailBox::Read()+0x8>
   1a130:	e5920880 	ldr	r0, [r2, #2176]	@ 0x880
   1a134:	e200300f 	and	r3, r0, #15
   1a138:	e1530001 	cmp	r3, r1
   1a13c:	1afffff8 	bne	1a124 <CBcmMailBox::Read()+0x8>
   1a140:	e3c0000f 	bic	r0, r0, #15
   1a144:	e12fff1e 	bx	lr
   1a148:	2000b000 	.word	0x2000b000

0001a14c <CBcmMailBox::Write(unsigned int)>:
   1a14c:	e59f2034 	ldr	r2, [pc, #52]	@ 1a188 <CBcmMailBox::Write(unsigned int)+0x3c>
   1a150:	e59238b8 	ldr	r3, [r2, #2232]	@ 0x8b8
   1a154:	e3530000 	cmp	r3, #0
   1a158:	bafffffc 	blt	1a150 <CBcmMailBox::Write(unsigned int)+0x4>
   1a15c:	e311000f 	tst	r1, #15
   1a160:	1a000003 	bne	1a174 <CBcmMailBox::Write(unsigned int)+0x28>
   1a164:	e5903000 	ldr	r3, [r0]
   1a168:	e1811003 	orr	r1, r1, r3
   1a16c:	e58218a0 	str	r1, [r2, #2208]	@ 0x8a0
   1a170:	e12fff1e 	bx	lr
   1a174:	e3a02062 	mov	r2, #98	@ 0x62
   1a178:	e92d4010 	push	{r4, lr}
   1a17c:	e59f1008 	ldr	r1, [pc, #8]	@ 1a18c <CBcmMailBox::Write(unsigned int)+0x40>
   1a180:	e59f0008 	ldr	r0, [pc, #8]	@ 1a190 <CBcmMailBox::Write(unsigned int)+0x44>
   1a184:	ebffd566 	bl	f724 <assertion_failed>
   1a188:	2000b000 	.word	0x2000b000
   1a18c:	0001da30 	.word	0x0001da30
   1a190:	0001da40 	.word	0x0001da40

0001a194 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   1a194:	e3a02000 	mov	r2, #0
   1a198:	e59f3004 	ldr	r3, [pc, #4]	@ 1a1a4 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   1a19c:	e5832000 	str	r2, [r3]
   1a1a0:	e12fff1e 	bx	lr
   1a1a4:	00020c00 	.word	0x00020c00

0001a1a8 <__udivsi3>:
   1a1a8:	e2512001 	subs	r2, r1, #1
   1a1ac:	012fff1e 	bxeq	lr
   1a1b0:	3a000074 	bcc	1a388 <__udivsi3+0x1e0>
   1a1b4:	e1500001 	cmp	r0, r1
   1a1b8:	9a00006b 	bls	1a36c <__udivsi3+0x1c4>
   1a1bc:	e1110002 	tst	r1, r2
   1a1c0:	0a00006c 	beq	1a378 <__udivsi3+0x1d0>
   1a1c4:	e16f3f10 	clz	r3, r0
   1a1c8:	e16f2f11 	clz	r2, r1
   1a1cc:	e0423003 	sub	r3, r2, r3
   1a1d0:	e273301f 	rsbs	r3, r3, #31
   1a1d4:	10833083 	addne	r3, r3, r3, lsl #1
   1a1d8:	e3a02000 	mov	r2, #0
   1a1dc:	108ff103 	addne	pc, pc, r3, lsl #2
   1a1e0:	e1a00000 	nop			@ (mov r0, r0)
   1a1e4:	e1500f81 	cmp	r0, r1, lsl #31
   1a1e8:	e0a22002 	adc	r2, r2, r2
   1a1ec:	20400f81 	subcs	r0, r0, r1, lsl #31
   1a1f0:	e1500f01 	cmp	r0, r1, lsl #30
   1a1f4:	e0a22002 	adc	r2, r2, r2
   1a1f8:	20400f01 	subcs	r0, r0, r1, lsl #30
   1a1fc:	e1500e81 	cmp	r0, r1, lsl #29
   1a200:	e0a22002 	adc	r2, r2, r2
   1a204:	20400e81 	subcs	r0, r0, r1, lsl #29
   1a208:	e1500e01 	cmp	r0, r1, lsl #28
   1a20c:	e0a22002 	adc	r2, r2, r2
   1a210:	20400e01 	subcs	r0, r0, r1, lsl #28
   1a214:	e1500d81 	cmp	r0, r1, lsl #27
   1a218:	e0a22002 	adc	r2, r2, r2
   1a21c:	20400d81 	subcs	r0, r0, r1, lsl #27
   1a220:	e1500d01 	cmp	r0, r1, lsl #26
   1a224:	e0a22002 	adc	r2, r2, r2
   1a228:	20400d01 	subcs	r0, r0, r1, lsl #26
   1a22c:	e1500c81 	cmp	r0, r1, lsl #25
   1a230:	e0a22002 	adc	r2, r2, r2
   1a234:	20400c81 	subcs	r0, r0, r1, lsl #25
   1a238:	e1500c01 	cmp	r0, r1, lsl #24
   1a23c:	e0a22002 	adc	r2, r2, r2
   1a240:	20400c01 	subcs	r0, r0, r1, lsl #24
   1a244:	e1500b81 	cmp	r0, r1, lsl #23
   1a248:	e0a22002 	adc	r2, r2, r2
   1a24c:	20400b81 	subcs	r0, r0, r1, lsl #23
   1a250:	e1500b01 	cmp	r0, r1, lsl #22
   1a254:	e0a22002 	adc	r2, r2, r2
   1a258:	20400b01 	subcs	r0, r0, r1, lsl #22
   1a25c:	e1500a81 	cmp	r0, r1, lsl #21
   1a260:	e0a22002 	adc	r2, r2, r2
   1a264:	20400a81 	subcs	r0, r0, r1, lsl #21
   1a268:	e1500a01 	cmp	r0, r1, lsl #20
   1a26c:	e0a22002 	adc	r2, r2, r2
   1a270:	20400a01 	subcs	r0, r0, r1, lsl #20
   1a274:	e1500981 	cmp	r0, r1, lsl #19
   1a278:	e0a22002 	adc	r2, r2, r2
   1a27c:	20400981 	subcs	r0, r0, r1, lsl #19
   1a280:	e1500901 	cmp	r0, r1, lsl #18
   1a284:	e0a22002 	adc	r2, r2, r2
   1a288:	20400901 	subcs	r0, r0, r1, lsl #18
   1a28c:	e1500881 	cmp	r0, r1, lsl #17
   1a290:	e0a22002 	adc	r2, r2, r2
   1a294:	20400881 	subcs	r0, r0, r1, lsl #17
   1a298:	e1500801 	cmp	r0, r1, lsl #16
   1a29c:	e0a22002 	adc	r2, r2, r2
   1a2a0:	20400801 	subcs	r0, r0, r1, lsl #16
   1a2a4:	e1500781 	cmp	r0, r1, lsl #15
   1a2a8:	e0a22002 	adc	r2, r2, r2
   1a2ac:	20400781 	subcs	r0, r0, r1, lsl #15
   1a2b0:	e1500701 	cmp	r0, r1, lsl #14
   1a2b4:	e0a22002 	adc	r2, r2, r2
   1a2b8:	20400701 	subcs	r0, r0, r1, lsl #14
   1a2bc:	e1500681 	cmp	r0, r1, lsl #13
   1a2c0:	e0a22002 	adc	r2, r2, r2
   1a2c4:	20400681 	subcs	r0, r0, r1, lsl #13
   1a2c8:	e1500601 	cmp	r0, r1, lsl #12
   1a2cc:	e0a22002 	adc	r2, r2, r2
   1a2d0:	20400601 	subcs	r0, r0, r1, lsl #12
   1a2d4:	e1500581 	cmp	r0, r1, lsl #11
   1a2d8:	e0a22002 	adc	r2, r2, r2
   1a2dc:	20400581 	subcs	r0, r0, r1, lsl #11
   1a2e0:	e1500501 	cmp	r0, r1, lsl #10
   1a2e4:	e0a22002 	adc	r2, r2, r2
   1a2e8:	20400501 	subcs	r0, r0, r1, lsl #10
   1a2ec:	e1500481 	cmp	r0, r1, lsl #9
   1a2f0:	e0a22002 	adc	r2, r2, r2
   1a2f4:	20400481 	subcs	r0, r0, r1, lsl #9
   1a2f8:	e1500401 	cmp	r0, r1, lsl #8
   1a2fc:	e0a22002 	adc	r2, r2, r2
   1a300:	20400401 	subcs	r0, r0, r1, lsl #8
   1a304:	e1500381 	cmp	r0, r1, lsl #7
   1a308:	e0a22002 	adc	r2, r2, r2
   1a30c:	20400381 	subcs	r0, r0, r1, lsl #7
   1a310:	e1500301 	cmp	r0, r1, lsl #6
   1a314:	e0a22002 	adc	r2, r2, r2
   1a318:	20400301 	subcs	r0, r0, r1, lsl #6
   1a31c:	e1500281 	cmp	r0, r1, lsl #5
   1a320:	e0a22002 	adc	r2, r2, r2
   1a324:	20400281 	subcs	r0, r0, r1, lsl #5
   1a328:	e1500201 	cmp	r0, r1, lsl #4
   1a32c:	e0a22002 	adc	r2, r2, r2
   1a330:	20400201 	subcs	r0, r0, r1, lsl #4
   1a334:	e1500181 	cmp	r0, r1, lsl #3
   1a338:	e0a22002 	adc	r2, r2, r2
   1a33c:	20400181 	subcs	r0, r0, r1, lsl #3
   1a340:	e1500101 	cmp	r0, r1, lsl #2
   1a344:	e0a22002 	adc	r2, r2, r2
   1a348:	20400101 	subcs	r0, r0, r1, lsl #2
   1a34c:	e1500081 	cmp	r0, r1, lsl #1
   1a350:	e0a22002 	adc	r2, r2, r2
   1a354:	20400081 	subcs	r0, r0, r1, lsl #1
   1a358:	e1500001 	cmp	r0, r1
   1a35c:	e0a22002 	adc	r2, r2, r2
   1a360:	20400001 	subcs	r0, r0, r1
   1a364:	e1a00002 	mov	r0, r2
   1a368:	e12fff1e 	bx	lr
   1a36c:	03a00001 	moveq	r0, #1
   1a370:	13a00000 	movne	r0, #0
   1a374:	e12fff1e 	bx	lr
   1a378:	e16f2f11 	clz	r2, r1
   1a37c:	e262201f 	rsb	r2, r2, #31
   1a380:	e1a00230 	lsr	r0, r0, r2
   1a384:	e12fff1e 	bx	lr
   1a388:	e3500000 	cmp	r0, #0
   1a38c:	13e00000 	mvnne	r0, #0
   1a390:	ea000007 	b	1a3b4 <__aeabi_idiv0>

0001a394 <__aeabi_uidivmod>:
   1a394:	e3510000 	cmp	r1, #0
   1a398:	0afffffa 	beq	1a388 <__udivsi3+0x1e0>
   1a39c:	e92d4003 	push	{r0, r1, lr}
   1a3a0:	ebffff80 	bl	1a1a8 <__udivsi3>
   1a3a4:	e8bd4006 	pop	{r1, r2, lr}
   1a3a8:	e0030092 	mul	r3, r2, r0
   1a3ac:	e0411003 	sub	r1, r1, r3
   1a3b0:	e12fff1e 	bx	lr

0001a3b4 <__aeabi_idiv0>:
   1a3b4:	e12fff1e 	bx	lr

0001a3b8 <__aeabi_uldivmod>:
   1a3b8:	e3530000 	cmp	r3, #0
   1a3bc:	03520000 	cmpeq	r2, #0
   1a3c0:	1a000004 	bne	1a3d8 <__aeabi_uldivmod+0x20>
   1a3c4:	e3510000 	cmp	r1, #0
   1a3c8:	03500000 	cmpeq	r0, #0
   1a3cc:	13e01000 	mvnne	r1, #0
   1a3d0:	13e00000 	mvnne	r0, #0
   1a3d4:	eafffff6 	b	1a3b4 <__aeabi_idiv0>
   1a3d8:	e24dd008 	sub	sp, sp, #8
   1a3dc:	e92d6000 	push	{sp, lr}
   1a3e0:	eb00000c 	bl	1a418 <__udivmoddi4>
   1a3e4:	e59de004 	ldr	lr, [sp, #4]
   1a3e8:	e28dd008 	add	sp, sp, #8
   1a3ec:	e8bd000c 	pop	{r2, r3}
   1a3f0:	e12fff1e 	bx	lr

0001a3f4 <__paritysi2>:
   1a3f4:	e0203820 	eor	r3, r0, r0, lsr #16
   1a3f8:	e0233423 	eor	r3, r3, r3, lsr #8
   1a3fc:	e59f0010 	ldr	r0, [pc, #16]	@ 1a414 <__paritysi2+0x20>
   1a400:	e0233223 	eor	r3, r3, r3, lsr #4
   1a404:	e203300f 	and	r3, r3, #15
   1a408:	e1a00350 	asr	r0, r0, r3
   1a40c:	e2000001 	and	r0, r0, #1
   1a410:	e12fff1e 	bx	lr
   1a414:	00006996 	.word	0x00006996

0001a418 <__udivmoddi4>:
   1a418:	e1500002 	cmp	r0, r2
   1a41c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1a420:	e1a0e001 	mov	lr, r1
   1a424:	e0de1003 	sbcs	r1, lr, r3
   1a428:	e1a0c000 	mov	ip, r0
   1a42c:	33a00000 	movcc	r0, #0
   1a430:	e59d501c 	ldr	r5, [sp, #28]
   1a434:	31a01000 	movcc	r1, r0
   1a438:	3a00003b 	bcc	1a52c <__udivmoddi4+0x114>
   1a43c:	e3530000 	cmp	r3, #0
   1a440:	016f4f12 	clzeq	r4, r2
   1a444:	116f4f13 	clzne	r4, r3
   1a448:	02844020 	addeq	r4, r4, #32
   1a44c:	e35e0000 	cmp	lr, #0
   1a450:	016f1f1c 	clzeq	r1, ip
   1a454:	02811020 	addeq	r1, r1, #32
   1a458:	116f1f1e 	clzne	r1, lr
   1a45c:	e0444001 	sub	r4, r4, r1
   1a460:	e1a03413 	lsl	r3, r3, r4
   1a464:	e2447020 	sub	r7, r4, #32
   1a468:	e1833712 	orr	r3, r3, r2, lsl r7
   1a46c:	e1a08412 	lsl	r8, r2, r4
   1a470:	e2646020 	rsb	r6, r4, #32
   1a474:	e1833632 	orr	r3, r3, r2, lsr r6
   1a478:	e15c0008 	cmp	ip, r8
   1a47c:	e0de2003 	sbcs	r2, lr, r3
   1a480:	33a00000 	movcc	r0, #0
   1a484:	31a01000 	movcc	r1, r0
   1a488:	3a000005 	bcc	1a4a4 <__udivmoddi4+0x8c>
   1a48c:	e3a00001 	mov	r0, #1
   1a490:	e1a01710 	lsl	r1, r0, r7
   1a494:	e05cc008 	subs	ip, ip, r8
   1a498:	e1811630 	orr	r1, r1, r0, lsr r6
   1a49c:	e1a00410 	lsl	r0, r0, r4
   1a4a0:	e0cee003 	sbc	lr, lr, r3
   1a4a4:	e3540000 	cmp	r4, #0
   1a4a8:	0a00001f 	beq	1a52c <__udivmoddi4+0x114>
   1a4ac:	e1a020a8 	lsr	r2, r8, #1
   1a4b0:	e1822f83 	orr	r2, r2, r3, lsl #31
   1a4b4:	e1a08004 	mov	r8, r4
   1a4b8:	e1a030a3 	lsr	r3, r3, #1
   1a4bc:	ea000007 	b	1a4e0 <__udivmoddi4+0xc8>
   1a4c0:	e05cc002 	subs	ip, ip, r2
   1a4c4:	e0cee003 	sbc	lr, lr, r3
   1a4c8:	e09cc00c 	adds	ip, ip, ip
   1a4cc:	e0aee00e 	adc	lr, lr, lr
   1a4d0:	e29cc001 	adds	ip, ip, #1
   1a4d4:	e2aee000 	adc	lr, lr, #0
   1a4d8:	e2588001 	subs	r8, r8, #1
   1a4dc:	0a000006 	beq	1a4fc <__udivmoddi4+0xe4>
   1a4e0:	e15c0002 	cmp	ip, r2
   1a4e4:	e0de9003 	sbcs	r9, lr, r3
   1a4e8:	2afffff4 	bcs	1a4c0 <__udivmoddi4+0xa8>
   1a4ec:	e09cc00c 	adds	ip, ip, ip
   1a4f0:	e0aee00e 	adc	lr, lr, lr
   1a4f4:	e2588001 	subs	r8, r8, #1
   1a4f8:	1afffff8 	bne	1a4e0 <__udivmoddi4+0xc8>
   1a4fc:	e090000c 	adds	r0, r0, ip
   1a500:	e1a0c43c 	lsr	ip, ip, r4
   1a504:	e18cc61e 	orr	ip, ip, lr, lsl r6
   1a508:	e18cc73e 	orr	ip, ip, lr, lsr r7
   1a50c:	e0a1100e 	adc	r1, r1, lr
   1a510:	e1a0341c 	lsl	r3, ip, r4
   1a514:	e1a0e43e 	lsr	lr, lr, r4
   1a518:	e0500003 	subs	r0, r0, r3
   1a51c:	e1a0341e 	lsl	r3, lr, r4
   1a520:	e183371c 	orr	r3, r3, ip, lsl r7
   1a524:	e183363c 	orr	r3, r3, ip, lsr r6
   1a528:	e0c11003 	sbc	r1, r1, r3
   1a52c:	e3550000 	cmp	r5, #0
   1a530:	18855000 	stmne	r5, {ip, lr}
   1a534:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0001a538 <sinf>:
   1a538:	e92d4030 	push	{r4, r5, lr}
   1a53c:	ee104a10 	vmov	r4, s0
   1a540:	eeb77ac0 	vcvt.f64.f32	d7, s0
   1a544:	e59f31fc 	ldr	r3, [pc, #508]	@ 1a748 <sinf+0x210>
   1a548:	e24dd00c 	sub	sp, sp, #12
   1a54c:	e0033a24 	and	r3, r3, r4, lsr #20
   1a550:	e3530ffd 	cmp	r3, #1012	@ 0x3f4
   1a554:	2a00000e 	bcs	1a594 <sinf+0x5c>
   1a558:	e3530fe6 	cmp	r3, #920	@ 0x398
   1a55c:	ee275b07 	vmul.f64	d5, d7, d7
   1a560:	3a00003c 	bcc	1a658 <sinf+0x120>
   1a564:	ee272b05 	vmul.f64	d2, d7, d5
   1a568:	e59f31dc 	ldr	r3, [pc, #476]	@ 1a74c <sinf+0x214>
   1a56c:	ed933b1a 	vldr	d3, [r3, #104]	@ 0x68
   1a570:	ed934b18 	vldr	d4, [r3, #96]	@ 0x60
   1a574:	ed936b16 	vldr	d6, [r3, #88]	@ 0x58
   1a578:	ee054b03 	vmla.f64	d4, d5, d3
   1a57c:	ee027b06 	vmla.f64	d7, d2, d6
   1a580:	ee255b02 	vmul.f64	d5, d5, d2
   1a584:	ee047b05 	vmla.f64	d7, d4, d5
   1a588:	eeb70bc7 	vcvt.f32.f64	s0, d7
   1a58c:	e28dd00c 	add	sp, sp, #12
   1a590:	e8bd8030 	pop	{r4, r5, pc}
   1a594:	e59f21b4 	ldr	r2, [pc, #436]	@ 1a750 <sinf+0x218>
   1a598:	e1530002 	cmp	r3, r2
   1a59c:	8a000033 	bhi	1a670 <sinf+0x138>
   1a5a0:	e59f11a4 	ldr	r1, [pc, #420]	@ 1a74c <sinf+0x214>
   1a5a4:	ed916b08 	vldr	d6, [r1, #32]
   1a5a8:	ed915b0a 	vldr	d5, [r1, #40]	@ 0x28
   1a5ac:	e2812070 	add	r2, r1, #112	@ 0x70
   1a5b0:	ee276b06 	vmul.f64	d6, d7, d6
   1a5b4:	eefd6bc6 	vcvt.s32.f64	s13, d6
   1a5b8:	ee163a90 	vmov	r3, s13
   1a5bc:	e2833502 	add	r3, r3, #8388608	@ 0x800000
   1a5c0:	e1a03c43 	asr	r3, r3, #24
   1a5c4:	ee063a90 	vmov	s13, r3
   1a5c8:	e3130002 	tst	r3, #2
   1a5cc:	01a02001 	moveq	r2, r1
   1a5d0:	e3130001 	tst	r3, #1
   1a5d4:	eeb86be6 	vcvt.f64.s32	d6, s13
   1a5d8:	ee067b45 	vmls.f64	d7, d6, d5
   1a5dc:	ee276b07 	vmul.f64	d6, d7, d7
   1a5e0:	1a00000e 	bne	1a620 <sinf+0xe8>
   1a5e4:	e2033003 	and	r3, r3, #3
   1a5e8:	e0811183 	add	r1, r1, r3, lsl #3
   1a5ec:	ed912b00 	vldr	d2, [r1]
   1a5f0:	ed924b1a 	vldr	d4, [r2, #104]	@ 0x68
   1a5f4:	ed925b18 	vldr	d5, [r2, #96]	@ 0x60
   1a5f8:	ed923b16 	vldr	d3, [r2, #88]	@ 0x58
   1a5fc:	ee277b02 	vmul.f64	d7, d7, d2
   1a600:	ee065b04 	vmla.f64	d5, d6, d4
   1a604:	ee274b06 	vmul.f64	d4, d7, d6
   1a608:	ee266b04 	vmul.f64	d6, d6, d4
   1a60c:	ee047b03 	vmla.f64	d7, d4, d3
   1a610:	ee057b06 	vmla.f64	d7, d5, d6
   1a614:	eeb70bc7 	vcvt.f32.f64	s0, d7
   1a618:	e28dd00c 	add	sp, sp, #12
   1a61c:	e8bd8030 	pop	{r4, r5, pc}
   1a620:	ee264b06 	vmul.f64	d4, d6, d6
   1a624:	ed925b0e 	vldr	d5, [r2, #56]	@ 0x38
   1a628:	ed927b0c 	vldr	d7, [r2, #48]	@ 0x30
   1a62c:	ed923b10 	vldr	d3, [r2, #64]	@ 0x40
   1a630:	ed922b14 	vldr	d2, [r2, #80]	@ 0x50
   1a634:	ee067b05 	vmla.f64	d7, d6, d5
   1a638:	ed925b12 	vldr	d5, [r2, #72]	@ 0x48
   1a63c:	ee065b02 	vmla.f64	d5, d6, d2
   1a640:	ee047b03 	vmla.f64	d7, d4, d3
   1a644:	ee266b04 	vmul.f64	d6, d6, d4
   1a648:	ee057b06 	vmla.f64	d7, d5, d6
   1a64c:	eeb70bc7 	vcvt.f32.f64	s0, d7
   1a650:	e28dd00c 	add	sp, sp, #12
   1a654:	e8bd8030 	pop	{r4, r5, pc}
   1a658:	e59f30f4 	ldr	r3, [pc, #244]	@ 1a754 <sinf+0x21c>
   1a65c:	e0033004 	and	r3, r3, r4
   1a660:	e3530000 	cmp	r3, #0
   1a664:	0eb75bc5 	vcvteq.f32.f64	s10, d5
   1a668:	0d8d5a01 	vstreq	s10, [sp, #4]
   1a66c:	eaffffe9 	b	1a618 <sinf+0xe0>
   1a670:	e59f20e0 	ldr	r2, [pc, #224]	@ 1a758 <sinf+0x220>
   1a674:	e1530002 	cmp	r3, r2
   1a678:	8a000025 	bhi	1a714 <sinf+0x1dc>
   1a67c:	e59f00d8 	ldr	r0, [pc, #216]	@ 1a75c <sinf+0x224>
   1a680:	e1a02d24 	lsr	r2, r4, #26
   1a684:	e3c434ff 	bic	r3, r4, #-16777216	@ 0xff000000
   1a688:	e202200f 	and	r2, r2, #15
   1a68c:	e1a01ba4 	lsr	r1, r4, #23
   1a690:	e3c33502 	bic	r3, r3, #8388608	@ 0x800000
   1a694:	e080c102 	add	ip, r0, r2, lsl #2
   1a698:	e2011007 	and	r1, r1, #7
   1a69c:	e3833502 	orr	r3, r3, #8388608	@ 0x800000
   1a6a0:	e1a03113 	lsl	r3, r3, r1
   1a6a4:	e7902102 	ldr	r2, [r0, r2, lsl #2]
   1a6a8:	e59c0020 	ldr	r0, [ip, #32]
   1a6ac:	e0020293 	mul	r2, r3, r2
   1a6b0:	e0801093 	umull	r1, r0, r3, r0
   1a6b4:	e59c1010 	ldr	r1, [ip, #16]
   1a6b8:	e0a20193 	umlal	r0, r2, r3, r1
   1a6bc:	e2821202 	add	r1, r2, #536870912	@ 0x20000000
   1a6c0:	e1a05f21 	lsr	r5, r1, #30
   1a6c4:	e2011103 	and	r1, r1, #-1073741824	@ 0xc0000000
   1a6c8:	e0421001 	sub	r1, r2, r1
   1a6cc:	eb00022a 	bl	1af7c <__aeabi_l2d>
   1a6d0:	ed9f6b1a 	vldr	d6, [pc, #104]	@ 1a740 <sinf+0x208>
   1a6d4:	e59f3084 	ldr	r3, [pc, #132]	@ 1a760 <sinf+0x228>
   1a6d8:	e0854fa4 	add	r4, r5, r4, lsr #31
   1a6dc:	e3140002 	tst	r4, #2
   1a6e0:	e2432070 	sub	r2, r3, #112	@ 0x70
   1a6e4:	01a03002 	moveq	r3, r2
   1a6e8:	e3150001 	tst	r5, #1
   1a6ec:	ec410b17 	vmov	d7, r0, r1
   1a6f0:	ee277b06 	vmul.f64	d7, d7, d6
   1a6f4:	ee276b07 	vmul.f64	d6, d7, d7
   1a6f8:	1a000008 	bne	1a720 <sinf+0x1e8>
   1a6fc:	e0822184 	add	r2, r2, r4, lsl #3
   1a700:	ed922b00 	vldr	d2, [r2]
   1a704:	ed934b1a 	vldr	d4, [r3, #104]	@ 0x68
   1a708:	ed935b18 	vldr	d5, [r3, #96]	@ 0x60
   1a70c:	ed933b16 	vldr	d3, [r3, #88]	@ 0x58
   1a710:	eaffffb9 	b	1a5fc <sinf+0xc4>
   1a714:	e28dd00c 	add	sp, sp, #12
   1a718:	e8bd4030 	pop	{r4, r5, lr}
   1a71c:	ea0000c8 	b	1aa44 <__math_invalidf>
   1a720:	ed935b0e 	vldr	d5, [r3, #56]	@ 0x38
   1a724:	ed937b0c 	vldr	d7, [r3, #48]	@ 0x30
   1a728:	ee264b06 	vmul.f64	d4, d6, d6
   1a72c:	ed933b10 	vldr	d3, [r3, #64]	@ 0x40
   1a730:	ed932b14 	vldr	d2, [r3, #80]	@ 0x50
   1a734:	ee067b05 	vmla.f64	d7, d6, d5
   1a738:	ed935b12 	vldr	d5, [r3, #72]	@ 0x48
   1a73c:	eaffffbe 	b	1a63c <sinf+0x104>
   1a740:	54442d18 	.word	0x54442d18
   1a744:	3c1921fb 	.word	0x3c1921fb
   1a748:	000007ff 	.word	0x000007ff
   1a74c:	0001ed50 	.word	0x0001ed50
   1a750:	0000042e 	.word	0x0000042e
   1a754:	7f800000 	.word	0x7f800000
   1a758:	000007f7 	.word	0x000007f7
   1a75c:	0001ecec 	.word	0x0001ecec
   1a760:	0001edc0 	.word	0x0001edc0
   1a764:	00000000 	.word	0x00000000

0001a768 <cosf>:
   1a768:	e92d4070 	push	{r4, r5, r6, lr}
   1a76c:	ee104a10 	vmov	r4, s0
   1a770:	eeb77ac0 	vcvt.f64.f32	d7, s0
   1a774:	e59f3220 	ldr	r3, [pc, #544]	@ 1a99c <cosf+0x234>
   1a778:	e0033a24 	and	r3, r3, r4, lsr #20
   1a77c:	e3530ffd 	cmp	r3, #1012	@ 0x3f4
   1a780:	2a000010 	bcs	1a7c8 <cosf+0x60>
   1a784:	e3530fe6 	cmp	r3, #920	@ 0x398
   1a788:	ee277b07 	vmul.f64	d7, d7, d7
   1a78c:	3a00003c 	bcc	1a884 <cosf+0x11c>
   1a790:	e59f3208 	ldr	r3, [pc, #520]	@ 1a9a0 <cosf+0x238>
   1a794:	ee271b07 	vmul.f64	d1, d7, d7
   1a798:	ed932b0e 	vldr	d2, [r3, #56]	@ 0x38
   1a79c:	ed936b0c 	vldr	d6, [r3, #48]	@ 0x30
   1a7a0:	ed934b10 	vldr	d4, [r3, #64]	@ 0x40
   1a7a4:	ed933b14 	vldr	d3, [r3, #80]	@ 0x50
   1a7a8:	ed935b12 	vldr	d5, [r3, #72]	@ 0x48
   1a7ac:	ee076b02 	vmla.f64	d6, d7, d2
   1a7b0:	ee075b03 	vmla.f64	d5, d7, d3
   1a7b4:	ee277b01 	vmul.f64	d7, d7, d1
   1a7b8:	ee016b04 	vmla.f64	d6, d1, d4
   1a7bc:	ee056b07 	vmla.f64	d6, d5, d7
   1a7c0:	eeb70bc6 	vcvt.f32.f64	s0, d6
   1a7c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a7c8:	e59f21d4 	ldr	r2, [pc, #468]	@ 1a9a4 <cosf+0x23c>
   1a7cc:	e1530002 	cmp	r3, r2
   1a7d0:	8a00002d 	bhi	1a88c <cosf+0x124>
   1a7d4:	e59f11c4 	ldr	r1, [pc, #452]	@ 1a9a0 <cosf+0x238>
   1a7d8:	ed916b08 	vldr	d6, [r1, #32]
   1a7dc:	ed915b0a 	vldr	d5, [r1, #40]	@ 0x28
   1a7e0:	e2812070 	add	r2, r1, #112	@ 0x70
   1a7e4:	ee276b06 	vmul.f64	d6, d7, d6
   1a7e8:	eefd6bc6 	vcvt.s32.f64	s13, d6
   1a7ec:	ee163a90 	vmov	r3, s13
   1a7f0:	e2833502 	add	r3, r3, #8388608	@ 0x800000
   1a7f4:	e1a03c43 	asr	r3, r3, #24
   1a7f8:	ee063a90 	vmov	s13, r3
   1a7fc:	e3130002 	tst	r3, #2
   1a800:	01a02001 	moveq	r2, r1
   1a804:	e3130001 	tst	r3, #1
   1a808:	eeb86be6 	vcvt.f64.s32	d6, s13
   1a80c:	ee067b45 	vmls.f64	d7, d6, d5
   1a810:	ee275b07 	vmul.f64	d5, d7, d7
   1a814:	0a00000d 	beq	1a850 <cosf+0xe8>
   1a818:	e2033003 	and	r3, r3, #3
   1a81c:	e0811183 	add	r1, r1, r3, lsl #3
   1a820:	ed912b00 	vldr	d2, [r1]
   1a824:	ed924b1a 	vldr	d4, [r2, #104]	@ 0x68
   1a828:	ed926b18 	vldr	d6, [r2, #96]	@ 0x60
   1a82c:	ed923b16 	vldr	d3, [r2, #88]	@ 0x58
   1a830:	ee277b02 	vmul.f64	d7, d7, d2
   1a834:	ee056b04 	vmla.f64	d6, d5, d4
   1a838:	ee274b05 	vmul.f64	d4, d7, d5
   1a83c:	ee255b04 	vmul.f64	d5, d5, d4
   1a840:	ee047b03 	vmla.f64	d7, d4, d3
   1a844:	ee067b05 	vmla.f64	d7, d6, d5
   1a848:	eeb70bc7 	vcvt.f32.f64	s0, d7
   1a84c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a850:	ed927b0e 	vldr	d7, [r2, #56]	@ 0x38
   1a854:	ed926b0c 	vldr	d6, [r2, #48]	@ 0x30
   1a858:	ee254b05 	vmul.f64	d4, d5, d5
   1a85c:	ed923b10 	vldr	d3, [r2, #64]	@ 0x40
   1a860:	ed922b14 	vldr	d2, [r2, #80]	@ 0x50
   1a864:	ee056b07 	vmla.f64	d6, d5, d7
   1a868:	ed927b12 	vldr	d7, [r2, #72]	@ 0x48
   1a86c:	ee057b02 	vmla.f64	d7, d5, d2
   1a870:	ee255b04 	vmul.f64	d5, d5, d4
   1a874:	ee046b03 	vmla.f64	d6, d4, d3
   1a878:	ee076b05 	vmla.f64	d6, d7, d5
   1a87c:	eeb70bc6 	vcvt.f32.f64	s0, d6
   1a880:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a884:	ed9f0a43 	vldr	s0, [pc, #268]	@ 1a998 <cosf+0x230>
   1a888:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a88c:	e59f2114 	ldr	r2, [pc, #276]	@ 1a9a8 <cosf+0x240>
   1a890:	e1530002 	cmp	r3, r2
   1a894:	8a00002d 	bhi	1a950 <cosf+0x1e8>
   1a898:	e59f010c 	ldr	r0, [pc, #268]	@ 1a9ac <cosf+0x244>
   1a89c:	e1a02d24 	lsr	r2, r4, #26
   1a8a0:	e3c434ff 	bic	r3, r4, #-16777216	@ 0xff000000
   1a8a4:	e202200f 	and	r2, r2, #15
   1a8a8:	e1a01ba4 	lsr	r1, r4, #23
   1a8ac:	e3c33502 	bic	r3, r3, #8388608	@ 0x800000
   1a8b0:	e080c102 	add	ip, r0, r2, lsl #2
   1a8b4:	e2011007 	and	r1, r1, #7
   1a8b8:	e3833502 	orr	r3, r3, #8388608	@ 0x800000
   1a8bc:	e1a03113 	lsl	r3, r3, r1
   1a8c0:	e7902102 	ldr	r2, [r0, r2, lsl #2]
   1a8c4:	e59c0020 	ldr	r0, [ip, #32]
   1a8c8:	e0020293 	mul	r2, r3, r2
   1a8cc:	e0801093 	umull	r1, r0, r3, r0
   1a8d0:	e59c1010 	ldr	r1, [ip, #16]
   1a8d4:	e0a20193 	umlal	r0, r2, r3, r1
   1a8d8:	e2821202 	add	r1, r2, #536870912	@ 0x20000000
   1a8dc:	e1a05f21 	lsr	r5, r1, #30
   1a8e0:	e2011103 	and	r1, r1, #-1073741824	@ 0xc0000000
   1a8e4:	e0421001 	sub	r1, r2, r1
   1a8e8:	eb0001a3 	bl	1af7c <__aeabi_l2d>
   1a8ec:	ed9f6b27 	vldr	d6, [pc, #156]	@ 1a990 <cosf+0x228>
   1a8f0:	e59f30b8 	ldr	r3, [pc, #184]	@ 1a9b0 <cosf+0x248>
   1a8f4:	e0854fa4 	add	r4, r5, r4, lsr #31
   1a8f8:	e3140002 	tst	r4, #2
   1a8fc:	e2432070 	sub	r2, r3, #112	@ 0x70
   1a900:	01a03002 	moveq	r3, r2
   1a904:	e3150001 	tst	r5, #1
   1a908:	ec410b17 	vmov	d7, r0, r1
   1a90c:	ee277b06 	vmul.f64	d7, d7, d6
   1a910:	ee276b07 	vmul.f64	d6, d7, d7
   1a914:	0a00000f 	beq	1a958 <cosf+0x1f0>
   1a918:	e2044003 	and	r4, r4, #3
   1a91c:	e0822184 	add	r2, r2, r4, lsl #3
   1a920:	ed922b00 	vldr	d2, [r2]
   1a924:	ed934b1a 	vldr	d4, [r3, #104]	@ 0x68
   1a928:	ed935b18 	vldr	d5, [r3, #96]	@ 0x60
   1a92c:	ed933b16 	vldr	d3, [r3, #88]	@ 0x58
   1a930:	ee277b02 	vmul.f64	d7, d7, d2
   1a934:	ee065b04 	vmla.f64	d5, d6, d4
   1a938:	ee274b06 	vmul.f64	d4, d7, d6
   1a93c:	ee266b04 	vmul.f64	d6, d6, d4
   1a940:	ee047b03 	vmla.f64	d7, d4, d3
   1a944:	ee057b06 	vmla.f64	d7, d5, d6
   1a948:	eeb70bc7 	vcvt.f32.f64	s0, d7
   1a94c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a950:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a954:	ea00003a 	b	1aa44 <__math_invalidf>
   1a958:	ed935b0e 	vldr	d5, [r3, #56]	@ 0x38
   1a95c:	ed937b0c 	vldr	d7, [r3, #48]	@ 0x30
   1a960:	ee264b06 	vmul.f64	d4, d6, d6
   1a964:	ed933b10 	vldr	d3, [r3, #64]	@ 0x40
   1a968:	ed932b14 	vldr	d2, [r3, #80]	@ 0x50
   1a96c:	ee067b05 	vmla.f64	d7, d6, d5
   1a970:	ed935b12 	vldr	d5, [r3, #72]	@ 0x48
   1a974:	ee065b02 	vmla.f64	d5, d6, d2
   1a978:	ee266b04 	vmul.f64	d6, d6, d4
   1a97c:	ee047b03 	vmla.f64	d7, d4, d3
   1a980:	ee057b06 	vmla.f64	d7, d5, d6
   1a984:	eeb70bc7 	vcvt.f32.f64	s0, d7
   1a988:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a98c:	e1a00000 	nop			@ (mov r0, r0)
   1a990:	54442d18 	.word	0x54442d18
   1a994:	3c1921fb 	.word	0x3c1921fb
   1a998:	3f800000 	.word	0x3f800000
   1a99c:	000007ff 	.word	0x000007ff
   1a9a0:	0001ed50 	.word	0x0001ed50
   1a9a4:	0000042e 	.word	0x0000042e
   1a9a8:	000007f7 	.word	0x000007f7
   1a9ac:	0001ecec 	.word	0x0001ecec
   1a9b0:	0001edc0 	.word	0x0001edc0

0001a9b4 <with_errnof>:
   1a9b4:	e92d4010 	push	{r4, lr}
   1a9b8:	ed2d8b02 	vpush	{d8}
   1a9bc:	eeb08a40 	vmov.f32	s16, s0
   1a9c0:	e1a04000 	mov	r4, r0
   1a9c4:	ebffe8b0 	bl	14c8c <__errno>
   1a9c8:	eeb00a48 	vmov.f32	s0, s16
   1a9cc:	ecbd8b02 	vpop	{d8}
   1a9d0:	e5804000 	str	r4, [r0]
   1a9d4:	e8bd8010 	pop	{r4, pc}

0001a9d8 <xflowf>:
   1a9d8:	e3500000 	cmp	r0, #0
   1a9dc:	1ef17a40 	vnegne.f32	s15, s0
   1a9e0:	0ef07a40 	vmoveq.f32	s15, s0
   1a9e4:	e3a00022 	mov	r0, #34	@ 0x22
   1a9e8:	ee270a80 	vmul.f32	s0, s15, s0
   1a9ec:	eafffff0 	b	1a9b4 <with_errnof>

0001a9f0 <__math_uflowf>:
   1a9f0:	ed9f0a00 	vldr	s0, [pc]	@ 1a9f8 <__math_uflowf+0x8>
   1a9f4:	eafffff7 	b	1a9d8 <xflowf>
   1a9f8:	10000000 	.word	0x10000000

0001a9fc <__math_may_uflowf>:
   1a9fc:	ed9f0a00 	vldr	s0, [pc]	@ 1aa04 <__math_may_uflowf+0x8>
   1aa00:	eafffff4 	b	1a9d8 <xflowf>
   1aa04:	1a200000 	.word	0x1a200000

0001aa08 <__math_oflowf>:
   1aa08:	ed9f0a00 	vldr	s0, [pc]	@ 1aa10 <__math_oflowf+0x8>
   1aa0c:	eafffff1 	b	1a9d8 <xflowf>
   1aa10:	70000000 	.word	0x70000000

0001aa14 <__math_divzerof>:
   1aa14:	ed9f7a07 	vldr	s14, [pc, #28]	@ 1aa38 <__math_divzerof+0x24>
   1aa18:	ed9f0a07 	vldr	s0, [pc, #28]	@ 1aa3c <__math_divzerof+0x28>
   1aa1c:	eddf7a07 	vldr	s15, [pc, #28]	@ 1aa40 <__math_divzerof+0x2c>
   1aa20:	e3500000 	cmp	r0, #0
   1aa24:	e3a00022 	mov	r0, #34	@ 0x22
   1aa28:	1ef07a47 	vmovne.f32	s15, s14
   1aa2c:	eeb07a40 	vmov.f32	s14, s0
   1aa30:	ee870a87 	vdiv.f32	s0, s15, s14
   1aa34:	eaffffde 	b	1a9b4 <with_errnof>
   1aa38:	bf800000 	.word	0xbf800000
   1aa3c:	00000000 	.word	0x00000000
   1aa40:	3f800000 	.word	0x3f800000

0001aa44 <__math_invalidf>:
   1aa44:	eeb40a40 	vcmp.f32	s0, s0
   1aa48:	ee707a40 	vsub.f32	s15, s0, s0
   1aa4c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1aa50:	ee870aa7 	vdiv.f32	s0, s15, s15
   1aa54:	612fff1e 	bxvs	lr
   1aa58:	e3a00021 	mov	r0, #33	@ 0x21
   1aa5c:	eaffffd4 	b	1a9b4 <with_errnof>

0001aa60 <fmaxf>:
   1aa60:	e92d4010 	push	{r4, lr}
   1aa64:	ed2d8b02 	vpush	{d8}
   1aa68:	eef08a40 	vmov.f32	s17, s0
   1aa6c:	eeb08a60 	vmov.f32	s16, s1
   1aa70:	eb000022 	bl	1ab00 <__fpclassifyf>
   1aa74:	e3500000 	cmp	r0, #0
   1aa78:	1a000002 	bne	1aa88 <fmaxf+0x28>
   1aa7c:	eeb00a48 	vmov.f32	s0, s16
   1aa80:	ecbd8b02 	vpop	{d8}
   1aa84:	e8bd8010 	pop	{r4, pc}
   1aa88:	eeb00a48 	vmov.f32	s0, s16
   1aa8c:	eb00001b 	bl	1ab00 <__fpclassifyf>
   1aa90:	e3500000 	cmp	r0, #0
   1aa94:	0a000002 	beq	1aaa4 <fmaxf+0x44>
   1aa98:	eef48ac8 	vcmpe.f32	s17, s16
   1aa9c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1aaa0:	dafffff5 	ble	1aa7c <fmaxf+0x1c>
   1aaa4:	eeb00a68 	vmov.f32	s0, s17
   1aaa8:	ecbd8b02 	vpop	{d8}
   1aaac:	e8bd8010 	pop	{r4, pc}

0001aab0 <fminf>:
   1aab0:	e92d4010 	push	{r4, lr}
   1aab4:	ed2d8b02 	vpush	{d8}
   1aab8:	eef08a40 	vmov.f32	s17, s0
   1aabc:	eeb08a60 	vmov.f32	s16, s1
   1aac0:	eb00000e 	bl	1ab00 <__fpclassifyf>
   1aac4:	e3500000 	cmp	r0, #0
   1aac8:	1a000002 	bne	1aad8 <fminf+0x28>
   1aacc:	eeb00a48 	vmov.f32	s0, s16
   1aad0:	ecbd8b02 	vpop	{d8}
   1aad4:	e8bd8010 	pop	{r4, pc}
   1aad8:	eeb00a48 	vmov.f32	s0, s16
   1aadc:	eb000007 	bl	1ab00 <__fpclassifyf>
   1aae0:	e3500000 	cmp	r0, #0
   1aae4:	0a000002 	beq	1aaf4 <fminf+0x44>
   1aae8:	eef48ac8 	vcmpe.f32	s17, s16
   1aaec:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1aaf0:	5afffff5 	bpl	1aacc <fminf+0x1c>
   1aaf4:	eeb00a68 	vmov.f32	s0, s17
   1aaf8:	ecbd8b02 	vpop	{d8}
   1aafc:	e8bd8010 	pop	{r4, pc}

0001ab00 <__fpclassifyf>:
   1ab00:	ee103a10 	vmov	r3, s0
   1ab04:	e3d30102 	bics	r0, r3, #-2147483648	@ 0x80000000
   1ab08:	0a00000b 	beq	1ab3c <__fpclassifyf+0x3c>
   1ab0c:	e2403502 	sub	r3, r0, #8388608	@ 0x800000
   1ab10:	e353047f 	cmp	r3, #2130706432	@ 0x7f000000
   1ab14:	3a00000c 	bcc	1ab4c <__fpclassifyf+0x4c>
   1ab18:	e59f3034 	ldr	r3, [pc, #52]	@ 1ab54 <__fpclassifyf+0x54>
   1ab1c:	e2402001 	sub	r2, r0, #1
   1ab20:	e1520003 	cmp	r2, r3
   1ab24:	9a000006 	bls	1ab44 <__fpclassifyf+0x44>
   1ab28:	e59f3028 	ldr	r3, [pc, #40]	@ 1ab58 <__fpclassifyf+0x58>
   1ab2c:	e0400003 	sub	r0, r0, r3
   1ab30:	e16f0f10 	clz	r0, r0
   1ab34:	e1a002a0 	lsr	r0, r0, #5
   1ab38:	e12fff1e 	bx	lr
   1ab3c:	e3a00002 	mov	r0, #2
   1ab40:	e12fff1e 	bx	lr
   1ab44:	e3a00003 	mov	r0, #3
   1ab48:	e12fff1e 	bx	lr
   1ab4c:	e3a00004 	mov	r0, #4
   1ab50:	e12fff1e 	bx	lr
   1ab54:	007ffffe 	.word	0x007ffffe
   1ab58:	7f800000 	.word	0x7f800000

0001ab5c <floorf>:
   1ab5c:	ee102a10 	vmov	r2, s0
   1ab60:	e3c21102 	bic	r1, r2, #-2147483648	@ 0x80000000
   1ab64:	e1a03ba1 	lsr	r3, r1, #23
   1ab68:	e243307f 	sub	r3, r3, #127	@ 0x7f
   1ab6c:	e3530016 	cmp	r3, #22
   1ab70:	ca00001a 	bgt	1abe0 <floorf+0x84>
   1ab74:	e3530000 	cmp	r3, #0
   1ab78:	e1a00002 	mov	r0, r2
   1ab7c:	ba00000e 	blt	1abbc <floorf+0x60>
   1ab80:	e59f108c 	ldr	r1, [pc, #140]	@ 1ac14 <floorf+0xb8>
   1ab84:	e1a01351 	asr	r1, r1, r3
   1ab88:	e1120001 	tst	r2, r1
   1ab8c:	012fff1e 	bxeq	lr
   1ab90:	eddf7a1b 	vldr	s15, [pc, #108]	@ 1ac04 <floorf+0xa8>
   1ab94:	ee707a27 	vadd.f32	s15, s0, s15
   1ab98:	eef57ac0 	vcmpe.f32	s15, #0.0
   1ab9c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1aba0:	d12fff1e 	bxle	lr
   1aba4:	e3520000 	cmp	r2, #0
   1aba8:	b3a02502 	movlt	r2, #8388608	@ 0x800000
   1abac:	b0800352 	addlt	r0, r0, r2, asr r3
   1abb0:	e1c03001 	bic	r3, r0, r1
   1abb4:	ee003a10 	vmov	s0, r3
   1abb8:	e12fff1e 	bx	lr
   1abbc:	eddf7a10 	vldr	s15, [pc, #64]	@ 1ac04 <floorf+0xa8>
   1abc0:	ee707a27 	vadd.f32	s15, s0, s15
   1abc4:	eef57ac0 	vcmpe.f32	s15, #0.0
   1abc8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1abcc:	d12fff1e 	bxle	lr
   1abd0:	e3520000 	cmp	r2, #0
   1abd4:	ba000005 	blt	1abf0 <floorf+0x94>
   1abd8:	ed9f0a0a 	vldr	s0, [pc, #40]	@ 1ac08 <floorf+0xac>
   1abdc:	e12fff1e 	bx	lr
   1abe0:	e59f3030 	ldr	r3, [pc, #48]	@ 1ac18 <floorf+0xbc>
   1abe4:	e1510003 	cmp	r1, r3
   1abe8:	8e300a00 	vaddhi.f32	s0, s0, s0
   1abec:	e12fff1e 	bx	lr
   1abf0:	eddf7a05 	vldr	s15, [pc, #20]	@ 1ac0c <floorf+0xb0>
   1abf4:	ed9f0a05 	vldr	s0, [pc, #20]	@ 1ac10 <floorf+0xb4>
   1abf8:	e3510000 	cmp	r1, #0
   1abfc:	0eb00a67 	vmoveq.f32	s0, s15
   1ac00:	e12fff1e 	bx	lr
   1ac04:	7149f2ca 	.word	0x7149f2ca
   1ac08:	00000000 	.word	0x00000000
   1ac0c:	80000000 	.word	0x80000000
   1ac10:	bf800000 	.word	0xbf800000
   1ac14:	007fffff 	.word	0x007fffff
   1ac18:	7f7fffff 	.word	0x7f7fffff

0001ac1c <__aeabi_drsub>:
   1ac1c:	e2211102 	eor	r1, r1, #-2147483648	@ 0x80000000
   1ac20:	ea000000 	b	1ac28 <__adddf3>

0001ac24 <__aeabi_dsub>:
   1ac24:	e2233102 	eor	r3, r3, #-2147483648	@ 0x80000000

0001ac28 <__adddf3>:
   1ac28:	e92d4030 	push	{r4, r5, lr}
   1ac2c:	e1a04081 	lsl	r4, r1, #1
   1ac30:	e1a05083 	lsl	r5, r3, #1
   1ac34:	e1340005 	teq	r4, r5
   1ac38:	01300002 	teqeq	r0, r2
   1ac3c:	1194c000 	orrsne	ip, r4, r0
   1ac40:	1195c002 	orrsne	ip, r5, r2
   1ac44:	11f0cac4 	mvnsne	ip, r4, asr #21
   1ac48:	11f0cac5 	mvnsne	ip, r5, asr #21
   1ac4c:	0a000079 	beq	1ae38 <__adddf3+0x210>
   1ac50:	e1a04aa4 	lsr	r4, r4, #21
   1ac54:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
   1ac58:	b2655000 	rsblt	r5, r5, #0
   1ac5c:	da000006 	ble	1ac7c <__adddf3+0x54>
   1ac60:	e0844005 	add	r4, r4, r5
   1ac64:	e0202002 	eor	r2, r0, r2
   1ac68:	e0213003 	eor	r3, r1, r3
   1ac6c:	e0220000 	eor	r0, r2, r0
   1ac70:	e0231001 	eor	r1, r3, r1
   1ac74:	e0202002 	eor	r2, r0, r2
   1ac78:	e0213003 	eor	r3, r1, r3
   1ac7c:	e3550036 	cmp	r5, #54	@ 0x36
   1ac80:	88bd8030 	pophi	{r4, r5, pc}
   1ac84:	e3110102 	tst	r1, #-2147483648	@ 0x80000000
   1ac88:	e1a01601 	lsl	r1, r1, #12
   1ac8c:	e3a0c601 	mov	ip, #1048576	@ 0x100000
   1ac90:	e18c1621 	orr	r1, ip, r1, lsr #12
   1ac94:	0a000001 	beq	1aca0 <__adddf3+0x78>
   1ac98:	e2700000 	rsbs	r0, r0, #0
   1ac9c:	e2e11000 	rsc	r1, r1, #0
   1aca0:	e3130102 	tst	r3, #-2147483648	@ 0x80000000
   1aca4:	e1a03603 	lsl	r3, r3, #12
   1aca8:	e18c3623 	orr	r3, ip, r3, lsr #12
   1acac:	0a000001 	beq	1acb8 <__adddf3+0x90>
   1acb0:	e2722000 	rsbs	r2, r2, #0
   1acb4:	e2e33000 	rsc	r3, r3, #0
   1acb8:	e1340005 	teq	r4, r5
   1acbc:	0a000057 	beq	1ae20 <__adddf3+0x1f8>
   1acc0:	e2444001 	sub	r4, r4, #1
   1acc4:	e275e020 	rsbs	lr, r5, #32
   1acc8:	ba000005 	blt	1ace4 <__adddf3+0xbc>
   1accc:	e1a0ce12 	lsl	ip, r2, lr
   1acd0:	e0900532 	adds	r0, r0, r2, lsr r5
   1acd4:	e2a11000 	adc	r1, r1, #0
   1acd8:	e0900e13 	adds	r0, r0, r3, lsl lr
   1acdc:	e0b11553 	adcs	r1, r1, r3, asr r5
   1ace0:	ea000006 	b	1ad00 <__adddf3+0xd8>
   1ace4:	e2455020 	sub	r5, r5, #32
   1ace8:	e28ee020 	add	lr, lr, #32
   1acec:	e3520001 	cmp	r2, #1
   1acf0:	e1a0ce13 	lsl	ip, r3, lr
   1acf4:	238cc002 	orrcs	ip, ip, #2
   1acf8:	e0900553 	adds	r0, r0, r3, asr r5
   1acfc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
   1ad00:	e2015102 	and	r5, r1, #-2147483648	@ 0x80000000
   1ad04:	5a000002 	bpl	1ad14 <__adddf3+0xec>
   1ad08:	e27cc000 	rsbs	ip, ip, #0
   1ad0c:	e2f00000 	rscs	r0, r0, #0
   1ad10:	e2e11000 	rsc	r1, r1, #0
   1ad14:	e3510601 	cmp	r1, #1048576	@ 0x100000
   1ad18:	3a00000e 	bcc	1ad58 <__adddf3+0x130>
   1ad1c:	e3510602 	cmp	r1, #2097152	@ 0x200000
   1ad20:	3a000006 	bcc	1ad40 <__adddf3+0x118>
   1ad24:	e1b010a1 	lsrs	r1, r1, #1
   1ad28:	e1b00060 	rrxs	r0, r0
   1ad2c:	e1a0c06c 	rrx	ip, ip
   1ad30:	e2844001 	add	r4, r4, #1
   1ad34:	e1a02a84 	lsl	r2, r4, #21
   1ad38:	e3720501 	cmn	r2, #4194304	@ 0x400000
   1ad3c:	2a000055 	bcs	1ae98 <__adddf3+0x270>
   1ad40:	e35c0102 	cmp	ip, #-2147483648	@ 0x80000000
   1ad44:	01b0c0a0 	lsrseq	ip, r0, #1
   1ad48:	e2b00000 	adcs	r0, r0, #0
   1ad4c:	e0a11a04 	adc	r1, r1, r4, lsl #20
   1ad50:	e1811005 	orr	r1, r1, r5
   1ad54:	e8bd8030 	pop	{r4, r5, pc}
   1ad58:	e1b0c08c 	lsls	ip, ip, #1
   1ad5c:	e0b00000 	adcs	r0, r0, r0
   1ad60:	e0a11001 	adc	r1, r1, r1
   1ad64:	e2544001 	subs	r4, r4, #1
   1ad68:	23510601 	cmpcs	r1, #1048576	@ 0x100000
   1ad6c:	2afffff3 	bcs	1ad40 <__adddf3+0x118>
   1ad70:	e3310000 	teq	r1, #0
   1ad74:	01a01000 	moveq	r1, r0
   1ad78:	03a00000 	moveq	r0, #0
   1ad7c:	e16f3f11 	clz	r3, r1
   1ad80:	02833020 	addeq	r3, r3, #32
   1ad84:	e243300b 	sub	r3, r3, #11
   1ad88:	e2532020 	subs	r2, r3, #32
   1ad8c:	aa000007 	bge	1adb0 <__adddf3+0x188>
   1ad90:	e292200c 	adds	r2, r2, #12
   1ad94:	da000004 	ble	1adac <__adddf3+0x184>
   1ad98:	e282c014 	add	ip, r2, #20
   1ad9c:	e262200c 	rsb	r2, r2, #12
   1ada0:	e1a00c11 	lsl	r0, r1, ip
   1ada4:	e1a01231 	lsr	r1, r1, r2
   1ada8:	ea000004 	b	1adc0 <__adddf3+0x198>
   1adac:	e2822014 	add	r2, r2, #20
   1adb0:	d262c020 	rsble	ip, r2, #32
   1adb4:	e1a01211 	lsl	r1, r1, r2
   1adb8:	d1811c30 	orrle	r1, r1, r0, lsr ip
   1adbc:	d1a00210 	lslle	r0, r0, r2
   1adc0:	e0544003 	subs	r4, r4, r3
   1adc4:	a0811a04 	addge	r1, r1, r4, lsl #20
   1adc8:	a1811005 	orrge	r1, r1, r5
   1adcc:	a8bd8030 	popge	{r4, r5, pc}
   1add0:	e1e04004 	mvn	r4, r4
   1add4:	e254401f 	subs	r4, r4, #31
   1add8:	aa00000d 	bge	1ae14 <__adddf3+0x1ec>
   1addc:	e294400c 	adds	r4, r4, #12
   1ade0:	ca000005 	bgt	1adfc <__adddf3+0x1d4>
   1ade4:	e2844014 	add	r4, r4, #20
   1ade8:	e2642020 	rsb	r2, r4, #32
   1adec:	e1a00430 	lsr	r0, r0, r4
   1adf0:	e1800211 	orr	r0, r0, r1, lsl r2
   1adf4:	e1851431 	orr	r1, r5, r1, lsr r4
   1adf8:	e8bd8030 	pop	{r4, r5, pc}
   1adfc:	e264400c 	rsb	r4, r4, #12
   1ae00:	e2642020 	rsb	r2, r4, #32
   1ae04:	e1a00230 	lsr	r0, r0, r2
   1ae08:	e1800411 	orr	r0, r0, r1, lsl r4
   1ae0c:	e1a01005 	mov	r1, r5
   1ae10:	e8bd8030 	pop	{r4, r5, pc}
   1ae14:	e1a00431 	lsr	r0, r1, r4
   1ae18:	e1a01005 	mov	r1, r5
   1ae1c:	e8bd8030 	pop	{r4, r5, pc}
   1ae20:	e3340000 	teq	r4, #0
   1ae24:	e2233601 	eor	r3, r3, #1048576	@ 0x100000
   1ae28:	02211601 	eoreq	r1, r1, #1048576	@ 0x100000
   1ae2c:	02844001 	addeq	r4, r4, #1
   1ae30:	12455001 	subne	r5, r5, #1
   1ae34:	eaffffa1 	b	1acc0 <__adddf3+0x98>
   1ae38:	e1f0cac4 	mvns	ip, r4, asr #21
   1ae3c:	11f0cac5 	mvnsne	ip, r5, asr #21
   1ae40:	0a000018 	beq	1aea8 <__adddf3+0x280>
   1ae44:	e1340005 	teq	r4, r5
   1ae48:	01300002 	teqeq	r0, r2
   1ae4c:	0a000003 	beq	1ae60 <__adddf3+0x238>
   1ae50:	e194c000 	orrs	ip, r4, r0
   1ae54:	01a01003 	moveq	r1, r3
   1ae58:	01a00002 	moveq	r0, r2
   1ae5c:	e8bd8030 	pop	{r4, r5, pc}
   1ae60:	e1310003 	teq	r1, r3
   1ae64:	13a01000 	movne	r1, #0
   1ae68:	13a00000 	movne	r0, #0
   1ae6c:	18bd8030 	popne	{r4, r5, pc}
   1ae70:	e1b0caa4 	lsrs	ip, r4, #21
   1ae74:	1a000003 	bne	1ae88 <__adddf3+0x260>
   1ae78:	e1b00080 	lsls	r0, r0, #1
   1ae7c:	e0b11001 	adcs	r1, r1, r1
   1ae80:	23811102 	orrcs	r1, r1, #-2147483648	@ 0x80000000
   1ae84:	e8bd8030 	pop	{r4, r5, pc}
   1ae88:	e2944501 	adds	r4, r4, #4194304	@ 0x400000
   1ae8c:	32811601 	addcc	r1, r1, #1048576	@ 0x100000
   1ae90:	38bd8030 	popcc	{r4, r5, pc}
   1ae94:	e2015102 	and	r5, r1, #-2147483648	@ 0x80000000
   1ae98:	e385147f 	orr	r1, r5, #2130706432	@ 0x7f000000
   1ae9c:	e381160f 	orr	r1, r1, #15728640	@ 0xf00000
   1aea0:	e3a00000 	mov	r0, #0
   1aea4:	e8bd8030 	pop	{r4, r5, pc}
   1aea8:	e1f0cac4 	mvns	ip, r4, asr #21
   1aeac:	11a01003 	movne	r1, r3
   1aeb0:	11a00002 	movne	r0, r2
   1aeb4:	01f0cac5 	mvnseq	ip, r5, asr #21
   1aeb8:	11a03001 	movne	r3, r1
   1aebc:	11a02000 	movne	r2, r0
   1aec0:	e1904601 	orrs	r4, r0, r1, lsl #12
   1aec4:	01925603 	orrseq	r5, r2, r3, lsl #12
   1aec8:	01310003 	teqeq	r1, r3
   1aecc:	13811702 	orrne	r1, r1, #524288	@ 0x80000
   1aed0:	e8bd8030 	pop	{r4, r5, pc}

0001aed4 <__aeabi_ui2d>:
   1aed4:	e3300000 	teq	r0, #0
   1aed8:	03a01000 	moveq	r1, #0
   1aedc:	012fff1e 	bxeq	lr
   1aee0:	e92d4030 	push	{r4, r5, lr}
   1aee4:	e3a04b01 	mov	r4, #1024	@ 0x400
   1aee8:	e2844032 	add	r4, r4, #50	@ 0x32
   1aeec:	e3a05000 	mov	r5, #0
   1aef0:	e3a01000 	mov	r1, #0
   1aef4:	eaffff9d 	b	1ad70 <__adddf3+0x148>

0001aef8 <__aeabi_i2d>:
   1aef8:	e3300000 	teq	r0, #0
   1aefc:	03a01000 	moveq	r1, #0
   1af00:	012fff1e 	bxeq	lr
   1af04:	e92d4030 	push	{r4, r5, lr}
   1af08:	e3a04b01 	mov	r4, #1024	@ 0x400
   1af0c:	e2844032 	add	r4, r4, #50	@ 0x32
   1af10:	e2105102 	ands	r5, r0, #-2147483648	@ 0x80000000
   1af14:	42600000 	rsbmi	r0, r0, #0
   1af18:	e3a01000 	mov	r1, #0
   1af1c:	eaffff93 	b	1ad70 <__adddf3+0x148>

0001af20 <__aeabi_f2d>:
   1af20:	e1b02080 	lsls	r2, r0, #1
   1af24:	e1a011c2 	asr	r1, r2, #3
   1af28:	e1a01061 	rrx	r1, r1
   1af2c:	e1a00e02 	lsl	r0, r2, #28
   1af30:	121234ff 	andsne	r3, r2, #-16777216	@ 0xff000000
   1af34:	133304ff 	teqne	r3, #-16777216	@ 0xff000000
   1af38:	1221130e 	eorne	r1, r1, #939524096	@ 0x38000000
   1af3c:	112fff1e 	bxne	lr
   1af40:	e3d224ff 	bics	r2, r2, #-16777216	@ 0xff000000
   1af44:	012fff1e 	bxeq	lr
   1af48:	e33304ff 	teq	r3, #-16777216	@ 0xff000000
   1af4c:	03811702 	orreq	r1, r1, #524288	@ 0x80000
   1af50:	012fff1e 	bxeq	lr
   1af54:	e92d4030 	push	{r4, r5, lr}
   1af58:	e3a04d0e 	mov	r4, #896	@ 0x380
   1af5c:	e2015102 	and	r5, r1, #-2147483648	@ 0x80000000
   1af60:	e3c11102 	bic	r1, r1, #-2147483648	@ 0x80000000
   1af64:	eaffff81 	b	1ad70 <__adddf3+0x148>

0001af68 <__aeabi_ul2d>:
   1af68:	e1902001 	orrs	r2, r0, r1
   1af6c:	012fff1e 	bxeq	lr
   1af70:	e92d4030 	push	{r4, r5, lr}
   1af74:	e3a05000 	mov	r5, #0
   1af78:	ea000006 	b	1af98 <__aeabi_l2d+0x1c>

0001af7c <__aeabi_l2d>:
   1af7c:	e1902001 	orrs	r2, r0, r1
   1af80:	012fff1e 	bxeq	lr
   1af84:	e92d4030 	push	{r4, r5, lr}
   1af88:	e2115102 	ands	r5, r1, #-2147483648	@ 0x80000000
   1af8c:	5a000001 	bpl	1af98 <__aeabi_l2d+0x1c>
   1af90:	e2700000 	rsbs	r0, r0, #0
   1af94:	e2e11000 	rsc	r1, r1, #0
   1af98:	e3a04b01 	mov	r4, #1024	@ 0x400
   1af9c:	e2844032 	add	r4, r4, #50	@ 0x32
   1afa0:	e1b0cb21 	lsrs	ip, r1, #22
   1afa4:	0affff5a 	beq	1ad14 <__adddf3+0xec>
   1afa8:	e3a02003 	mov	r2, #3
   1afac:	e1b0c1ac 	lsrs	ip, ip, #3
   1afb0:	12822003 	addne	r2, r2, #3
   1afb4:	e1b0c1ac 	lsrs	ip, ip, #3
   1afb8:	12822003 	addne	r2, r2, #3
   1afbc:	e08221ac 	add	r2, r2, ip, lsr #3
   1afc0:	e2623020 	rsb	r3, r2, #32
   1afc4:	e1a0c310 	lsl	ip, r0, r3
   1afc8:	e1a00230 	lsr	r0, r0, r2
   1afcc:	e1800311 	orr	r0, r0, r1, lsl r3
   1afd0:	e1a01231 	lsr	r1, r1, r2
   1afd4:	e0844002 	add	r4, r4, r2
   1afd8:	eaffff4d 	b	1ad14 <__adddf3+0xec>
